

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Jan 24 15:21:49 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    16                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    17  0000                     
    18                           ; Version 1.40
    19                           ; Generated 01/12/2016 GMT
    20                           ; 
    21                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4620 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     
    53                           	psect	smallconst
    54  001000                     __psmallconst:
    55                           	opt stack 0
    56  001000  00                 	db	0
    57  001001                     _keys:
    58                           	opt stack 0
    59  001001  31                 	db	49
    60  001002  32                 	db	50
    61  001003  33                 	db	51
    62  001004  41                 	db	65
    63  001005  34                 	db	52
    64  001006  35                 	db	53
    65  001007  36                 	db	54
    66  001008  42                 	db	66
    67  001009  37                 	db	55
    68  00100A  38                 	db	56
    69  00100B  39                 	db	57
    70  00100C  43                 	db	67
    71  00100D  2A                 	db	42
    72  00100E  30                 	db	48
    73  00100F  23                 	db	35
    74  001010  44                 	db	68
    75  001011  00                 	db	0
    76  001012                     __end_of_keys:
    77                           	opt stack 0
    78  0000                     _LATB	set	3978
    79  0000                     _LATC	set	3979
    80  0000                     _LATD	set	3980
    81  0000                     _LATDbits	set	3980
    82  0000                     _PORTB	set	3969
    83  0000                     _PORTBbits	set	3969
    84  0000                     _TRISB	set	3987
    85  0000                     _TRISC	set	3988
    86  0000                     _TRISD	set	3989
    87  0000                     _ADCON0	set	4034
    88  0000                     _ADCON1	set	4033
    89  001012                     STR_2:
    90  001012  32                 	db	50	;'2'
    91  001013  30                 	db	48	;'0'
    92  001014  31                 	db	49	;'1'
    93  001015  37                 	db	55	;'7'
    94  001016  2F                 	db	47
    95  001017  30                 	db	48	;'0'
    96  001018  31                 	db	49	;'1'
    97  001019  2F                 	db	47
    98  00101A  32                 	db	50	;'2'
    99  00101B  34                 	db	52	;'4'
   100  00101C  00                 	db	0
   101  00101D                     STR_1:
   102  00101D  54                 	db	84	;'T'
   103  00101E  69                 	db	105	;'i'
   104  00101F  6D                 	db	109	;'m'
   105  001020  65                 	db	101	;'e'
   106  001021  3F                 	db	63	;'?'
   107  001022  00                 	db	0
   108                           
   109                           ; #config settings
   110  001023  00                 	db	0	; dummy byte at the end
   111  0000                     
   112                           	psect	cinit
   113  001182                     __pcinit:
   114                           	opt stack 0
   115  001182                     start_initialization:
   116                           	opt stack 0
   117  001182                     __initialization:
   118                           	opt stack 0
   119  001182                     end_of_initialization:
   120                           	opt stack 0
   121  001182                     __end_of__initialization:
   122                           	opt stack 0
   123  001182  0E00               	movlw	low (__Lsmallconst shr (0+16))
   124  001184  6EF8               	movwf	tblptru,c
   125  001186  0E10               	movlw	high __Lsmallconst
   126  001188  6EF7               	movwf	tblptrh,c
   127  00118A  0100               	movlb	0
   128  00118C  EF12  F008         	goto	_main	;jump to C main() function
   129                           tblptru	equ	0xFF8
   130                           tblptrh	equ	0xFF7
   131                           
   132                           	psect	cstackCOMRAM
   133  000001                     __pcstackCOMRAM:
   134                           	opt stack 0
   135  000001                     lcdNibble@temp:
   136                           	opt stack 0
   137                           
   138                           ; 1 bytes @ 0x0
   139  000001                     	ds	1
   140  000002                     lcdNibble@data:
   141                           	opt stack 0
   142                           
   143                           ; 1 bytes @ 0x1
   144  000002                     	ds	1
   145  000003                     lcdInst@data:
   146                           	opt stack 0
   147  000003                     putch@data:
   148                           	opt stack 0
   149                           
   150                           ; 1 bytes @ 0x2
   151  000003                     	ds	1
   152  000004                     ??_initLCD:
   153  000004                     ?_printf:
   154                           	opt stack 0
   155  000004                     printf@f:
   156                           	opt stack 0
   157                           
   158                           ; 2 bytes @ 0x3
   159  000004                     	ds	2
   160  000006                     printf@ap:
   161                           	opt stack 0
   162                           
   163                           ; 2 bytes @ 0x5
   164  000006                     	ds	2
   165  000008                     printf@c:
   166                           	opt stack 0
   167                           
   168                           ; 1 bytes @ 0x7
   169  000008                     	ds	1
   170  000009                     main@time:
   171                           	opt stack 0
   172                           
   173                           ; 6 bytes @ 0x8
   174  000009                     	ds	6
   175  00000F                     main@keypress:
   176                           	opt stack 0
   177                           
   178                           ; 1 bytes @ 0xE
   179  00000F                     	ds	1
   180  000010                     main@count:
   181                           	opt stack 0
   182                           
   183                           ; 2 bytes @ 0xF
   184  000010                     	ds	2
   185  000012                     main@temp:
   186                           	opt stack 0
   187                           
   188                           ; 1 bytes @ 0x11
   189  000012                     	ds	1
   190                           tblptru	equ	0xFF8
   191                           tblptrh	equ	0xFF7
   192                           
   193 ;;
   194 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   195 ;;
   196 ;; *************** function _main *****************
   197 ;; Defined at:
   198 ;;		line 18 in file "main.c"
   199 ;; Parameters:    Size  Location     Type
   200 ;;		None
   201 ;; Auto vars:     Size  Location     Type
   202 ;;  temp            1   17[COMRAM] unsigned char 
   203 ;;  keypress        1   14[COMRAM] unsigned char 
   204 ;;  time            6    8[COMRAM] unsigned char [6]
   205 ;;  count           2   15[COMRAM] int 
   206 ;; Return value:  Size  Location     Type
   207 ;;                  1    wreg      void 
   208 ;; Registers used:
   209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   210 ;; Tracked objects:
   211 ;;		On entry : 0/0
   212 ;;		On exit  : 0/0
   213 ;;		Unchanged: 0/0
   214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   216 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   218 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   219 ;;Total ram usage:       10 bytes
   220 ;; Hardware stack levels required when called:    3
   221 ;; This function calls:
   222 ;;		_initLCD
   223 ;;		_lcdClear
   224 ;;		_printf
   225 ;;		_putch
   226 ;; This function is called by:
   227 ;;		Startup code after reset
   228 ;; This function uses a non-reentrant model
   229 ;;
   230                           
   231                           	psect	text0
   232  001024                     __ptext0:
   233                           	opt stack 0
   234  001024                     _main:
   235                           	opt stack 28
   236                           
   237                           ;main.c: 19: TRISC = 0x00;
   238                           
   239                           ;incstack = 0
   240  001024  0E00               	movlw	0
   241  001026  6E94               	movwf	3988,c	;volatile
   242                           
   243                           ;main.c: 20: TRISD = 0x00;
   244  001028  0E00               	movlw	0
   245  00102A  6E95               	movwf	3989,c	;volatile
   246                           
   247                           ;main.c: 21: TRISB = 0xFF;
   248  00102C  6893               	setf	3987,c	;volatile
   249                           
   250                           ;main.c: 22: LATB = 0x00;
   251  00102E  0E00               	movlw	0
   252  001030  6E8A               	movwf	3978,c	;volatile
   253                           
   254                           ;main.c: 23: LATC = 0x00;
   255  001032  0E00               	movlw	0
   256  001034  6E8B               	movwf	3979,c	;volatile
   257                           
   258                           ;main.c: 24: ADCON0 = 0x00;
   259  001036  0E00               	movlw	0
   260  001038  6EC2               	movwf	4034,c	;volatile
   261                           
   262                           ;main.c: 25: ADCON1 = 0xFF;
   263  00103A  68C1               	setf	4033,c	;volatile
   264                           
   265                           ;main.c: 26: initLCD();
   266  00103C  EC89  F008         	call	_initLCD	;wreg free
   267                           
   268                           ;main.c: 28: int count = 0;
   269  001040  0E00               	movlw	0
   270  001042  6E11               	movwf	main@count+1,c
   271  001044  0E00               	movlw	0
   272  001046  6E10               	movwf	main@count,c
   273                           
   274                           ;main.c: 29: char time[6];
   275                           ;main.c: 31: printf("Time?");
   276  001048  0E1D               	movlw	low STR_1
   277  00104A  6E04               	movwf	printf@f,c
   278  00104C  0E10               	movlw	high STR_1
   279  00104E  6E05               	movwf	printf@f+1,c
   280  001050  ECAC  F008         	call	_printf	;wreg free
   281                           
   282                           ;main.c: 32: while(count < 6){
   283  001054  D022               	goto	l800
   284  001056                     l35:
   285  001056  A281               	btfss	3969,1,c	;volatile
   286  001058  D7FE               	goto	l35
   287                           
   288                           ;main.c: 36: }
   289                           ;main.c: 37: unsigned char keypress = (PORTB & 0xF0)>>4;
   290  00105A  3881               	swapf	3969,w,c	;volatile
   291  00105C  0B0F               	andlw	15
   292  00105E  0B0F               	andlw	15
   293  001060  6E0F               	movwf	main@keypress,c
   294  001062                     l38:
   295  001062  B281               	btfsc	3969,1,c	;volatile
   296  001064  D7FE               	goto	l38
   297                           
   298                           ;main.c: 40: }
   299                           ;main.c: 41: __nop();
   300  001066  F000               	nop	
   301                           
   302                           ;main.c: 42: __nop();
   303  001068  F000               	nop	
   304                           
   305                           ;main.c: 43: unsigned char temp = keys[keypress];
   306  00106A  500F               	movf	main@keypress,w,c
   307  00106C  0D01               	mullw	1
   308  00106E  0E01               	movlw	low _keys
   309  001070  24F3               	addwf	prodl,w,c
   310  001072  6EF6               	movwf	tblptrl,c
   311  001074  0E10               	movlw	high _keys
   312  001076  20F4               	addwfc	prodh,w,c
   313  001078  6EF7               	movwf	tblptrh,c
   314  00107A                     	if	0	;There are less than 3 active tblptr bytes
   315  00107A                     	endif
   316  00107A  0008               	tblrd		*
   317  00107C  CFF5 F012          	movff	tablat,main@temp
   318                           
   319                           ;main.c: 45: time[count] = temp;
   320  001080  0E09               	movlw	low main@time
   321  001082  2410               	addwf	main@count,w,c
   322  001084  6ED9               	movwf	fsr2l,c
   323  001086  0E00               	movlw	high main@time
   324  001088  2011               	addwfc	main@count+1,w,c
   325  00108A  6EDA               	movwf	fsr2h,c
   326  00108C  C012  FFDF         	movff	main@temp,indf2
   327                           
   328                           ;main.c: 46: putch(temp);
   329  001090  5012               	movf	main@temp,w,c
   330  001092  ECC8  F008         	call	_putch
   331                           
   332                           ;main.c: 47: count += 1;
   333  001096  4A10               	infsnz	main@count,f,c
   334  001098  2A11               	incf	main@count+1,f,c
   335  00109A                     l800:
   336  00109A  BE11               	btfsc	main@count+1,7,c
   337  00109C  D7DC               	goto	l35
   338  00109E  5011               	movf	main@count+1,w,c
   339  0010A0  E104               	bnz	l802
   340  0010A2  0E06               	movlw	6
   341  0010A4  5C10               	subwf	main@count,w,c
   342  0010A6  A0D8               	btfss	status,0,c
   343  0010A8  D7D6               	goto	l35
   344  0010AA                     l802:
   345                           
   346                           ;main.c: 48: }
   347                           ;main.c: 49: lcdClear();
   348  0010AA  ECD4  F008         	call	_lcdClear	;wreg free
   349                           
   350                           ;main.c: 52: printf("2017/01/24");
   351  0010AE  0E12               	movlw	low STR_2
   352  0010B0  6E04               	movwf	printf@f,c
   353  0010B2  0E10               	movlw	high STR_2
   354  0010B4  6E05               	movwf	printf@f+1,c
   355  0010B6  ECAC  F008         	call	_printf	;wreg free
   356  0010BA                     l42:
   357  0010BA  D7FF               	goto	l42
   358  0010BC                     __end_of_main:
   359                           	opt stack 0
   360                           tblptru	equ	0xFF8
   361                           tblptrh	equ	0xFF7
   362                           tblptrl	equ	0xFF6
   363                           tablat	equ	0xFF5
   364                           prodh	equ	0xFF4
   365                           prodl	equ	0xFF3
   366                           indf2	equ	0xFDF
   367                           fsr2h	equ	0xFDA
   368                           fsr2l	equ	0xFD9
   369                           status	equ	0xFD8
   370                           
   371 ;; *************** function _printf *****************
   372 ;; Defined at:
   373 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
   374 ;; Parameters:    Size  Location     Type
   375 ;;  f               2    3[COMRAM] PTR const unsigned char 
   376 ;;		 -> STR_2(11), STR_1(6), 
   377 ;; Auto vars:     Size  Location     Type
   378 ;;  tmpval          4    0        struct .
   379 ;;  cp              3    0        PTR const unsigned char 
   380 ;;  ap              2    5[COMRAM] PTR void [1]
   381 ;;		 -> ?_printf(2), 
   382 ;;  len             2    0        unsigned int 
   383 ;;  val             2    0        unsigned int 
   384 ;;  c               1    7[COMRAM] char 
   385 ;;  flag            1    0        unsigned char 
   386 ;;  prec            1    0        char 
   387 ;; Return value:  Size  Location     Type
   388 ;;                  2    3[COMRAM] int 
   389 ;; Registers used:
   390 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   391 ;; Tracked objects:
   392 ;;		On entry : 0/0
   393 ;;		On exit  : 0/0
   394 ;;		Unchanged: 0/0
   395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   396 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   397 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   399 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   400 ;;Total ram usage:        5 bytes
   401 ;; Hardware stack levels used:    1
   402 ;; Hardware stack levels required when called:    2
   403 ;; This function calls:
   404 ;;		_putch
   405 ;; This function is called by:
   406 ;;		_main
   407 ;; This function uses a non-reentrant model
   408 ;;
   409                           
   410                           	psect	text1
   411  001158                     __ptext1:
   412                           	opt stack 0
   413  001158                     _printf:
   414                           	opt stack 28
   415                           
   416                           ;doprnt.c: 466: va_list ap;
   417                           ;doprnt.c: 499: signed char c;
   418                           ;doprnt.c: 506: signed char prec;
   419                           ;doprnt.c: 508: unsigned char flag;
   420                           ;doprnt.c: 523: union {
   421                           ;doprnt.c: 524: unsigned long vd;
   422                           ;doprnt.c: 525: double integ;
   423                           ;doprnt.c: 526: } tmpval;
   424                           ;doprnt.c: 528: unsigned int val;
   425                           ;doprnt.c: 529: unsigned len;
   426                           ;doprnt.c: 530: const char * cp;
   427                           ;doprnt.c: 533: *ap = __va_start();
   428                           
   429                           ;incstack = 0
   430  001158  0E06               	movlw	low (?_printf+2)
   431  00115A  6E06               	movwf	printf@ap,c
   432  00115C  0E00               	movlw	high (?_printf+2)
   433  00115E  6E07               	movwf	printf@ap+1,c
   434                           
   435                           ;doprnt.c: 536: while(c = *f++) {
   436  001160  D003               	goto	l776
   437  001162                     l774:
   438                           
   439                           ;doprnt.c: 540: {
   440                           ;doprnt.c: 541: (putch(c) );
   441  001162  5008               	movf	printf@c,w,c
   442  001164  ECC8  F008         	call	_putch
   443  001168                     l776:
   444  001168  C004  FFF6         	movff	printf@f,tblptrl
   445  00116C  C005  FFF7         	movff	printf@f+1,tblptrh
   446  001170  4A04               	infsnz	printf@f,f,c
   447  001172  2A05               	incf	printf@f+1,f,c
   448  001174                     	if	0	;tblptru may be non-zero
   449  001174                     	endif
   450  001174                     	if	0	;tblptru may be non-zero
   451  001174                     	endif
   452  001174  0008               	tblrd		*
   453  001176  CFF5 F008          	movff	tablat,printf@c
   454  00117A  5008               	movf	printf@c,w,c
   455  00117C  B4D8               	btfsc	status,2,c
   456  00117E  0012               	return	
   457  001180  D7F0               	goto	l774
   458  001182                     __end_of_printf:
   459                           	opt stack 0
   460                           tblptru	equ	0xFF8
   461                           tblptrh	equ	0xFF7
   462                           tblptrl	equ	0xFF6
   463                           tablat	equ	0xFF5
   464                           prodh	equ	0xFF4
   465                           prodl	equ	0xFF3
   466                           indf2	equ	0xFDF
   467                           fsr2h	equ	0xFDA
   468                           fsr2l	equ	0xFD9
   469                           status	equ	0xFD8
   470                           
   471 ;; *************** function _putch *****************
   472 ;; Defined at:
   473 ;;		line 30 in file "lcd.c"
   474 ;; Parameters:    Size  Location     Type
   475 ;;  data            1    wreg     unsigned char 
   476 ;; Auto vars:     Size  Location     Type
   477 ;;  data            1    2[COMRAM] unsigned char 
   478 ;; Return value:  Size  Location     Type
   479 ;;                  1    wreg      void 
   480 ;; Registers used:
   481 ;;		wreg, status,2, status,0, cstack
   482 ;; Tracked objects:
   483 ;;		On entry : 0/0
   484 ;;		On exit  : 0/0
   485 ;;		Unchanged: 0/0
   486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   488 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   490 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   491 ;;Total ram usage:        1 bytes
   492 ;; Hardware stack levels used:    1
   493 ;; Hardware stack levels required when called:    1
   494 ;; This function calls:
   495 ;;		_lcdNibble
   496 ;; This function is called by:
   497 ;;		_main
   498 ;;		_printf
   499 ;; This function uses a non-reentrant model
   500 ;;
   501                           
   502                           	psect	text2
   503  001190                     __ptext2:
   504                           	opt stack 0
   505  001190                     _putch:
   506                           	opt stack 29
   507                           
   508                           ;incstack = 0
   509                           ;putch@data stored from wreg
   510  001190  6E03               	movwf	putch@data,c
   511                           
   512                           ;lcd.c: 31: LATDbits.LATD2 = 1;
   513  001192  848C               	bsf	3980,2,c	;volatile
   514                           
   515                           ;lcd.c: 32: lcdNibble(data);
   516  001194  5003               	movf	putch@data,w,c
   517  001196  EC5E  F008         	call	_lcdNibble
   518  00119A  0012               	return		;funcret
   519  00119C                     __end_of_putch:
   520                           	opt stack 0
   521                           tblptru	equ	0xFF8
   522                           tblptrh	equ	0xFF7
   523                           tblptrl	equ	0xFF6
   524                           tablat	equ	0xFF5
   525                           prodh	equ	0xFF4
   526                           prodl	equ	0xFF3
   527                           indf2	equ	0xFDF
   528                           fsr2h	equ	0xFDA
   529                           fsr2l	equ	0xFD9
   530                           status	equ	0xFD8
   531                           
   532 ;; *************** function _lcdClear *****************
   533 ;; Defined at:
   534 ;;		line 35 in file "lcd.c"
   535 ;; Parameters:    Size  Location     Type
   536 ;;		None
   537 ;; Auto vars:     Size  Location     Type
   538 ;;		None
   539 ;; Return value:  Size  Location     Type
   540 ;;                  2   28[None  ] int 
   541 ;; Registers used:
   542 ;;		wreg, status,2, status,0, cstack
   543 ;; Tracked objects:
   544 ;;		On entry : 0/0
   545 ;;		On exit  : 0/0
   546 ;;		Unchanged: 0/0
   547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   552 ;;Total ram usage:        0 bytes
   553 ;; Hardware stack levels used:    1
   554 ;; Hardware stack levels required when called:    1
   555 ;; This function calls:
   556 ;;		_lcdNibble
   557 ;; This function is called by:
   558 ;;		_main
   559 ;; This function uses a non-reentrant model
   560 ;;
   561                           
   562                           	psect	text3
   563  0011A8                     __ptext3:
   564                           	opt stack 0
   565  0011A8                     _lcdClear:
   566                           	opt stack 29
   567                           
   568                           ;lcd.c: 36: LATDbits.LATD2 = 0;
   569                           
   570                           ;incstack = 0
   571  0011A8  948C               	bcf	3980,2,c	;volatile
   572                           
   573                           ;lcd.c: 37: lcdNibble(0b00000010);
   574  0011AA  0E02               	movlw	2
   575  0011AC  EC5E  F008         	call	_lcdNibble
   576  0011B0  0012               	return		;funcret
   577  0011B2                     __end_of_lcdClear:
   578                           	opt stack 0
   579                           tblptru	equ	0xFF8
   580                           tblptrh	equ	0xFF7
   581                           tblptrl	equ	0xFF6
   582                           tablat	equ	0xFF5
   583                           prodh	equ	0xFF4
   584                           prodl	equ	0xFF3
   585                           indf2	equ	0xFDF
   586                           fsr2h	equ	0xFDA
   587                           fsr2l	equ	0xFD9
   588                           status	equ	0xFD8
   589                           
   590 ;; *************** function _initLCD *****************
   591 ;; Defined at:
   592 ;;		line 14 in file "lcd.c"
   593 ;; Parameters:    Size  Location     Type
   594 ;;		None
   595 ;; Auto vars:     Size  Location     Type
   596 ;;		None
   597 ;; Return value:  Size  Location     Type
   598 ;;                  1    wreg      void 
   599 ;; Registers used:
   600 ;;		wreg, status,2, status,0, cstack
   601 ;; Tracked objects:
   602 ;;		On entry : 0/0
   603 ;;		On exit  : 0/0
   604 ;;		Unchanged: 0/0
   605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   608 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   609 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   610 ;;Total ram usage:        1 bytes
   611 ;; Hardware stack levels used:    1
   612 ;; Hardware stack levels required when called:    2
   613 ;; This function calls:
   614 ;;		_lcdInst
   615 ;; This function is called by:
   616 ;;		_main
   617 ;; This function uses a non-reentrant model
   618 ;;
   619                           
   620                           	psect	text4
   621  001112                     __ptext4:
   622                           	opt stack 0
   623  001112                     _initLCD:
   624                           	opt stack 28
   625                           
   626                           ;lcd.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
   627                           
   628                           ;incstack = 0
   629  001112  0E27               	movlw	39
   630  001114  6E04               	movwf	??_initLCD& (0+255),c
   631  001116  0EF5               	movlw	245
   632  001118                     u97:
   633  001118  2EE8               	decfsz	wreg,f,c
   634  00111A  D7FE               	bra	u97
   635  00111C  2E04               	decfsz	??_initLCD& (0+255),f,c
   636  00111E  D7FC               	bra	u97
   637  001120  F000               	nop	
   638                           
   639                           ;lcd.c: 16: lcdInst(0b00110011);
   640  001122  0E33               	movlw	51
   641  001124  ECCE  F008         	call	_lcdInst
   642                           
   643                           ;lcd.c: 17: lcdInst(0b00110010);
   644  001128  0E32               	movlw	50
   645  00112A  ECCE  F008         	call	_lcdInst
   646                           
   647                           ;lcd.c: 18: lcdInst(0b00101000);
   648  00112E  0E28               	movlw	40
   649  001130  ECCE  F008         	call	_lcdInst
   650                           
   651                           ;lcd.c: 19: lcdInst(0b00001111);
   652  001134  0E0F               	movlw	15
   653  001136  ECCE  F008         	call	_lcdInst
   654                           
   655                           ;lcd.c: 20: lcdInst(0b00000110);
   656  00113A  0E06               	movlw	6
   657  00113C  ECCE  F008         	call	_lcdInst
   658                           
   659                           ;lcd.c: 21: lcdInst(0b00000001);
   660  001140  0E01               	movlw	1
   661  001142  ECCE  F008         	call	_lcdInst
   662                           
   663                           ;lcd.c: 22: _delay((unsigned long)((15)*(8000000/4000.0)));
   664  001146  0E27               	movlw	39
   665  001148  6E04               	movwf	??_initLCD& (0+255),c
   666  00114A  0EF5               	movlw	245
   667  00114C                     u107:
   668  00114C  2EE8               	decfsz	wreg,f,c
   669  00114E  D7FE               	bra	u107
   670  001150  2E04               	decfsz	??_initLCD& (0+255),f,c
   671  001152  D7FC               	bra	u107
   672  001154  F000               	nop	
   673  001156  0012               	return		;funcret
   674  001158                     __end_of_initLCD:
   675                           	opt stack 0
   676                           tblptru	equ	0xFF8
   677                           tblptrh	equ	0xFF7
   678                           tblptrl	equ	0xFF6
   679                           tablat	equ	0xFF5
   680                           prodh	equ	0xFF4
   681                           prodl	equ	0xFF3
   682                           wreg	equ	0xFE8
   683                           indf2	equ	0xFDF
   684                           fsr2h	equ	0xFDA
   685                           fsr2l	equ	0xFD9
   686                           status	equ	0xFD8
   687                           
   688 ;; *************** function _lcdInst *****************
   689 ;; Defined at:
   690 ;;		line 25 in file "lcd.c"
   691 ;; Parameters:    Size  Location     Type
   692 ;;  data            1    wreg     unsigned char 
   693 ;; Auto vars:     Size  Location     Type
   694 ;;  data            1    2[COMRAM] unsigned char 
   695 ;; Return value:  Size  Location     Type
   696 ;;                  1    wreg      void 
   697 ;; Registers used:
   698 ;;		wreg, status,2, status,0, cstack
   699 ;; Tracked objects:
   700 ;;		On entry : 0/0
   701 ;;		On exit  : 0/0
   702 ;;		Unchanged: 0/0
   703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   705 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   707 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   708 ;;Total ram usage:        1 bytes
   709 ;; Hardware stack levels used:    1
   710 ;; Hardware stack levels required when called:    1
   711 ;; This function calls:
   712 ;;		_lcdNibble
   713 ;; This function is called by:
   714 ;;		_initLCD
   715 ;; This function uses a non-reentrant model
   716 ;;
   717                           
   718                           	psect	text5
   719  00119C                     __ptext5:
   720                           	opt stack 0
   721  00119C                     _lcdInst:
   722                           	opt stack 28
   723                           
   724                           ;incstack = 0
   725                           ;lcdInst@data stored from wreg
   726  00119C  6E03               	movwf	lcdInst@data,c
   727                           
   728                           ;lcd.c: 26: LATDbits.LATD2 = 0;
   729  00119E  948C               	bcf	3980,2,c	;volatile
   730                           
   731                           ;lcd.c: 27: lcdNibble(data);
   732  0011A0  5003               	movf	lcdInst@data,w,c
   733  0011A2  EC5E  F008         	call	_lcdNibble
   734  0011A6  0012               	return		;funcret
   735  0011A8                     __end_of_lcdInst:
   736                           	opt stack 0
   737                           tblptru	equ	0xFF8
   738                           tblptrh	equ	0xFF7
   739                           tblptrl	equ	0xFF6
   740                           tablat	equ	0xFF5
   741                           prodh	equ	0xFF4
   742                           prodl	equ	0xFF3
   743                           wreg	equ	0xFE8
   744                           indf2	equ	0xFDF
   745                           fsr2h	equ	0xFDA
   746                           fsr2l	equ	0xFD9
   747                           status	equ	0xFD8
   748                           
   749 ;; *************** function _lcdNibble *****************
   750 ;; Defined at:
   751 ;;		line 40 in file "lcd.c"
   752 ;; Parameters:    Size  Location     Type
   753 ;;  data            1    wreg     unsigned char 
   754 ;; Auto vars:     Size  Location     Type
   755 ;;  data            1    1[COMRAM] unsigned char 
   756 ;;  temp            1    0[COMRAM] unsigned char 
   757 ;; Return value:  Size  Location     Type
   758 ;;                  1    wreg      void 
   759 ;; Registers used:
   760 ;;		wreg, status,2, status,0
   761 ;; Tracked objects:
   762 ;;		On entry : 0/0
   763 ;;		On exit  : 0/0
   764 ;;		Unchanged: 0/0
   765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   766 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   767 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   769 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   770 ;;Total ram usage:        2 bytes
   771 ;; Hardware stack levels used:    1
   772 ;; This function calls:
   773 ;;		Nothing
   774 ;; This function is called by:
   775 ;;		_lcdInst
   776 ;;		_putch
   777 ;;		_lcdClear
   778 ;; This function uses a non-reentrant model
   779 ;;
   780                           
   781                           	psect	text6
   782  0010BC                     __ptext6:
   783                           	opt stack 0
   784  0010BC                     _lcdNibble:
   785                           	opt stack 29
   786                           
   787                           ;incstack = 0
   788                           ;lcdNibble@data stored from wreg
   789  0010BC  6E02               	movwf	lcdNibble@data,c
   790                           
   791                           ;lcd.c: 42: char temp = data & 0xF0;
   792  0010BE  5002               	movf	lcdNibble@data,w,c
   793  0010C0  0BF0               	andlw	240
   794  0010C2  6E01               	movwf	lcdNibble@temp,c
   795                           
   796                           ;lcd.c: 43: LATD = LATD & 0x0F;
   797  0010C4  508C               	movf	3980,w,c	;volatile
   798  0010C6  0B0F               	andlw	15
   799  0010C8  6E8C               	movwf	3980,c	;volatile
   800                           
   801                           ;lcd.c: 44: LATD = temp | LATD;
   802  0010CA  5001               	movf	lcdNibble@temp,w,c
   803  0010CC  108C               	iorwf	3980,w,c	;volatile
   804  0010CE  6E8C               	movwf	3980,c	;volatile
   805                           
   806                           ;lcd.c: 46: LATDbits.LATD3 = 0;
   807  0010D0  968C               	bcf	3980,3,c	;volatile
   808                           
   809                           ;lcd.c: 47: _delay((unsigned long)((25)*(8000000/4000000.0)));
   810  0010D2  0E10               	movlw	16
   811  0010D4                     u117:
   812  0010D4  2EE8               	decfsz	wreg,f,c
   813  0010D6  D7FE               	bra	u117
   814  0010D8  D000               	nop2	
   815                           
   816                           ;lcd.c: 48: LATDbits.LATD3 = 1;
   817  0010DA  868C               	bsf	3980,3,c	;volatile
   818                           
   819                           ;lcd.c: 49: _delay((unsigned long)((25)*(8000000/4000000.0)));
   820  0010DC  0E10               	movlw	16
   821  0010DE                     u127:
   822  0010DE  2EE8               	decfsz	wreg,f,c
   823  0010E0  D7FE               	bra	u127
   824  0010E2  D000               	nop2	
   825                           
   826                           ;lcd.c: 51: data = data << 4;
   827  0010E4  3802               	swapf	lcdNibble@data,w,c
   828  0010E6  0BF0               	andlw	240
   829  0010E8  6E02               	movwf	lcdNibble@data,c
   830                           
   831                           ;lcd.c: 53: temp = data & 0xF0;
   832  0010EA  5002               	movf	lcdNibble@data,w,c
   833  0010EC  0BF0               	andlw	240
   834  0010EE  6E01               	movwf	lcdNibble@temp,c
   835                           
   836                           ;lcd.c: 54: LATD = LATD & 0x0F;
   837  0010F0  508C               	movf	3980,w,c	;volatile
   838  0010F2  0B0F               	andlw	15
   839  0010F4  6E8C               	movwf	3980,c	;volatile
   840                           
   841                           ;lcd.c: 55: LATD = temp | LATD;
   842  0010F6  5001               	movf	lcdNibble@temp,w,c
   843  0010F8  108C               	iorwf	3980,w,c	;volatile
   844  0010FA  6E8C               	movwf	3980,c	;volatile
   845                           
   846                           ;lcd.c: 57: LATDbits.LATD3 = 0;
   847  0010FC  968C               	bcf	3980,3,c	;volatile
   848                           
   849                           ;lcd.c: 58: _delay((unsigned long)((25)*(8000000/4000000.0)));
   850  0010FE  0E10               	movlw	16
   851  001100                     u137:
   852  001100  2EE8               	decfsz	wreg,f,c
   853  001102  D7FE               	bra	u137
   854  001104  D000               	nop2	
   855                           
   856                           ;lcd.c: 59: LATDbits.LATD3 = 1;
   857  001106  868C               	bsf	3980,3,c	;volatile
   858                           
   859                           ;lcd.c: 60: _delay((unsigned long)((25)*(8000000/4000000.0)));
   860  001108  0E10               	movlw	16
   861  00110A                     u147:
   862  00110A  2EE8               	decfsz	wreg,f,c
   863  00110C  D7FE               	bra	u147
   864  00110E  D000               	nop2	
   865  001110  0012               	return		;funcret
   866  001112                     __end_of_lcdNibble:
   867                           	opt stack 0
   868                           tblptru	equ	0xFF8
   869                           tblptrh	equ	0xFF7
   870                           tblptrl	equ	0xFF6
   871                           tablat	equ	0xFF5
   872                           prodh	equ	0xFF4
   873                           prodl	equ	0xFF3
   874                           wreg	equ	0xFE8
   875                           indf2	equ	0xFDF
   876                           fsr2h	equ	0xFDA
   877                           fsr2l	equ	0xFD9
   878                           status	equ	0xFD8
   879                           tblptru	equ	0xFF8
   880                           tblptrh	equ	0xFF7
   881                           tblptrl	equ	0xFF6
   882                           tablat	equ	0xFF5
   883                           prodh	equ	0xFF4
   884                           prodl	equ	0xFF3
   885                           wreg	equ	0xFE8
   886                           indf2	equ	0xFDF
   887                           fsr2h	equ	0xFDA
   888                           fsr2l	equ	0xFD9
   889                           status	equ	0xFD8
   890                           
   891                           	psect	rparam
   892  0000                     tblptru	equ	0xFF8
   893                           tblptrh	equ	0xFF7
   894                           tblptrl	equ	0xFF6
   895                           tablat	equ	0xFF5
   896                           prodh	equ	0xFF4
   897                           prodl	equ	0xFF3
   898                           wreg	equ	0xFE8
   899                           indf2	equ	0xFDF
   900                           fsr2h	equ	0xFDA
   901                           fsr2l	equ	0xFD9
   902                           status	equ	0xFD8


Data Sizes:
    Strings     17
    Constant    17
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     18      18
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          239      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_2(CODE[11]), STR_1(CODE[6]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_putch
    _putch->_lcdNibble
    _lcdClear->_lcdNibble
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0     657
                                              8 COMRAM    10    10      0
                            _initLCD
                           _lcdClear
                             _printf
                              _putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              18    16      2     264
                                              3 COMRAM     5     3      2
                              _putch
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (1) _lcdClear                                             0     0      0      75
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0      90
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0      90
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (2) _lcdNibble                                            2     2      0      75
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _lcdNibble
   _lcdClear
     _lcdNibble
   _printf
     _putch
       _lcdNibble
   _putch
     _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     12      12       1       14.2%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
ABS                  0      0       0       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK14           EF      0       0      33        0.0%
BANK14              EF      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM_1            80      0       0      37        0.0%
BIGRAM             EEE      0       0      38        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Jan 24 15:21:49 2017

                     l42 10BA                       l35 1056                       l38 1062  
                     u97 1118              __CFG_BORV$3 000000             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
            __CFG_OSC$HS 000000                      l800 109A                      l802 10AA  
                    l774 1162                      l776 1168             __CFG_CPB$OFF 000000  
                    u107 114C                      u117 10D4                      u127 10DE  
                    u137 1100                      u147 110A             __CFG_CPD$OFF 000000  
                    wreg 000FE8             __CFG_LVP$OFF 000000             __CFG_WDT$OFF 000000  
                   STR_1 101D                     STR_2 1012                     _LATB 000F8A  
                   _LATC 000F8B                     _LATD 000F8C                     _main 1024  
                   _keys 1001                     indf2 000FDF                     fsr2l 000FD9  
                   prodh 000FF4                     prodl 000FF3                     start 0002  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ?_main 0001                    _PORTB 000F81                    _TRISB 000F93  
                  _TRISC 000F94                    _TRISD 000F95            __CFG_PWRT$OFF 000000  
          __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000            __CFG_WRT2$OFF 000000  
          __CFG_WRT3$OFF 000000          __end_of_lcdInst 11A8           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
           main@keypress 000F           __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000  
          __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000          __end_of_initLCD 1158  
         __CFG_EBTRB$OFF 000000                    _putch 1190                    tablat 000FF5  
                  status 000FD8           __CFG_PBADEN$ON 000000          __initialization 1182  
           __end_of_main 10BC             __end_of_keys 1012                   ??_main 0009  
          __activetblptr 000001                   _ADCON0 000FC2                   _ADCON1 000FC1  
                 ?_putch 0001         __end_of_lcdClear 11B2           __CFG_XINST$OFF 000000  
         __CFG_STVREN$ON 000000                ??_lcdInst 0003                   _printf 1158  
              ??_initLCD 0004             __mediumconst 0000                   tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8               __accesstop 0080  
__end_of__initialization 1182            ___rparam_used 000001           __pcstackCOMRAM 0001  
          __end_of_putch 119C       __size_of_lcdNibble 0056                  ??_putch 0003  
                ?_printf 0004                ?_lcdClear 0001        __end_of_lcdNibble 1112  
                __Hparam 0000                  __Lparam 0000             __psmallconst 1000  
                __pcinit 1182                  __ramtop 1000                  _lcdInst 119C  
                __ptext0 1024                  __ptext1 1158                  __ptext2 1190  
                __ptext3 11A8                  __ptext4 1112                  __ptext5 119C  
                __ptext6 10BC          __size_of_printf 002A                  _initLCD 1112  
             ??_lcdClear 0003     end_of_initialization 1182                  printf@c 0008  
                printf@f 0004                _PORTBbits 000F81           __end_of_printf 1182  
    start_initialization 1182         __CFG_LPT1OSC$OFF 000000                 ??_printf 0006  
      __size_of_lcdClear 000A        __CFG_CCP2MX$PORTC 000000                _lcdNibble 10BC  
               ?_lcdInst 0001                 ?_initLCD 0001              __smallconst 1000  
         __size_of_putch 000C                 _LATDbits 000F8C         __CFG_WDTPS$32768 000000  
             ?_lcdNibble 0001            lcdNibble@data 0002            lcdNibble@temp 0001  
              main@count 0010                 __Hrparam 0000                 __Lrparam 0000  
           __Lsmallconst 1000       __CFG_BOREN$SBORDIS 000000         __size_of_lcdInst 000C  
       __size_of_initLCD 0046                 _lcdClear 11A8            __size_of_main 0098  
            ??_lcdNibble 0001                 main@temp 0012                 main@time 0009  
              putch@data 0003                 printf@ap 0006              lcdInst@data 0003  
