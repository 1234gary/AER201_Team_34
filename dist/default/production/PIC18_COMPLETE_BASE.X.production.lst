

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Feb 28 14:44:58 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	text38,global,reloc=2,class=CODE,delta=1
    51                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    52  0000                     
    53                           ; Version 1.40
    54                           ; Generated 01/12/2016 GMT
    55                           ; 
    56                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    57                           ; All rights reserved.
    58                           ; 
    59                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    60                           ; 
    61                           ; Redistribution and use in source and binary forms, with or without modification, are
    62                           ; permitted provided that the following conditions are met:
    63                           ; 
    64                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    65                           ;        conditions and the following disclaimer.
    66                           ; 
    67                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    68                           ;        of conditions and the following disclaimer in the documentation and/or other
    69                           ;        materials provided with the distribution.
    70                           ; 
    71                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    72                           ;        software without specific prior written permission.
    73                           ; 
    74                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    75                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    76                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    77                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    78                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    79                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    80                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    81                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    82                           ; 
    83                           ; 
    84                           ; Code-generator required, PIC18F4620 Definitions
    85                           ; 
    86                           ; SFR Addresses
    87  0000                     
    88                           	psect	idataCOMRAM
    89  00E45E                     __pidataCOMRAM:
    90                           	opt stack 0
    91                           
    92                           ;initializer for _runInfo
    93  00E45E  0028               	dw	40
    94  00E460  000A               	dw	10
    95  00E462  0002               	dw	2
    96  00E464  0003               	dw	3
    97  00E466  0003               	dw	3
    98  00E468  0002               	dw	2
    99                           
   100                           	psect	mediumconst
   101  00FE30                     __pmediumconst:
   102                           	opt stack 0
   103  00FE30  00                 	db	0
   104  00FE31                     _keys:
   105                           	opt stack 0
   106  00FE31  31                 	db	49
   107  00FE32  32                 	db	50
   108  00FE33  33                 	db	51
   109  00FE34  41                 	db	65
   110  00FE35  34                 	db	52
   111  00FE36  35                 	db	53
   112  00FE37  36                 	db	54
   113  00FE38  42                 	db	66
   114  00FE39  37                 	db	55
   115  00FE3A  38                 	db	56
   116  00FE3B  39                 	db	57
   117  00FE3C  43                 	db	67
   118  00FE3D  2A                 	db	42
   119  00FE3E  30                 	db	48
   120  00FE3F  23                 	db	35
   121  00FE40  44                 	db	68
   122  00FE41  00                 	db	0
   123  00FE42                     __end_of_keys:
   124                           	opt stack 0
   125  00FE42                     _dpowers:
   126                           	opt stack 0
   127  00FE42  0001               	dw	1
   128  00FE44  000A               	dw	10
   129  00FE46  0064               	dw	100
   130  00FE48  03E8               	dw	1000
   131  00FE4A  2710               	dw	10000
   132  00FE4C                     __end_of_dpowers:
   133                           	opt stack 0
   134  00FE4C                     _hexpowers:
   135                           	opt stack 0
   136  00FE4C  0001               	dw	1
   137  00FE4E  0010               	dw	16
   138  00FE50  0100               	dw	256
   139  00FE52  1000               	dw	4096
   140  00FE54                     __end_of_hexpowers:
   141                           	opt stack 0
   142  0000                     _ADCON0	set	4034
   143  0000                     _ADCON1	set	4033
   144  0000                     _EEADR	set	4009
   145  0000                     _EEADRH	set	4010
   146  0000                     _EECON1bits	set	4006
   147  0000                     _EECON2	set	4007
   148  0000                     _EEDATA	set	4008
   149  0000                     _INTCONbits	set	4082
   150  0000                     _LATB	set	3978
   151  0000                     _LATC	set	3979
   152  0000                     _LATD	set	3980
   153  0000                     _LATDbits	set	3980
   154  0000                     _LATE	set	3981
   155  0000                     _PIR2bits	set	4001
   156  0000                     _PORTAbits	set	3968
   157  0000                     _PORTB	set	3969
   158  0000                     _PORTBbits	set	3969
   159  0000                     _PORTCbits	set	3970
   160  0000                     _SSPADD	set	4040
   161  0000                     _SSPBUF	set	4041
   162  0000                     _SSPCON1	set	4038
   163  0000                     _SSPCON2	set	4037
   164  0000                     _SSPSTAT	set	4039
   165  0000                     _TRISA	set	3986
   166  0000                     _TRISB	set	3987
   167  0000                     _TRISC	set	3988
   168  0000                     _TRISD	set	3989
   169  0000                     _TRISE	set	3990
   170  0000                     _ACKDT	set	32301
   171  0000                     _ACKEN	set	32300
   172  0000                     _PEN	set	32298
   173  0000                     _RCEN	set	32299
   174  0000                     _RSEN	set	32297
   175  0000                     _SEN	set	32296
   176  0000                     _TRISC3	set	31907
   177  0000                     _TRISC4	set	31908
   178  0000                     _nRBPU	set	32655
   179  00FE54                     STR_33:
   180  00FE54  43                 	db	67	;'C'
   181  00FE55  4F                 	db	79	;'O'
   182  00FE56  4D                 	db	77	;'M'
   183  00FE57  50                 	db	80	;'P'
   184  00FE58  4C                 	db	76	;'L'
   185  00FE59  45                 	db	69	;'E'
   186  00FE5A  54                 	db	84	;'T'
   187  00FE5B  45                 	db	69	;'E'
   188  00FE5C  44                 	db	68	;'D'
   189  00FE5D  21                 	db	33
   190  00FE5E  21                 	db	33
   191  00FE5F  21                 	db	33
   192  00FE60  20                 	db	32
   193  00FE61  20                 	db	32
   194  00FE62  20                 	db	32
   195  00FE63  20                 	db	32
   196  00FE64  20                 	db	32
   197  00FE65  00                 	db	0
   198  00FE66                     STR_25:
   199  00FE66  3C                 	db	60	;'<'
   200  00FE67  34                 	db	52	;'4'
   201  00FE68  20                 	db	32
   202  00FE69  20                 	db	32
   203  00FE6A  42                 	db	66	;'B'
   204  00FE6B  61                 	db	97	;'a'
   205  00FE6C  63                 	db	99	;'c'
   206  00FE6D  6B                 	db	107	;'k'
   207  00FE6E  3A                 	db	58	;':'
   208  00FE6F  20                 	db	32
   209  00FE70  20                 	db	32
   210  00FE71  44                 	db	68	;'D'
   211  00FE72  20                 	db	32
   212  00FE73  20                 	db	32
   213  00FE74  36                 	db	54	;'6'
   214  00FE75  3E                 	db	62	;'>'
   215  00FE76  20                 	db	32
   216  00FE77  00                 	db	0
   217  00FE78                     STR_37:
   218  00FE78  30                 	db	48	;'0'
   219  00FE79  31                 	db	49	;'1'
   220  00FE7A  32                 	db	50	;'2'
   221  00FE7B  33                 	db	51	;'3'
   222  00FE7C  34                 	db	52	;'4'
   223  00FE7D  35                 	db	53	;'5'
   224  00FE7E  36                 	db	54	;'6'
   225  00FE7F  37                 	db	55	;'7'
   226  00FE80  38                 	db	56	;'8'
   227  00FE81  39                 	db	57	;'9'
   228  00FE82  61                 	db	97	;'a'
   229  00FE83  62                 	db	98	;'b'
   230  00FE84  63                 	db	99	;'c'
   231  00FE85  64                 	db	100	;'d'
   232  00FE86  65                 	db	101	;'e'
   233  00FE87  66                 	db	102	;'f'
   234  00FE88  00                 	db	0
   235  00FE89                     STR_35:
   236  00FE89  20                 	db	32
   237  00FE8A  20                 	db	32
   238  00FE8B  20                 	db	32
   239  00FE8C  20                 	db	32
   240  00FE8D  20                 	db	32
   241  00FE8E  20                 	db	32
   242  00FE8F  20                 	db	32
   243  00FE90  20                 	db	32
   244  00FE91  20                 	db	32
   245  00FE92  20                 	db	32
   246  00FE93  20                 	db	32
   247  00FE94  20                 	db	32
   248  00FE95  20                 	db	32
   249  00FE96  20                 	db	32
   250  00FE97  20                 	db	32
   251  00FE98  20                 	db	32
   252  00FE99  00                 	db	0
   253  00FE9A                     STR_34:
   254  00FE9A  41                 	db	65	;'A'
   255  00FE9B  20                 	db	32
   256  00FE9C  74                 	db	116	;'t'
   257  00FE9D  6F                 	db	111	;'o'
   258  00FE9E  20                 	db	32
   259  00FE9F  62                 	db	98	;'b'
   260  00FEA0  61                 	db	97	;'a'
   261  00FEA1  63                 	db	99	;'c'
   262  00FEA2  6B                 	db	107	;'k'
   263  00FEA3  20                 	db	32
   264  00FEA4  20                 	db	32
   265  00FEA5  20                 	db	32
   266  00FEA6  20                 	db	32
   267  00FEA7  20                 	db	32
   268  00FEA8  20                 	db	32
   269  00FEA9  20                 	db	32
   270  00FEAA  00                 	db	0
   271  00FEAB                     STR_28:
   272  00FEAB  42                 	db	66	;'B'
   273  00FEAC  4F                 	db	79	;'O'
   274  00FEAD  54                 	db	84	;'T'
   275  00FEAE  54                 	db	84	;'T'
   276  00FEAF  4C                 	db	76	;'L'
   277  00FEB0  45                 	db	69	;'E'
   278  00FEB1  20                 	db	32
   279  00FEB2  49                 	db	73	;'I'
   280  00FEB3  4E                 	db	78	;'N'
   281  00FEB4  53                 	db	83	;'S'
   282  00FEB5  49                 	db	73	;'I'
   283  00FEB6  44                 	db	68	;'D'
   284  00FEB7  45                 	db	69	;'E'
   285  00FEB8  20                 	db	32
   286  00FEB9  20                 	db	32
   287  00FEBA  20                 	db	32
   288  00FEBB  00                 	db	0
   289  00FEBC                     STR_10:
   290  00FEBC  41                 	db	65	;'A'
   291  00FEBD  63                 	db	99	;'c'
   292  00FEBE  63                 	db	99	;'c'
   293  00FEBF  65                 	db	101	;'e'
   294  00FEC0  73                 	db	115	;'s'
   295  00FEC1  73                 	db	115	;'s'
   296  00FEC2  20                 	db	32
   297  00FEC3  4C                 	db	76	;'L'
   298  00FEC4  61                 	db	97	;'a'
   299  00FEC5  73                 	db	115	;'s'
   300  00FEC6  74                 	db	116	;'t'
   301  00FEC7  20                 	db	32
   302  00FEC8  52                 	db	82	;'R'
   303  00FEC9  75                 	db	117	;'u'
   304  00FECA  6E                 	db	110	;'n'
   305  00FECB  20                 	db	32
   306  00FECC  00                 	db	0
   307  00FECD                     STR_11:
   308  00FECD  3C                 	db	60	;'<'
   309  00FECE  34                 	db	52	;'4'
   310  00FECF  20                 	db	32
   311  00FED0  20                 	db	32
   312  00FED1  53                 	db	83	;'S'
   313  00FED2  74                 	db	116	;'t'
   314  00FED3  61                 	db	97	;'a'
   315  00FED4  72                 	db	114	;'r'
   316  00FED5  74                 	db	116	;'t'
   317  00FED6  3A                 	db	58	;':'
   318  00FED7  20                 	db	32
   319  00FED8  41                 	db	65	;'A'
   320  00FED9  20                 	db	32
   321  00FEDA  20                 	db	32
   322  00FEDB  36                 	db	54	;'6'
   323  00FEDC  3E                 	db	62	;'>'
   324  00FEDD  00                 	db	0
   325  00FEDE                     STR_16:
   326  00FEDE  3C                 	db	60	;'<'
   327  00FEDF  34                 	db	52	;'4'
   328  00FEE0  20                 	db	32
   329  00FEE1  20                 	db	32
   330  00FEE2  4E                 	db	78	;'N'
   331  00FEE3  61                 	db	97	;'a'
   332  00FEE4  76                 	db	118	;'v'
   333  00FEE5  3A                 	db	58	;':'
   334  00FEE6  20                 	db	32
   335  00FEE7  41                 	db	65	;'A'
   336  00FEE8  2F                 	db	47
   337  00FEE9  44                 	db	68	;'D'
   338  00FEEA  20                 	db	32
   339  00FEEB  20                 	db	32
   340  00FEEC  36                 	db	54	;'6'
   341  00FEED  3E                 	db	62	;'>'
   342  00FEEE  00                 	db	0
   343  00FEEF                     STR_22:
   344  00FEEF  45                 	db	69	;'E'
   345  00FEF0  73                 	db	115	;'s'
   346  00FEF1  6B                 	db	107	;'k'
   347  00FEF2  61                 	db	97	;'a'
   348  00FEF3  20                 	db	32
   349  00FEF4  77                 	db	119	;'w'
   350  00FEF5  2F                 	db	47
   351  00FEF6  6F                 	db	111	;'o'
   352  00FEF7  20                 	db	32
   353  00FEF8  43                 	db	67	;'C'
   354  00FEF9  61                 	db	97	;'a'
   355  00FEFA  70                 	db	112	;'p'
   356  00FEFB  3A                 	db	58	;':'
   357  00FEFC  20                 	db	32
   358  00FEFD  25                 	db	37
   359  00FEFE  69                 	db	105	;'i'
   360  00FEFF  00                 	db	0
   361  00FF00                     STR_13:
   362  00FF00  20                 	db	32
   363  00FF01  20                 	db	32
   364  00FF02  20                 	db	32
   365  00FF03  50                 	db	80	;'P'
   366  00FF04  61                 	db	97	;'a'
   367  00FF05  73                 	db	115	;'s'
   368  00FF06  74                 	db	116	;'t'
   369  00FF07  20                 	db	32
   370  00FF08  52                 	db	82	;'R'
   371  00FF09  75                 	db	117	;'u'
   372  00FF0A  6E                 	db	110	;'n'
   373  00FF0B  20                 	db	32
   374  00FF0C  32                 	db	50	;'2'
   375  00FF0D  20                 	db	32
   376  00FF0E  20                 	db	32
   377  00FF0F  00                 	db	0
   378  00FF10                     STR_14:
   379  00FF10  20                 	db	32
   380  00FF11  20                 	db	32
   381  00FF12  20                 	db	32
   382  00FF13  50                 	db	80	;'P'
   383  00FF14  61                 	db	97	;'a'
   384  00FF15  73                 	db	115	;'s'
   385  00FF16  74                 	db	116	;'t'
   386  00FF17  20                 	db	32
   387  00FF18  52                 	db	82	;'R'
   388  00FF19  75                 	db	117	;'u'
   389  00FF1A  6E                 	db	110	;'n'
   390  00FF1B  20                 	db	32
   391  00FF1C  33                 	db	51	;'3'
   392  00FF1D  20                 	db	32
   393  00FF1E  20                 	db	32
   394  00FF1F  00                 	db	0
   395  00FF20                     STR_15:
   396  00FF20  20                 	db	32
   397  00FF21  20                 	db	32
   398  00FF22  20                 	db	32
   399  00FF23  50                 	db	80	;'P'
   400  00FF24  61                 	db	97	;'a'
   401  00FF25  73                 	db	115	;'s'
   402  00FF26  74                 	db	116	;'t'
   403  00FF27  20                 	db	32
   404  00FF28  52                 	db	82	;'R'
   405  00FF29  75                 	db	117	;'u'
   406  00FF2A  6E                 	db	110	;'n'
   407  00FF2B  20                 	db	32
   408  00FF2C  34                 	db	52	;'4'
   409  00FF2D  20                 	db	32
   410  00FF2E  20                 	db	32
   411  00FF2F  00                 	db	0
   412  00FF30                     STR_26:
   413  00FF30  2E                 	db	46
   414  00FF31  2E                 	db	46
   415  00FF32  2E                 	db	46
   416  00FF33  4F                 	db	79	;'O'
   417  00FF34  70                 	db	112	;'p'
   418  00FF35  65                 	db	101	;'e'
   419  00FF36  72                 	db	114	;'r'
   420  00FF37  61                 	db	97	;'a'
   421  00FF38  74                 	db	116	;'t'
   422  00FF39  69                 	db	105	;'i'
   423  00FF3A  6E                 	db	110	;'n'
   424  00FF3B  67                 	db	103	;'g'
   425  00FF3C  2E                 	db	46
   426  00FF3D  2E                 	db	46
   427  00FF3E  2E                 	db	46
   428  00FF3F  00                 	db	0
   429  00FF40                     STR_21:
   430  00FF40  45                 	db	69	;'E'
   431  00FF41  73                 	db	115	;'s'
   432  00FF42  6B                 	db	107	;'k'
   433  00FF43  61                 	db	97	;'a'
   434  00FF44  20                 	db	32
   435  00FF45  77                 	db	119	;'w'
   436  00FF46  2F                 	db	47
   437  00FF47  20                 	db	32
   438  00FF48  43                 	db	67	;'C'
   439  00FF49  61                 	db	97	;'a'
   440  00FF4A  70                 	db	112	;'p'
   441  00FF4B  3A                 	db	58	;':'
   442  00FF4C  20                 	db	32
   443  00FF4D  25                 	db	37
   444  00FF4E  69                 	db	105	;'i'
   445  00FF4F  00                 	db	0
   446  00FF50                     STR_20:
   447  00FF50  59                 	db	89	;'Y'
   448  00FF51  6F                 	db	111	;'o'
   449  00FF52  70                 	db	112	;'p'
   450  00FF53  20                 	db	32
   451  00FF54  77                 	db	119	;'w'
   452  00FF55  2F                 	db	47
   453  00FF56  6F                 	db	111	;'o'
   454  00FF57  20                 	db	32
   455  00FF58  43                 	db	67	;'C'
   456  00FF59  61                 	db	97	;'a'
   457  00FF5A  70                 	db	112	;'p'
   458  00FF5B  3A                 	db	58	;':'
   459  00FF5C  20                 	db	32
   460  00FF5D  25                 	db	37
   461  00FF5E  69                 	db	105	;'i'
   462  00FF5F  00                 	db	0
   463  00FF60                     STR_17:
   464  00FF60  54                 	db	84	;'T'
   465  00FF61  69                 	db	105	;'i'
   466  00FF62  6D                 	db	109	;'m'
   467  00FF63  65                 	db	101	;'e'
   468  00FF64  20                 	db	32
   469  00FF65  74                 	db	116	;'t'
   470  00FF66  61                 	db	97	;'a'
   471  00FF67  6B                 	db	107	;'k'
   472  00FF68  65                 	db	101	;'e'
   473  00FF69  6E                 	db	110	;'n'
   474  00FF6A  3A                 	db	58	;':'
   475  00FF6B  20                 	db	32
   476  00FF6C  25                 	db	37
   477  00FF6D  69                 	db	105	;'i'
   478  00FF6E  73                 	db	115	;'s'
   479  00FF6F  00                 	db	0
   480  00FF70                     STR_2:
   481  00FF70  25                 	db	37
   482  00FF71  30                 	db	48	;'0'
   483  00FF72  32                 	db	50	;'2'
   484  00FF73  78                 	db	120	;'x'
   485  00FF74  3A                 	db	58	;':'
   486  00FF75  25                 	db	37
   487  00FF76  30                 	db	48	;'0'
   488  00FF77  32                 	db	50	;'2'
   489  00FF78  78                 	db	120	;'x'
   490  00FF79  3A                 	db	58	;':'
   491  00FF7A  25                 	db	37
   492  00FF7B  30                 	db	48	;'0'
   493  00FF7C  32                 	db	50	;'2'
   494  00FF7D  78                 	db	120	;'x'
   495  00FF7E  00                 	db	0
   496  00FF7F                     STR_27:
   497  00FF7F  4E                 	db	78	;'N'
   498  00FF80  4F                 	db	79	;'O'
   499  00FF81  20                 	db	32
   500  00FF82  42                 	db	66	;'B'
   501  00FF83  4F                 	db	79	;'O'
   502  00FF84  54                 	db	84	;'T'
   503  00FF85  54                 	db	84	;'T'
   504  00FF86  4C                 	db	76	;'L'
   505  00FF87  45                 	db	69	;'E'
   506  00FF88  20                 	db	32
   507  00FF89  20                 	db	32
   508  00FF8A  20                 	db	32
   509  00FF8B  20                 	db	32
   510  00FF8C  00                 	db	0
   511  00FF8D                     STR_9:
   512  00FF8D  41                 	db	65	;'A'
   513  00FF8E  63                 	db	99	;'c'
   514  00FF8F  63                 	db	99	;'c'
   515  00FF90  65                 	db	101	;'e'
   516  00FF91  73                 	db	115	;'s'
   517  00FF92  73                 	db	115	;'s'
   518  00FF93  20                 	db	32
   519  00FF94  45                 	db	69	;'E'
   520  00FF95  45                 	db	69	;'E'
   521  00FF96  50                 	db	80	;'P'
   522  00FF97  52                 	db	82	;'R'
   523  00FF98  4F                 	db	79	;'O'
   524  00FF99  4D                 	db	77	;'M'
   525  00FF9A  00                 	db	0
   526  00FF9B                     STR_6:
   527  00FF9B  42                 	db	66	;'B'
   528  00FF9C  65                 	db	101	;'e'
   529  00FF9D  67                 	db	103	;'g'
   530  00FF9E  69                 	db	105	;'i'
   531  00FF9F  6E                 	db	110	;'n'
   532  00FFA0  20                 	db	32
   533  00FFA1  53                 	db	83	;'S'
   534  00FFA2  6F                 	db	111	;'o'
   535  00FFA3  72                 	db	114	;'r'
   536  00FFA4  74                 	db	116	;'t'
   537  00FFA5  69                 	db	105	;'i'
   538  00FFA6  6E                 	db	110	;'n'
   539  00FFA7  67                 	db	103	;'g'
   540  00FFA8  00                 	db	0
   541  00FFA9                     STR_19:
   542  00FFA9  59                 	db	89	;'Y'
   543  00FFAA  6F                 	db	111	;'o'
   544  00FFAB  70                 	db	112	;'p'
   545  00FFAC  20                 	db	32
   546  00FFAD  77                 	db	119	;'w'
   547  00FFAE  2F                 	db	47
   548  00FFAF  43                 	db	67	;'C'
   549  00FFB0  61                 	db	97	;'a'
   550  00FFB1  70                 	db	112	;'p'
   551  00FFB2  3A                 	db	58	;':'
   552  00FFB3  20                 	db	32
   553  00FFB4  25                 	db	37
   554  00FFB5  69                 	db	105	;'i'
   555  00FFB6  00                 	db	0
   556  00FFB7                     STR_18:
   557  00FFB7  23                 	db	35
   558  00FFB8  20                 	db	32
   559  00FFB9  42                 	db	66	;'B'
   560  00FFBA  6F                 	db	111	;'o'
   561  00FFBB  74                 	db	116	;'t'
   562  00FFBC  74                 	db	116	;'t'
   563  00FFBD  6C                 	db	108	;'l'
   564  00FFBE  65                 	db	101	;'e'
   565  00FFBF  73                 	db	115	;'s'
   566  00FFC0  3A                 	db	58	;':'
   567  00FFC1  20                 	db	32
   568  00FFC2  25                 	db	37
   569  00FFC3  69                 	db	105	;'i'
   570  00FFC4  00                 	db	0
   571  00FFC5                     STR_32:
   572  00FFC5  20                 	db	32
   573  00FFC6  77                 	db	119	;'w'
   574  00FFC7  2F                 	db	47
   575  00FFC8  6F                 	db	111	;'o'
   576  00FFC9  20                 	db	32
   577  00FFCA  43                 	db	67	;'C'
   578  00FFCB  61                 	db	97	;'a'
   579  00FFCC  70                 	db	112	;'p'
   580  00FFCD  20                 	db	32
   581  00FFCE  20                 	db	32
   582  00FFCF  20                 	db	32
   583  00FFD0  20                 	db	32
   584  00FFD1  00                 	db	0
   585  00FFD2                     STR_1:
   586  00FFD2  25                 	db	37
   587  00FFD3  30                 	db	48	;'0'
   588  00FFD4  32                 	db	50	;'2'
   589  00FFD5  78                 	db	120	;'x'
   590  00FFD6  2F                 	db	47
   591  00FFD7  25                 	db	37
   592  00FFD8  30                 	db	48	;'0'
   593  00FFD9  32                 	db	50	;'2'
   594  00FFDA  78                 	db	120	;'x'
   595  00FFDB  20                 	db	32
   596  00FFDC  20                 	db	32
   597  00FFDD  20                 	db	32
   598  00FFDE  00                 	db	0
   599  00FFDF                     STR_31:
   600  00FFDF  20                 	db	32
   601  00FFE0  77                 	db	119	;'w'
   602  00FFE1  2F                 	db	47
   603  00FFE2  20                 	db	32
   604  00FFE3  43                 	db	67	;'C'
   605  00FFE4  61                 	db	97	;'a'
   606  00FFE5  70                 	db	112	;'p'
   607  00FFE6  20                 	db	32
   608  00FFE7  20                 	db	32
   609  00FFE8  20                 	db	32
   610  00FFE9  20                 	db	32
   611  00FFEA  00                 	db	0
   612  00FFEB                     STR_12:
   613  00FFEB  52                 	db	82	;'R'
   614  00FFEC  65                 	db	101	;'e'
   615  00FFED  63                 	db	99	;'c'
   616  00FFEE  65                 	db	101	;'e'
   617  00FFEF  6E                 	db	110	;'n'
   618  00FFF0  74                 	db	116	;'t'
   619  00FFF1  20                 	db	32
   620  00FFF2  52                 	db	82	;'R'
   621  00FFF3  75                 	db	117	;'u'
   622  00FFF4  6E                 	db	110	;'n'
   623  00FFF5  00                 	db	0
   624  00FFF6                     STR_30:
   625  00FFF6  45                 	db	69	;'E'
   626  00FFF7  53                 	db	83	;'S'
   627  00FFF8  4B                 	db	75	;'K'
   628  00FFF9  41                 	db	65	;'A'
   629  00FFFA  00                 	db	0
   630  00FFFB                     STR_29:
   631  00FFFB  59                 	db	89	;'Y'
   632  00FFFC  4F                 	db	79	;'O'
   633  00FFFD  50                 	db	80	;'P'
   634  00FFFE  00                 	db	0
   635  0000                     
   636                           ; #config settings
   637  00FFFF  00                 	db	0	; dummy byte at the end
   638  0000                     
   639                           	psect	cinit
   640  00E598                     __pcinit:
   641                           	opt stack 0
   642  00E598                     start_initialization:
   643                           	opt stack 0
   644  00E598                     __initialization:
   645                           	opt stack 0
   646                           
   647                           ; Initialize objects allocated to COMRAM (12 bytes)
   648                           ; load TBLPTR registers with __pidataCOMRAM
   649  00E598  0E5E               	movlw	low __pidataCOMRAM
   650  00E59A  6EF6               	movwf	tblptrl,c
   651  00E59C  0EE4               	movlw	high __pidataCOMRAM
   652  00E59E  6EF7               	movwf	tblptrh,c
   653  00E5A0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   654  00E5A2  6EF8               	movwf	tblptru,c
   655  00E5A4  EE00  F069         	lfsr	0,__pdataCOMRAM
   656  00E5A8  EE10 F00C          	lfsr	1,12
   657  00E5AC                     copy_data0:
   658  00E5AC  0009               	tblrd		*+
   659  00E5AE  CFF5 FFEE          	movff	tablat,postinc0
   660  00E5B2  50E5               	movf	postdec1,w,c
   661  00E5B4  50E1               	movf	fsr1l,w,c
   662  00E5B6  E1FA               	bnz	copy_data0
   663                           
   664                           ; Clear objects allocated to COMRAM (16 bytes)
   665  00E5B8  EE00  F059         	lfsr	0,__pbssCOMRAM
   666  00E5BC  0E10               	movlw	16
   667  00E5BE                     clear_0:
   668  00E5BE  6AEE               	clrf	postinc0,c
   669  00E5C0  06E8               	decf	wreg,f,c
   670  00E5C2  E1FD               	bnz	clear_0
   671  00E5C4                     end_of_initialization:
   672                           	opt stack 0
   673  00E5C4                     __end_of__initialization:
   674                           	opt stack 0
   675  00E5C4  0100               	movlb	0
   676  00E5C6  EF67  F078         	goto	_main	;jump to C main() function
   677                           tblptru	equ	0xFF8
   678                           tblptrh	equ	0xFF7
   679                           tblptrl	equ	0xFF6
   680                           tablat	equ	0xFF5
   681                           postinc0	equ	0xFEE
   682                           wreg	equ	0xFE8
   683                           postdec1	equ	0xFE5
   684                           fsr1l	equ	0xFE1
   685                           
   686                           	psect	bssCOMRAM
   687  000059                     __pbssCOMRAM:
   688                           	opt stack 0
   689  000059                     _lastRunTime:
   690                           	opt stack 0
   691  000059                     	ds	7
   692  000060                     _time:
   693                           	opt stack 0
   694  000060                     	ds	7
   695  000067                     _initScreenState:
   696                           	opt stack 0
   697  000067                     	ds	2
   698                           tblptru	equ	0xFF8
   699                           tblptrh	equ	0xFF7
   700                           tblptrl	equ	0xFF6
   701                           tablat	equ	0xFF5
   702                           postinc0	equ	0xFEE
   703                           wreg	equ	0xFE8
   704                           postdec1	equ	0xFE5
   705                           fsr1l	equ	0xFE1
   706                           
   707                           	psect	dataCOMRAM
   708  000069                     __pdataCOMRAM:
   709                           	opt stack 0
   710  000069                     _runInfo:
   711                           	opt stack 0
   712  000069                     	ds	12
   713                           tblptru	equ	0xFF8
   714                           tblptrh	equ	0xFF7
   715                           tblptrl	equ	0xFF6
   716                           tablat	equ	0xFF5
   717                           postinc0	equ	0xFEE
   718                           wreg	equ	0xFE8
   719                           postdec1	equ	0xFE5
   720                           fsr1l	equ	0xFE1
   721                           
   722                           	psect	cstackCOMRAM
   723  000001                     __pcstackCOMRAM:
   724                           	opt stack 0
   725  000001                     ??_pushBottle:
   726  000001                     ??_isdigit:
   727  000001                     ??_I2C_Master_Wait:
   728  000001                     ?___wmul:
   729                           	opt stack 0
   730  000001                     ?___lwdiv:
   731                           	opt stack 0
   732  000001                     ?___lldiv:
   733                           	opt stack 0
   734  000001                     lcdNibble@temp:
   735                           	opt stack 0
   736  000001                     moveBinServo@num:
   737                           	opt stack 0
   738  000001                     ___wmul@multiplier:
   739                           	opt stack 0
   740  000001                     ___lwdiv@dividend:
   741                           	opt stack 0
   742  000001                     ___lldiv@dividend:
   743                           	opt stack 0
   744                           
   745                           ; 4 bytes @ 0x0
   746  000001                     	ds	1
   747  000002                     lcdNibble@data:
   748                           	opt stack 0
   749  000002                     I2C_Master_Read@a:
   750                           	opt stack 0
   751  000002                     _isdigit$982:
   752                           	opt stack 0
   753  000002                     I2C_Master_Write@d:
   754                           	opt stack 0
   755                           
   756                           ; 2 bytes @ 0x1
   757  000002                     	ds	1
   758  000003                     ??_moveBinServo:
   759  000003                     lcdInst@data:
   760                           	opt stack 0
   761  000003                     putch@data:
   762                           	opt stack 0
   763  000003                     I2C_Master_Read@temp:
   764                           	opt stack 0
   765  000003                     isdigit@c:
   766                           	opt stack 0
   767  000003                     pushBottle@i:
   768                           	opt stack 0
   769  000003                     ___wmul@multiplicand:
   770                           	opt stack 0
   771  000003                     ___lwdiv@divisor:
   772                           	opt stack 0
   773                           
   774                           ; 2 bytes @ 0x2
   775  000003                     	ds	1
   776  000004                     ??_initializeLCDScreen:
   777  000004                     updateCurrentTime@i:
   778                           	opt stack 0
   779                           
   780                           ; 1 bytes @ 0x3
   781  000004                     	ds	1
   782  000005                     moveBinServo@i:
   783                           	opt stack 0
   784  000005                     ___wmul@product:
   785                           	opt stack 0
   786  000005                     ___lwdiv@quotient:
   787                           	opt stack 0
   788  000005                     ___lldiv@divisor:
   789                           	opt stack 0
   790                           
   791                           ; 4 bytes @ 0x4
   792  000005                     	ds	2
   793  000007                     ?_atoi:
   794                           	opt stack 0
   795  000007                     ___lwdiv@counter:
   796                           	opt stack 0
   797  000007                     Eeprom_ReadByte@address:
   798                           	opt stack 0
   799  000007                     Eeprom_WriteByte@address:
   800                           	opt stack 0
   801  000007                     atoi@s:
   802                           	opt stack 0
   803                           
   804                           ; 2 bytes @ 0x6
   805  000007                     	ds	1
   806  000008                     ?___lwmod:
   807                           	opt stack 0
   808  000008                     ___lwmod@dividend:
   809                           	opt stack 0
   810                           
   811                           ; 2 bytes @ 0x7
   812  000008                     	ds	1
   813  000009                     ??_atoi:
   814  000009                     Eeprom_WriteByte@data:
   815                           	opt stack 0
   816  000009                     getEEPROM@num:
   817                           	opt stack 0
   818  000009                     ___lldiv@quotient:
   819                           	opt stack 0
   820                           
   821                           ; 4 bytes @ 0x8
   822  000009                     	ds	1
   823  00000A                     ??_saveEEPROM:
   824  00000A                     ___lwmod@divisor:
   825                           	opt stack 0
   826                           
   827                           ; 2 bytes @ 0x9
   828  00000A                     	ds	1
   829  00000B                     ??_getEEPROM:
   830  00000B                     atoi@sign:
   831                           	opt stack 0
   832  00000B                     saveEEPROM@temp:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0xA
   836  00000B                     	ds	1
   837  00000C                     ___lwmod@counter:
   838                           	opt stack 0
   839  00000C                     atoi@a:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0xB
   843  00000C                     	ds	1
   844  00000D                     ?__doprnt:
   845                           	opt stack 0
   846  00000D                     ___lldiv@counter:
   847                           	opt stack 0
   848  00000D                     saveEEPROM@i:
   849                           	opt stack 0
   850  00000D                     __doprnt@pb:
   851                           	opt stack 0
   852                           
   853                           ; 2 bytes @ 0xC
   854  00000D                     	ds	1
   855  00000E                     initializeRTC@c:
   856                           	opt stack 0
   857                           
   858                           ; 4 bytes @ 0xD
   859  00000E                     	ds	1
   860  00000F                     getEEPROM@i:
   861                           	opt stack 0
   862  00000F                     __doprnt@f:
   863                           	opt stack 0
   864                           
   865                           ; 2 bytes @ 0xE
   866  00000F                     	ds	2
   867  000011                     __doprnt@ap:
   868                           	opt stack 0
   869                           
   870                           ; 2 bytes @ 0x10
   871  000011                     	ds	1
   872  000012                     ??_initializeRTC:
   873                           
   874                           ; 1 bytes @ 0x11
   875  000012                     	ds	1
   876  000013                     ??__doprnt:
   877                           
   878                           ; 1 bytes @ 0x12
   879  000013                     	ds	3
   880  000016                     
   881                           ; 1 bytes @ 0x15
   882  000016                     	ds	1
   883  000017                     __doprnt@idx:
   884                           	opt stack 0
   885                           
   886                           ; 1 bytes @ 0x16
   887  000017                     	ds	1
   888  000018                     __doprnt@prec:
   889                           	opt stack 0
   890                           
   891                           ; 1 bytes @ 0x17
   892  000018                     	ds	1
   893  000019                     __doprnt@val:
   894                           	opt stack 0
   895                           
   896                           ; 2 bytes @ 0x18
   897  000019                     	ds	2
   898  00001B                     __doprnt@flag:
   899                           	opt stack 0
   900                           
   901                           ; 1 bytes @ 0x1A
   902  00001B                     	ds	1
   903  00001C                     __doprnt@width:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0x1B
   907  00001C                     	ds	2
   908  00001E                     __doprnt@c:
   909                           	opt stack 0
   910                           
   911                           ; 1 bytes @ 0x1D
   912  00001E                     	ds	1
   913  00001F                     ?_printf:
   914                           	opt stack 0
   915  00001F                     ?_sprintf:
   916                           	opt stack 0
   917  00001F                     printf@f:
   918                           	opt stack 0
   919  00001F                     sprintf@wh:
   920                           	opt stack 0
   921                           
   922                           ; 2 bytes @ 0x1E
   923  00001F                     	ds	2
   924  000021                     sprintf@f:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x20
   928  000021                     	ds	4
   929  000025                     sprintf@ap:
   930                           	opt stack 0
   931                           
   932                           ; 2 bytes @ 0x24
   933  000025                     	ds	2
   934  000027                     printf@ap:
   935                           	opt stack 0
   936  000027                     sprintf@pb:
   937                           	opt stack 0
   938                           
   939                           ; 4 bytes @ 0x26
   940  000027                     	ds	2
   941  000029                     printf@pb:
   942                           	opt stack 0
   943                           
   944                           ; 4 bytes @ 0x28
   945  000029                     	ds	2
   946  00002B                     ?_getCurrentTime:
   947                           	opt stack 0
   948                           
   949                           ; 2 bytes @ 0x2A
   950  00002B                     	ds	2
   951  00002D                     ??_getUserInput:
   952  00002D                     getCurrentTime@currentTime:
   953                           	opt stack 0
   954  00002D                     displayMainProgramLcdScreen@num:
   955                           	opt stack 0
   956  00002D                     update_eeprom_screen_state@num:
   957                           	opt stack 0
   958  00002D                     update_past_run_screen_state@num:
   959                           	opt stack 0
   960                           
   961                           ; 2 bytes @ 0x2C
   962  00002D                     	ds	2
   963  00002F                     ??_displayMainProgramLcdScreen:
   964  00002F                     ??_update_eeprom_screen_state:
   965  00002F                     ??_update_past_run_screen_state:
   966  00002F                     getUserInput@keypress:
   967                           	opt stack 0
   968  00002F                     _getCurrentTime$1352:
   969                           	opt stack 0
   970                           
   971                           ; 2 bytes @ 0x2E
   972  00002F                     	ds	2
   973  000031                     ??_past_run_access:
   974  000031                     getCurrentTime@str:
   975                           	opt stack 0
   976                           
   977                           ; 2 bytes @ 0x30
   978  000031                     	ds	1
   979  000032                     past_run_access@temp:
   980                           	opt stack 0
   981                           
   982                           ; 1 bytes @ 0x31
   983  000032                     	ds	1
   984  000033                     ??_operation:
   985  000033                     past_run_access@screen_state:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x32
   989  000033                     	ds	2
   990  000035                     ??_EEPROM:
   991  000035                     operation@startingTime:
   992                           	opt stack 0
   993                           
   994                           ; 2 bytes @ 0x34
   995  000035                     	ds	2
   996  000037                     operation@endingTime:
   997                           	opt stack 0
   998  000037                     EEPROM@timeStorage:
   999                           	opt stack 0
  1000                           
  1001                           ; 14 bytes @ 0x36
  1002  000037                     	ds	2
  1003  000039                     operation@temp:
  1004                           	opt stack 0
  1005                           
  1006                           ; 1 bytes @ 0x38
  1007  000039                     	ds	1
  1008  00003A                     operation@bottle_type:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x39
  1012  00003A                     	ds	2
  1013  00003C                     operation@bottle_cap:
  1014                           	opt stack 0
  1015                           
  1016                           ; 2 bytes @ 0x3B
  1017  00003C                     	ds	2
  1018  00003E                     operation@bottle:
  1019                           	opt stack 0
  1020                           
  1021                           ; 2 bytes @ 0x3D
  1022  00003E                     	ds	2
  1023  000040                     operation@i:
  1024                           	opt stack 0
  1025                           
  1026                           ; 2 bytes @ 0x3F
  1027  000040                     	ds	5
  1028  000045                     EEPROM@storage:
  1029                           	opt stack 0
  1030                           
  1031                           ; 12 bytes @ 0x44
  1032  000045                     	ds	12
  1033  000051                     EEPROM@temp:
  1034                           	opt stack 0
  1035                           
  1036                           ; 1 bytes @ 0x50
  1037  000051                     	ds	1
  1038  000052                     EEPROM@screen_state:
  1039                           	opt stack 0
  1040                           
  1041                           ; 2 bytes @ 0x51
  1042  000052                     	ds	2
  1043  000054                     EEPROM@i:
  1044                           	opt stack 0
  1045                           
  1046                           ; 2 bytes @ 0x53
  1047  000054                     	ds	2
  1048  000056                     ??_main:
  1049                           
  1050                           ; 1 bytes @ 0x55
  1051  000056                     	ds	2
  1052  000058                     main@temp:
  1053                           	opt stack 0
  1054                           
  1055                           ; 1 bytes @ 0x57
  1056  000058                     	ds	1
  1057                           tblptru	equ	0xFF8
  1058                           tblptrh	equ	0xFF7
  1059                           tblptrl	equ	0xFF6
  1060                           tablat	equ	0xFF5
  1061                           postinc0	equ	0xFEE
  1062                           wreg	equ	0xFE8
  1063                           postdec1	equ	0xFE5
  1064                           fsr1l	equ	0xFE1
  1065                           
  1066 ;;
  1067 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1068 ;;
  1069 ;; *************** function _main *****************
  1070 ;; Defined at:
  1071 ;;		line 31 in file "main.c"
  1072 ;; Parameters:    Size  Location     Type
  1073 ;;		None
  1074 ;; Auto vars:     Size  Location     Type
  1075 ;;  temp            1   87[COMRAM] unsigned char 
  1076 ;; Return value:  Size  Location     Type
  1077 ;;                  1    wreg      void 
  1078 ;; Registers used:
  1079 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1080 ;; Tracked objects:
  1081 ;;		On entry : 0/0
  1082 ;;		On exit  : 0/0
  1083 ;;		Unchanged: 0/0
  1084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1086 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1087 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1088 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1089 ;;Total ram usage:        3 bytes
  1090 ;; Hardware stack levels required when called:    8
  1091 ;; This function calls:
  1092 ;;		_EEPROM
  1093 ;;		_displayMainProgramLcdScreen
  1094 ;;		_getUserInput
  1095 ;;		_initializePicSettings
  1096 ;;		_moveBinServo
  1097 ;;		_operation
  1098 ;;		_past_run_access
  1099 ;; This function is called by:
  1100 ;;		Startup code after reset
  1101 ;; This function uses a non-reentrant model
  1102 ;;
  1103                           
  1104                           	psect	text0
  1105  00F0CE                     __ptext0:
  1106                           	opt stack 0
  1107  00F0CE                     _main:
  1108                           	opt stack 23
  1109                           
  1110                           ;main.c: 32: initializePicSettings();
  1111                           
  1112                           ;incstack = 0
  1113  00F0CE  EC58  F072         	call	_initializePicSettings	;wreg free
  1114                           
  1115                           ;main.c: 34: displayMainProgramLcdScreen(initScreenState);
  1116  00F0D2  C067  F02D         	movff	_initScreenState,displayMainProgramLcdScreen@num
  1117  00F0D6  C068  F02E         	movff	_initScreenState+1,displayMainProgramLcdScreen@num+1
  1118  00F0DA  EC31  F075         	call	_displayMainProgramLcdScreen	;wreg free
  1119  00F0DE                     l3031:
  1120                           
  1121                           ;main.c: 37: unsigned char temp = keys[getUserInput()];
  1122  00F0DE  EC19  F074         	call	_getUserInput	;wreg free
  1123  00F0E2  6E56               	movwf	??_main& (0+255),c
  1124  00F0E4  5056               	movf	??_main,w,c
  1125  00F0E6  0D01               	mullw	1
  1126  00F0E8  0E31               	movlw	low _keys
  1127  00F0EA  24F3               	addwf	prodl,w,c
  1128  00F0EC  6EF6               	movwf	tblptrl,c
  1129  00F0EE  0EFE               	movlw	high _keys
  1130  00F0F0  20F4               	addwfc	prodh,w,c
  1131  00F0F2  6EF7               	movwf	tblptrh,c
  1132  00F0F4                     	if	1	;There are 3 active tblptr bytes
  1133  00F0F4  6AF8               	clrf	tblptru,c
  1134  00F0F6  0E00               	movlw	low (__mediumconst shr (0+16))
  1135  00F0F8  22F8               	addwfc	tblptru,f,c
  1136  00F0FA                     	endif
  1137  00F0FA  0008               	tblrd		*
  1138  00F0FC  CFF5 F058          	movff	tablat,main@temp
  1139                           
  1140                           ;main.c: 38: if (temp == keys[3]){
  1141  00F100  0E34               	movlw	low (_keys+3)
  1142  00F102  6EF6               	movwf	tblptrl,c
  1143  00F104  0EFE               	movlw	high (_keys+3)
  1144  00F106  6EF7               	movwf	tblptrh,c
  1145  00F108                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1146  00F108  6AF8               	clrf	tblptru,c
  1147  00F10A                     	endif
  1148  00F10A                     	if	0	;tblptru may be non-zero
  1149  00F10A                     	endif
  1150  00F10A  0008               	tblrd		*
  1151  00F10C  50F5               	movf	tablat,w,c
  1152  00F10E  1858               	xorwf	main@temp,w,c
  1153  00F110  B4D8               	btfsc	status,2,c
  1154  00F112  D023               	goto	l3047
  1155  00F114  D03E               	goto	l3051
  1156  00F116                     l3037:
  1157  00F116  EC17  F07B         	call	_operation	;wreg free
  1158                           
  1159                           ;main.c: 41: break;
  1160  00F11A  D034               	goto	l3049
  1161  00F11C                     l3039:
  1162  00F11C  0E00               	movlw	0
  1163  00F11E  6E02               	movwf	moveBinServo@num+1,c
  1164  00F120  0E00               	movlw	0
  1165  00F122  6E01               	movwf	moveBinServo@num,c
  1166  00F124  ECCC  F077         	call	_moveBinServo	;wreg free
  1167                           
  1168                           ;main.c: 43: moveBinServo(1);
  1169  00F128  0E00               	movlw	0
  1170  00F12A  6E02               	movwf	moveBinServo@num+1,c
  1171  00F12C  0E01               	movlw	1
  1172  00F12E  6E01               	movwf	moveBinServo@num,c
  1173  00F130  ECCC  F077         	call	_moveBinServo	;wreg free
  1174                           
  1175                           ;main.c: 44: moveBinServo(2);
  1176  00F134  0E00               	movlw	0
  1177  00F136  6E02               	movwf	moveBinServo@num+1,c
  1178  00F138  0E02               	movlw	2
  1179  00F13A  6E01               	movwf	moveBinServo@num,c
  1180  00F13C  ECCC  F077         	call	_moveBinServo	;wreg free
  1181                           
  1182                           ;main.c: 45: moveBinServo(3);
  1183  00F140  0E00               	movlw	0
  1184  00F142  6E02               	movwf	moveBinServo@num+1,c
  1185  00F144  0E03               	movlw	3
  1186  00F146  6E01               	movwf	moveBinServo@num,c
  1187  00F148  ECCC  F077         	call	_moveBinServo	;wreg free
  1188                           
  1189                           ;main.c: 46: break;
  1190  00F14C  D01B               	goto	l3049
  1191  00F14E                     l3041:
  1192  00F14E  EC0A  F07A         	call	_EEPROM	;wreg free
  1193                           
  1194                           ;main.c: 48: break;
  1195  00F152  D018               	goto	l3049
  1196  00F154                     l3043:
  1197  00F154  EC8E  F075         	call	_past_run_access	;wreg free
  1198                           
  1199                           ;main.c: 51: }
  1200                           
  1201                           ;main.c: 50: break;
  1202  00F158  D015               	goto	l3049
  1203  00F15A                     l3047:
  1204  00F15A  C067  F056         	movff	_initScreenState,??_main
  1205  00F15E  C068  F057         	movff	_initScreenState+1,??_main+1
  1206                           
  1207                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1208                           ; Switch size 1, requested type "space"
  1209                           ; Number of cases is 1, Range of values is 0 to 0
  1210                           ; switch strategies available:
  1211                           ; Name         Instructions Cycles
  1212                           ; simple_byte            4     3 (average)
  1213                           ;	Chosen strategy is simple_byte
  1214  00F162  5057               	movf	??_main+1,w,c
  1215  00F164  0A00               	xorlw	0	; case 0
  1216  00F166  A4D8               	btfss	status,2,c
  1217  00F168  D00D               	goto	l3049
  1218                           
  1219                           ; Switch size 1, requested type "space"
  1220                           ; Number of cases is 4, Range of values is 0 to 3
  1221                           ; switch strategies available:
  1222                           ; Name         Instructions Cycles
  1223                           ; simple_byte           13     7 (average)
  1224                           ;	Chosen strategy is simple_byte
  1225  00F16A  5056               	movf	??_main,w,c
  1226  00F16C  0A00               	xorlw	0	; case 0
  1227  00F16E  B4D8               	btfsc	status,2,c
  1228  00F170  D7D2               	goto	l3037
  1229  00F172  0A01               	xorlw	1	; case 1
  1230  00F174  B4D8               	btfsc	status,2,c
  1231  00F176  D7D2               	goto	l3039
  1232  00F178  0A03               	xorlw	3	; case 2
  1233  00F17A  B4D8               	btfsc	status,2,c
  1234  00F17C  D7E8               	goto	l3041
  1235  00F17E  0A01               	xorlw	1	; case 3
  1236  00F180  B4D8               	btfsc	status,2,c
  1237  00F182  D7E8               	goto	l3043
  1238  00F184                     l3049:
  1239                           
  1240                           ;main.c: 52: displayMainProgramLcdScreen(initScreenState);
  1241  00F184  C067  F02D         	movff	_initScreenState,displayMainProgramLcdScreen@num
  1242  00F188  C068  F02E         	movff	_initScreenState+1,displayMainProgramLcdScreen@num+1
  1243  00F18C  EC31  F075         	call	_displayMainProgramLcdScreen	;wreg free
  1244                           
  1245                           ;main.c: 53: }else if (temp == keys[4]){
  1246  00F190  D039               	goto	l3071
  1247  00F192                     l3051:
  1248  00F192  0E35               	movlw	low (_keys+4)
  1249  00F194  6EF6               	movwf	tblptrl,c
  1250  00F196  0EFE               	movlw	high (_keys+4)
  1251  00F198  6EF7               	movwf	tblptrh,c
  1252  00F19A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1253  00F19A  6AF8               	clrf	tblptru,c
  1254  00F19C                     	endif
  1255  00F19C                     	if	0	;tblptru may be non-zero
  1256  00F19C                     	endif
  1257  00F19C  0008               	tblrd		*
  1258  00F19E  50F5               	movf	tablat,w,c
  1259  00F1A0  1858               	xorwf	main@temp,w,c
  1260  00F1A2  A4D8               	btfss	status,2,c
  1261  00F1A4  D013               	goto	l3061
  1262                           
  1263                           ;main.c: 54: if (initScreenState == 0){
  1264  00F1A6  5067               	movf	_initScreenState,w,c
  1265  00F1A8  1068               	iorwf	_initScreenState+1,w,c
  1266  00F1AA  A4D8               	btfss	status,2,c
  1267  00F1AC  D005               	goto	l3057
  1268                           
  1269                           ;main.c: 55: initScreenState = 3;
  1270  00F1AE  0E00               	movlw	0
  1271  00F1B0  6E68               	movwf	_initScreenState+1,c
  1272  00F1B2  0E03               	movlw	3
  1273  00F1B4  6E67               	movwf	_initScreenState,c
  1274                           
  1275                           ;main.c: 56: }else{
  1276  00F1B6  D003               	goto	l3059
  1277  00F1B8                     l3057:
  1278                           
  1279                           ;main.c: 57: initScreenState -= 1;
  1280  00F1B8  0667               	decf	_initScreenState,f,c
  1281  00F1BA  A0D8               	btfss	status,0,c
  1282  00F1BC  0668               	decf	_initScreenState+1,f,c
  1283  00F1BE                     l3059:
  1284                           
  1285                           ;main.c: 58: }
  1286                           ;main.c: 59: displayMainProgramLcdScreen(initScreenState);
  1287  00F1BE  C067  F02D         	movff	_initScreenState,displayMainProgramLcdScreen@num
  1288  00F1C2  C068  F02E         	movff	_initScreenState+1,displayMainProgramLcdScreen@num+1
  1289  00F1C6  EC31  F075         	call	_displayMainProgramLcdScreen	;wreg free
  1290                           
  1291                           ;main.c: 60: }else if (temp == keys[6]){
  1292  00F1CA  D01C               	goto	l3071
  1293  00F1CC                     l3061:
  1294  00F1CC  0E37               	movlw	low (_keys+6)
  1295  00F1CE  6EF6               	movwf	tblptrl,c
  1296  00F1D0  0EFE               	movlw	high (_keys+6)
  1297  00F1D2  6EF7               	movwf	tblptrh,c
  1298  00F1D4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1299  00F1D4  6AF8               	clrf	tblptru,c
  1300  00F1D6                     	endif
  1301  00F1D6                     	if	0	;tblptru may be non-zero
  1302  00F1D6                     	endif
  1303  00F1D6  0008               	tblrd		*
  1304  00F1D8  50F5               	movf	tablat,w,c
  1305  00F1DA  1858               	xorwf	main@temp,w,c
  1306  00F1DC  A4D8               	btfss	status,2,c
  1307  00F1DE  D012               	goto	l3071
  1308                           
  1309                           ;main.c: 61: if (initScreenState == 3){
  1310  00F1E0  0E03               	movlw	3
  1311  00F1E2  1867               	xorwf	_initScreenState,w,c
  1312  00F1E4  1068               	iorwf	_initScreenState+1,w,c
  1313  00F1E6  A4D8               	btfss	status,2,c
  1314  00F1E8  D005               	goto	l3067
  1315                           
  1316                           ;main.c: 62: initScreenState = 0;
  1317  00F1EA  0E00               	movlw	0
  1318  00F1EC  6E68               	movwf	_initScreenState+1,c
  1319  00F1EE  0E00               	movlw	0
  1320  00F1F0  6E67               	movwf	_initScreenState,c
  1321                           
  1322                           ;main.c: 63: }else{
  1323  00F1F2  D002               	goto	l3069
  1324  00F1F4                     l3067:
  1325                           
  1326                           ;main.c: 64: initScreenState += 1;
  1327  00F1F4  4A67               	infsnz	_initScreenState,f,c
  1328  00F1F6  2A68               	incf	_initScreenState+1,f,c
  1329  00F1F8                     l3069:
  1330                           
  1331                           ;main.c: 65: }
  1332                           ;main.c: 66: displayMainProgramLcdScreen(initScreenState);
  1333  00F1F8  C067  F02D         	movff	_initScreenState,displayMainProgramLcdScreen@num
  1334  00F1FC  C068  F02E         	movff	_initScreenState+1,displayMainProgramLcdScreen@num+1
  1335  00F200  EC31  F075         	call	_displayMainProgramLcdScreen	;wreg free
  1336  00F204                     l3071:
  1337                           
  1338                           ;main.c: 67: }
  1339                           ;main.c: 68: if (initScreenState == 1){
  1340  00F204  0467               	decf	_initScreenState,w,c
  1341  00F206  1068               	iorwf	_initScreenState+1,w,c
  1342  00F208  A4D8               	btfss	status,2,c
  1343  00F20A  D769               	goto	l3031
  1344                           
  1345                           ;main.c: 69: displayMainProgramLcdScreen(initScreenState);
  1346  00F20C  C067  F02D         	movff	_initScreenState,displayMainProgramLcdScreen@num
  1347  00F210  C068  F02E         	movff	_initScreenState+1,displayMainProgramLcdScreen@num+1
  1348  00F214  EC31  F075         	call	_displayMainProgramLcdScreen	;wreg free
  1349  00F218  D762               	goto	l3031
  1350  00F21A                     __end_of_main:
  1351                           	opt stack 0
  1352                           tblptru	equ	0xFF8
  1353                           tblptrh	equ	0xFF7
  1354                           tblptrl	equ	0xFF6
  1355                           tablat	equ	0xFF5
  1356                           prodh	equ	0xFF4
  1357                           prodl	equ	0xFF3
  1358                           postinc0	equ	0xFEE
  1359                           wreg	equ	0xFE8
  1360                           postdec1	equ	0xFE5
  1361                           fsr1l	equ	0xFE1
  1362                           status	equ	0xFD8
  1363                           
  1364 ;; *************** function _operation *****************
  1365 ;; Defined at:
  1366 ;;		line 248 in file "main.c"
  1367 ;; Parameters:    Size  Location     Type
  1368 ;;		None
  1369 ;; Auto vars:     Size  Location     Type
  1370 ;;  bottle          2   61[COMRAM] int 
  1371 ;;  temp            1   56[COMRAM] unsigned char 
  1372 ;;  i               2   63[COMRAM] int 
  1373 ;;  bottle_cap      2   59[COMRAM] int 
  1374 ;;  bottle_type     2   57[COMRAM] int 
  1375 ;;  endingTime      2   54[COMRAM] int 
  1376 ;;  startingTime    2   52[COMRAM] int 
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  1    wreg      void 
  1379 ;; Registers used:
  1380 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1387 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1388 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1389 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1390 ;;Total ram usage:       15 bytes
  1391 ;; Hardware stack levels used:    1
  1392 ;; Hardware stack levels required when called:    5
  1393 ;; This function calls:
  1394 ;;		_getCurrentTime
  1395 ;;		_getUserInput
  1396 ;;		_lcdClear
  1397 ;;		_lcdInst
  1398 ;;		_moveBinServo
  1399 ;;		_printf
  1400 ;;		_pushBottle
  1401 ;;		_saveEEPROM
  1402 ;;		_updateCurrentTime
  1403 ;; This function is called by:
  1404 ;;		_main
  1405 ;; This function uses a non-reentrant model
  1406 ;;
  1407                           
  1408                           	psect	text1
  1409  00F62E                     __ptext1:
  1410                           	opt stack 0
  1411  00F62E                     _operation:
  1412                           	opt stack 25
  1413                           
  1414                           ;main.c: 249: PORTCbits.RC0 = 1;
  1415                           
  1416                           ;incstack = 0
  1417  00F62E  8082               	bsf	3970,0,c	;volatile
  1418                           
  1419                           ;main.c: 250: int bottle_type = 0;
  1420  00F630  0E00               	movlw	0
  1421  00F632  6E3B               	movwf	operation@bottle_type+1,c
  1422  00F634  0E00               	movlw	0
  1423  00F636  6E3A               	movwf	operation@bottle_type,c
  1424                           
  1425                           ;main.c: 251: int bottle_cap = 0;
  1426  00F638  0E00               	movlw	0
  1427  00F63A  6E3D               	movwf	operation@bottle_cap+1,c
  1428  00F63C  0E00               	movlw	0
  1429  00F63E  6E3C               	movwf	operation@bottle_cap,c
  1430                           
  1431                           ;main.c: 252: int i;
  1432                           ;main.c: 253: for (i=0;i<6;i++){
  1433  00F640  0E00               	movlw	0
  1434  00F642  6E41               	movwf	operation@i+1,c
  1435  00F644  0E00               	movlw	0
  1436  00F646  6E40               	movwf	operation@i,c
  1437  00F648                     l2841:
  1438  00F648  BE41               	btfsc	operation@i+1,7,c
  1439  00F64A  D006               	goto	l2845
  1440  00F64C  5041               	movf	operation@i+1,w,c
  1441  00F64E  E114               	bnz	l2851
  1442  00F650  0E06               	movlw	6
  1443  00F652  5C40               	subwf	operation@i,w,c
  1444  00F654  B0D8               	btfsc	status,0,c
  1445  00F656  D010               	goto	l2851
  1446  00F658                     l2845:
  1447                           
  1448                           ;main.c: 254: runInfo[i] = 0;
  1449  00F658  90D8               	bcf	status,0,c
  1450  00F65A  3440               	rlcf	operation@i,w,c
  1451  00F65C  6ED9               	movwf	fsr2l,c
  1452  00F65E  3441               	rlcf	operation@i+1,w,c
  1453  00F660  6EDA               	movwf	fsr2h,c
  1454  00F662  0E69               	movlw	low _runInfo
  1455  00F664  26D9               	addwf	fsr2l,f,c
  1456  00F666  0E00               	movlw	high _runInfo
  1457  00F668  22DA               	addwfc	fsr2h,f,c
  1458  00F66A  0E00               	movlw	0
  1459  00F66C  6EDE               	movwf	postinc2,c
  1460  00F66E  0E00               	movlw	0
  1461  00F670  6EDD               	movwf	postdec2,c
  1462  00F672  4A40               	infsnz	operation@i,f,c
  1463  00F674  2A41               	incf	operation@i+1,f,c
  1464  00F676  D7E8               	goto	l2841
  1465  00F678                     l2851:
  1466                           
  1467                           ;main.c: 255: }
  1468                           ;main.c: 256: lcdClear();
  1469  00F678  ECB6  F072         	call	_lcdClear	;wreg free
  1470                           
  1471                           ;main.c: 257: printf("...Operating...");
  1472  00F67C  0E30               	movlw	low STR_26
  1473  00F67E  6E1F               	movwf	printf@f,c
  1474  00F680  0EFF               	movlw	high STR_26
  1475  00F682  6E20               	movwf	printf@f+1,c
  1476  00F684  ECE5  F072         	call	_printf	;wreg free
  1477                           
  1478                           ;main.c: 258: updateCurrentTime();
  1479  00F688  ECE6  F073         	call	_updateCurrentTime	;wreg free
  1480                           
  1481                           ;main.c: 259: int startingTime = getCurrentTime();
  1482  00F68C  EC54  F076         	call	_getCurrentTime	;wreg free
  1483  00F690  C02B  F035         	movff	?_getCurrentTime,operation@startingTime
  1484  00F694  C02C  F036         	movff	?_getCurrentTime+1,operation@startingTime+1
  1485                           
  1486                           ;main.c: 261: while (runInfo[1] < 10){
  1487  00F698  D089               	goto	l2905
  1488  00F69A                     l2857:
  1489                           
  1490                           ;main.c: 262: lcdInst(0b11000000);;
  1491  00F69A  0EC0               	movlw	192
  1492  00F69C  EC23  F072         	call	_lcdInst
  1493                           
  1494                           ;main.c: 263: printf("NO BOTTLE    ");
  1495  00F6A0  0E7F               	movlw	low STR_27
  1496  00F6A2  6E1F               	movwf	printf@f,c
  1497  00F6A4  0EFF               	movlw	high STR_27
  1498  00F6A6  6E20               	movwf	printf@f+1,c
  1499  00F6A8  ECE5  F072         	call	_printf	;wreg free
  1500  00F6AC                     l193:
  1501  00F6AC  B080               	btfsc	3968,0,c	;volatile
  1502  00F6AE  D7FE               	goto	l193
  1503                           
  1504                           ;main.c: 265: if (PORTAbits.RA0){
  1505  00F6B0  A080               	btfss	3968,0,c	;volatile
  1506  00F6B2  D07C               	goto	l2905
  1507                           
  1508                           ;main.c: 266: lcdInst(0b11000000);;
  1509  00F6B4  0EC0               	movlw	192
  1510  00F6B6  EC23  F072         	call	_lcdInst
  1511                           
  1512                           ;main.c: 267: printf("BOTTLE INSIDE   ");
  1513  00F6BA  0EAB               	movlw	low STR_28
  1514  00F6BC  6E1F               	movwf	printf@f,c
  1515  00F6BE  0EFE               	movlw	high STR_28
  1516  00F6C0  6E20               	movwf	printf@f+1,c
  1517  00F6C2  ECE5  F072         	call	_printf	;wreg free
  1518                           
  1519                           ;main.c: 268: _delay((unsigned long)((1000)*(8000000/4000.0)));
  1520  00F6C6  0E0B               	movlw	11
  1521  00F6C8  6E34               	movwf	(??_operation+1)& (0+255),c
  1522  00F6CA  0E26               	movlw	38
  1523  00F6CC  6E33               	movwf	??_operation& (0+255),c
  1524  00F6CE  0E5E               	movlw	94
  1525  00F6D0                     u2547:
  1526  00F6D0  2EE8               	decfsz	wreg,f,c
  1527  00F6D2  D7FE               	bra	u2547
  1528  00F6D4  2E33               	decfsz	??_operation& (0+255),f,c
  1529  00F6D6  D7FC               	bra	u2547
  1530  00F6D8  2E34               	decfsz	(??_operation+1)& (0+255),f,c
  1531  00F6DA  D7FA               	bra	u2547
  1532                           
  1533                           ;main.c: 269: if (PORTAbits.RA1 == 0){
  1534  00F6DC  B280               	btfsc	3968,1,c	;volatile
  1535  00F6DE  D00D               	goto	l2875
  1536                           
  1537                           ;main.c: 270: lcdInst(0b11000000);;
  1538  00F6E0  0EC0               	movlw	192
  1539  00F6E2  EC23  F072         	call	_lcdInst
  1540                           
  1541                           ;main.c: 271: printf("YOP");
  1542  00F6E6  0EFB               	movlw	low STR_29
  1543  00F6E8  6E1F               	movwf	printf@f,c
  1544  00F6EA  0EFF               	movlw	high STR_29
  1545  00F6EC  6E20               	movwf	printf@f+1,c
  1546  00F6EE  ECE5  F072         	call	_printf	;wreg free
  1547                           
  1548                           ;main.c: 272: bottle_type = 0;
  1549  00F6F2  0E00               	movlw	0
  1550  00F6F4  6E3B               	movwf	operation@bottle_type+1,c
  1551  00F6F6  0E00               	movlw	0
  1552  00F6F8  D00C               	goto	L1
  1553  00F6FA                     l2875:
  1554                           
  1555                           ;main.c: 274: lcdInst(0b11000000);;
  1556  00F6FA  0EC0               	movlw	192
  1557  00F6FC  EC23  F072         	call	_lcdInst
  1558                           
  1559                           ;main.c: 275: printf("ESKA");
  1560  00F700  0EF6               	movlw	low STR_30
  1561  00F702  6E1F               	movwf	printf@f,c
  1562  00F704  0EFF               	movlw	high STR_30
  1563  00F706  6E20               	movwf	printf@f+1,c
  1564  00F708  ECE5  F072         	call	_printf	;wreg free
  1565                           
  1566                           ;main.c: 276: bottle_type = 1;
  1567  00F70C  0E00               	movlw	0
  1568  00F70E  6E3B               	movwf	operation@bottle_type+1,c
  1569  00F710  0E01               	movlw	1
  1570  00F712                     L1:
  1571  00F712  6E3A               	movwf	operation@bottle_type,c
  1572                           
  1573                           ;main.c: 277: }
  1574                           ;main.c: 278: if (PORTAbits.RA2 == 0||PORTAbits.RA3 == 0){
  1575  00F714  B480               	btfsc	3968,2,c	;volatile
  1576  00F716  A680               	btfss	3968,3,c	;volatile
  1577  00F718  D001               	goto	l2885
  1578  00F71A  D00A               	goto	l2889
  1579  00F71C                     l2885:
  1580                           
  1581                           ;main.c: 279: printf(" w/ Cap    ");
  1582  00F71C  0EDF               	movlw	low STR_31
  1583  00F71E  6E1F               	movwf	printf@f,c
  1584  00F720  0EFF               	movlw	high STR_31
  1585  00F722  6E20               	movwf	printf@f+1,c
  1586  00F724  ECE5  F072         	call	_printf	;wreg free
  1587                           
  1588                           ;main.c: 280: bottle_cap = 0;
  1589  00F728  0E00               	movlw	0
  1590  00F72A  6E3D               	movwf	operation@bottle_cap+1,c
  1591  00F72C  0E00               	movlw	0
  1592  00F72E  D009               	goto	L2
  1593  00F730                     l2889:
  1594                           
  1595                           ;main.c: 282: printf(" w/o Cap    ");
  1596  00F730  0EC5               	movlw	low STR_32
  1597  00F732  6E1F               	movwf	printf@f,c
  1598  00F734  0EFF               	movlw	high STR_32
  1599  00F736  6E20               	movwf	printf@f+1,c
  1600  00F738  ECE5  F072         	call	_printf	;wreg free
  1601                           
  1602                           ;main.c: 283: bottle_cap = 1;
  1603  00F73C  0E00               	movlw	0
  1604  00F73E  6E3D               	movwf	operation@bottle_cap+1,c
  1605  00F740  0E01               	movlw	1
  1606  00F742                     L2:
  1607  00F742  6E3C               	movwf	operation@bottle_cap,c
  1608                           
  1609                           ;main.c: 284: }
  1610                           ;main.c: 285: runInfo[1] += 1;
  1611  00F744  4A6B               	infsnz	_runInfo+2,f,c
  1612  00F746  2A6C               	incf	_runInfo+3,f,c
  1613                           
  1614                           ;main.c: 286: int bottle = bottle_type*2 + bottle_cap + 2;
  1615  00F748  C03A  F033         	movff	operation@bottle_type,??_operation
  1616  00F74C  C03B  F034         	movff	operation@bottle_type+1,??_operation+1
  1617  00F750  90D8               	bcf	status,0,c
  1618  00F752  3633               	rlcf	??_operation,f,c
  1619  00F754  3634               	rlcf	??_operation+1,f,c
  1620  00F756  503C               	movf	operation@bottle_cap,w,c
  1621  00F758  2633               	addwf	??_operation,f,c
  1622  00F75A  503D               	movf	operation@bottle_cap+1,w,c
  1623  00F75C  2234               	addwfc	??_operation+1,f,c
  1624  00F75E  0E02               	movlw	2
  1625  00F760  2433               	addwf	??_operation,w,c
  1626  00F762  6E3E               	movwf	operation@bottle,c
  1627  00F764  0E00               	movlw	0
  1628  00F766  2034               	addwfc	??_operation+1,w,c
  1629  00F768  6E3F               	movwf	operation@bottle+1,c
  1630                           
  1631                           ;main.c: 287: runInfo[bottle] += 1;
  1632  00F76A  90D8               	bcf	status,0,c
  1633  00F76C  343E               	rlcf	operation@bottle,w,c
  1634  00F76E  6ED9               	movwf	fsr2l,c
  1635  00F770  343F               	rlcf	operation@bottle+1,w,c
  1636  00F772  6EDA               	movwf	fsr2h,c
  1637  00F774  0E69               	movlw	low _runInfo
  1638  00F776  26D9               	addwf	fsr2l,f,c
  1639  00F778  0E00               	movlw	high _runInfo
  1640  00F77A  22DA               	addwfc	fsr2h,f,c
  1641  00F77C  2ADE               	incf	postinc2,f,c
  1642  00F77E  0E00               	movlw	0
  1643  00F780  22DD               	addwfc	postdec2,f,c
  1644                           
  1645                           ;main.c: 289: _delay((unsigned long)((1000)*(8000000/4000.0)));
  1646  00F782  0E0B               	movlw	11
  1647  00F784  6E34               	movwf	(??_operation+1)& (0+255),c
  1648  00F786  0E26               	movlw	38
  1649  00F788  6E33               	movwf	??_operation& (0+255),c
  1650  00F78A  0E5E               	movlw	94
  1651  00F78C                     u2557:
  1652  00F78C  2EE8               	decfsz	wreg,f,c
  1653  00F78E  D7FE               	bra	u2557
  1654  00F790  2E33               	decfsz	??_operation& (0+255),f,c
  1655  00F792  D7FC               	bra	u2557
  1656  00F794  2E34               	decfsz	(??_operation+1)& (0+255),f,c
  1657  00F796  D7FA               	bra	u2557
  1658                           
  1659                           ;main.c: 290: moveBinServo(bottle - 2);
  1660  00F798  0EFE               	movlw	254
  1661  00F79A  243E               	addwf	operation@bottle,w,c
  1662  00F79C  6E01               	movwf	moveBinServo@num,c
  1663  00F79E  0EFF               	movlw	255
  1664  00F7A0  203F               	addwfc	operation@bottle+1,w,c
  1665  00F7A2  6E02               	movwf	moveBinServo@num+1,c
  1666  00F7A4  ECCC  F077         	call	_moveBinServo	;wreg free
  1667                           
  1668                           ;main.c: 291: pushBottle();
  1669  00F7A8  ECDD  F074         	call	_pushBottle	;wreg free
  1670  00F7AC                     l2905:
  1671  00F7AC  BE6C               	btfsc	_runInfo+3,7,c
  1672  00F7AE  D775               	goto	l2857
  1673  00F7B0  506C               	movf	_runInfo+3,w,c
  1674  00F7B2  E104               	bnz	u2300
  1675  00F7B4  0E0A               	movlw	10
  1676  00F7B6  5C6B               	subwf	_runInfo+2,w,c
  1677  00F7B8  A0D8               	btfss	status,0,c
  1678  00F7BA  D76F               	goto	l2857
  1679  00F7BC                     u2300:
  1680                           
  1681                           ;main.c: 292: }
  1682                           ;main.c: 293: }
  1683                           ;main.c: 294: PORTCbits.RC0 = 0;
  1684  00F7BC  9082               	bcf	3970,0,c	;volatile
  1685                           
  1686                           ;main.c: 295: lcdClear();
  1687  00F7BE  ECB6  F072         	call	_lcdClear	;wreg free
  1688                           
  1689                           ;main.c: 296: printf("COMPLETED!!!     ");
  1690  00F7C2  0E54               	movlw	low STR_33
  1691  00F7C4  6E1F               	movwf	printf@f,c
  1692  00F7C6  0EFE               	movlw	high STR_33
  1693  00F7C8  6E20               	movwf	printf@f+1,c
  1694  00F7CA  ECE5  F072         	call	_printf	;wreg free
  1695                           
  1696                           ;main.c: 297: lcdInst(0b11000000);;
  1697  00F7CE  0EC0               	movlw	192
  1698  00F7D0  EC23  F072         	call	_lcdInst
  1699                           
  1700                           ;main.c: 298: printf("A to back       ");
  1701  00F7D4  0E9A               	movlw	low STR_34
  1702  00F7D6  6E1F               	movwf	printf@f,c
  1703  00F7D8  0EFE               	movlw	high STR_34
  1704  00F7DA  6E20               	movwf	printf@f+1,c
  1705  00F7DC  ECE5  F072         	call	_printf	;wreg free
  1706                           
  1707                           ;main.c: 299: updateCurrentTime();
  1708  00F7E0  ECE6  F073         	call	_updateCurrentTime	;wreg free
  1709                           
  1710                           ;main.c: 300: int endingTime = getCurrentTime();
  1711  00F7E4  EC54  F076         	call	_getCurrentTime	;wreg free
  1712  00F7E8  C02B  F037         	movff	?_getCurrentTime,operation@endingTime
  1713  00F7EC  C02C  F038         	movff	?_getCurrentTime+1,operation@endingTime+1
  1714                           
  1715                           ;main.c: 301: runInfo[0] = endingTime - startingTime;
  1716  00F7F0  C035  F033         	movff	operation@startingTime,??_operation
  1717  00F7F4  C036  F034         	movff	operation@startingTime+1,??_operation+1
  1718  00F7F8  1E33               	comf	??_operation,f,c
  1719  00F7FA  1E34               	comf	??_operation+1,f,c
  1720  00F7FC  4A33               	infsnz	??_operation,f,c
  1721  00F7FE  2A34               	incf	??_operation+1,f,c
  1722  00F800  5037               	movf	operation@endingTime,w,c
  1723  00F802  2433               	addwf	??_operation,w,c
  1724  00F804  6E69               	movwf	_runInfo,c
  1725  00F806  5038               	movf	operation@endingTime+1,w,c
  1726  00F808  2034               	addwfc	??_operation+1,w,c
  1727  00F80A  6E6A               	movwf	_runInfo+1,c
  1728                           
  1729                           ;main.c: 302: for (i = 0; i<7;i++){
  1730  00F80C  0E00               	movlw	0
  1731  00F80E  6E41               	movwf	operation@i+1,c
  1732  00F810  0E00               	movlw	0
  1733  00F812  6E40               	movwf	operation@i,c
  1734  00F814                     l2921:
  1735  00F814  BE41               	btfsc	operation@i+1,7,c
  1736  00F816  D006               	goto	l2925
  1737  00F818  5041               	movf	operation@i+1,w,c
  1738  00F81A  E115               	bnz	l2931
  1739  00F81C  0E07               	movlw	7
  1740  00F81E  5C40               	subwf	operation@i,w,c
  1741  00F820  B0D8               	btfsc	status,0,c
  1742  00F822  D011               	goto	l2931
  1743  00F824                     l2925:
  1744                           
  1745                           ;main.c: 303: lastRunTime[i] = time[i];
  1746  00F824  0E60               	movlw	low _time
  1747  00F826  2440               	addwf	operation@i,w,c
  1748  00F828  6ED9               	movwf	fsr2l,c
  1749  00F82A  0E00               	movlw	high _time
  1750  00F82C  2041               	addwfc	operation@i+1,w,c
  1751  00F82E  6EDA               	movwf	fsr2h,c
  1752  00F830  0E59               	movlw	low _lastRunTime
  1753  00F832  2440               	addwf	operation@i,w,c
  1754  00F834  6EE1               	movwf	fsr1l,c
  1755  00F836  0E00               	movlw	high _lastRunTime
  1756  00F838  2041               	addwfc	operation@i+1,w,c
  1757  00F83A  6EE2               	movwf	fsr1h,c
  1758  00F83C  CFDF FFE7          	movff	indf2,indf1
  1759  00F840  4A40               	infsnz	operation@i,f,c
  1760  00F842  2A41               	incf	operation@i+1,f,c
  1761  00F844  D7E7               	goto	l2921
  1762  00F846                     l2931:
  1763                           
  1764                           ;main.c: 304: }
  1765                           ;main.c: 305: saveEEPROM();
  1766  00F846  EC0D  F079         	call	_saveEEPROM	;wreg free
  1767  00F84A                     l2933:
  1768                           
  1769                           ;main.c: 307: unsigned char temp = keys[getUserInput()];
  1770  00F84A  EC19  F074         	call	_getUserInput	;wreg free
  1771  00F84E  6E33               	movwf	??_operation& (0+255),c
  1772  00F850  5033               	movf	??_operation,w,c
  1773  00F852  0D01               	mullw	1
  1774  00F854  0E31               	movlw	low _keys
  1775  00F856  24F3               	addwf	prodl,w,c
  1776  00F858  6EF6               	movwf	tblptrl,c
  1777  00F85A  0EFE               	movlw	high _keys
  1778  00F85C  20F4               	addwfc	prodh,w,c
  1779  00F85E  6EF7               	movwf	tblptrh,c
  1780  00F860                     	if	1	;There are 3 active tblptr bytes
  1781  00F860  6AF8               	clrf	tblptru,c
  1782  00F862  0E00               	movlw	low (__mediumconst shr (0+16))
  1783  00F864  22F8               	addwfc	tblptru,f,c
  1784  00F866                     	endif
  1785  00F866  0008               	tblrd		*
  1786  00F868  CFF5 F039          	movff	tablat,operation@temp
  1787                           
  1788                           ;main.c: 308: if (temp == keys[3]){
  1789  00F86C  0E34               	movlw	low (_keys+3)
  1790  00F86E  6EF6               	movwf	tblptrl,c
  1791  00F870  0EFE               	movlw	high (_keys+3)
  1792  00F872  6EF7               	movwf	tblptrh,c
  1793  00F874                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1794  00F874  6AF8               	clrf	tblptru,c
  1795  00F876                     	endif
  1796  00F876                     	if	0	;tblptru may be non-zero
  1797  00F876                     	endif
  1798  00F876  0008               	tblrd		*
  1799  00F878  50F5               	movf	tablat,w,c
  1800  00F87A  1839               	xorwf	operation@temp,w,c
  1801  00F87C  B4D8               	btfsc	status,2,c
  1802  00F87E  0012               	return	
  1803  00F880  D7E4               	goto	l2933
  1804  00F882                     __end_of_operation:
  1805                           	opt stack 0
  1806                           tblptru	equ	0xFF8
  1807                           tblptrh	equ	0xFF7
  1808                           tblptrl	equ	0xFF6
  1809                           tablat	equ	0xFF5
  1810                           prodh	equ	0xFF4
  1811                           prodl	equ	0xFF3
  1812                           postinc0	equ	0xFEE
  1813                           wreg	equ	0xFE8
  1814                           indf1	equ	0xFE7
  1815                           postdec1	equ	0xFE5
  1816                           fsr1h	equ	0xFE2
  1817                           fsr1l	equ	0xFE1
  1818                           indf2	equ	0xFDF
  1819                           postinc2	equ	0xFDE
  1820                           postdec2	equ	0xFDD
  1821                           fsr2h	equ	0xFDA
  1822                           fsr2l	equ	0xFD9
  1823                           status	equ	0xFD8
  1824                           
  1825 ;; *************** function _saveEEPROM *****************
  1826 ;; Defined at:
  1827 ;;		line 428 in file "main.c"
  1828 ;; Parameters:    Size  Location     Type
  1829 ;;		None
  1830 ;; Auto vars:     Size  Location     Type
  1831 ;;  i               2   12[COMRAM] int 
  1832 ;;  temp            2   10[COMRAM] int 
  1833 ;; Return value:  Size  Location     Type
  1834 ;;                  1    wreg      void 
  1835 ;; Registers used:
  1836 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1837 ;; Tracked objects:
  1838 ;;		On entry : 0/0
  1839 ;;		On exit  : 0/0
  1840 ;;		Unchanged: 0/0
  1841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1843 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1844 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1845 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1846 ;;Total ram usage:        5 bytes
  1847 ;; Hardware stack levels used:    1
  1848 ;; Hardware stack levels required when called:    1
  1849 ;; This function calls:
  1850 ;;		_Eeprom_ReadByte
  1851 ;;		_Eeprom_WriteByte
  1852 ;;		___wmul
  1853 ;; This function is called by:
  1854 ;;		_operation
  1855 ;; This function uses a non-reentrant model
  1856 ;;
  1857                           
  1858                           	psect	text2
  1859  00F21A                     __ptext2:
  1860                           	opt stack 0
  1861  00F21A                     _saveEEPROM:
  1862                           	opt stack 28
  1863                           
  1864                           ;main.c: 429: int i;
  1865                           ;main.c: 430: int temp;
  1866                           ;main.c: 431: for (i = 0; i<13; i++){
  1867                           
  1868                           ;incstack = 0
  1869  00F21A  0E00               	movlw	0
  1870  00F21C  6E0E               	movwf	saveEEPROM@i+1,c
  1871  00F21E  0E00               	movlw	0
  1872  00F220  6E0D               	movwf	saveEEPROM@i,c
  1873  00F222                     l2719:
  1874  00F222  BE0E               	btfsc	saveEEPROM@i+1,7,c
  1875  00F224  D006               	goto	l2723
  1876  00F226  500E               	movf	saveEEPROM@i+1,w,c
  1877  00F228  E131               	bnz	l2729
  1878  00F22A  0E0D               	movlw	13
  1879  00F22C  5C0D               	subwf	saveEEPROM@i,w,c
  1880  00F22E  B0D8               	btfsc	status,0,c
  1881  00F230  D02D               	goto	l2729
  1882  00F232                     l2723:
  1883                           
  1884                           ;main.c: 432: temp = Eeprom_ReadByte(12*i+2*200);
  1885  00F232  C00D  F001         	movff	saveEEPROM@i,___wmul@multiplier
  1886  00F236  C00E  F002         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  1887  00F23A  0E00               	movlw	0
  1888  00F23C  6E04               	movwf	___wmul@multiplicand+1,c
  1889  00F23E  0E0C               	movlw	12
  1890  00F240  6E03               	movwf	___wmul@multiplicand,c
  1891  00F242  EC68  F072         	call	___wmul	;wreg free
  1892  00F246  0E90               	movlw	144
  1893  00F248  2401               	addwf	?___wmul,w,c
  1894  00F24A  6E07               	movwf	Eeprom_ReadByte@address,c
  1895  00F24C  0E01               	movlw	1
  1896  00F24E  2002               	addwfc	?___wmul+1,w,c
  1897  00F250  6E08               	movwf	Eeprom_ReadByte@address+1,c
  1898  00F252  EC3E  F072         	call	_Eeprom_ReadByte	;wreg free
  1899  00F256  6E0A               	movwf	??_saveEEPROM& (0+255),c
  1900  00F258  500A               	movf	??_saveEEPROM,w,c
  1901  00F25A  6E0B               	movwf	saveEEPROM@temp,c
  1902  00F25C  6A0C               	clrf	saveEEPROM@temp+1,c
  1903                           
  1904                           ;main.c: 433: Eeprom_WriteByte(12*i+3*200,temp);
  1905  00F25E  C00D  F001         	movff	saveEEPROM@i,___wmul@multiplier
  1906  00F262  C00E  F002         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  1907  00F266  0E00               	movlw	0
  1908  00F268  6E04               	movwf	___wmul@multiplicand+1,c
  1909  00F26A  0E0C               	movlw	12
  1910  00F26C  6E03               	movwf	___wmul@multiplicand,c
  1911  00F26E  EC68  F072         	call	___wmul	;wreg free
  1912  00F272  0E58               	movlw	88
  1913  00F274  2401               	addwf	?___wmul,w,c
  1914  00F276  6E07               	movwf	Eeprom_WriteByte@address,c
  1915  00F278  0E02               	movlw	2
  1916  00F27A  2002               	addwfc	?___wmul+1,w,c
  1917  00F27C  6E08               	movwf	Eeprom_WriteByte@address+1,c
  1918  00F27E  C00B  F009         	movff	saveEEPROM@temp,Eeprom_WriteByte@data
  1919  00F282  EC8E  F072         	call	_Eeprom_WriteByte	;wreg free
  1920  00F286  4A0D               	infsnz	saveEEPROM@i,f,c
  1921  00F288  2A0E               	incf	saveEEPROM@i+1,f,c
  1922  00F28A  D7CB               	goto	l2719
  1923  00F28C                     l2729:
  1924                           
  1925                           ;main.c: 434: }
  1926                           ;main.c: 435: for (i = 0; i<13; i++){
  1927  00F28C  0E00               	movlw	0
  1928  00F28E  6E0E               	movwf	saveEEPROM@i+1,c
  1929  00F290  0E00               	movlw	0
  1930  00F292  6E0D               	movwf	saveEEPROM@i,c
  1931  00F294                     l2731:
  1932  00F294  BE0E               	btfsc	saveEEPROM@i+1,7,c
  1933  00F296  D006               	goto	l2735
  1934  00F298  500E               	movf	saveEEPROM@i+1,w,c
  1935  00F29A  E131               	bnz	l2741
  1936  00F29C  0E0D               	movlw	13
  1937  00F29E  5C0D               	subwf	saveEEPROM@i,w,c
  1938  00F2A0  B0D8               	btfsc	status,0,c
  1939  00F2A2  D02D               	goto	l2741
  1940  00F2A4                     l2735:
  1941                           
  1942                           ;main.c: 436: temp = Eeprom_ReadByte(12*i+1*200);
  1943  00F2A4  C00D  F001         	movff	saveEEPROM@i,___wmul@multiplier
  1944  00F2A8  C00E  F002         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  1945  00F2AC  0E00               	movlw	0
  1946  00F2AE  6E04               	movwf	___wmul@multiplicand+1,c
  1947  00F2B0  0E0C               	movlw	12
  1948  00F2B2  6E03               	movwf	___wmul@multiplicand,c
  1949  00F2B4  EC68  F072         	call	___wmul	;wreg free
  1950  00F2B8  0EC8               	movlw	200
  1951  00F2BA  2401               	addwf	?___wmul,w,c
  1952  00F2BC  6E07               	movwf	Eeprom_ReadByte@address,c
  1953  00F2BE  0E00               	movlw	0
  1954  00F2C0  2002               	addwfc	?___wmul+1,w,c
  1955  00F2C2  6E08               	movwf	Eeprom_ReadByte@address+1,c
  1956  00F2C4  EC3E  F072         	call	_Eeprom_ReadByte	;wreg free
  1957  00F2C8  6E0A               	movwf	??_saveEEPROM& (0+255),c
  1958  00F2CA  500A               	movf	??_saveEEPROM,w,c
  1959  00F2CC  6E0B               	movwf	saveEEPROM@temp,c
  1960  00F2CE  6A0C               	clrf	saveEEPROM@temp+1,c
  1961                           
  1962                           ;main.c: 437: Eeprom_WriteByte(12*i+2*200,temp);
  1963  00F2D0  C00D  F001         	movff	saveEEPROM@i,___wmul@multiplier
  1964  00F2D4  C00E  F002         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  1965  00F2D8  0E00               	movlw	0
  1966  00F2DA  6E04               	movwf	___wmul@multiplicand+1,c
  1967  00F2DC  0E0C               	movlw	12
  1968  00F2DE  6E03               	movwf	___wmul@multiplicand,c
  1969  00F2E0  EC68  F072         	call	___wmul	;wreg free
  1970  00F2E4  0E90               	movlw	144
  1971  00F2E6  2401               	addwf	?___wmul,w,c
  1972  00F2E8  6E07               	movwf	Eeprom_WriteByte@address,c
  1973  00F2EA  0E01               	movlw	1
  1974  00F2EC  2002               	addwfc	?___wmul+1,w,c
  1975  00F2EE  6E08               	movwf	Eeprom_WriteByte@address+1,c
  1976  00F2F0  C00B  F009         	movff	saveEEPROM@temp,Eeprom_WriteByte@data
  1977  00F2F4  EC8E  F072         	call	_Eeprom_WriteByte	;wreg free
  1978  00F2F8  4A0D               	infsnz	saveEEPROM@i,f,c
  1979  00F2FA  2A0E               	incf	saveEEPROM@i+1,f,c
  1980  00F2FC  D7CB               	goto	l2731
  1981  00F2FE                     l2741:
  1982                           
  1983                           ;main.c: 438: }
  1984                           ;main.c: 439: for (i = 0; i<13; i++){
  1985  00F2FE  0E00               	movlw	0
  1986  00F300  6E0E               	movwf	saveEEPROM@i+1,c
  1987  00F302  0E00               	movlw	0
  1988  00F304  6E0D               	movwf	saveEEPROM@i,c
  1989  00F306                     l2743:
  1990  00F306  BE0E               	btfsc	saveEEPROM@i+1,7,c
  1991  00F308  D006               	goto	l2747
  1992  00F30A  500E               	movf	saveEEPROM@i+1,w,c
  1993  00F30C  E12F               	bnz	l2753
  1994  00F30E  0E0D               	movlw	13
  1995  00F310  5C0D               	subwf	saveEEPROM@i,w,c
  1996  00F312  B0D8               	btfsc	status,0,c
  1997  00F314  D02B               	goto	l2753
  1998  00F316                     l2747:
  1999                           
  2000                           ;main.c: 440: temp = Eeprom_ReadByte(12*i+0*200);
  2001  00F316  C00D  F001         	movff	saveEEPROM@i,___wmul@multiplier
  2002  00F31A  C00E  F002         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  2003  00F31E  0E00               	movlw	0
  2004  00F320  6E04               	movwf	___wmul@multiplicand+1,c
  2005  00F322  0E0C               	movlw	12
  2006  00F324  6E03               	movwf	___wmul@multiplicand,c
  2007  00F326  EC68  F072         	call	___wmul	;wreg free
  2008  00F32A  C001  F007         	movff	?___wmul,Eeprom_ReadByte@address
  2009  00F32E  C002  F008         	movff	?___wmul+1,Eeprom_ReadByte@address+1
  2010  00F332  EC3E  F072         	call	_Eeprom_ReadByte	;wreg free
  2011  00F336  6E0A               	movwf	??_saveEEPROM& (0+255),c
  2012  00F338  500A               	movf	??_saveEEPROM,w,c
  2013  00F33A  6E0B               	movwf	saveEEPROM@temp,c
  2014  00F33C  6A0C               	clrf	saveEEPROM@temp+1,c
  2015                           
  2016                           ;main.c: 441: Eeprom_WriteByte(12*i+1*200,temp);
  2017  00F33E  C00D  F001         	movff	saveEEPROM@i,___wmul@multiplier
  2018  00F342  C00E  F002         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  2019  00F346  0E00               	movlw	0
  2020  00F348  6E04               	movwf	___wmul@multiplicand+1,c
  2021  00F34A  0E0C               	movlw	12
  2022  00F34C  6E03               	movwf	___wmul@multiplicand,c
  2023  00F34E  EC68  F072         	call	___wmul	;wreg free
  2024  00F352  0EC8               	movlw	200
  2025  00F354  2401               	addwf	?___wmul,w,c
  2026  00F356  6E07               	movwf	Eeprom_WriteByte@address,c
  2027  00F358  0E00               	movlw	0
  2028  00F35A  2002               	addwfc	?___wmul+1,w,c
  2029  00F35C  6E08               	movwf	Eeprom_WriteByte@address+1,c
  2030  00F35E  C00B  F009         	movff	saveEEPROM@temp,Eeprom_WriteByte@data
  2031  00F362  EC8E  F072         	call	_Eeprom_WriteByte	;wreg free
  2032  00F366  4A0D               	infsnz	saveEEPROM@i,f,c
  2033  00F368  2A0E               	incf	saveEEPROM@i+1,f,c
  2034  00F36A  D7CD               	goto	l2743
  2035  00F36C                     l2753:
  2036                           
  2037                           ;main.c: 442: }
  2038                           ;main.c: 443: for (i = 0; i<6; i++){
  2039  00F36C  0E00               	movlw	0
  2040  00F36E  6E0E               	movwf	saveEEPROM@i+1,c
  2041  00F370  0E00               	movlw	0
  2042  00F372  6E0D               	movwf	saveEEPROM@i,c
  2043  00F374                     l2755:
  2044  00F374  BE0E               	btfsc	saveEEPROM@i+1,7,c
  2045  00F376  D006               	goto	l2759
  2046  00F378  500E               	movf	saveEEPROM@i+1,w,c
  2047  00F37A  E122               	bnz	l2765
  2048  00F37C  0E06               	movlw	6
  2049  00F37E  5C0D               	subwf	saveEEPROM@i,w,c
  2050  00F380  B0D8               	btfsc	status,0,c
  2051  00F382  D01E               	goto	l2765
  2052  00F384                     l2759:
  2053                           
  2054                           ;main.c: 444: Eeprom_WriteByte(12*i,runInfo[i]);
  2055  00F384  C00D  F001         	movff	saveEEPROM@i,___wmul@multiplier
  2056  00F388  C00E  F002         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  2057  00F38C  0E00               	movlw	0
  2058  00F38E  6E04               	movwf	___wmul@multiplicand+1,c
  2059  00F390  0E0C               	movlw	12
  2060  00F392  6E03               	movwf	___wmul@multiplicand,c
  2061  00F394  EC68  F072         	call	___wmul	;wreg free
  2062  00F398  C001  F007         	movff	?___wmul,Eeprom_WriteByte@address
  2063  00F39C  C002  F008         	movff	?___wmul+1,Eeprom_WriteByte@address+1
  2064  00F3A0  90D8               	bcf	status,0,c
  2065  00F3A2  340D               	rlcf	saveEEPROM@i,w,c
  2066  00F3A4  6ED9               	movwf	fsr2l,c
  2067  00F3A6  340E               	rlcf	saveEEPROM@i+1,w,c
  2068  00F3A8  6EDA               	movwf	fsr2h,c
  2069  00F3AA  0E69               	movlw	low _runInfo
  2070  00F3AC  26D9               	addwf	fsr2l,f,c
  2071  00F3AE  0E00               	movlw	high _runInfo
  2072  00F3B0  22DA               	addwfc	fsr2h,f,c
  2073  00F3B2  50DF               	movf	indf2,w,c
  2074  00F3B4  6E09               	movwf	Eeprom_WriteByte@data,c
  2075  00F3B6  EC8E  F072         	call	_Eeprom_WriteByte	;wreg free
  2076  00F3BA  4A0D               	infsnz	saveEEPROM@i,f,c
  2077  00F3BC  2A0E               	incf	saveEEPROM@i+1,f,c
  2078  00F3BE  D7DA               	goto	l2755
  2079  00F3C0                     l2765:
  2080                           
  2081                           ;main.c: 445: }
  2082                           ;main.c: 446: for (i = 0; i<7; i++){
  2083  00F3C0  0E00               	movlw	0
  2084  00F3C2  6E0E               	movwf	saveEEPROM@i+1,c
  2085  00F3C4  0E00               	movlw	0
  2086  00F3C6  6E0D               	movwf	saveEEPROM@i,c
  2087  00F3C8                     l2767:
  2088  00F3C8  BE0E               	btfsc	saveEEPROM@i+1,7,c
  2089  00F3CA  D006               	goto	l2771
  2090  00F3CC  500E               	movf	saveEEPROM@i+1,w,c
  2091  00F3CE  E121               	bnz	l273
  2092  00F3D0  0E07               	movlw	7
  2093  00F3D2  5C0D               	subwf	saveEEPROM@i,w,c
  2094  00F3D4  B0D8               	btfsc	status,0,c
  2095  00F3D6  0012               	return	
  2096  00F3D8                     l2771:
  2097                           
  2098                           ;main.c: 447: Eeprom_WriteByte(12*(6+i),lastRunTime[i]);
  2099  00F3D8  0E06               	movlw	6
  2100  00F3DA  240D               	addwf	saveEEPROM@i,w,c
  2101  00F3DC  6E01               	movwf	___wmul@multiplier,c
  2102  00F3DE  0E00               	movlw	0
  2103  00F3E0  200E               	addwfc	saveEEPROM@i+1,w,c
  2104  00F3E2  6E02               	movwf	___wmul@multiplier+1,c
  2105  00F3E4  0E00               	movlw	0
  2106  00F3E6  6E04               	movwf	___wmul@multiplicand+1,c
  2107  00F3E8  0E0C               	movlw	12
  2108  00F3EA  6E03               	movwf	___wmul@multiplicand,c
  2109  00F3EC  EC68  F072         	call	___wmul	;wreg free
  2110  00F3F0  C001  F007         	movff	?___wmul,Eeprom_WriteByte@address
  2111  00F3F4  C002  F008         	movff	?___wmul+1,Eeprom_WriteByte@address+1
  2112  00F3F8  0E59               	movlw	low _lastRunTime
  2113  00F3FA  240D               	addwf	saveEEPROM@i,w,c
  2114  00F3FC  6ED9               	movwf	fsr2l,c
  2115  00F3FE  0E00               	movlw	high _lastRunTime
  2116  00F400  200E               	addwfc	saveEEPROM@i+1,w,c
  2117  00F402  6EDA               	movwf	fsr2h,c
  2118  00F404  50DF               	movf	indf2,w,c
  2119  00F406  6E09               	movwf	Eeprom_WriteByte@data,c
  2120  00F408  EC8E  F072         	call	_Eeprom_WriteByte	;wreg free
  2121  00F40C  4A0D               	infsnz	saveEEPROM@i,f,c
  2122  00F40E  2A0E               	incf	saveEEPROM@i+1,f,c
  2123  00F410  D7DB               	goto	l2767
  2124  00F412                     l273:
  2125  00F412  0012               	return		;funcret
  2126  00F414                     __end_of_saveEEPROM:
  2127                           	opt stack 0
  2128                           tblptru	equ	0xFF8
  2129                           tblptrh	equ	0xFF7
  2130                           tblptrl	equ	0xFF6
  2131                           tablat	equ	0xFF5
  2132                           prodh	equ	0xFF4
  2133                           prodl	equ	0xFF3
  2134                           postinc0	equ	0xFEE
  2135                           wreg	equ	0xFE8
  2136                           indf1	equ	0xFE7
  2137                           postdec1	equ	0xFE5
  2138                           fsr1h	equ	0xFE2
  2139                           fsr1l	equ	0xFE1
  2140                           indf2	equ	0xFDF
  2141                           postinc2	equ	0xFDE
  2142                           postdec2	equ	0xFDD
  2143                           fsr2h	equ	0xFDA
  2144                           fsr2l	equ	0xFD9
  2145                           status	equ	0xFD8
  2146                           
  2147 ;; *************** function _Eeprom_WriteByte *****************
  2148 ;; Defined at:
  2149 ;;		line 517 in file "main.c"
  2150 ;; Parameters:    Size  Location     Type
  2151 ;;  address         2    6[COMRAM] unsigned int 
  2152 ;;  data            1    8[COMRAM] unsigned char 
  2153 ;; Auto vars:     Size  Location     Type
  2154 ;;		None
  2155 ;; Return value:  Size  Location     Type
  2156 ;;                  1    wreg      void 
  2157 ;; Registers used:
  2158 ;;		wreg, status,2
  2159 ;; Tracked objects:
  2160 ;;		On entry : 0/0
  2161 ;;		On exit  : 0/0
  2162 ;;		Unchanged: 0/0
  2163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2164 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2165 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2166 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2167 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2168 ;;Total ram usage:        3 bytes
  2169 ;; Hardware stack levels used:    1
  2170 ;; This function calls:
  2171 ;;		Nothing
  2172 ;; This function is called by:
  2173 ;;		_saveEEPROM
  2174 ;; This function uses a non-reentrant model
  2175 ;;
  2176                           
  2177                           	psect	text3
  2178  00E51C                     __ptext3:
  2179                           	opt stack 0
  2180  00E51C                     _Eeprom_WriteByte:
  2181                           	opt stack 28
  2182                           
  2183                           ;main.c: 520: EEADRH = (uint8_t)(address >> 8);
  2184                           
  2185                           ;incstack = 0
  2186  00E51C  5008               	movf	Eeprom_WriteByte@address+1,w,c
  2187  00E51E  6EAA               	movwf	4010,c	;volatile
  2188                           
  2189                           ;main.c: 521: EEADR = (uint8_t)address;
  2190  00E520  C007  FFA9         	movff	Eeprom_WriteByte@address,4009	;volatile
  2191                           
  2192                           ;main.c: 523: EEDATA = data;
  2193  00E524  C009  FFA8         	movff	Eeprom_WriteByte@data,4008	;volatile
  2194                           
  2195                           ;main.c: 524: EECON1bits.EEPGD = 0;
  2196  00E528  9EA6               	bcf	4006,7,c	;volatile
  2197                           
  2198                           ;main.c: 525: EECON1bits.CFGS = 0;
  2199  00E52A  9CA6               	bcf	4006,6,c	;volatile
  2200                           
  2201                           ;main.c: 526: EECON1bits.WREN = 1;
  2202  00E52C  84A6               	bsf	4006,2,c	;volatile
  2203                           
  2204                           ;main.c: 530: EECON2 = 0x55;
  2205  00E52E  0E55               	movlw	85
  2206  00E530  6EA7               	movwf	4007,c	;volatile
  2207                           
  2208                           ;main.c: 531: EECON2 = 0xAA;
  2209  00E532  0EAA               	movlw	170
  2210  00E534  6EA7               	movwf	4007,c	;volatile
  2211                           
  2212                           ;main.c: 532: EECON1bits.WR = 1;
  2213  00E536  82A6               	bsf	4006,1,c	;volatile
  2214  00E538                     l304:
  2215  00E538  A8A1               	btfss	4001,4,c	;volatile
  2216  00E53A  D7FE               	goto	l304
  2217                           
  2218                           ;main.c: 538: }
  2219                           ;main.c: 540: PIR2bits.EEIF = 0;
  2220  00E53C  98A1               	bcf	4001,4,c	;volatile
  2221                           
  2222                           ;main.c: 541: EECON1bits.WREN = 0;
  2223  00E53E  94A6               	bcf	4006,2,c	;volatile
  2224  00E540  0012               	return		;funcret
  2225  00E542                     __end_of_Eeprom_WriteByte:
  2226                           	opt stack 0
  2227                           tblptru	equ	0xFF8
  2228                           tblptrh	equ	0xFF7
  2229                           tblptrl	equ	0xFF6
  2230                           tablat	equ	0xFF5
  2231                           prodh	equ	0xFF4
  2232                           prodl	equ	0xFF3
  2233                           postinc0	equ	0xFEE
  2234                           wreg	equ	0xFE8
  2235                           indf1	equ	0xFE7
  2236                           postdec1	equ	0xFE5
  2237                           fsr1h	equ	0xFE2
  2238                           fsr1l	equ	0xFE1
  2239                           indf2	equ	0xFDF
  2240                           postinc2	equ	0xFDE
  2241                           postdec2	equ	0xFDD
  2242                           fsr2h	equ	0xFDA
  2243                           fsr2l	equ	0xFD9
  2244                           status	equ	0xFD8
  2245                           
  2246 ;; *************** function _pushBottle *****************
  2247 ;; Defined at:
  2248 ;;		line 401 in file "main.c"
  2249 ;; Parameters:    Size  Location     Type
  2250 ;;		None
  2251 ;; Auto vars:     Size  Location     Type
  2252 ;;  i               2    2[COMRAM] unsigned int 
  2253 ;; Return value:  Size  Location     Type
  2254 ;;                  1    wreg      void 
  2255 ;; Registers used:
  2256 ;;		wreg, status,2, status,0
  2257 ;; Tracked objects:
  2258 ;;		On entry : 0/0
  2259 ;;		On exit  : 0/0
  2260 ;;		Unchanged: 0/0
  2261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2263 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2264 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2265 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2266 ;;Total ram usage:        4 bytes
  2267 ;; Hardware stack levels used:    1
  2268 ;; This function calls:
  2269 ;;		Nothing
  2270 ;; This function is called by:
  2271 ;;		_operation
  2272 ;; This function uses a non-reentrant model
  2273 ;;
  2274                           
  2275                           	psect	text4
  2276  00E9BA                     __ptext4:
  2277                           	opt stack 0
  2278  00E9BA                     _pushBottle:
  2279                           	opt stack 29
  2280                           
  2281                           ;main.c: 402: unsigned int i;
  2282                           ;main.c: 405: for(i=0;i<50;i++)
  2283                           
  2284                           ;incstack = 0
  2285  00E9BA  0E00               	movlw	0
  2286  00E9BC  6E04               	movwf	pushBottle@i+1,c
  2287  00E9BE  0E00               	movlw	0
  2288  00E9C0  6E03               	movwf	pushBottle@i,c
  2289  00E9C2                     l1729:
  2290  00E9C2  5004               	movf	pushBottle@i+1,w,c
  2291  00E9C4  E117               	bnz	l1739
  2292  00E9C6  0E32               	movlw	50
  2293  00E9C8  5C03               	subwf	pushBottle@i,w,c
  2294  00E9CA  B0D8               	btfsc	status,0,c
  2295  00E9CC  D013               	goto	l1739
  2296                           
  2297                           ;main.c: 406: {
  2298                           ;main.c: 407: PORTCbits.RC1 = 1;
  2299  00E9CE  8282               	bsf	3970,1,c	;volatile
  2300                           
  2301                           ;main.c: 408: _delay((unsigned long)((800)*(8000000/4000000.0)));
  2302  00E9D0  0EE4               	movlw	228
  2303  00E9D2                     u2567:
  2304  00E9D2  D000               	nop2	
  2305  00E9D4  D000               	nop2	
  2306  00E9D6  2EE8               	decfsz	wreg,f,c
  2307  00E9D8  D7FC               	bra	u2567
  2308  00E9DA  D000               	nop2	
  2309  00E9DC  D000               	nop2	
  2310                           
  2311                           ;main.c: 409: PORTCbits.RC1 = 0;
  2312  00E9DE  9282               	bcf	3970,1,c	;volatile
  2313                           
  2314                           ;main.c: 410: _delay((unsigned long)((19200)*(8000000/4000000.0)));
  2315  00E9E0  0E32               	movlw	50
  2316  00E9E2  6E01               	movwf	??_pushBottle& (0+255),c
  2317  00E9E4  0EDE               	movlw	222
  2318  00E9E6                     u2577:
  2319  00E9E6  2EE8               	decfsz	wreg,f,c
  2320  00E9E8  D7FE               	bra	u2577
  2321  00E9EA  2E01               	decfsz	??_pushBottle& (0+255),f,c
  2322  00E9EC  D7FC               	bra	u2577
  2323  00E9EE  4A03               	infsnz	pushBottle@i,f,c
  2324  00E9F0  2A04               	incf	pushBottle@i+1,f,c
  2325  00E9F2  D7E7               	goto	l1729
  2326  00E9F4                     l1739:
  2327                           
  2328                           ;main.c: 411: }
  2329                           ;main.c: 413: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2330  00E9F4  0E15               	movlw	21
  2331  00E9F6  6E02               	movwf	(??_pushBottle+1)& (0+255),c
  2332  00E9F8  0E4B               	movlw	75
  2333  00E9FA  6E01               	movwf	??_pushBottle& (0+255),c
  2334  00E9FC  0EBE               	movlw	190
  2335  00E9FE                     u2587:
  2336  00E9FE  2EE8               	decfsz	wreg,f,c
  2337  00EA00  D7FE               	bra	u2587
  2338  00EA02  2E01               	decfsz	??_pushBottle& (0+255),f,c
  2339  00EA04  D7FC               	bra	u2587
  2340  00EA06  2E02               	decfsz	(??_pushBottle+1)& (0+255),f,c
  2341  00EA08  D7FA               	bra	u2587
  2342  00EA0A  D000               	nop2	
  2343                           
  2344                           ;main.c: 416: for(i=0;i<50;i++)
  2345  00EA0C  0E00               	movlw	0
  2346  00EA0E  6E04               	movwf	pushBottle@i+1,c
  2347  00EA10  0E00               	movlw	0
  2348  00EA12  6E03               	movwf	pushBottle@i,c
  2349  00EA14                     l1743:
  2350  00EA14  5004               	movf	pushBottle@i+1,w,c
  2351  00EA16  E118               	bnz	l1753
  2352  00EA18  0E32               	movlw	50
  2353  00EA1A  5C03               	subwf	pushBottle@i,w,c
  2354  00EA1C  B0D8               	btfsc	status,0,c
  2355  00EA1E  D014               	goto	l1753
  2356                           
  2357                           ;main.c: 417: {
  2358                           ;main.c: 418: PORTCbits.RC1 = 1;
  2359  00EA20  8282               	bsf	3970,1,c	;volatile
  2360                           
  2361                           ;main.c: 419: _delay((unsigned long)((3600)*(8000000/4000000.0)));
  2362  00EA22  0E0A               	movlw	10
  2363  00EA24  6E01               	movwf	??_pushBottle& (0+255),c
  2364  00EA26  0E58               	movlw	88
  2365  00EA28                     u2597:
  2366  00EA28  2EE8               	decfsz	wreg,f,c
  2367  00EA2A  D7FE               	bra	u2597
  2368  00EA2C  2E01               	decfsz	??_pushBottle& (0+255),f,c
  2369  00EA2E  D7FC               	bra	u2597
  2370  00EA30  D000               	nop2	
  2371                           
  2372                           ;main.c: 420: PORTCbits.RC1 = 0;
  2373  00EA32  9282               	bcf	3970,1,c	;volatile
  2374                           
  2375                           ;main.c: 421: _delay((unsigned long)((16400)*(8000000/4000000.0)));
  2376  00EA34  0E2B               	movlw	43
  2377  00EA36  6E01               	movwf	??_pushBottle& (0+255),c
  2378  00EA38  0E98               	movlw	152
  2379  00EA3A                     u2607:
  2380  00EA3A  2EE8               	decfsz	wreg,f,c
  2381  00EA3C  D7FE               	bra	u2607
  2382  00EA3E  2E01               	decfsz	??_pushBottle& (0+255),f,c
  2383  00EA40  D7FC               	bra	u2607
  2384  00EA42  4A03               	infsnz	pushBottle@i,f,c
  2385  00EA44  2A04               	incf	pushBottle@i+1,f,c
  2386  00EA46  D7E6               	goto	l1743
  2387  00EA48                     l1753:
  2388                           
  2389                           ;main.c: 422: }
  2390                           ;main.c: 424: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2391  00EA48  0E15               	movlw	21
  2392  00EA4A  6E02               	movwf	(??_pushBottle+1)& (0+255),c
  2393  00EA4C  0E4B               	movlw	75
  2394  00EA4E  6E01               	movwf	??_pushBottle& (0+255),c
  2395  00EA50  0EBE               	movlw	190
  2396  00EA52                     u2617:
  2397  00EA52  2EE8               	decfsz	wreg,f,c
  2398  00EA54  D7FE               	bra	u2617
  2399  00EA56  2E01               	decfsz	??_pushBottle& (0+255),f,c
  2400  00EA58  D7FC               	bra	u2617
  2401  00EA5A  2E02               	decfsz	(??_pushBottle+1)& (0+255),f,c
  2402  00EA5C  D7FA               	bra	u2617
  2403  00EA5E  D000               	nop2	
  2404  00EA60  0012               	return		;funcret
  2405  00EA62                     __end_of_pushBottle:
  2406                           	opt stack 0
  2407                           tblptru	equ	0xFF8
  2408                           tblptrh	equ	0xFF7
  2409                           tblptrl	equ	0xFF6
  2410                           tablat	equ	0xFF5
  2411                           prodh	equ	0xFF4
  2412                           prodl	equ	0xFF3
  2413                           postinc0	equ	0xFEE
  2414                           wreg	equ	0xFE8
  2415                           indf1	equ	0xFE7
  2416                           postdec1	equ	0xFE5
  2417                           fsr1h	equ	0xFE2
  2418                           fsr1l	equ	0xFE1
  2419                           indf2	equ	0xFDF
  2420                           postinc2	equ	0xFDE
  2421                           postdec2	equ	0xFDD
  2422                           fsr2h	equ	0xFDA
  2423                           fsr2l	equ	0xFD9
  2424                           status	equ	0xFD8
  2425                           
  2426 ;; *************** function _moveBinServo *****************
  2427 ;; Defined at:
  2428 ;;		line 358 in file "main.c"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;  num             2    0[COMRAM] int 
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;  i               2    4[COMRAM] unsigned int 
  2433 ;; Return value:  Size  Location     Type
  2434 ;;                  1    wreg      void 
  2435 ;; Registers used:
  2436 ;;		wreg, status,2, status,0
  2437 ;; Tracked objects:
  2438 ;;		On entry : 0/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2442 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2443 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2444 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2445 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2446 ;;Total ram usage:        6 bytes
  2447 ;; Hardware stack levels used:    1
  2448 ;; This function calls:
  2449 ;;		Nothing
  2450 ;; This function is called by:
  2451 ;;		_main
  2452 ;;		_operation
  2453 ;; This function uses a non-reentrant model
  2454 ;;
  2455                           
  2456                           	psect	text5
  2457  00EF98                     __ptext5:
  2458                           	opt stack 0
  2459  00EF98                     _moveBinServo:
  2460                           	opt stack 29
  2461                           
  2462                           ;main.c: 359: unsigned int i;
  2463                           ;main.c: 360: if (num == 0){
  2464                           
  2465                           ;incstack = 0
  2466  00EF98  5001               	movf	moveBinServo@num,w,c
  2467  00EF9A  1002               	iorwf	moveBinServo@num+1,w,c
  2468  00EF9C  A4D8               	btfss	status,2,c
  2469  00EF9E  D021               	goto	l2575
  2470                           
  2471                           ;main.c: 362: for(i=0;i<50;i++)
  2472  00EFA0  0E00               	movlw	0
  2473  00EFA2  6E06               	movwf	moveBinServo@i+1,c
  2474  00EFA4  0E00               	movlw	0
  2475  00EFA6  6E05               	movwf	moveBinServo@i,c
  2476  00EFA8  5006               	movf	moveBinServo@i+1,w,c
  2477  00EFAA  E105               	bnz	u1920
  2478  00EFAC  0E32               	movlw	50
  2479  00EFAE  5C05               	subwf	moveBinServo@i,w,c
  2480  00EFB0  B0D8               	btfsc	status,0,c
  2481  00EFB2  D080               	goto	l2617
  2482  00EFB4  D001               	goto	l239
  2483  00EFB6                     u1920:
  2484  00EFB6  D07E               	goto	l2617
  2485  00EFB8                     l239:
  2486                           
  2487                           ;main.c: 363: {
  2488                           ;main.c: 364: PORTCbits.RC2 = 1;
  2489  00EFB8  8482               	bsf	3970,2,c	;volatile
  2490                           
  2491                           ;main.c: 365: _delay((unsigned long)((800)*(8000000/4000000.0)));
  2492  00EFBA  0EE4               	movlw	228
  2493  00EFBC                     u2627:
  2494  00EFBC  D000               	nop2	
  2495  00EFBE  D000               	nop2	
  2496  00EFC0  2EE8               	decfsz	wreg,f,c
  2497  00EFC2  D7FC               	bra	u2627
  2498  00EFC4  D000               	nop2	
  2499  00EFC6  D000               	nop2	
  2500                           
  2501                           ;main.c: 366: PORTCbits.RC2 = 0;
  2502  00EFC8  9482               	bcf	3970,2,c	;volatile
  2503                           
  2504                           ;main.c: 367: _delay((unsigned long)((19200)*(8000000/4000000.0)));
  2505  00EFCA  0E32               	movlw	50
  2506  00EFCC  6E03               	movwf	??_moveBinServo& (0+255),c
  2507  00EFCE  0EDE               	movlw	222
  2508  00EFD0                     u2637:
  2509  00EFD0  2EE8               	decfsz	wreg,f,c
  2510  00EFD2  D7FE               	bra	u2637
  2511  00EFD4  2E03               	decfsz	??_moveBinServo& (0+255),f,c
  2512  00EFD6  D7FC               	bra	u2637
  2513  00EFD8  4A05               	infsnz	moveBinServo@i,f,c
  2514  00EFDA  2A06               	incf	moveBinServo@i+1,f,c
  2515  00EFDC  5006               	movf	moveBinServo@i+1,w,c
  2516  00EFDE  E16A               	bnz	l2617
  2517  00EFE0  D7E5               	goto	L3
  2518  00EFE2                     l2575:
  2519  00EFE2  0401               	decf	moveBinServo@num,w,c
  2520  00EFE4  1002               	iorwf	moveBinServo@num+1,w,c
  2521  00EFE6  A4D8               	btfss	status,2,c
  2522  00EFE8  D01E               	goto	l2589
  2523                           
  2524                           ;main.c: 371: for(i=0;i<50;i++)
  2525  00EFEA  0E00               	movlw	0
  2526  00EFEC  6E06               	movwf	moveBinServo@i+1,c
  2527  00EFEE  0E00               	movlw	0
  2528  00EFF0  6E05               	movwf	moveBinServo@i,c
  2529  00EFF2                     l2579:
  2530  00EFF2  5006               	movf	moveBinServo@i+1,w,c
  2531  00EFF4  E15F               	bnz	l2617
  2532  00EFF6  0E32               	movlw	50
  2533  00EFF8  5C05               	subwf	moveBinServo@i,w,c
  2534  00EFFA  B0D8               	btfsc	status,0,c
  2535  00EFFC  D05B               	goto	l2617
  2536                           
  2537                           ;main.c: 372: {
  2538                           ;main.c: 373: PORTCbits.RC2 = 1;
  2539  00EFFE  8482               	bsf	3970,2,c	;volatile
  2540                           
  2541                           ;main.c: 374: _delay((unsigned long)((1500)*(8000000/4000000.0)));
  2542  00F000  0E04               	movlw	4
  2543  00F002  6E03               	movwf	??_moveBinServo& (0+255),c
  2544  00F004  0EE4               	movlw	228
  2545  00F006                     u2647:
  2546  00F006  2EE8               	decfsz	wreg,f,c
  2547  00F008  D7FE               	bra	u2647
  2548  00F00A  2E03               	decfsz	??_moveBinServo& (0+255),f,c
  2549  00F00C  D7FC               	bra	u2647
  2550  00F00E  D000               	nop2	
  2551                           
  2552                           ;main.c: 375: PORTCbits.RC2 = 0;
  2553  00F010  9482               	bcf	3970,2,c	;volatile
  2554                           
  2555                           ;main.c: 376: _delay((unsigned long)((18500)*(8000000/4000000.0)));
  2556  00F012  0E31               	movlw	49
  2557  00F014  6E03               	movwf	??_moveBinServo& (0+255),c
  2558  00F016  0E0C               	movlw	12
  2559  00F018                     u2657:
  2560  00F018  2EE8               	decfsz	wreg,f,c
  2561  00F01A  D7FE               	bra	u2657
  2562  00F01C  2E03               	decfsz	??_moveBinServo& (0+255),f,c
  2563  00F01E  D7FC               	bra	u2657
  2564  00F020  4A05               	infsnz	moveBinServo@i,f,c
  2565  00F022  2A06               	incf	moveBinServo@i+1,f,c
  2566  00F024  D7E6               	goto	l2579
  2567  00F026                     l2589:
  2568  00F026  0E02               	movlw	2
  2569  00F028  1801               	xorwf	moveBinServo@num,w,c
  2570  00F02A  1002               	iorwf	moveBinServo@num+1,w,c
  2571  00F02C  A4D8               	btfss	status,2,c
  2572  00F02E  D01E               	goto	l2603
  2573                           
  2574                           ;main.c: 380: for(i=0;i<50;i++)
  2575  00F030  0E00               	movlw	0
  2576  00F032  6E06               	movwf	moveBinServo@i+1,c
  2577  00F034  0E00               	movlw	0
  2578  00F036  6E05               	movwf	moveBinServo@i,c
  2579  00F038                     l2593:
  2580  00F038  5006               	movf	moveBinServo@i+1,w,c
  2581  00F03A  E13C               	bnz	l2617
  2582  00F03C  0E32               	movlw	50
  2583  00F03E  5C05               	subwf	moveBinServo@i,w,c
  2584  00F040  B0D8               	btfsc	status,0,c
  2585  00F042  D038               	goto	l2617
  2586                           
  2587                           ;main.c: 381: {
  2588                           ;main.c: 382: PORTCbits.RC2 = 1;
  2589  00F044  8482               	bsf	3970,2,c	;volatile
  2590                           
  2591                           ;main.c: 383: _delay((unsigned long)((2200)*(8000000/4000000.0)));
  2592  00F046  0E06               	movlw	6
  2593  00F048  6E03               	movwf	??_moveBinServo& (0+255),c
  2594  00F04A  0EB6               	movlw	182
  2595  00F04C                     u2667:
  2596  00F04C  2EE8               	decfsz	wreg,f,c
  2597  00F04E  D7FE               	bra	u2667
  2598  00F050  2E03               	decfsz	??_moveBinServo& (0+255),f,c
  2599  00F052  D7FC               	bra	u2667
  2600                           
  2601                           ;main.c: 384: PORTCbits.RC2 = 0;
  2602  00F054  9482               	bcf	3970,2,c	;volatile
  2603                           
  2604                           ;main.c: 385: _delay((unsigned long)((17800)*(8000000/4000000.0)));
  2605  00F056  0E2F               	movlw	47
  2606  00F058  6E03               	movwf	??_moveBinServo& (0+255),c
  2607  00F05A  0E3A               	movlw	58
  2608  00F05C                     u2677:
  2609  00F05C  2EE8               	decfsz	wreg,f,c
  2610  00F05E  D7FE               	bra	u2677
  2611  00F060  2E03               	decfsz	??_moveBinServo& (0+255),f,c
  2612  00F062  D7FC               	bra	u2677
  2613  00F064  D000               	nop2	
  2614  00F066  4A05               	infsnz	moveBinServo@i,f,c
  2615  00F068  2A06               	incf	moveBinServo@i+1,f,c
  2616  00F06A  D7E6               	goto	l2593
  2617  00F06C                     l2603:
  2618  00F06C  0E03               	movlw	3
  2619  00F06E  1801               	xorwf	moveBinServo@num,w,c
  2620  00F070  1002               	iorwf	moveBinServo@num+1,w,c
  2621  00F072  A4D8               	btfss	status,2,c
  2622  00F074  D01F               	goto	l2617
  2623                           
  2624                           ;main.c: 389: for(i=0;i<50;i++)
  2625  00F076  0E00               	movlw	0
  2626  00F078  6E06               	movwf	moveBinServo@i+1,c
  2627  00F07A  0E00               	movlw	0
  2628  00F07C  6E05               	movwf	moveBinServo@i,c
  2629  00F07E                     l2607:
  2630  00F07E  5006               	movf	moveBinServo@i+1,w,c
  2631  00F080  E119               	bnz	l2617
  2632  00F082  0E32               	movlw	50
  2633  00F084  5C05               	subwf	moveBinServo@i,w,c
  2634  00F086  B0D8               	btfsc	status,0,c
  2635  00F088  D015               	goto	l2617
  2636                           
  2637                           ;main.c: 390: {
  2638                           ;main.c: 391: PORTCbits.RC2 = 1;
  2639  00F08A  8482               	bsf	3970,2,c	;volatile
  2640                           
  2641                           ;main.c: 392: _delay((unsigned long)((2900)*(8000000/4000000.0)));
  2642  00F08C  0E08               	movlw	8
  2643  00F08E  6E03               	movwf	??_moveBinServo& (0+255),c
  2644  00F090  0E87               	movlw	135
  2645  00F092                     u2687:
  2646  00F092  2EE8               	decfsz	wreg,f,c
  2647  00F094  D7FE               	bra	u2687
  2648  00F096  2E03               	decfsz	??_moveBinServo& (0+255),f,c
  2649  00F098  D7FC               	bra	u2687
  2650  00F09A  F000               	nop	
  2651                           
  2652                           ;main.c: 393: PORTCbits.RC2 = 0;
  2653  00F09C  9482               	bcf	3970,2,c	;volatile
  2654                           
  2655                           ;main.c: 394: _delay((unsigned long)((17100)*(8000000/4000000.0)));
  2656  00F09E  0E2D               	movlw	45
  2657  00F0A0  6E03               	movwf	??_moveBinServo& (0+255),c
  2658  00F0A2  0E69               	movlw	105
  2659  00F0A4                     u2697:
  2660  00F0A4  2EE8               	decfsz	wreg,f,c
  2661  00F0A6  D7FE               	bra	u2697
  2662  00F0A8  2E03               	decfsz	??_moveBinServo& (0+255),f,c
  2663  00F0AA  D7FC               	bra	u2697
  2664  00F0AC  F000               	nop	
  2665  00F0AE  4A05               	infsnz	moveBinServo@i,f,c
  2666  00F0B0  2A06               	incf	moveBinServo@i+1,f,c
  2667  00F0B2  D7E5               	goto	l2607
  2668  00F0B4                     l2617:
  2669                           
  2670                           ;main.c: 395: }
  2671                           ;main.c: 396: }
  2672                           ;main.c: 397: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2673  00F0B4  0E15               	movlw	21
  2674  00F0B6  6E04               	movwf	(??_moveBinServo+1)& (0+255),c
  2675  00F0B8  0E4B               	movlw	75
  2676  00F0BA  6E03               	movwf	??_moveBinServo& (0+255),c
  2677  00F0BC  0EBE               	movlw	190
  2678  00F0BE                     u2707:
  2679  00F0BE  2EE8               	decfsz	wreg,f,c
  2680  00F0C0  D7FE               	bra	u2707
  2681  00F0C2  2E03               	decfsz	??_moveBinServo& (0+255),f,c
  2682  00F0C4  D7FC               	bra	u2707
  2683  00F0C6  2E04               	decfsz	(??_moveBinServo+1)& (0+255),f,c
  2684  00F0C8  D7FA               	bra	u2707
  2685  00F0CA  D000               	nop2	
  2686  00F0CC  0012               	return		;funcret
  2687  00F0CE                     __end_of_moveBinServo:
  2688                           	opt stack 0
  2689                           tblptru	equ	0xFF8
  2690                           tblptrh	equ	0xFF7
  2691                           tblptrl	equ	0xFF6
  2692                           tablat	equ	0xFF5
  2693                           prodh	equ	0xFF4
  2694                           prodl	equ	0xFF3
  2695                           postinc0	equ	0xFEE
  2696                           wreg	equ	0xFE8
  2697                           indf1	equ	0xFE7
  2698                           postdec1	equ	0xFE5
  2699                           fsr1h	equ	0xFE2
  2700                           fsr1l	equ	0xFE1
  2701                           indf2	equ	0xFDF
  2702                           postinc2	equ	0xFDE
  2703                           postdec2	equ	0xFDD
  2704                           fsr2h	equ	0xFDA
  2705                           fsr2l	equ	0xFD9
  2706                           status	equ	0xFD8
  2707                           
  2708 ;; *************** function _getCurrentTime *****************
  2709 ;; Defined at:
  2710 ;;		line 145 in file "main.c"
  2711 ;; Parameters:    Size  Location     Type
  2712 ;;		None
  2713 ;; Auto vars:     Size  Location     Type
  2714 ;;  str             2   48[COMRAM] unsigned char [2]
  2715 ;;  currentTime     2   44[COMRAM] int 
  2716 ;; Return value:  Size  Location     Type
  2717 ;;                  2   42[COMRAM] int 
  2718 ;; Registers used:
  2719 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2720 ;; Tracked objects:
  2721 ;;		On entry : 0/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2725 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2726 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;Total ram usage:        8 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; Hardware stack levels required when called:    4
  2732 ;; This function calls:
  2733 ;;		___wmul
  2734 ;;		_atoi
  2735 ;;		_sprintf
  2736 ;; This function is called by:
  2737 ;;		_operation
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           	psect	text6
  2742  00ECA8                     __ptext6:
  2743                           	opt stack 0
  2744  00ECA8                     _getCurrentTime:
  2745                           	opt stack 25
  2746                           
  2747                           ;main.c: 146: int currentTime = 0;
  2748                           
  2749                           ;incstack = 0
  2750  00ECA8  0E00               	movlw	0
  2751  00ECAA  6E2E               	movwf	getCurrentTime@currentTime+1,c
  2752  00ECAC  0E00               	movlw	0
  2753  00ECAE  6E2D               	movwf	getCurrentTime@currentTime,c
  2754                           
  2755                           ;main.c: 147: char str[2];
  2756                           ;main.c: 148: sprintf(str, "%02x",time[0]);
  2757  00ECB0  0E31               	movlw	low getCurrentTime@str
  2758  00ECB2  6E1F               	movwf	sprintf@wh,c
  2759  00ECB4  0E00               	movlw	high getCurrentTime@str
  2760  00ECB6  6E20               	movwf	sprintf@wh+1,c
  2761  00ECB8  0E7A               	movlw	low (STR_2+10)
  2762  00ECBA  6E21               	movwf	sprintf@f,c
  2763  00ECBC  0EFF               	movlw	high (STR_2+10)
  2764  00ECBE  6E22               	movwf	sprintf@f+1,c
  2765  00ECC0  C060  F023         	movff	_time,?_sprintf+4
  2766  00ECC4  6A24               	clrf	?_sprintf+5,c
  2767  00ECC6  EC21  F073         	call	_sprintf	;wreg free
  2768                           
  2769                           ;main.c: 149: currentTime += atoi(str);
  2770  00ECCA  0E31               	movlw	low getCurrentTime@str
  2771  00ECCC  6E07               	movwf	atoi@s,c
  2772  00ECCE  0E00               	movlw	high getCurrentTime@str
  2773  00ECD0  6E08               	movwf	atoi@s+1,c
  2774  00ECD2  ECED  F075         	call	_atoi	;wreg free
  2775  00ECD6  5007               	movf	?_atoi,w,c
  2776  00ECD8  262D               	addwf	getCurrentTime@currentTime,f,c
  2777  00ECDA  5008               	movf	?_atoi+1,w,c
  2778  00ECDC  222E               	addwfc	getCurrentTime@currentTime+1,f,c
  2779                           
  2780                           ;main.c: 150: sprintf(str, "%02x",time[1]);
  2781  00ECDE  0E31               	movlw	low getCurrentTime@str
  2782  00ECE0  6E1F               	movwf	sprintf@wh,c
  2783  00ECE2  0E00               	movlw	high getCurrentTime@str
  2784  00ECE4  6E20               	movwf	sprintf@wh+1,c
  2785  00ECE6  0E7A               	movlw	low (STR_2+10)
  2786  00ECE8  6E21               	movwf	sprintf@f,c
  2787  00ECEA  0EFF               	movlw	high (STR_2+10)
  2788  00ECEC  6E22               	movwf	sprintf@f+1,c
  2789  00ECEE  C061  F023         	movff	_time+1,?_sprintf+4
  2790  00ECF2  6A24               	clrf	?_sprintf+5,c
  2791  00ECF4  EC21  F073         	call	_sprintf	;wreg free
  2792                           
  2793                           ;main.c: 151: currentTime += atoi(str)*60;
  2794  00ECF8  0E31               	movlw	low getCurrentTime@str
  2795  00ECFA  6E07               	movwf	atoi@s,c
  2796  00ECFC  0E00               	movlw	high getCurrentTime@str
  2797  00ECFE  6E08               	movwf	atoi@s+1,c
  2798  00ED00  ECED  F075         	call	_atoi	;wreg free
  2799  00ED04  C007  F02F         	movff	?_atoi,_getCurrentTime$1352
  2800  00ED08  C008  F030         	movff	?_atoi+1,_getCurrentTime$1352+1
  2801                           
  2802                           ;main.c: 151: currentTime += atoi(str)*60;
  2803  00ED0C  C02F  F001         	movff	_getCurrentTime$1352,___wmul@multiplier
  2804  00ED10  C030  F002         	movff	_getCurrentTime$1352+1,___wmul@multiplier+1
  2805  00ED14  0E00               	movlw	0
  2806  00ED16  6E04               	movwf	___wmul@multiplicand+1,c
  2807  00ED18  0E3C               	movlw	60
  2808  00ED1A  6E03               	movwf	___wmul@multiplicand,c
  2809  00ED1C  EC68  F072         	call	___wmul	;wreg free
  2810  00ED20  5001               	movf	?___wmul,w,c
  2811  00ED22  262D               	addwf	getCurrentTime@currentTime,f,c
  2812  00ED24  5002               	movf	?___wmul+1,w,c
  2813  00ED26  222E               	addwfc	getCurrentTime@currentTime+1,f,c
  2814                           
  2815                           ;main.c: 152: sprintf(str, "%02x",time[2]);
  2816  00ED28  0E31               	movlw	low getCurrentTime@str
  2817  00ED2A  6E1F               	movwf	sprintf@wh,c
  2818  00ED2C  0E00               	movlw	high getCurrentTime@str
  2819  00ED2E  6E20               	movwf	sprintf@wh+1,c
  2820  00ED30  0E7A               	movlw	low (STR_2+10)
  2821  00ED32  6E21               	movwf	sprintf@f,c
  2822  00ED34  0EFF               	movlw	high (STR_2+10)
  2823  00ED36  6E22               	movwf	sprintf@f+1,c
  2824  00ED38  C062  F023         	movff	_time+2,?_sprintf+4
  2825  00ED3C  6A24               	clrf	?_sprintf+5,c
  2826  00ED3E  EC21  F073         	call	_sprintf	;wreg free
  2827                           
  2828                           ;main.c: 153: currentTime += atoi(str)*3600;
  2829  00ED42  0E31               	movlw	low getCurrentTime@str
  2830  00ED44  6E07               	movwf	atoi@s,c
  2831  00ED46  0E00               	movlw	high getCurrentTime@str
  2832  00ED48  6E08               	movwf	atoi@s+1,c
  2833  00ED4A  ECED  F075         	call	_atoi	;wreg free
  2834  00ED4E  C007  F02F         	movff	?_atoi,_getCurrentTime$1352
  2835  00ED52  C008  F030         	movff	?_atoi+1,_getCurrentTime$1352+1
  2836                           
  2837                           ;main.c: 153: currentTime += atoi(str)*3600;
  2838  00ED56  C02F  F001         	movff	_getCurrentTime$1352,___wmul@multiplier
  2839  00ED5A  C030  F002         	movff	_getCurrentTime$1352+1,___wmul@multiplier+1
  2840  00ED5E  0E0E               	movlw	14
  2841  00ED60  6E04               	movwf	___wmul@multiplicand+1,c
  2842  00ED62  0E10               	movlw	16
  2843  00ED64  6E03               	movwf	___wmul@multiplicand,c
  2844  00ED66  EC68  F072         	call	___wmul	;wreg free
  2845  00ED6A  5001               	movf	?___wmul,w,c
  2846  00ED6C  262D               	addwf	getCurrentTime@currentTime,f,c
  2847  00ED6E  5002               	movf	?___wmul+1,w,c
  2848  00ED70  222E               	addwfc	getCurrentTime@currentTime+1,f,c
  2849                           
  2850                           ;main.c: 154: return currentTime;
  2851  00ED72  C02D  F02B         	movff	getCurrentTime@currentTime,?_getCurrentTime
  2852  00ED76  C02E  F02C         	movff	getCurrentTime@currentTime+1,?_getCurrentTime+1
  2853  00ED7A  0012               	return	
  2854  00ED7C                     __end_of_getCurrentTime:
  2855                           	opt stack 0
  2856                           tblptru	equ	0xFF8
  2857                           tblptrh	equ	0xFF7
  2858                           tblptrl	equ	0xFF6
  2859                           tablat	equ	0xFF5
  2860                           prodh	equ	0xFF4
  2861                           prodl	equ	0xFF3
  2862                           postinc0	equ	0xFEE
  2863                           wreg	equ	0xFE8
  2864                           indf1	equ	0xFE7
  2865                           postdec1	equ	0xFE5
  2866                           fsr1h	equ	0xFE2
  2867                           fsr1l	equ	0xFE1
  2868                           indf2	equ	0xFDF
  2869                           postinc2	equ	0xFDE
  2870                           postdec2	equ	0xFDD
  2871                           fsr2h	equ	0xFDA
  2872                           fsr2l	equ	0xFD9
  2873                           status	equ	0xFD8
  2874                           
  2875 ;; *************** function _sprintf *****************
  2876 ;; Defined at:
  2877 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprintf.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;  wh              2   30[COMRAM] PTR unsigned char 
  2880 ;;		 -> getCurrentTime@str(2), 
  2881 ;;  f               2   32[COMRAM] PTR const unsigned char 
  2882 ;;		 -> STR_5(5), STR_4(5), STR_3(5), 
  2883 ;; Auto vars:     Size  Location     Type
  2884 ;;  pb              4   38[COMRAM] struct __prbuf
  2885 ;;  ap              2   36[COMRAM] PTR void [1]
  2886 ;;		 -> ?_sprintf(2), ?_printf(2), 
  2887 ;; Return value:  Size  Location     Type
  2888 ;;                  2   30[COMRAM] int 
  2889 ;; Registers used:
  2890 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2891 ;; Tracked objects:
  2892 ;;		On entry : 0/0
  2893 ;;		On exit  : 0/0
  2894 ;;		Unchanged: 0/0
  2895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2896 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2897 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2899 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2900 ;;Total ram usage:       12 bytes
  2901 ;; Hardware stack levels used:    1
  2902 ;; Hardware stack levels required when called:    3
  2903 ;; This function calls:
  2904 ;;		__doprnt
  2905 ;; This function is called by:
  2906 ;;		_getCurrentTime
  2907 ;; This function uses a non-reentrant model
  2908 ;;
  2909                           
  2910                           	psect	text7
  2911  00E642                     __ptext7:
  2912                           	opt stack 0
  2913  00E642                     _sprintf:
  2914                           	opt stack 25
  2915                           
  2916                           ;incstack = 0
  2917  00E642  C01F  F027         	movff	sprintf@wh,sprintf@pb
  2918  00E646  C020  F028         	movff	sprintf@wh+1,sprintf@pb+1
  2919  00E64A  0E00               	movlw	0
  2920  00E64C  6E29               	movwf	sprintf@pb+2,c
  2921  00E64E  0E00               	movlw	0
  2922  00E650  6E2A               	movwf	sprintf@pb+3,c
  2923  00E652  0E23               	movlw	low (?_sprintf+4)
  2924  00E654  6E25               	movwf	sprintf@ap,c
  2925  00E656  0E00               	movlw	high (?_sprintf+4)
  2926  00E658  6E26               	movwf	sprintf@ap+1,c
  2927  00E65A  0E27               	movlw	low sprintf@pb
  2928  00E65C  6E0D               	movwf	__doprnt@pb,c
  2929  00E65E  0E00               	movlw	high sprintf@pb
  2930  00E660  6E0E               	movwf	__doprnt@pb+1,c
  2931  00E662  C021  F00F         	movff	sprintf@f,__doprnt@f
  2932  00E666  C022  F010         	movff	sprintf@f+1,__doprnt@f+1
  2933  00E66A  0E25               	movlw	low sprintf@ap
  2934  00E66C  6E11               	movwf	__doprnt@ap,c
  2935  00E66E  0E00               	movlw	high sprintf@ap
  2936  00E670  6E12               	movwf	__doprnt@ap+1,c
  2937  00E672  EC41  F07C         	call	__doprnt	;wreg free
  2938  00E676  C027  FFD9         	movff	sprintf@pb,fsr2l
  2939  00E67A  C028  FFDA         	movff	sprintf@pb+1,fsr2h
  2940  00E67E  0E00               	movlw	0
  2941  00E680  6EDF               	movwf	indf2,c
  2942  00E682  0012               	return	
  2943  00E684                     __end_of_sprintf:
  2944                           	opt stack 0
  2945                           tblptru	equ	0xFF8
  2946                           tblptrh	equ	0xFF7
  2947                           tblptrl	equ	0xFF6
  2948                           tablat	equ	0xFF5
  2949                           prodh	equ	0xFF4
  2950                           prodl	equ	0xFF3
  2951                           postinc0	equ	0xFEE
  2952                           wreg	equ	0xFE8
  2953                           indf1	equ	0xFE7
  2954                           postdec1	equ	0xFE5
  2955                           fsr1h	equ	0xFE2
  2956                           fsr1l	equ	0xFE1
  2957                           indf2	equ	0xFDF
  2958                           postinc2	equ	0xFDE
  2959                           postdec2	equ	0xFDD
  2960                           fsr2h	equ	0xFDA
  2961                           fsr2l	equ	0xFD9
  2962                           status	equ	0xFD8
  2963                           
  2964 ;; *************** function _atoi *****************
  2965 ;; Defined at:
  2966 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\atoi.c"
  2967 ;; Parameters:    Size  Location     Type
  2968 ;;  s               2    6[COMRAM] PTR const unsigned char 
  2969 ;;		 -> getCurrentTime@str(2), 
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;  a               2   11[COMRAM] int 
  2972 ;;  sign            1   10[COMRAM] unsigned char 
  2973 ;; Return value:  Size  Location     Type
  2974 ;;                  2    6[COMRAM] int 
  2975 ;; Registers used:
  2976 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2977 ;; Tracked objects:
  2978 ;;		On entry : 0/0
  2979 ;;		On exit  : 0/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2982 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2983 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2984 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;Total ram usage:        7 bytes
  2987 ;; Hardware stack levels used:    1
  2988 ;; Hardware stack levels required when called:    1
  2989 ;; This function calls:
  2990 ;;		___wmul
  2991 ;;		_isdigit
  2992 ;; This function is called by:
  2993 ;;		_getCurrentTime
  2994 ;; This function uses a non-reentrant model
  2995 ;;
  2996                           
  2997                           	psect	text8
  2998  00EBDA                     __ptext8:
  2999                           	opt stack 0
  3000  00EBDA                     _atoi:
  3001                           	opt stack 27
  3002                           
  3003                           ;incstack = 0
  3004  00EBDA  D002               	goto	l2459
  3005  00EBDC                     l2457:
  3006  00EBDC  4A07               	infsnz	atoi@s,f,c
  3007  00EBDE  2A08               	incf	atoi@s+1,f,c
  3008  00EBE0                     l2459:
  3009  00EBE0  C007  FFD9         	movff	atoi@s,fsr2l
  3010  00EBE4  C008  FFDA         	movff	atoi@s+1,fsr2h
  3011  00EBE8  0E20               	movlw	32
  3012  00EBEA  18DE               	xorwf	postinc2,w,c
  3013  00EBEC  B4D8               	btfsc	status,2,c
  3014  00EBEE  D7F6               	goto	l2457
  3015  00EBF0  C007  FFD9         	movff	atoi@s,fsr2l
  3016  00EBF4  C008  FFDA         	movff	atoi@s+1,fsr2h
  3017  00EBF8  0E09               	movlw	9
  3018  00EBFA  18DE               	xorwf	postinc2,w,c
  3019  00EBFC  B4D8               	btfsc	status,2,c
  3020  00EBFE  D7EE               	goto	l2457
  3021  00EC00  0E00               	movlw	0
  3022  00EC02  6E0D               	movwf	atoi@a+1,c
  3023  00EC04  0E00               	movlw	0
  3024  00EC06  6E0C               	movwf	atoi@a,c
  3025  00EC08  0E00               	movlw	0
  3026  00EC0A  6E0B               	movwf	atoi@sign,c
  3027  00EC0C  C007  FFD9         	movff	atoi@s,fsr2l
  3028  00EC10  C008  FFDA         	movff	atoi@s+1,fsr2h
  3029  00EC14  0E2D               	movlw	45
  3030  00EC16  18DE               	xorwf	postinc2,w,c
  3031  00EC18  A4D8               	btfss	status,2,c
  3032  00EC1A  D002               	goto	l2469
  3033  00EC1C  2A0B               	incf	atoi@sign,f,c
  3034  00EC1E  D024               	goto	l2475
  3035  00EC20                     l2469:
  3036  00EC20  C007  FFD9         	movff	atoi@s,fsr2l
  3037  00EC24  C008  FFDA         	movff	atoi@s+1,fsr2h
  3038  00EC28  0E2B               	movlw	43
  3039  00EC2A  18DE               	xorwf	postinc2,w,c
  3040  00EC2C  A4D8               	btfss	status,2,c
  3041  00EC2E  D01E               	goto	l2477
  3042  00EC30  D01B               	goto	l2475
  3043  00EC32                     l2473:
  3044  00EC32  C00C  F001         	movff	atoi@a,___wmul@multiplier
  3045  00EC36  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  3046  00EC3A  0E00               	movlw	0
  3047  00EC3C  6E04               	movwf	___wmul@multiplicand+1,c
  3048  00EC3E  0E0A               	movlw	10
  3049  00EC40  6E03               	movwf	___wmul@multiplicand,c
  3050  00EC42  EC68  F072         	call	___wmul	;wreg free
  3051  00EC46  C007  FFD9         	movff	atoi@s,fsr2l
  3052  00EC4A  C008  FFDA         	movff	atoi@s+1,fsr2h
  3053  00EC4E  50DF               	movf	indf2,w,c
  3054  00EC50  6E09               	movwf	??_atoi& (0+255),c
  3055  00EC52  6A0A               	clrf	(??_atoi+1)& (0+255),c
  3056  00EC54  5001               	movf	?___wmul,w,c
  3057  00EC56  2609               	addwf	??_atoi,f,c
  3058  00EC58  5002               	movf	?___wmul+1,w,c
  3059  00EC5A  220A               	addwfc	??_atoi+1,f,c
  3060  00EC5C  0ED0               	movlw	208
  3061  00EC5E  2409               	addwf	??_atoi,w,c
  3062  00EC60  6E0C               	movwf	atoi@a,c
  3063  00EC62  0EFF               	movlw	255
  3064  00EC64  200A               	addwfc	??_atoi+1,w,c
  3065  00EC66  6E0D               	movwf	atoi@a+1,c
  3066  00EC68                     l2475:
  3067  00EC68  4A07               	infsnz	atoi@s,f,c
  3068  00EC6A  2A08               	incf	atoi@s+1,f,c
  3069  00EC6C                     l2477:
  3070  00EC6C  C007  FFD9         	movff	atoi@s,fsr2l
  3071  00EC70  C008  FFDA         	movff	atoi@s+1,fsr2h
  3072  00EC74  50DF               	movf	indf2,w,c
  3073  00EC76  EC49  F072         	call	_isdigit
  3074  00EC7A  B0D8               	btfsc	status,0,c
  3075  00EC7C  D7DA               	goto	l2473
  3076  00EC7E  500B               	movf	atoi@sign,w,c
  3077  00EC80  B4D8               	btfsc	status,2,c
  3078  00EC82  D00D               	goto	l642
  3079  00EC84  C00C  F009         	movff	atoi@a,??_atoi
  3080  00EC88  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  3081  00EC8C  1E09               	comf	??_atoi,f,c
  3082  00EC8E  1E0A               	comf	??_atoi+1,f,c
  3083  00EC90  4A09               	infsnz	??_atoi,f,c
  3084  00EC92  2A0A               	incf	??_atoi+1,f,c
  3085  00EC94  C009  F007         	movff	??_atoi,?_atoi
  3086  00EC98  C00A  F008         	movff	??_atoi+1,?_atoi+1
  3087  00EC9C  0012               	return	
  3088  00EC9E                     l642:
  3089  00EC9E  C00C  F007         	movff	atoi@a,?_atoi
  3090  00ECA2  C00D  F008         	movff	atoi@a+1,?_atoi+1
  3091  00ECA6  0012               	return		;funcret
  3092  00ECA8                     __end_of_atoi:
  3093                           	opt stack 0
  3094                           tblptru	equ	0xFF8
  3095                           tblptrh	equ	0xFF7
  3096                           tblptrl	equ	0xFF6
  3097                           tablat	equ	0xFF5
  3098                           prodh	equ	0xFF4
  3099                           prodl	equ	0xFF3
  3100                           postinc0	equ	0xFEE
  3101                           wreg	equ	0xFE8
  3102                           indf1	equ	0xFE7
  3103                           postdec1	equ	0xFE5
  3104                           fsr1h	equ	0xFE2
  3105                           fsr1l	equ	0xFE1
  3106                           indf2	equ	0xFDF
  3107                           postinc2	equ	0xFDE
  3108                           postdec2	equ	0xFDD
  3109                           fsr2h	equ	0xFDA
  3110                           fsr2l	equ	0xFD9
  3111                           status	equ	0xFD8
  3112                           
  3113 ;; *************** function _initializePicSettings *****************
  3114 ;; Defined at:
  3115 ;;		line 74 in file "main.c"
  3116 ;; Parameters:    Size  Location     Type
  3117 ;;		None
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;		None
  3120 ;; Return value:  Size  Location     Type
  3121 ;;                  1    wreg      void 
  3122 ;; Registers used:
  3123 ;;		wreg, status,2, status,0, cstack
  3124 ;; Tracked objects:
  3125 ;;		On entry : 0/0
  3126 ;;		On exit  : 0/0
  3127 ;;		Unchanged: 0/0
  3128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3132 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3133 ;;Total ram usage:        0 bytes
  3134 ;; Hardware stack levels used:    1
  3135 ;; Hardware stack levels required when called:    3
  3136 ;; This function calls:
  3137 ;;		_initializeLCDScreen
  3138 ;;		_initializePicPins
  3139 ;;		_initializeRTC
  3140 ;; This function is called by:
  3141 ;;		_main
  3142 ;; This function uses a non-reentrant model
  3143 ;;
  3144                           
  3145                           	psect	text9
  3146  00E4B0                     __ptext9:
  3147                           	opt stack 0
  3148  00E4B0                     _initializePicSettings:
  3149                           	opt stack 27
  3150                           
  3151                           ;main.c: 75: initializePicPins();
  3152                           
  3153                           ;incstack = 0
  3154  00E4B0  ECA1  F072         	call	_initializePicPins	;wreg free
  3155                           
  3156                           ;main.c: 77: initializeLCDScreen();
  3157  00E4B4  EC42  F073         	call	_initializeLCDScreen	;wreg free
  3158                           
  3159                           ;main.c: 79: initializeRTC(10000);
  3160  00E4B8  0E10               	movlw	16
  3161  00E4BA  6E0E               	movwf	initializeRTC@c,c
  3162  00E4BC  0E27               	movlw	39
  3163  00E4BE  6E0F               	movwf	initializeRTC@c+1,c
  3164  00E4C0  0E00               	movlw	0
  3165  00E4C2  6E10               	movwf	initializeRTC@c+2,c
  3166  00E4C4  0E00               	movlw	0
  3167  00E4C6  6E11               	movwf	initializeRTC@c+3,c
  3168  00E4C8  ECB9  F073         	call	_initializeRTC	;wreg free
  3169                           
  3170                           ;main.c: 81: (INTCONbits.GIE = 0);
  3171  00E4CC  9EF2               	bcf	intcon,7,c	;volatile
  3172  00E4CE  0012               	return		;funcret
  3173  00E4D0                     __end_of_initializePicSettings:
  3174                           	opt stack 0
  3175                           tblptru	equ	0xFF8
  3176                           tblptrh	equ	0xFF7
  3177                           tblptrl	equ	0xFF6
  3178                           tablat	equ	0xFF5
  3179                           prodh	equ	0xFF4
  3180                           prodl	equ	0xFF3
  3181                           intcon	equ	0xFF2
  3182                           postinc0	equ	0xFEE
  3183                           wreg	equ	0xFE8
  3184                           indf1	equ	0xFE7
  3185                           postdec1	equ	0xFE5
  3186                           fsr1h	equ	0xFE2
  3187                           fsr1l	equ	0xFE1
  3188                           indf2	equ	0xFDF
  3189                           postinc2	equ	0xFDE
  3190                           postdec2	equ	0xFDD
  3191                           fsr2h	equ	0xFDA
  3192                           fsr2l	equ	0xFD9
  3193                           status	equ	0xFD8
  3194                           
  3195 ;; *************** function _initializeRTC *****************
  3196 ;; Defined at:
  3197 ;;		line 13 in file "I2C.c"
  3198 ;; Parameters:    Size  Location     Type
  3199 ;;  c               4   13[COMRAM] const unsigned long 
  3200 ;; Auto vars:     Size  Location     Type
  3201 ;;		None
  3202 ;; Return value:  Size  Location     Type
  3203 ;;                  1    wreg      void 
  3204 ;; Registers used:
  3205 ;;		wreg, status,2, status,0, cstack
  3206 ;; Tracked objects:
  3207 ;;		On entry : 0/0
  3208 ;;		On exit  : 0/0
  3209 ;;		Unchanged: 0/0
  3210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3211 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3213 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3214 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3215 ;;Total ram usage:        8 bytes
  3216 ;; Hardware stack levels used:    1
  3217 ;; Hardware stack levels required when called:    1
  3218 ;; This function calls:
  3219 ;;		___lldiv
  3220 ;; This function is called by:
  3221 ;;		_initializePicSettings
  3222 ;; This function uses a non-reentrant model
  3223 ;;
  3224                           
  3225                           	psect	text10
  3226  00E772                     __ptext10:
  3227                           	opt stack 0
  3228  00E772                     _initializeRTC:
  3229                           	opt stack 28
  3230                           
  3231                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3232                           
  3233                           ;incstack = 0
  3234  00E772  0E00               	movlw	0
  3235  00E774  6EC7               	movwf	4039,c	;volatile
  3236                           
  3237                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3238  00E776  0E28               	movlw	40
  3239  00E778  6EC6               	movwf	4038,c	;volatile
  3240                           
  3241                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3242  00E77A  0E00               	movlw	0
  3243  00E77C  6EC5               	movwf	4037,c	;volatile
  3244                           
  3245                           ;I2C.c: 19: SSPADD = (8000000/(4*c))-1;
  3246  00E77E  0E00               	movlw	0
  3247  00E780  6E01               	movwf	___lldiv@dividend,c
  3248  00E782  0E12               	movlw	18
  3249  00E784  6E02               	movwf	___lldiv@dividend+1,c
  3250  00E786  0E7A               	movlw	122
  3251  00E788  6E03               	movwf	___lldiv@dividend+2,c
  3252  00E78A  0E00               	movlw	0
  3253  00E78C  6E04               	movwf	___lldiv@dividend+3,c
  3254  00E78E  C00E  F012         	movff	initializeRTC@c,??_initializeRTC
  3255  00E792  C00F  F013         	movff	initializeRTC@c+1,??_initializeRTC+1
  3256  00E796  C010  F014         	movff	initializeRTC@c+2,??_initializeRTC+2
  3257  00E79A  C011  F015         	movff	initializeRTC@c+3,??_initializeRTC+3
  3258  00E79E  0E02               	movlw	2
  3259  00E7A0                     u2085:
  3260  00E7A0  90D8               	bcf	status,0,c
  3261  00E7A2  3612               	rlcf	??_initializeRTC,f,c
  3262  00E7A4  3613               	rlcf	??_initializeRTC+1,f,c
  3263  00E7A6  3614               	rlcf	??_initializeRTC+2,f,c
  3264  00E7A8  3615               	rlcf	??_initializeRTC+3,f,c
  3265  00E7AA  2EE8               	decfsz	wreg,f,c
  3266  00E7AC  D7F9               	goto	u2085
  3267  00E7AE  C012  F005         	movff	??_initializeRTC,___lldiv@divisor
  3268  00E7B2  C013  F006         	movff	??_initializeRTC+1,___lldiv@divisor+1
  3269  00E7B6  C014  F007         	movff	??_initializeRTC+2,___lldiv@divisor+2
  3270  00E7BA  C015  F008         	movff	??_initializeRTC+3,___lldiv@divisor+3
  3271  00E7BE  EC56  F074         	call	___lldiv	;wreg free
  3272  00E7C2  0401               	decf	?___lldiv,w,c
  3273  00E7C4  6EC8               	movwf	4040,c	;volatile
  3274                           
  3275                           ;I2C.c: 20: TRISC3 = 1;
  3276  00E7C6  8694               	bsf	3988,3,c	;volatile
  3277                           
  3278                           ;I2C.c: 21: TRISC4 = 1;
  3279  00E7C8  8894               	bsf	3988,4,c	;volatile
  3280  00E7CA  0012               	return		;funcret
  3281  00E7CC                     __end_of_initializeRTC:
  3282                           	opt stack 0
  3283                           tblptru	equ	0xFF8
  3284                           tblptrh	equ	0xFF7
  3285                           tblptrl	equ	0xFF6
  3286                           tablat	equ	0xFF5
  3287                           prodh	equ	0xFF4
  3288                           prodl	equ	0xFF3
  3289                           intcon	equ	0xFF2
  3290                           postinc0	equ	0xFEE
  3291                           wreg	equ	0xFE8
  3292                           indf1	equ	0xFE7
  3293                           postdec1	equ	0xFE5
  3294                           fsr1h	equ	0xFE2
  3295                           fsr1l	equ	0xFE1
  3296                           indf2	equ	0xFDF
  3297                           postinc2	equ	0xFDE
  3298                           postdec2	equ	0xFDD
  3299                           fsr2h	equ	0xFDA
  3300                           fsr2l	equ	0xFD9
  3301                           status	equ	0xFD8
  3302                           
  3303 ;; *************** function ___lldiv *****************
  3304 ;; Defined at:
  3305 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;  dividend        4    0[COMRAM] unsigned long 
  3308 ;;  divisor         4    4[COMRAM] unsigned long 
  3309 ;; Auto vars:     Size  Location     Type
  3310 ;;  quotient        4    8[COMRAM] unsigned long 
  3311 ;;  counter         1   12[COMRAM] unsigned char 
  3312 ;; Return value:  Size  Location     Type
  3313 ;;                  4    0[COMRAM] unsigned long 
  3314 ;; Registers used:
  3315 ;;		wreg, status,2, status,0
  3316 ;; Tracked objects:
  3317 ;;		On entry : 0/0
  3318 ;;		On exit  : 0/0
  3319 ;;		Unchanged: 0/0
  3320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3321 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3322 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3324 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;Total ram usage:       13 bytes
  3326 ;; Hardware stack levels used:    1
  3327 ;; This function calls:
  3328 ;;		Nothing
  3329 ;; This function is called by:
  3330 ;;		_initializeRTC
  3331 ;; This function uses a non-reentrant model
  3332 ;;
  3333                           
  3334                           	psect	text11
  3335  00E8AC                     __ptext11:
  3336                           	opt stack 0
  3337  00E8AC                     ___lldiv:
  3338                           	opt stack 28
  3339                           
  3340                           ;incstack = 0
  3341  00E8AC  0E00               	movlw	0
  3342  00E8AE  6E09               	movwf	___lldiv@quotient,c
  3343  00E8B0  0E00               	movlw	0
  3344  00E8B2  6E0A               	movwf	___lldiv@quotient+1,c
  3345  00E8B4  0E00               	movlw	0
  3346  00E8B6  6E0B               	movwf	___lldiv@quotient+2,c
  3347  00E8B8  0E00               	movlw	0
  3348  00E8BA  6E0C               	movwf	___lldiv@quotient+3,c
  3349  00E8BC  5005               	movf	___lldiv@divisor,w,c
  3350  00E8BE  1006               	iorwf	___lldiv@divisor+1,w,c
  3351  00E8C0  1007               	iorwf	___lldiv@divisor+2,w,c
  3352  00E8C2  1008               	iorwf	___lldiv@divisor+3,w,c
  3353  00E8C4  B4D8               	btfsc	status,2,c
  3354  00E8C6  D02A               	goto	l839
  3355  00E8C8  0E01               	movlw	1
  3356  00E8CA  6E0D               	movwf	___lldiv@counter,c
  3357  00E8CC  D006               	goto	l2547
  3358  00E8CE                     l2545:
  3359  00E8CE  90D8               	bcf	status,0,c
  3360  00E8D0  3605               	rlcf	___lldiv@divisor,f,c
  3361  00E8D2  3606               	rlcf	___lldiv@divisor+1,f,c
  3362  00E8D4  3607               	rlcf	___lldiv@divisor+2,f,c
  3363  00E8D6  3608               	rlcf	___lldiv@divisor+3,f,c
  3364  00E8D8  2A0D               	incf	___lldiv@counter,f,c
  3365  00E8DA                     l2547:
  3366  00E8DA  AE08               	btfss	___lldiv@divisor+3,7,c
  3367  00E8DC  D7F8               	goto	l2545
  3368  00E8DE                     l2549:
  3369  00E8DE  90D8               	bcf	status,0,c
  3370  00E8E0  3609               	rlcf	___lldiv@quotient,f,c
  3371  00E8E2  360A               	rlcf	___lldiv@quotient+1,f,c
  3372  00E8E4  360B               	rlcf	___lldiv@quotient+2,f,c
  3373  00E8E6  360C               	rlcf	___lldiv@quotient+3,f,c
  3374  00E8E8  5005               	movf	___lldiv@divisor,w,c
  3375  00E8EA  5C01               	subwf	___lldiv@dividend,w,c
  3376  00E8EC  5006               	movf	___lldiv@divisor+1,w,c
  3377  00E8EE  5802               	subwfb	___lldiv@dividend+1,w,c
  3378  00E8F0  5007               	movf	___lldiv@divisor+2,w,c
  3379  00E8F2  5803               	subwfb	___lldiv@dividend+2,w,c
  3380  00E8F4  5008               	movf	___lldiv@divisor+3,w,c
  3381  00E8F6  5804               	subwfb	___lldiv@dividend+3,w,c
  3382  00E8F8  A0D8               	btfss	status,0,c
  3383  00E8FA  D009               	goto	l2557
  3384  00E8FC  5005               	movf	___lldiv@divisor,w,c
  3385  00E8FE  5E01               	subwf	___lldiv@dividend,f,c
  3386  00E900  5006               	movf	___lldiv@divisor+1,w,c
  3387  00E902  5A02               	subwfb	___lldiv@dividend+1,f,c
  3388  00E904  5007               	movf	___lldiv@divisor+2,w,c
  3389  00E906  5A03               	subwfb	___lldiv@dividend+2,f,c
  3390  00E908  5008               	movf	___lldiv@divisor+3,w,c
  3391  00E90A  5A04               	subwfb	___lldiv@dividend+3,f,c
  3392  00E90C  8009               	bsf	___lldiv@quotient,0,c
  3393  00E90E                     l2557:
  3394  00E90E  90D8               	bcf	status,0,c
  3395  00E910  3208               	rrcf	___lldiv@divisor+3,f,c
  3396  00E912  3207               	rrcf	___lldiv@divisor+2,f,c
  3397  00E914  3206               	rrcf	___lldiv@divisor+1,f,c
  3398  00E916  3205               	rrcf	___lldiv@divisor,f,c
  3399  00E918  2E0D               	decfsz	___lldiv@counter,f,c
  3400  00E91A  D7E1               	goto	l2549
  3401  00E91C                     l839:
  3402  00E91C  C009  F001         	movff	___lldiv@quotient,?___lldiv
  3403  00E920  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  3404  00E924  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3405  00E928  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3406  00E92C  0012               	return		;funcret
  3407  00E92E                     __end_of___lldiv:
  3408                           	opt stack 0
  3409                           tblptru	equ	0xFF8
  3410                           tblptrh	equ	0xFF7
  3411                           tblptrl	equ	0xFF6
  3412                           tablat	equ	0xFF5
  3413                           prodh	equ	0xFF4
  3414                           prodl	equ	0xFF3
  3415                           intcon	equ	0xFF2
  3416                           postinc0	equ	0xFEE
  3417                           wreg	equ	0xFE8
  3418                           indf1	equ	0xFE7
  3419                           postdec1	equ	0xFE5
  3420                           fsr1h	equ	0xFE2
  3421                           fsr1l	equ	0xFE1
  3422                           indf2	equ	0xFDF
  3423                           postinc2	equ	0xFDE
  3424                           postdec2	equ	0xFDD
  3425                           fsr2h	equ	0xFDA
  3426                           fsr2l	equ	0xFD9
  3427                           status	equ	0xFD8
  3428                           
  3429 ;; *************** function _initializePicPins *****************
  3430 ;; Defined at:
  3431 ;;		line 84 in file "main.c"
  3432 ;; Parameters:    Size  Location     Type
  3433 ;;		None
  3434 ;; Auto vars:     Size  Location     Type
  3435 ;;		None
  3436 ;; Return value:  Size  Location     Type
  3437 ;;                  1    wreg      void 
  3438 ;; Registers used:
  3439 ;;		wreg, status,2
  3440 ;; Tracked objects:
  3441 ;;		On entry : 0/0
  3442 ;;		On exit  : 0/0
  3443 ;;		Unchanged: 0/0
  3444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3445 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3448 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3449 ;;Total ram usage:        0 bytes
  3450 ;; Hardware stack levels used:    1
  3451 ;; This function calls:
  3452 ;;		Nothing
  3453 ;; This function is called by:
  3454 ;;		_initializePicSettings
  3455 ;; This function uses a non-reentrant model
  3456 ;;
  3457                           
  3458                           	psect	text12
  3459  00E542                     __ptext12:
  3460                           	opt stack 0
  3461  00E542                     _initializePicPins:
  3462                           	opt stack 29
  3463                           
  3464                           ;main.c: 86: TRISA = 0xFF;
  3465                           
  3466                           ;incstack = 0
  3467  00E542  6892               	setf	3986,c	;volatile
  3468                           
  3469                           ;main.c: 87: TRISB = 0xFF;
  3470  00E544  6893               	setf	3987,c	;volatile
  3471                           
  3472                           ;main.c: 90: TRISC = 0x00;
  3473  00E546  0E00               	movlw	0
  3474  00E548  6E94               	movwf	3988,c	;volatile
  3475                           
  3476                           ;main.c: 91: TRISD = 0x00;
  3477  00E54A  0E00               	movlw	0
  3478  00E54C  6E95               	movwf	3989,c	;volatile
  3479                           
  3480                           ;main.c: 92: TRISE = 0x00;
  3481  00E54E  0E00               	movlw	0
  3482  00E550  6E96               	movwf	3990,c	;volatile
  3483                           
  3484                           ;main.c: 95: LATB = 0x00;
  3485  00E552  0E00               	movlw	0
  3486  00E554  6E8A               	movwf	3978,c	;volatile
  3487                           
  3488                           ;main.c: 96: LATC = 0x00;
  3489  00E556  0E00               	movlw	0
  3490  00E558  6E8B               	movwf	3979,c	;volatile
  3491                           
  3492                           ;main.c: 97: LATD = 0x00;
  3493  00E55A  0E00               	movlw	0
  3494  00E55C  6E8C               	movwf	3980,c	;volatile
  3495                           
  3496                           ;main.c: 98: LATE = 0x00;
  3497  00E55E  0E00               	movlw	0
  3498  00E560  6E8D               	movwf	3981,c	;volatile
  3499                           
  3500                           ;main.c: 101: ADCON0 = 0x00;
  3501  00E562  0E00               	movlw	0
  3502  00E564  6EC2               	movwf	4034,c	;volatile
  3503                           
  3504                           ;main.c: 103: ADCON1 = 0xFF;
  3505  00E566  68C1               	setf	4033,c	;volatile
  3506                           
  3507                           ;main.c: 104: nRBPU = 0;
  3508  00E568  9EF1               	bcf	intcon2,7,c	;volatile
  3509  00E56A  0012               	return		;funcret
  3510  00E56C                     __end_of_initializePicPins:
  3511                           	opt stack 0
  3512                           tblptru	equ	0xFF8
  3513                           tblptrh	equ	0xFF7
  3514                           tblptrl	equ	0xFF6
  3515                           tablat	equ	0xFF5
  3516                           prodh	equ	0xFF4
  3517                           prodl	equ	0xFF3
  3518                           intcon	equ	0xFF2
  3519                           intcon2	equ	0xFF1
  3520                           postinc0	equ	0xFEE
  3521                           wreg	equ	0xFE8
  3522                           indf1	equ	0xFE7
  3523                           postdec1	equ	0xFE5
  3524                           fsr1h	equ	0xFE2
  3525                           fsr1l	equ	0xFE1
  3526                           indf2	equ	0xFDF
  3527                           postinc2	equ	0xFDE
  3528                           postdec2	equ	0xFDD
  3529                           fsr2h	equ	0xFDA
  3530                           fsr2l	equ	0xFD9
  3531                           status	equ	0xFD8
  3532                           
  3533 ;; *************** function _initializeLCDScreen *****************
  3534 ;; Defined at:
  3535 ;;		line 14 in file "lcd.c"
  3536 ;; Parameters:    Size  Location     Type
  3537 ;;		None
  3538 ;; Auto vars:     Size  Location     Type
  3539 ;;		None
  3540 ;; Return value:  Size  Location     Type
  3541 ;;                  1    wreg      void 
  3542 ;; Registers used:
  3543 ;;		wreg, status,2, status,0, cstack
  3544 ;; Tracked objects:
  3545 ;;		On entry : 0/0
  3546 ;;		On exit  : 0/0
  3547 ;;		Unchanged: 0/0
  3548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3550 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3551 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3552 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3553 ;;Total ram usage:        1 bytes
  3554 ;; Hardware stack levels used:    1
  3555 ;; Hardware stack levels required when called:    2
  3556 ;; This function calls:
  3557 ;;		_lcdInst
  3558 ;; This function is called by:
  3559 ;;		_initializePicSettings
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           	psect	text13
  3564  00E684                     __ptext13:
  3565                           	opt stack 0
  3566  00E684                     _initializeLCDScreen:
  3567                           	opt stack 27
  3568                           
  3569                           ;lcd.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  3570                           
  3571                           ;incstack = 0
  3572  00E684  0E27               	movlw	39
  3573  00E686  6E04               	movwf	??_initializeLCDScreen& (0+255),c
  3574  00E688  0EF5               	movlw	245
  3575  00E68A                     u2717:
  3576  00E68A  2EE8               	decfsz	wreg,f,c
  3577  00E68C  D7FE               	bra	u2717
  3578  00E68E  2E04               	decfsz	??_initializeLCDScreen& (0+255),f,c
  3579  00E690  D7FC               	bra	u2717
  3580  00E692  F000               	nop	
  3581                           
  3582                           ;lcd.c: 16: lcdInst(0b00110011);
  3583  00E694  0E33               	movlw	51
  3584  00E696  EC23  F072         	call	_lcdInst
  3585                           
  3586                           ;lcd.c: 17: lcdInst(0b00110010);
  3587  00E69A  0E32               	movlw	50
  3588  00E69C  EC23  F072         	call	_lcdInst
  3589                           
  3590                           ;lcd.c: 18: lcdInst(0b00101000);
  3591  00E6A0  0E28               	movlw	40
  3592  00E6A2  EC23  F072         	call	_lcdInst
  3593                           
  3594                           ;lcd.c: 19: lcdInst(0b00001111);
  3595  00E6A6  0E0F               	movlw	15
  3596  00E6A8  EC23  F072         	call	_lcdInst
  3597                           
  3598                           ;lcd.c: 20: lcdInst(0b00000110);
  3599  00E6AC  0E06               	movlw	6
  3600  00E6AE  EC23  F072         	call	_lcdInst
  3601                           
  3602                           ;lcd.c: 21: lcdInst(0b00000001);
  3603  00E6B2  0E01               	movlw	1
  3604  00E6B4  EC23  F072         	call	_lcdInst
  3605                           
  3606                           ;lcd.c: 22: _delay((unsigned long)((15)*(8000000/4000.0)));
  3607  00E6B8  0E27               	movlw	39
  3608  00E6BA  6E04               	movwf	??_initializeLCDScreen& (0+255),c
  3609  00E6BC  0EF5               	movlw	245
  3610  00E6BE                     u2727:
  3611  00E6BE  2EE8               	decfsz	wreg,f,c
  3612  00E6C0  D7FE               	bra	u2727
  3613  00E6C2  2E04               	decfsz	??_initializeLCDScreen& (0+255),f,c
  3614  00E6C4  D7FC               	bra	u2727
  3615  00E6C6  F000               	nop	
  3616  00E6C8  0012               	return		;funcret
  3617  00E6CA                     __end_of_initializeLCDScreen:
  3618                           	opt stack 0
  3619                           tblptru	equ	0xFF8
  3620                           tblptrh	equ	0xFF7
  3621                           tblptrl	equ	0xFF6
  3622                           tablat	equ	0xFF5
  3623                           prodh	equ	0xFF4
  3624                           prodl	equ	0xFF3
  3625                           intcon	equ	0xFF2
  3626                           intcon2	equ	0xFF1
  3627                           postinc0	equ	0xFEE
  3628                           wreg	equ	0xFE8
  3629                           indf1	equ	0xFE7
  3630                           postdec1	equ	0xFE5
  3631                           fsr1h	equ	0xFE2
  3632                           fsr1l	equ	0xFE1
  3633                           indf2	equ	0xFDF
  3634                           postinc2	equ	0xFDE
  3635                           postdec2	equ	0xFDD
  3636                           fsr2h	equ	0xFDA
  3637                           fsr2l	equ	0xFD9
  3638                           status	equ	0xFD8
  3639                           
  3640 ;; *************** function _displayMainProgramLcdScreen *****************
  3641 ;; Defined at:
  3642 ;;		line 158 in file "main.c"
  3643 ;; Parameters:    Size  Location     Type
  3644 ;;  num             2   44[COMRAM] int 
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;		None
  3647 ;; Return value:  Size  Location     Type
  3648 ;;                  1    wreg      void 
  3649 ;; Registers used:
  3650 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 0/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3656 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;Total ram usage:        4 bytes
  3661 ;; Hardware stack levels used:    1
  3662 ;; Hardware stack levels required when called:    5
  3663 ;; This function calls:
  3664 ;;		_lcdClear
  3665 ;;		_lcdInst
  3666 ;;		_printf
  3667 ;;		_updateCurrentTime
  3668 ;; This function is called by:
  3669 ;;		_main
  3670 ;; This function uses a non-reentrant model
  3671 ;;
  3672                           
  3673                           	psect	text14
  3674  00EA62                     __ptext14:
  3675                           	opt stack 0
  3676  00EA62                     _displayMainProgramLcdScreen:
  3677                           	opt stack 25
  3678                           
  3679                           ;main.c: 159: lcdClear();
  3680                           
  3681                           ;incstack = 0
  3682  00EA62  ECB6  F072         	call	_lcdClear	;wreg free
  3683                           
  3684                           ;main.c: 160: switch(num){
  3685  00EA66  D03B               	goto	l2827
  3686  00EA68                     l2811:
  3687                           
  3688                           ;main.c: 162: lcdClear();
  3689  00EA68  ECB6  F072         	call	_lcdClear	;wreg free
  3690                           
  3691                           ;main.c: 163: printf("Begin Sorting");
  3692  00EA6C  0E9B               	movlw	low STR_6
  3693  00EA6E  6E1F               	movwf	printf@f,c
  3694  00EA70  0EFF               	movlw	high STR_6
  3695  00EA72  6E20               	movwf	printf@f+1,c
  3696  00EA74  ECE5  F072         	call	_printf	;wreg free
  3697                           
  3698                           ;main.c: 164: break;
  3699  00EA78  D047               	goto	l2829
  3700  00EA7A                     l2813:
  3701                           
  3702                           ;main.c: 166: updateCurrentTime();
  3703  00EA7A  ECE6  F073         	call	_updateCurrentTime	;wreg free
  3704                           
  3705                           ;main.c: 167: lcdClear();
  3706  00EA7E  ECB6  F072         	call	_lcdClear	;wreg free
  3707                           
  3708                           ;main.c: 168: printf("%02x/%02x   ", time[5],time[4]);
  3709  00EA82  0ED2               	movlw	low STR_1
  3710  00EA84  6E1F               	movwf	printf@f,c
  3711  00EA86  0EFF               	movlw	high STR_1
  3712  00EA88  6E20               	movwf	printf@f+1,c
  3713  00EA8A  C065  F021         	movff	_time+5,?_printf+2
  3714  00EA8E  6A22               	clrf	?_printf+3,c
  3715  00EA90  C064  F023         	movff	_time+4,?_printf+4
  3716  00EA94  6A24               	clrf	?_printf+5,c
  3717  00EA96  ECE5  F072         	call	_printf	;wreg free
  3718                           
  3719                           ;main.c: 169: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  3720  00EA9A  0E70               	movlw	low STR_2
  3721  00EA9C  6E1F               	movwf	printf@f,c
  3722  00EA9E  0EFF               	movlw	high STR_2
  3723  00EAA0  6E20               	movwf	printf@f+1,c
  3724  00EAA2  C062  F021         	movff	_time+2,?_printf+2
  3725  00EAA6  6A22               	clrf	?_printf+3,c
  3726  00EAA8  C061  F023         	movff	_time+1,?_printf+4
  3727  00EAAC  6A24               	clrf	?_printf+5,c
  3728  00EAAE  C060  F025         	movff	_time,?_printf+6
  3729  00EAB2  6A26               	clrf	?_printf+7,c
  3730  00EAB4  ECE5  F072         	call	_printf	;wreg free
  3731                           
  3732                           ;main.c: 170: break;
  3733  00EAB8  D027               	goto	l2829
  3734  00EABA                     l2821:
  3735                           
  3736                           ;main.c: 172: lcdClear();
  3737  00EABA  ECB6  F072         	call	_lcdClear	;wreg free
  3738                           
  3739                           ;main.c: 173: printf("Access EEPROM");
  3740  00EABE  0E8D               	movlw	low STR_9
  3741  00EAC0  6E1F               	movwf	printf@f,c
  3742  00EAC2  0EFF               	movlw	high STR_9
  3743  00EAC4  6E20               	movwf	printf@f+1,c
  3744  00EAC6  ECE5  F072         	call	_printf	;wreg free
  3745                           
  3746                           ;main.c: 174: break;
  3747  00EACA  D01E               	goto	l2829
  3748  00EACC                     l2823:
  3749                           
  3750                           ;main.c: 176: lcdClear();
  3751  00EACC  ECB6  F072         	call	_lcdClear	;wreg free
  3752                           
  3753                           ;main.c: 177: printf("Access Last Run ");
  3754  00EAD0  0EBC               	movlw	low STR_10
  3755  00EAD2  6E1F               	movwf	printf@f,c
  3756  00EAD4  0EFE               	movlw	high STR_10
  3757  00EAD6  6E20               	movwf	printf@f+1,c
  3758  00EAD8  ECE5  F072         	call	_printf	;wreg free
  3759                           
  3760                           ;main.c: 179: }
  3761                           
  3762                           ;main.c: 178: break;
  3763  00EADC  D015               	goto	l2829
  3764  00EADE                     l2827:
  3765  00EADE  C02D  F02F         	movff	displayMainProgramLcdScreen@num,??_displayMainProgramLcdScreen
  3766  00EAE2  C02E  F030         	movff	displayMainProgramLcdScreen@num+1,??_displayMainProgramLcdScreen+1
  3767                           
  3768                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3769                           ; Switch size 1, requested type "space"
  3770                           ; Number of cases is 1, Range of values is 0 to 0
  3771                           ; switch strategies available:
  3772                           ; Name         Instructions Cycles
  3773                           ; simple_byte            4     3 (average)
  3774                           ;	Chosen strategy is simple_byte
  3775  00EAE6  5030               	movf	??_displayMainProgramLcdScreen+1,w,c
  3776  00EAE8  0A00               	xorlw	0	; case 0
  3777  00EAEA  A4D8               	btfss	status,2,c
  3778  00EAEC  D00D               	goto	l2829
  3779                           
  3780                           ; Switch size 1, requested type "space"
  3781                           ; Number of cases is 4, Range of values is 0 to 3
  3782                           ; switch strategies available:
  3783                           ; Name         Instructions Cycles
  3784                           ; simple_byte           13     7 (average)
  3785                           ;	Chosen strategy is simple_byte
  3786  00EAEE  502F               	movf	??_displayMainProgramLcdScreen,w,c
  3787  00EAF0  0A00               	xorlw	0	; case 0
  3788  00EAF2  B4D8               	btfsc	status,2,c
  3789  00EAF4  D7B9               	goto	l2811
  3790  00EAF6  0A01               	xorlw	1	; case 1
  3791  00EAF8  B4D8               	btfsc	status,2,c
  3792  00EAFA  D7BF               	goto	l2813
  3793  00EAFC  0A03               	xorlw	3	; case 2
  3794  00EAFE  B4D8               	btfsc	status,2,c
  3795  00EB00  D7DC               	goto	l2821
  3796  00EB02  0A01               	xorlw	1	; case 3
  3797  00EB04  B4D8               	btfsc	status,2,c
  3798  00EB06  D7E2               	goto	l2823
  3799  00EB08                     l2829:
  3800                           
  3801                           ;main.c: 180: lcdInst(0b11000000);;
  3802  00EB08  0EC0               	movlw	192
  3803  00EB0A  EC23  F072         	call	_lcdInst
  3804                           
  3805                           ;main.c: 181: printf("<4  Start: A  6>");
  3806  00EB0E  0ECD               	movlw	low STR_11
  3807  00EB10  6E1F               	movwf	printf@f,c
  3808  00EB12  0EFE               	movlw	high STR_11
  3809  00EB14  6E20               	movwf	printf@f+1,c
  3810  00EB16  ECE5  F072         	call	_printf	;wreg free
  3811  00EB1A  0012               	return		;funcret
  3812  00EB1C                     __end_of_displayMainProgramLcdScreen:
  3813                           	opt stack 0
  3814                           tblptru	equ	0xFF8
  3815                           tblptrh	equ	0xFF7
  3816                           tblptrl	equ	0xFF6
  3817                           tablat	equ	0xFF5
  3818                           prodh	equ	0xFF4
  3819                           prodl	equ	0xFF3
  3820                           intcon	equ	0xFF2
  3821                           intcon2	equ	0xFF1
  3822                           postinc0	equ	0xFEE
  3823                           wreg	equ	0xFE8
  3824                           indf1	equ	0xFE7
  3825                           postdec1	equ	0xFE5
  3826                           fsr1h	equ	0xFE2
  3827                           fsr1l	equ	0xFE1
  3828                           indf2	equ	0xFDF
  3829                           postinc2	equ	0xFDE
  3830                           postdec2	equ	0xFDD
  3831                           fsr2h	equ	0xFDA
  3832                           fsr2l	equ	0xFD9
  3833                           status	equ	0xFD8
  3834                           
  3835 ;; *************** function _EEPROM *****************
  3836 ;; Defined at:
  3837 ;;		line 315 in file "main.c"
  3838 ;; Parameters:    Size  Location     Type
  3839 ;;		None
  3840 ;; Auto vars:     Size  Location     Type
  3841 ;;  timeStorage    14   54[COMRAM] int [7]
  3842 ;;  storage        12   68[COMRAM] int [6]
  3843 ;;  i               2   83[COMRAM] int 
  3844 ;;  temp            1   80[COMRAM] unsigned char 
  3845 ;;  screen_state    2   81[COMRAM] int 
  3846 ;; Return value:  Size  Location     Type
  3847 ;;                  1    wreg      void 
  3848 ;; Registers used:
  3849 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3850 ;; Tracked objects:
  3851 ;;		On entry : 0/0
  3852 ;;		On exit  : 0/0
  3853 ;;		Unchanged: 0/0
  3854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3855 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3856 ;;      Locals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3857 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3858 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3859 ;;Total ram usage:       33 bytes
  3860 ;; Hardware stack levels used:    1
  3861 ;; Hardware stack levels required when called:    7
  3862 ;; This function calls:
  3863 ;;		_getEEPROM
  3864 ;;		_getUserInput
  3865 ;;		_past_run_access
  3866 ;;		_update_eeprom_screen_state
  3867 ;; This function is called by:
  3868 ;;		_main
  3869 ;; This function uses a non-reentrant model
  3870 ;;
  3871                           
  3872                           	psect	text15
  3873  00F414                     __ptext15:
  3874                           	opt stack 0
  3875  00F414                     _EEPROM:
  3876                           	opt stack 23
  3877                           
  3878                           ;main.c: 316: int screen_state = 0;
  3879                           
  3880                           ;incstack = 0
  3881  00F414  0E00               	movlw	0
  3882  00F416  6E53               	movwf	EEPROM@screen_state+1,c
  3883  00F418  0E00               	movlw	0
  3884  00F41A  6E52               	movwf	EEPROM@screen_state,c
  3885                           
  3886                           ;main.c: 317: update_eeprom_screen_state(screen_state);
  3887  00F41C  C052  F02D         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  3888  00F420  C053  F02E         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  3889  00F424  EC97  F074         	call	_update_eeprom_screen_state	;wreg free
  3890  00F428                     l2943:
  3891                           
  3892                           ;main.c: 319: unsigned char temp = keys[getUserInput()];
  3893  00F428  EC19  F074         	call	_getUserInput	;wreg free
  3894  00F42C  6E35               	movwf	??_EEPROM& (0+255),c
  3895  00F42E  5035               	movf	??_EEPROM,w,c
  3896  00F430  0D01               	mullw	1
  3897  00F432  0E31               	movlw	low _keys
  3898  00F434  24F3               	addwf	prodl,w,c
  3899  00F436  6EF6               	movwf	tblptrl,c
  3900  00F438  0EFE               	movlw	high _keys
  3901  00F43A  20F4               	addwfc	prodh,w,c
  3902  00F43C  6EF7               	movwf	tblptrh,c
  3903  00F43E                     	if	1	;There are 3 active tblptr bytes
  3904  00F43E  6AF8               	clrf	tblptru,c
  3905  00F440  0E00               	movlw	low (__mediumconst shr (0+16))
  3906  00F442  22F8               	addwfc	tblptru,f,c
  3907  00F444                     	endif
  3908  00F444  0008               	tblrd		*
  3909  00F446  CFF5 F051          	movff	tablat,EEPROM@temp
  3910                           
  3911                           ;main.c: 320: if (temp == keys[3]){
  3912  00F44A  0E34               	movlw	low (_keys+3)
  3913  00F44C  6EF6               	movwf	tblptrl,c
  3914  00F44E  0EFE               	movlw	high (_keys+3)
  3915  00F450  6EF7               	movwf	tblptrh,c
  3916  00F452                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3917  00F452  6AF8               	clrf	tblptru,c
  3918  00F454                     	endif
  3919  00F454                     	if	0	;tblptru may be non-zero
  3920  00F454                     	endif
  3921  00F454  0008               	tblrd		*
  3922  00F456  50F5               	movf	tablat,w,c
  3923  00F458  1851               	xorwf	EEPROM@temp,w,c
  3924  00F45A  A4D8               	btfss	status,2,c
  3925  00F45C  D0A4               	goto	l3001
  3926                           
  3927                           ;main.c: 321: int storage[6], timeStorage[7], i;
  3928                           ;main.c: 322: for (i = 0; i <6; i++){
  3929  00F45E  0E00               	movlw	0
  3930  00F460  6E55               	movwf	EEPROM@i+1,c
  3931  00F462  0E00               	movlw	0
  3932  00F464  6E54               	movwf	EEPROM@i,c
  3933  00F466                     l2949:
  3934  00F466  BE55               	btfsc	EEPROM@i+1,7,c
  3935  00F468  D006               	goto	l2953
  3936  00F46A  5055               	movf	EEPROM@i+1,w,c
  3937  00F46C  E11D               	bnz	l2959
  3938  00F46E  0E06               	movlw	6
  3939  00F470  5C54               	subwf	EEPROM@i,w,c
  3940  00F472  B0D8               	btfsc	status,0,c
  3941  00F474  D019               	goto	l2959
  3942  00F476                     l2953:
  3943                           
  3944                           ;main.c: 323: storage[i] = runInfo[i];
  3945  00F476  90D8               	bcf	status,0,c
  3946  00F478  3454               	rlcf	EEPROM@i,w,c
  3947  00F47A  6ED9               	movwf	fsr2l,c
  3948  00F47C  3455               	rlcf	EEPROM@i+1,w,c
  3949  00F47E  6EDA               	movwf	fsr2h,c
  3950  00F480  0E69               	movlw	low _runInfo
  3951  00F482  26D9               	addwf	fsr2l,f,c
  3952  00F484  0E00               	movlw	high _runInfo
  3953  00F486  22DA               	addwfc	fsr2h,f,c
  3954  00F488  90D8               	bcf	status,0,c
  3955  00F48A  3454               	rlcf	EEPROM@i,w,c
  3956  00F48C  6EE1               	movwf	fsr1l,c
  3957  00F48E  3455               	rlcf	EEPROM@i+1,w,c
  3958  00F490  6EE2               	movwf	fsr1h,c
  3959  00F492  0E45               	movlw	low EEPROM@storage
  3960  00F494  26E1               	addwf	fsr1l,f,c
  3961  00F496  0E00               	movlw	high EEPROM@storage
  3962  00F498  22E2               	addwfc	fsr1h,f,c
  3963  00F49A  CFDE FFE6          	movff	postinc2,postinc1
  3964  00F49E  CFDD FFE5          	movff	postdec2,postdec1
  3965  00F4A2  4A54               	infsnz	EEPROM@i,f,c
  3966  00F4A4  2A55               	incf	EEPROM@i+1,f,c
  3967  00F4A6  D7DF               	goto	l2949
  3968  00F4A8                     l2959:
  3969                           
  3970                           ;main.c: 324: }
  3971                           ;main.c: 325: for (i = 0; i<7; i++){
  3972  00F4A8  0E00               	movlw	0
  3973  00F4AA  6E55               	movwf	EEPROM@i+1,c
  3974  00F4AC  0E00               	movlw	0
  3975  00F4AE  6E54               	movwf	EEPROM@i,c
  3976  00F4B0                     l2961:
  3977  00F4B0  BE55               	btfsc	EEPROM@i+1,7,c
  3978  00F4B2  D006               	goto	l2965
  3979  00F4B4  5055               	movf	EEPROM@i+1,w,c
  3980  00F4B6  E11D               	bnz	l2971
  3981  00F4B8  0E07               	movlw	7
  3982  00F4BA  5C54               	subwf	EEPROM@i,w,c
  3983  00F4BC  B0D8               	btfsc	status,0,c
  3984  00F4BE  D019               	goto	l2971
  3985  00F4C0                     l2965:
  3986                           
  3987                           ;main.c: 326: timeStorage[i] = lastRunTime[i];
  3988  00F4C0  0E59               	movlw	low _lastRunTime
  3989  00F4C2  2454               	addwf	EEPROM@i,w,c
  3990  00F4C4  6ED9               	movwf	fsr2l,c
  3991  00F4C6  0E00               	movlw	high _lastRunTime
  3992  00F4C8  2055               	addwfc	EEPROM@i+1,w,c
  3993  00F4CA  6EDA               	movwf	fsr2h,c
  3994  00F4CC  50DF               	movf	indf2,w,c
  3995  00F4CE  6E35               	movwf	??_EEPROM& (0+255),c
  3996  00F4D0  6A36               	clrf	(??_EEPROM+1)& (0+255),c
  3997  00F4D2  90D8               	bcf	status,0,c
  3998  00F4D4  3454               	rlcf	EEPROM@i,w,c
  3999  00F4D6  6ED9               	movwf	fsr2l,c
  4000  00F4D8  3455               	rlcf	EEPROM@i+1,w,c
  4001  00F4DA  6EDA               	movwf	fsr2h,c
  4002  00F4DC  0E37               	movlw	low EEPROM@timeStorage
  4003  00F4DE  26D9               	addwf	fsr2l,f,c
  4004  00F4E0  0E00               	movlw	high EEPROM@timeStorage
  4005  00F4E2  22DA               	addwfc	fsr2h,f,c
  4006  00F4E4  C035  FFDE         	movff	??_EEPROM,postinc2
  4007  00F4E8  C036  FFDD         	movff	??_EEPROM+1,postdec2
  4008  00F4EC  4A54               	infsnz	EEPROM@i,f,c
  4009  00F4EE  2A55               	incf	EEPROM@i+1,f,c
  4010  00F4F0  D7DF               	goto	l2961
  4011  00F4F2                     l2971:
  4012                           
  4013                           ;main.c: 327: }
  4014                           ;main.c: 328: getEEPROM(screen_state);
  4015  00F4F2  C052  F009         	movff	EEPROM@screen_state,getEEPROM@num
  4016  00F4F6  C053  F00A         	movff	EEPROM@screen_state+1,getEEPROM@num+1
  4017  00F4FA  ECBE  F076         	call	_getEEPROM	;wreg free
  4018                           
  4019                           ;main.c: 329: past_run_access();
  4020  00F4FE  EC8E  F075         	call	_past_run_access	;wreg free
  4021                           
  4022                           ;main.c: 330: update_eeprom_screen_state(screen_state);
  4023  00F502  C052  F02D         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  4024  00F506  C053  F02E         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  4025  00F50A  EC97  F074         	call	_update_eeprom_screen_state	;wreg free
  4026                           
  4027                           ;main.c: 331: for (i = 0; i <6; i++){
  4028  00F50E  0E00               	movlw	0
  4029  00F510  6E55               	movwf	EEPROM@i+1,c
  4030  00F512  0E00               	movlw	0
  4031  00F514  6E54               	movwf	EEPROM@i,c
  4032  00F516                     l2979:
  4033  00F516  BE55               	btfsc	EEPROM@i+1,7,c
  4034  00F518  D006               	goto	l2983
  4035  00F51A  5055               	movf	EEPROM@i+1,w,c
  4036  00F51C  E11D               	bnz	l2989
  4037  00F51E  0E06               	movlw	6
  4038  00F520  5C54               	subwf	EEPROM@i,w,c
  4039  00F522  B0D8               	btfsc	status,0,c
  4040  00F524  D019               	goto	l2989
  4041  00F526                     l2983:
  4042                           
  4043                           ;main.c: 332: runInfo[i] = storage[i];
  4044  00F526  90D8               	bcf	status,0,c
  4045  00F528  3454               	rlcf	EEPROM@i,w,c
  4046  00F52A  6ED9               	movwf	fsr2l,c
  4047  00F52C  3455               	rlcf	EEPROM@i+1,w,c
  4048  00F52E  6EDA               	movwf	fsr2h,c
  4049  00F530  0E45               	movlw	low EEPROM@storage
  4050  00F532  26D9               	addwf	fsr2l,f,c
  4051  00F534  0E00               	movlw	high EEPROM@storage
  4052  00F536  22DA               	addwfc	fsr2h,f,c
  4053  00F538  90D8               	bcf	status,0,c
  4054  00F53A  3454               	rlcf	EEPROM@i,w,c
  4055  00F53C  6EE1               	movwf	fsr1l,c
  4056  00F53E  3455               	rlcf	EEPROM@i+1,w,c
  4057  00F540  6EE2               	movwf	fsr1h,c
  4058  00F542  0E69               	movlw	low _runInfo
  4059  00F544  26E1               	addwf	fsr1l,f,c
  4060  00F546  0E00               	movlw	high _runInfo
  4061  00F548  22E2               	addwfc	fsr1h,f,c
  4062  00F54A  CFDE FFE6          	movff	postinc2,postinc1
  4063  00F54E  CFDD FFE5          	movff	postdec2,postdec1
  4064  00F552  4A54               	infsnz	EEPROM@i,f,c
  4065  00F554  2A55               	incf	EEPROM@i+1,f,c
  4066  00F556  D7DF               	goto	l2979
  4067  00F558                     l2989:
  4068                           
  4069                           ;main.c: 333: }
  4070                           ;main.c: 334: for (i = 0; i<7; i++){
  4071  00F558  0E00               	movlw	0
  4072  00F55A  6E55               	movwf	EEPROM@i+1,c
  4073  00F55C  0E00               	movlw	0
  4074  00F55E  6E54               	movwf	EEPROM@i,c
  4075  00F560  BE55               	btfsc	EEPROM@i+1,7,c
  4076  00F562  D008               	goto	l2995
  4077  00F564  5055               	movf	EEPROM@i+1,w,c
  4078  00F566  E105               	bnz	u2410
  4079  00F568  0E07               	movlw	7
  4080  00F56A  5C54               	subwf	EEPROM@i,w,c
  4081  00F56C  B0D8               	btfsc	status,0,c
  4082  00F56E  D75C               	goto	l2943
  4083  00F570  D001               	goto	l2995
  4084  00F572                     u2410:
  4085  00F572  D75A               	goto	l2943
  4086  00F574                     l2995:
  4087                           
  4088                           ;main.c: 335: lastRunTime[i] = timeStorage[i];
  4089  00F574  90D8               	bcf	status,0,c
  4090  00F576  3454               	rlcf	EEPROM@i,w,c
  4091  00F578  6ED9               	movwf	fsr2l,c
  4092  00F57A  3455               	rlcf	EEPROM@i+1,w,c
  4093  00F57C  6EDA               	movwf	fsr2h,c
  4094  00F57E  0E37               	movlw	low EEPROM@timeStorage
  4095  00F580  26D9               	addwf	fsr2l,f,c
  4096  00F582  0E00               	movlw	high EEPROM@timeStorage
  4097  00F584  22DA               	addwfc	fsr2h,f,c
  4098  00F586  0E59               	movlw	low _lastRunTime
  4099  00F588  2454               	addwf	EEPROM@i,w,c
  4100  00F58A  6EE1               	movwf	fsr1l,c
  4101  00F58C  0E00               	movlw	high _lastRunTime
  4102  00F58E  2055               	addwfc	EEPROM@i+1,w,c
  4103  00F590  6EE2               	movwf	fsr1h,c
  4104  00F592  CFDF FFE7          	movff	indf2,indf1
  4105  00F596  4A54               	infsnz	EEPROM@i,f,c
  4106  00F598  2A55               	incf	EEPROM@i+1,f,c
  4107  00F59A  BE55               	btfsc	EEPROM@i+1,7,c
  4108  00F59C  D7EB               	goto	l2995
  4109  00F59E  5055               	movf	EEPROM@i+1,w,c
  4110  00F5A0  E101               	bnz	u2420
  4111  00F5A2  D7E2               	goto	L5
  4112  00F5A4                     u2420:
  4113                           
  4114                           ;main.c: 336: }
  4115                           ;main.c: 337: }else if (temp == keys[15]){
  4116  00F5A4  D741               	goto	l2943
  4117  00F5A6                     l3001:
  4118  00F5A6  0E40               	movlw	low (_keys+15)
  4119  00F5A8  6EF6               	movwf	tblptrl,c
  4120  00F5AA  0EFE               	movlw	high (_keys+15)
  4121  00F5AC  6EF7               	movwf	tblptrh,c
  4122  00F5AE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4123  00F5AE  6AF8               	clrf	tblptru,c
  4124  00F5B0                     	endif
  4125  00F5B0                     	if	0	;tblptru may be non-zero
  4126  00F5B0                     	endif
  4127  00F5B0  0008               	tblrd		*
  4128  00F5B2  50F5               	movf	tablat,w,c
  4129  00F5B4  1851               	xorwf	EEPROM@temp,w,c
  4130  00F5B6  B4D8               	btfsc	status,2,c
  4131  00F5B8  0012               	return	
  4132                           
  4133                           ;main.c: 339: }else if (temp == keys[4]){
  4134                           
  4135                           ;main.c: 338: break;
  4136  00F5BA  0E35               	movlw	low (_keys+4)
  4137  00F5BC  6EF6               	movwf	tblptrl,c
  4138  00F5BE  0EFE               	movlw	high (_keys+4)
  4139  00F5C0  6EF7               	movwf	tblptrh,c
  4140  00F5C2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4141  00F5C2  6AF8               	clrf	tblptru,c
  4142  00F5C4                     	endif
  4143  00F5C4                     	if	0	;tblptru may be non-zero
  4144  00F5C4                     	endif
  4145  00F5C4  0008               	tblrd		*
  4146  00F5C6  50F5               	movf	tablat,w,c
  4147  00F5C8  1851               	xorwf	EEPROM@temp,w,c
  4148  00F5CA  A4D8               	btfss	status,2,c
  4149  00F5CC  D013               	goto	l3017
  4150                           
  4151                           ;main.c: 340: if (screen_state == 0){
  4152  00F5CE  5052               	movf	EEPROM@screen_state,w,c
  4153  00F5D0  1053               	iorwf	EEPROM@screen_state+1,w,c
  4154  00F5D2  A4D8               	btfss	status,2,c
  4155  00F5D4  D005               	goto	l3013
  4156                           
  4157                           ;main.c: 341: screen_state = 3;
  4158  00F5D6  0E00               	movlw	0
  4159  00F5D8  6E53               	movwf	EEPROM@screen_state+1,c
  4160  00F5DA  0E03               	movlw	3
  4161  00F5DC  6E52               	movwf	EEPROM@screen_state,c
  4162                           
  4163                           ;main.c: 342: }else{
  4164  00F5DE  D003               	goto	l3015
  4165  00F5E0                     l3013:
  4166                           
  4167                           ;main.c: 343: screen_state -= 1;
  4168  00F5E0  0652               	decf	EEPROM@screen_state,f,c
  4169  00F5E2  A0D8               	btfss	status,0,c
  4170  00F5E4  0653               	decf	EEPROM@screen_state+1,f,c
  4171  00F5E6                     l3015:
  4172                           
  4173                           ;main.c: 344: }
  4174                           ;main.c: 345: update_eeprom_screen_state(screen_state);
  4175  00F5E6  C052  F02D         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  4176  00F5EA  C053  F02E         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  4177  00F5EE  EC97  F074         	call	_update_eeprom_screen_state	;wreg free
  4178                           
  4179                           ;main.c: 346: }else if (temp == keys[6]){
  4180  00F5F2  D71A               	goto	l2943
  4181  00F5F4                     l3017:
  4182  00F5F4  0E37               	movlw	low (_keys+6)
  4183  00F5F6  6EF6               	movwf	tblptrl,c
  4184  00F5F8  0EFE               	movlw	high (_keys+6)
  4185  00F5FA  6EF7               	movwf	tblptrh,c
  4186  00F5FC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4187  00F5FC  6AF8               	clrf	tblptru,c
  4188  00F5FE                     	endif
  4189  00F5FE                     	if	0	;tblptru may be non-zero
  4190  00F5FE                     	endif
  4191  00F5FE  0008               	tblrd		*
  4192  00F600  50F5               	movf	tablat,w,c
  4193  00F602  1851               	xorwf	EEPROM@temp,w,c
  4194  00F604  A4D8               	btfss	status,2,c
  4195  00F606  D710               	goto	l2943
  4196                           
  4197                           ;main.c: 347: if (screen_state == 3){
  4198  00F608  0E03               	movlw	3
  4199  00F60A  1852               	xorwf	EEPROM@screen_state,w,c
  4200  00F60C  1053               	iorwf	EEPROM@screen_state+1,w,c
  4201  00F60E  A4D8               	btfss	status,2,c
  4202  00F610  D005               	goto	l3023
  4203                           
  4204                           ;main.c: 348: screen_state = 0;
  4205  00F612  0E00               	movlw	0
  4206  00F614  6E53               	movwf	EEPROM@screen_state+1,c
  4207  00F616  0E00               	movlw	0
  4208  00F618  6E52               	movwf	EEPROM@screen_state,c
  4209                           
  4210                           ;main.c: 349: }else{
  4211  00F61A  D002               	goto	l3025
  4212  00F61C                     l3023:
  4213                           
  4214                           ;main.c: 350: screen_state += 1;
  4215  00F61C  4A52               	infsnz	EEPROM@screen_state,f,c
  4216  00F61E  2A53               	incf	EEPROM@screen_state+1,f,c
  4217  00F620                     l3025:
  4218                           
  4219                           ;main.c: 351: }
  4220                           ;main.c: 352: update_eeprom_screen_state(screen_state);
  4221  00F620  C052  F02D         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  4222  00F624  C053  F02E         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  4223  00F628  EC97  F074         	call	_update_eeprom_screen_state	;wreg free
  4224  00F62C  D6FD               	goto	l2943
  4225  00F62E                     __end_of_EEPROM:
  4226                           	opt stack 0
  4227                           tblptru	equ	0xFF8
  4228                           tblptrh	equ	0xFF7
  4229                           tblptrl	equ	0xFF6
  4230                           tablat	equ	0xFF5
  4231                           prodh	equ	0xFF4
  4232                           prodl	equ	0xFF3
  4233                           intcon	equ	0xFF2
  4234                           intcon2	equ	0xFF1
  4235                           postinc0	equ	0xFEE
  4236                           wreg	equ	0xFE8
  4237                           indf1	equ	0xFE7
  4238                           postinc1	equ	0xFE6
  4239                           postdec1	equ	0xFE5
  4240                           fsr1h	equ	0xFE2
  4241                           fsr1l	equ	0xFE1
  4242                           indf2	equ	0xFDF
  4243                           postinc2	equ	0xFDE
  4244                           postdec2	equ	0xFDD
  4245                           fsr2h	equ	0xFDA
  4246                           fsr2l	equ	0xFD9
  4247                           status	equ	0xFD8
  4248                           
  4249 ;; *************** function _update_eeprom_screen_state *****************
  4250 ;; Defined at:
  4251 ;;		line 185 in file "main.c"
  4252 ;; Parameters:    Size  Location     Type
  4253 ;;  num             2   44[COMRAM] int 
  4254 ;; Auto vars:     Size  Location     Type
  4255 ;;		None
  4256 ;; Return value:  Size  Location     Type
  4257 ;;                  1    wreg      void 
  4258 ;; Registers used:
  4259 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4260 ;; Tracked objects:
  4261 ;;		On entry : 0/0
  4262 ;;		On exit  : 0/0
  4263 ;;		Unchanged: 0/0
  4264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4265 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4267 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4268 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4269 ;;Total ram usage:        4 bytes
  4270 ;; Hardware stack levels used:    1
  4271 ;; Hardware stack levels required when called:    5
  4272 ;; This function calls:
  4273 ;;		_lcdClear
  4274 ;;		_lcdInst
  4275 ;;		_printf
  4276 ;; This function is called by:
  4277 ;;		_EEPROM
  4278 ;; This function uses a non-reentrant model
  4279 ;;
  4280                           
  4281                           	psect	text16
  4282  00E92E                     __ptext16:
  4283                           	opt stack 0
  4284  00E92E                     _update_eeprom_screen_state:
  4285                           	opt stack 24
  4286                           
  4287                           ;main.c: 186: lcdClear();
  4288                           
  4289                           ;incstack = 0
  4290  00E92E  ECB6  F072         	call	_lcdClear	;wreg free
  4291                           
  4292                           ;main.c: 187: switch(num){
  4293  00E932  D024               	goto	l2707
  4294  00E934                     l2697:
  4295                           
  4296                           ;main.c: 189: lcdClear();
  4297  00E934  ECB6  F072         	call	_lcdClear	;wreg free
  4298                           
  4299                           ;main.c: 190: printf("Recent Run");
  4300  00E938  0EEB               	movlw	low STR_12
  4301  00E93A  6E1F               	movwf	printf@f,c
  4302  00E93C  0EFF               	movlw	high STR_12
  4303  00E93E  6E20               	movwf	printf@f+1,c
  4304  00E940  ECE5  F072         	call	_printf	;wreg free
  4305                           
  4306                           ;main.c: 191: break;
  4307  00E944  D030               	goto	l2709
  4308  00E946                     l2699:
  4309                           
  4310                           ;main.c: 193: lcdClear();
  4311  00E946  ECB6  F072         	call	_lcdClear	;wreg free
  4312                           
  4313                           ;main.c: 194: printf("   Past Run 2  ");
  4314  00E94A  0E00               	movlw	low STR_13
  4315  00E94C  6E1F               	movwf	printf@f,c
  4316  00E94E  0EFF               	movlw	high STR_13
  4317  00E950  6E20               	movwf	printf@f+1,c
  4318  00E952  ECE5  F072         	call	_printf	;wreg free
  4319                           
  4320                           ;main.c: 195: break;
  4321  00E956  D027               	goto	l2709
  4322  00E958                     l2701:
  4323                           
  4324                           ;main.c: 197: lcdClear();
  4325  00E958  ECB6  F072         	call	_lcdClear	;wreg free
  4326                           
  4327                           ;main.c: 198: printf("   Past Run 3  ");
  4328  00E95C  0E10               	movlw	low STR_14
  4329  00E95E  6E1F               	movwf	printf@f,c
  4330  00E960  0EFF               	movlw	high STR_14
  4331  00E962  6E20               	movwf	printf@f+1,c
  4332  00E964  ECE5  F072         	call	_printf	;wreg free
  4333                           
  4334                           ;main.c: 199: break;
  4335  00E968  D01E               	goto	l2709
  4336  00E96A                     l2703:
  4337                           
  4338                           ;main.c: 201: lcdClear();
  4339  00E96A  ECB6  F072         	call	_lcdClear	;wreg free
  4340                           
  4341                           ;main.c: 202: printf("   Past Run 4  ");
  4342  00E96E  0E20               	movlw	low STR_15
  4343  00E970  6E1F               	movwf	printf@f,c
  4344  00E972  0EFF               	movlw	high STR_15
  4345  00E974  6E20               	movwf	printf@f+1,c
  4346  00E976  ECE5  F072         	call	_printf	;wreg free
  4347                           
  4348                           ;main.c: 204: }
  4349                           
  4350                           ;main.c: 203: break;
  4351  00E97A  D015               	goto	l2709
  4352  00E97C                     l2707:
  4353  00E97C  C02D  F02F         	movff	update_eeprom_screen_state@num,??_update_eeprom_screen_state
  4354  00E980  C02E  F030         	movff	update_eeprom_screen_state@num+1,??_update_eeprom_screen_state+1
  4355                           
  4356                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4357                           ; Switch size 1, requested type "space"
  4358                           ; Number of cases is 1, Range of values is 0 to 0
  4359                           ; switch strategies available:
  4360                           ; Name         Instructions Cycles
  4361                           ; simple_byte            4     3 (average)
  4362                           ;	Chosen strategy is simple_byte
  4363  00E984  5030               	movf	??_update_eeprom_screen_state+1,w,c
  4364  00E986  0A00               	xorlw	0	; case 0
  4365  00E988  A4D8               	btfss	status,2,c
  4366  00E98A  D00D               	goto	l2709
  4367                           
  4368                           ; Switch size 1, requested type "space"
  4369                           ; Number of cases is 4, Range of values is 0 to 3
  4370                           ; switch strategies available:
  4371                           ; Name         Instructions Cycles
  4372                           ; simple_byte           13     7 (average)
  4373                           ;	Chosen strategy is simple_byte
  4374  00E98C  502F               	movf	??_update_eeprom_screen_state,w,c
  4375  00E98E  0A00               	xorlw	0	; case 0
  4376  00E990  B4D8               	btfsc	status,2,c
  4377  00E992  D7D0               	goto	l2697
  4378  00E994  0A01               	xorlw	1	; case 1
  4379  00E996  B4D8               	btfsc	status,2,c
  4380  00E998  D7D6               	goto	l2699
  4381  00E99A  0A03               	xorlw	3	; case 2
  4382  00E99C  B4D8               	btfsc	status,2,c
  4383  00E99E  D7DC               	goto	l2701
  4384  00E9A0  0A01               	xorlw	1	; case 3
  4385  00E9A2  B4D8               	btfsc	status,2,c
  4386  00E9A4  D7E2               	goto	l2703
  4387  00E9A6                     l2709:
  4388                           
  4389                           ;main.c: 205: lcdInst(0b11000000);;
  4390  00E9A6  0EC0               	movlw	192
  4391  00E9A8  EC23  F072         	call	_lcdInst
  4392                           
  4393                           ;main.c: 206: printf("<4  Nav: A/D  6>");
  4394  00E9AC  0EDE               	movlw	low STR_16
  4395  00E9AE  6E1F               	movwf	printf@f,c
  4396  00E9B0  0EFE               	movlw	high STR_16
  4397  00E9B2  6E20               	movwf	printf@f+1,c
  4398  00E9B4  ECE5  F072         	call	_printf	;wreg free
  4399  00E9B8  0012               	return		;funcret
  4400  00E9BA                     __end_of_update_eeprom_screen_state:
  4401                           	opt stack 0
  4402                           tblptru	equ	0xFF8
  4403                           tblptrh	equ	0xFF7
  4404                           tblptrl	equ	0xFF6
  4405                           tablat	equ	0xFF5
  4406                           prodh	equ	0xFF4
  4407                           prodl	equ	0xFF3
  4408                           intcon	equ	0xFF2
  4409                           intcon2	equ	0xFF1
  4410                           postinc0	equ	0xFEE
  4411                           wreg	equ	0xFE8
  4412                           indf1	equ	0xFE7
  4413                           postinc1	equ	0xFE6
  4414                           postdec1	equ	0xFE5
  4415                           fsr1h	equ	0xFE2
  4416                           fsr1l	equ	0xFE1
  4417                           indf2	equ	0xFDF
  4418                           postinc2	equ	0xFDE
  4419                           postdec2	equ	0xFDD
  4420                           fsr2h	equ	0xFDA
  4421                           fsr2l	equ	0xFD9
  4422                           status	equ	0xFD8
  4423                           
  4424 ;; *************** function _past_run_access *****************
  4425 ;; Defined at:
  4426 ;;		line 463 in file "main.c"
  4427 ;; Parameters:    Size  Location     Type
  4428 ;;		None
  4429 ;; Auto vars:     Size  Location     Type
  4430 ;;  temp            1   49[COMRAM] unsigned char 
  4431 ;;  screen_state    2   50[COMRAM] int 
  4432 ;; Return value:  Size  Location     Type
  4433 ;;                  1    wreg      void 
  4434 ;; Registers used:
  4435 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4436 ;; Tracked objects:
  4437 ;;		On entry : 0/0
  4438 ;;		On exit  : 0/0
  4439 ;;		Unchanged: 0/0
  4440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4442 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4443 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4444 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4445 ;;Total ram usage:        4 bytes
  4446 ;; Hardware stack levels used:    1
  4447 ;; Hardware stack levels required when called:    6
  4448 ;; This function calls:
  4449 ;;		_getUserInput
  4450 ;;		_update_past_run_screen_state
  4451 ;; This function is called by:
  4452 ;;		_main
  4453 ;;		_EEPROM
  4454 ;; This function uses a non-reentrant model
  4455 ;;
  4456                           
  4457                           	psect	text17
  4458  00EB1C                     __ptext17:
  4459                           	opt stack 0
  4460  00EB1C                     _past_run_access:
  4461                           	opt stack 24
  4462                           
  4463                           ;main.c: 464: int screen_state = 6;
  4464                           
  4465                           ;incstack = 0
  4466  00EB1C  0E00               	movlw	0
  4467  00EB1E  6E34               	movwf	past_run_access@screen_state+1,c
  4468  00EB20  0E06               	movlw	6
  4469  00EB22  6E33               	movwf	past_run_access@screen_state,c
  4470                           
  4471                           ;main.c: 465: update_past_run_screen_state(screen_state);
  4472  00EB24  C033  F02D         	movff	past_run_access@screen_state,update_past_run_screen_state@num
  4473  00EB28  C034  F02E         	movff	past_run_access@screen_state+1,update_past_run_screen_state@num+1
  4474  00EB2C  EC35  F077         	call	_update_past_run_screen_state	;wreg free
  4475  00EB30                     l2623:
  4476                           
  4477                           ;main.c: 467: unsigned char temp = keys[getUserInput()];
  4478  00EB30  EC19  F074         	call	_getUserInput	;wreg free
  4479  00EB34  6E31               	movwf	??_past_run_access& (0+255),c
  4480  00EB36  5031               	movf	??_past_run_access,w,c
  4481  00EB38  0D01               	mullw	1
  4482  00EB3A  0E31               	movlw	low _keys
  4483  00EB3C  24F3               	addwf	prodl,w,c
  4484  00EB3E  6EF6               	movwf	tblptrl,c
  4485  00EB40  0EFE               	movlw	high _keys
  4486  00EB42  20F4               	addwfc	prodh,w,c
  4487  00EB44  6EF7               	movwf	tblptrh,c
  4488  00EB46                     	if	1	;There are 3 active tblptr bytes
  4489  00EB46  6AF8               	clrf	tblptru,c
  4490  00EB48  0E00               	movlw	low (__mediumconst shr (0+16))
  4491  00EB4A  22F8               	addwfc	tblptru,f,c
  4492  00EB4C                     	endif
  4493  00EB4C  0008               	tblrd		*
  4494  00EB4E  CFF5 F032          	movff	tablat,past_run_access@temp
  4495                           
  4496                           ;main.c: 468: if (temp == keys[15]){
  4497  00EB52  0E40               	movlw	low (_keys+15)
  4498  00EB54  6EF6               	movwf	tblptrl,c
  4499  00EB56  0EFE               	movlw	high (_keys+15)
  4500  00EB58  6EF7               	movwf	tblptrh,c
  4501  00EB5A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4502  00EB5A  6AF8               	clrf	tblptru,c
  4503  00EB5C                     	endif
  4504  00EB5C                     	if	0	;tblptru may be non-zero
  4505  00EB5C                     	endif
  4506  00EB5C  0008               	tblrd		*
  4507  00EB5E  50F5               	movf	tablat,w,c
  4508  00EB60  1832               	xorwf	past_run_access@temp,w,c
  4509  00EB62  B4D8               	btfsc	status,2,c
  4510  00EB64  0012               	return	
  4511                           
  4512                           ;main.c: 470: }else if (temp == keys[4]){
  4513                           
  4514                           ;main.c: 469: break;
  4515  00EB66  0E35               	movlw	low (_keys+4)
  4516  00EB68  6EF6               	movwf	tblptrl,c
  4517  00EB6A  0EFE               	movlw	high (_keys+4)
  4518  00EB6C  6EF7               	movwf	tblptrh,c
  4519  00EB6E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4520  00EB6E  6AF8               	clrf	tblptru,c
  4521  00EB70                     	endif
  4522  00EB70                     	if	0	;tblptru may be non-zero
  4523  00EB70                     	endif
  4524  00EB70  0008               	tblrd		*
  4525  00EB72  50F5               	movf	tablat,w,c
  4526  00EB74  1832               	xorwf	past_run_access@temp,w,c
  4527  00EB76  A4D8               	btfss	status,2,c
  4528  00EB78  D013               	goto	l2641
  4529                           
  4530                           ;main.c: 471: if (screen_state == 0){
  4531  00EB7A  5033               	movf	past_run_access@screen_state,w,c
  4532  00EB7C  1034               	iorwf	past_run_access@screen_state+1,w,c
  4533  00EB7E  A4D8               	btfss	status,2,c
  4534  00EB80  D005               	goto	l2637
  4535                           
  4536                           ;main.c: 472: screen_state = 6;
  4537  00EB82  0E00               	movlw	0
  4538  00EB84  6E34               	movwf	past_run_access@screen_state+1,c
  4539  00EB86  0E06               	movlw	6
  4540  00EB88  6E33               	movwf	past_run_access@screen_state,c
  4541                           
  4542                           ;main.c: 473: }else{
  4543  00EB8A  D003               	goto	l2639
  4544  00EB8C                     l2637:
  4545                           
  4546                           ;main.c: 474: screen_state -= 1;
  4547  00EB8C  0633               	decf	past_run_access@screen_state,f,c
  4548  00EB8E  A0D8               	btfss	status,0,c
  4549  00EB90  0634               	decf	past_run_access@screen_state+1,f,c
  4550  00EB92                     l2639:
  4551                           
  4552                           ;main.c: 475: }
  4553                           ;main.c: 476: update_past_run_screen_state(screen_state);
  4554  00EB92  C033  F02D         	movff	past_run_access@screen_state,update_past_run_screen_state@num
  4555  00EB96  C034  F02E         	movff	past_run_access@screen_state+1,update_past_run_screen_state@num+1
  4556  00EB9A  EC35  F077         	call	_update_past_run_screen_state	;wreg free
  4557                           
  4558                           ;main.c: 477: }else if (temp == keys[6]){
  4559  00EB9E  D7C8               	goto	l2623
  4560  00EBA0                     l2641:
  4561  00EBA0  0E37               	movlw	low (_keys+6)
  4562  00EBA2  6EF6               	movwf	tblptrl,c
  4563  00EBA4  0EFE               	movlw	high (_keys+6)
  4564  00EBA6  6EF7               	movwf	tblptrh,c
  4565  00EBA8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4566  00EBA8  6AF8               	clrf	tblptru,c
  4567  00EBAA                     	endif
  4568  00EBAA                     	if	0	;tblptru may be non-zero
  4569  00EBAA                     	endif
  4570  00EBAA  0008               	tblrd		*
  4571  00EBAC  50F5               	movf	tablat,w,c
  4572  00EBAE  1832               	xorwf	past_run_access@temp,w,c
  4573  00EBB0  A4D8               	btfss	status,2,c
  4574  00EBB2  D7BE               	goto	l2623
  4575                           
  4576                           ;main.c: 478: if (screen_state == 6){
  4577  00EBB4  0E06               	movlw	6
  4578  00EBB6  1833               	xorwf	past_run_access@screen_state,w,c
  4579  00EBB8  1034               	iorwf	past_run_access@screen_state+1,w,c
  4580  00EBBA  A4D8               	btfss	status,2,c
  4581  00EBBC  D005               	goto	l2647
  4582                           
  4583                           ;main.c: 479: screen_state = 0;
  4584  00EBBE  0E00               	movlw	0
  4585  00EBC0  6E34               	movwf	past_run_access@screen_state+1,c
  4586  00EBC2  0E00               	movlw	0
  4587  00EBC4  6E33               	movwf	past_run_access@screen_state,c
  4588                           
  4589                           ;main.c: 480: }else{
  4590  00EBC6  D002               	goto	l2649
  4591  00EBC8                     l2647:
  4592                           
  4593                           ;main.c: 481: screen_state += 1;
  4594  00EBC8  4A33               	infsnz	past_run_access@screen_state,f,c
  4595  00EBCA  2A34               	incf	past_run_access@screen_state+1,f,c
  4596  00EBCC                     l2649:
  4597                           
  4598                           ;main.c: 482: }
  4599                           ;main.c: 483: update_past_run_screen_state(screen_state);
  4600  00EBCC  C033  F02D         	movff	past_run_access@screen_state,update_past_run_screen_state@num
  4601  00EBD0  C034  F02E         	movff	past_run_access@screen_state+1,update_past_run_screen_state@num+1
  4602  00EBD4  EC35  F077         	call	_update_past_run_screen_state	;wreg free
  4603  00EBD8  D7AB               	goto	l2623
  4604  00EBDA                     __end_of_past_run_access:
  4605                           	opt stack 0
  4606                           tblptru	equ	0xFF8
  4607                           tblptrh	equ	0xFF7
  4608                           tblptrl	equ	0xFF6
  4609                           tablat	equ	0xFF5
  4610                           prodh	equ	0xFF4
  4611                           prodl	equ	0xFF3
  4612                           intcon	equ	0xFF2
  4613                           intcon2	equ	0xFF1
  4614                           postinc0	equ	0xFEE
  4615                           wreg	equ	0xFE8
  4616                           indf1	equ	0xFE7
  4617                           postinc1	equ	0xFE6
  4618                           postdec1	equ	0xFE5
  4619                           fsr1h	equ	0xFE2
  4620                           fsr1l	equ	0xFE1
  4621                           indf2	equ	0xFDF
  4622                           postinc2	equ	0xFDE
  4623                           postdec2	equ	0xFDD
  4624                           fsr2h	equ	0xFDA
  4625                           fsr2l	equ	0xFD9
  4626                           status	equ	0xFD8
  4627                           
  4628 ;; *************** function _update_past_run_screen_state *****************
  4629 ;; Defined at:
  4630 ;;		line 210 in file "main.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;  num             2   44[COMRAM] int 
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;		None
  4635 ;; Return value:  Size  Location     Type
  4636 ;;                  1    wreg      void 
  4637 ;; Registers used:
  4638 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4644 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4646 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4647 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4648 ;;Total ram usage:        4 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:    5
  4651 ;; This function calls:
  4652 ;;		_lcdClear
  4653 ;;		_lcdInst
  4654 ;;		_printf
  4655 ;; This function is called by:
  4656 ;;		_past_run_access
  4657 ;; This function uses a non-reentrant model
  4658 ;;
  4659                           
  4660                           	psect	text18
  4661  00EE6A                     __ptext18:
  4662                           	opt stack 0
  4663  00EE6A                     _update_past_run_screen_state:
  4664                           	opt stack 24
  4665                           
  4666                           ;main.c: 211: lcdClear();
  4667                           
  4668                           ;incstack = 0
  4669  00EE6A  ECB6  F072         	call	_lcdClear	;wreg free
  4670                           
  4671                           ;main.c: 212: switch(num){
  4672  00EE6E  D06C               	goto	l2501
  4673  00EE70                     l2485:
  4674                           
  4675                           ;main.c: 214: lcdClear();
  4676  00EE70  ECB6  F072         	call	_lcdClear	;wreg free
  4677                           
  4678                           ;main.c: 215: printf("Time taken: %is", runInfo[0]);
  4679  00EE74  0E60               	movlw	low STR_17
  4680  00EE76  6E1F               	movwf	printf@f,c
  4681  00EE78  0EFF               	movlw	high STR_17
  4682  00EE7A  6E20               	movwf	printf@f+1,c
  4683  00EE7C  C069  F021         	movff	_runInfo,?_printf+2
  4684  00EE80  C06A  F022         	movff	_runInfo+1,?_printf+3
  4685  00EE84  ECE5  F072         	call	_printf	;wreg free
  4686                           
  4687                           ;main.c: 216: break;
  4688  00EE88  D07D               	goto	l2503
  4689  00EE8A                     l2487:
  4690                           
  4691                           ;main.c: 218: lcdClear();
  4692  00EE8A  ECB6  F072         	call	_lcdClear	;wreg free
  4693                           
  4694                           ;main.c: 219: printf("# Bottles: %i", runInfo[1]);
  4695  00EE8E  0EB7               	movlw	low STR_18
  4696  00EE90  6E1F               	movwf	printf@f,c
  4697  00EE92  0EFF               	movlw	high STR_18
  4698  00EE94  6E20               	movwf	printf@f+1,c
  4699  00EE96  C06B  F021         	movff	_runInfo+2,?_printf+2
  4700  00EE9A  C06C  F022         	movff	_runInfo+3,?_printf+3
  4701  00EE9E  ECE5  F072         	call	_printf	;wreg free
  4702                           
  4703                           ;main.c: 220: break;
  4704  00EEA2  D070               	goto	l2503
  4705  00EEA4                     l2489:
  4706                           
  4707                           ;main.c: 222: lcdClear();
  4708  00EEA4  ECB6  F072         	call	_lcdClear	;wreg free
  4709                           
  4710                           ;main.c: 223: printf("Yop w/Cap: %i", runInfo[2]);
  4711  00EEA8  0EA9               	movlw	low STR_19
  4712  00EEAA  6E1F               	movwf	printf@f,c
  4713  00EEAC  0EFF               	movlw	high STR_19
  4714  00EEAE  6E20               	movwf	printf@f+1,c
  4715  00EEB0  C06D  F021         	movff	_runInfo+4,?_printf+2
  4716  00EEB4  C06E  F022         	movff	_runInfo+5,?_printf+3
  4717  00EEB8  ECE5  F072         	call	_printf	;wreg free
  4718                           
  4719                           ;main.c: 224: break;
  4720  00EEBC  D063               	goto	l2503
  4721  00EEBE                     l2491:
  4722                           
  4723                           ;main.c: 226: lcdClear();
  4724  00EEBE  ECB6  F072         	call	_lcdClear	;wreg free
  4725                           
  4726                           ;main.c: 227: printf("Yop w/o Cap: %i", runInfo[3]);
  4727  00EEC2  0E50               	movlw	low STR_20
  4728  00EEC4  6E1F               	movwf	printf@f,c
  4729  00EEC6  0EFF               	movlw	high STR_20
  4730  00EEC8  6E20               	movwf	printf@f+1,c
  4731  00EECA  C06F  F021         	movff	_runInfo+6,?_printf+2
  4732  00EECE  C070  F022         	movff	_runInfo+7,?_printf+3
  4733  00EED2  ECE5  F072         	call	_printf	;wreg free
  4734                           
  4735                           ;main.c: 228: break;
  4736  00EED6  D056               	goto	l2503
  4737  00EED8                     l2493:
  4738                           
  4739                           ;main.c: 230: lcdClear();
  4740  00EED8  ECB6  F072         	call	_lcdClear	;wreg free
  4741                           
  4742                           ;main.c: 231: printf("Eska w/ Cap: %i", runInfo[4]);
  4743  00EEDC  0E40               	movlw	low STR_21
  4744  00EEDE  6E1F               	movwf	printf@f,c
  4745  00EEE0  0EFF               	movlw	high STR_21
  4746  00EEE2  6E20               	movwf	printf@f+1,c
  4747  00EEE4  C071  F021         	movff	_runInfo+8,?_printf+2
  4748  00EEE8  C072  F022         	movff	_runInfo+9,?_printf+3
  4749  00EEEC  ECE5  F072         	call	_printf	;wreg free
  4750                           
  4751                           ;main.c: 232: break;
  4752  00EEF0  D049               	goto	l2503
  4753  00EEF2                     l2495:
  4754                           
  4755                           ;main.c: 234: lcdClear();
  4756  00EEF2  ECB6  F072         	call	_lcdClear	;wreg free
  4757                           
  4758                           ;main.c: 235: printf("Eska w/o Cap: %i", runInfo[5]);
  4759  00EEF6  0EEF               	movlw	low STR_22
  4760  00EEF8  6E1F               	movwf	printf@f,c
  4761  00EEFA  0EFE               	movlw	high STR_22
  4762  00EEFC  6E20               	movwf	printf@f+1,c
  4763  00EEFE  C073  F021         	movff	_runInfo+10,?_printf+2
  4764  00EF02  C074  F022         	movff	_runInfo+11,?_printf+3
  4765  00EF06  ECE5  F072         	call	_printf	;wreg free
  4766                           
  4767                           ;main.c: 236: break;
  4768  00EF0A  D03C               	goto	l2503
  4769  00EF0C                     l2497:
  4770                           
  4771                           ;main.c: 238: lcdClear();
  4772  00EF0C  ECB6  F072         	call	_lcdClear	;wreg free
  4773                           
  4774                           ;main.c: 239: printf("%02x/%02x   ", lastRunTime[5], lastRunTime[4]);
  4775  00EF10  0ED2               	movlw	low STR_1
  4776  00EF12  6E1F               	movwf	printf@f,c
  4777  00EF14  0EFF               	movlw	high STR_1
  4778  00EF16  6E20               	movwf	printf@f+1,c
  4779  00EF18  C05E  F021         	movff	_lastRunTime+5,?_printf+2
  4780  00EF1C  6A22               	clrf	?_printf+3,c
  4781  00EF1E  C05D  F023         	movff	_lastRunTime+4,?_printf+4
  4782  00EF22  6A24               	clrf	?_printf+5,c
  4783  00EF24  ECE5  F072         	call	_printf	;wreg free
  4784                           
  4785                           ;main.c: 240: printf("%02x:%02x:%02x", lastRunTime[2], lastRunTime[1], lastRunTime[0]);
  4786  00EF28  0E70               	movlw	low STR_2
  4787  00EF2A  6E1F               	movwf	printf@f,c
  4788  00EF2C  0EFF               	movlw	high STR_2
  4789  00EF2E  6E20               	movwf	printf@f+1,c
  4790  00EF30  C05B  F021         	movff	_lastRunTime+2,?_printf+2
  4791  00EF34  6A22               	clrf	?_printf+3,c
  4792  00EF36  C05A  F023         	movff	_lastRunTime+1,?_printf+4
  4793  00EF3A  6A24               	clrf	?_printf+5,c
  4794  00EF3C  C059  F025         	movff	_lastRunTime,?_printf+6
  4795  00EF40  6A26               	clrf	?_printf+7,c
  4796  00EF42  ECE5  F072         	call	_printf	;wreg free
  4797                           
  4798                           ;main.c: 242: }
  4799                           
  4800                           ;main.c: 241: break;
  4801  00EF46  D01E               	goto	l2503
  4802  00EF48                     l2501:
  4803  00EF48  C02D  F02F         	movff	update_past_run_screen_state@num,??_update_past_run_screen_state
  4804  00EF4C  C02E  F030         	movff	update_past_run_screen_state@num+1,??_update_past_run_screen_state+1
  4805                           
  4806                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4807                           ; Switch size 1, requested type "space"
  4808                           ; Number of cases is 1, Range of values is 0 to 0
  4809                           ; switch strategies available:
  4810                           ; Name         Instructions Cycles
  4811                           ; simple_byte            4     3 (average)
  4812                           ;	Chosen strategy is simple_byte
  4813  00EF50  5030               	movf	??_update_past_run_screen_state+1,w,c
  4814  00EF52  0A00               	xorlw	0	; case 0
  4815  00EF54  A4D8               	btfss	status,2,c
  4816  00EF56  D016               	goto	l2503
  4817                           
  4818                           ; Switch size 1, requested type "space"
  4819                           ; Number of cases is 7, Range of values is 0 to 6
  4820                           ; switch strategies available:
  4821                           ; Name         Instructions Cycles
  4822                           ; simple_byte           22    12 (average)
  4823                           ;	Chosen strategy is simple_byte
  4824  00EF58  502F               	movf	??_update_past_run_screen_state,w,c
  4825  00EF5A  0A00               	xorlw	0	; case 0
  4826  00EF5C  B4D8               	btfsc	status,2,c
  4827  00EF5E  D788               	goto	l2485
  4828  00EF60  0A01               	xorlw	1	; case 1
  4829  00EF62  B4D8               	btfsc	status,2,c
  4830  00EF64  D792               	goto	l2487
  4831  00EF66  0A03               	xorlw	3	; case 2
  4832  00EF68  B4D8               	btfsc	status,2,c
  4833  00EF6A  D79C               	goto	l2489
  4834  00EF6C  0A01               	xorlw	1	; case 3
  4835  00EF6E  B4D8               	btfsc	status,2,c
  4836  00EF70  D7A6               	goto	l2491
  4837  00EF72  0A07               	xorlw	7	; case 4
  4838  00EF74  B4D8               	btfsc	status,2,c
  4839  00EF76  D7B0               	goto	l2493
  4840  00EF78  0A01               	xorlw	1	; case 5
  4841  00EF7A  B4D8               	btfsc	status,2,c
  4842  00EF7C  D7BA               	goto	l2495
  4843  00EF7E  0A03               	xorlw	3	; case 6
  4844  00EF80  B4D8               	btfsc	status,2,c
  4845  00EF82  D7C4               	goto	l2497
  4846  00EF84                     l2503:
  4847                           
  4848                           ;main.c: 243: lcdInst(0b11000000);;
  4849  00EF84  0EC0               	movlw	192
  4850  00EF86  EC23  F072         	call	_lcdInst
  4851                           
  4852                           ;main.c: 244: printf("<4  Back:  D  6> ");
  4853  00EF8A  0E66               	movlw	low STR_25
  4854  00EF8C  6E1F               	movwf	printf@f,c
  4855  00EF8E  0EFE               	movlw	high STR_25
  4856  00EF90  6E20               	movwf	printf@f+1,c
  4857  00EF92  ECE5  F072         	call	_printf	;wreg free
  4858  00EF96  0012               	return		;funcret
  4859  00EF98                     __end_of_update_past_run_screen_state:
  4860                           	opt stack 0
  4861                           tblptru	equ	0xFF8
  4862                           tblptrh	equ	0xFF7
  4863                           tblptrl	equ	0xFF6
  4864                           tablat	equ	0xFF5
  4865                           prodh	equ	0xFF4
  4866                           prodl	equ	0xFF3
  4867                           intcon	equ	0xFF2
  4868                           intcon2	equ	0xFF1
  4869                           postinc0	equ	0xFEE
  4870                           wreg	equ	0xFE8
  4871                           indf1	equ	0xFE7
  4872                           postinc1	equ	0xFE6
  4873                           postdec1	equ	0xFE5
  4874                           fsr1h	equ	0xFE2
  4875                           fsr1l	equ	0xFE1
  4876                           indf2	equ	0xFDF
  4877                           postinc2	equ	0xFDE
  4878                           postdec2	equ	0xFDD
  4879                           fsr2h	equ	0xFDA
  4880                           fsr2l	equ	0xFD9
  4881                           status	equ	0xFD8
  4882                           
  4883 ;; *************** function _lcdClear *****************
  4884 ;; Defined at:
  4885 ;;		line 35 in file "lcd.c"
  4886 ;; Parameters:    Size  Location     Type
  4887 ;;		None
  4888 ;; Auto vars:     Size  Location     Type
  4889 ;;		None
  4890 ;; Return value:  Size  Location     Type
  4891 ;;                  2   74[None  ] int 
  4892 ;; Registers used:
  4893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4894 ;; Tracked objects:
  4895 ;;		On entry : 0/0
  4896 ;;		On exit  : 0/0
  4897 ;;		Unchanged: 0/0
  4898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4903 ;;Total ram usage:        0 bytes
  4904 ;; Hardware stack levels used:    1
  4905 ;; Hardware stack levels required when called:    4
  4906 ;; This function calls:
  4907 ;;		_lcdInst
  4908 ;;		_printf
  4909 ;; This function is called by:
  4910 ;;		_displayMainProgramLcdScreen
  4911 ;;		_update_eeprom_screen_state
  4912 ;;		_update_past_run_screen_state
  4913 ;;		_operation
  4914 ;; This function uses a non-reentrant model
  4915 ;;
  4916                           
  4917                           	psect	text19
  4918  00E56C                     __ptext19:
  4919                           	opt stack 0
  4920  00E56C                     _lcdClear:
  4921                           	opt stack 24
  4922                           
  4923                           ;lcd.c: 36: lcdInst(0b10000000);
  4924                           
  4925                           ;incstack = 0
  4926  00E56C  0E80               	movlw	128
  4927  00E56E  EC23  F072         	call	_lcdInst
  4928                           
  4929                           ;lcd.c: 37: printf("                ");
  4930  00E572  0E89               	movlw	low STR_35
  4931  00E574  6E1F               	movwf	printf@f,c
  4932  00E576  0EFE               	movlw	high STR_35
  4933  00E578  6E20               	movwf	printf@f+1,c
  4934  00E57A  ECE5  F072         	call	_printf	;wreg free
  4935                           
  4936                           ;lcd.c: 38: lcdInst(0b11000000);
  4937  00E57E  0EC0               	movlw	192
  4938  00E580  EC23  F072         	call	_lcdInst
  4939                           
  4940                           ;lcd.c: 39: printf("                ");
  4941  00E584  0E89               	movlw	low STR_35
  4942  00E586  6E1F               	movwf	printf@f,c
  4943  00E588  0EFE               	movlw	high STR_35
  4944  00E58A  6E20               	movwf	printf@f+1,c
  4945  00E58C  ECE5  F072         	call	_printf	;wreg free
  4946                           
  4947                           ;lcd.c: 40: lcdInst(0b10000000);
  4948  00E590  0E80               	movlw	128
  4949  00E592  EC23  F072         	call	_lcdInst
  4950  00E596  0012               	return		;funcret
  4951  00E598                     __end_of_lcdClear:
  4952                           	opt stack 0
  4953                           tblptru	equ	0xFF8
  4954                           tblptrh	equ	0xFF7
  4955                           tblptrl	equ	0xFF6
  4956                           tablat	equ	0xFF5
  4957                           prodh	equ	0xFF4
  4958                           prodl	equ	0xFF3
  4959                           intcon	equ	0xFF2
  4960                           intcon2	equ	0xFF1
  4961                           postinc0	equ	0xFEE
  4962                           wreg	equ	0xFE8
  4963                           indf1	equ	0xFE7
  4964                           postinc1	equ	0xFE6
  4965                           postdec1	equ	0xFE5
  4966                           fsr1h	equ	0xFE2
  4967                           fsr1l	equ	0xFE1
  4968                           indf2	equ	0xFDF
  4969                           postinc2	equ	0xFDE
  4970                           postdec2	equ	0xFDD
  4971                           fsr2h	equ	0xFDA
  4972                           fsr2l	equ	0xFD9
  4973                           status	equ	0xFD8
  4974                           
  4975 ;; *************** function _getUserInput *****************
  4976 ;; Defined at:
  4977 ;;		line 108 in file "main.c"
  4978 ;; Parameters:    Size  Location     Type
  4979 ;;		None
  4980 ;; Auto vars:     Size  Location     Type
  4981 ;;  keypress        1   46[COMRAM] unsigned char 
  4982 ;; Return value:  Size  Location     Type
  4983 ;;                  1    wreg      unsigned char 
  4984 ;; Registers used:
  4985 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4986 ;; Tracked objects:
  4987 ;;		On entry : 0/0
  4988 ;;		On exit  : 0/0
  4989 ;;		Unchanged: 0/0
  4990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4992 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4993 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4994 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4995 ;;Total ram usage:        3 bytes
  4996 ;; Hardware stack levels used:    1
  4997 ;; Hardware stack levels required when called:    4
  4998 ;; This function calls:
  4999 ;;		_lcdInst
  5000 ;;		_printf
  5001 ;;		_updateCurrentTime
  5002 ;; This function is called by:
  5003 ;;		_main
  5004 ;;		_operation
  5005 ;;		_EEPROM
  5006 ;;		_past_run_access
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010                           	psect	text20
  5011  00E832                     __ptext20:
  5012                           	opt stack 0
  5013  00E832                     _getUserInput:
  5014                           	opt stack 25
  5015                           
  5016                           ;main.c: 109: while(PORTBbits.RB1 == 0){
  5017                           
  5018                           ;incstack = 0
  5019  00E832  D030               	goto	l2439
  5020  00E834                     l2427:
  5021                           
  5022                           ;main.c: 110: if (initScreenState == 1){
  5023  00E834  0467               	decf	_initScreenState,w,c
  5024  00E836  1068               	iorwf	_initScreenState+1,w,c
  5025  00E838  A4D8               	btfss	status,2,c
  5026  00E83A  D02C               	goto	l2439
  5027                           
  5028                           ;main.c: 111: updateCurrentTime();
  5029  00E83C  ECE6  F073         	call	_updateCurrentTime	;wreg free
  5030                           
  5031                           ;main.c: 112: lcdInst(0b10000000);
  5032  00E840  0E80               	movlw	128
  5033  00E842  EC23  F072         	call	_lcdInst
  5034                           
  5035                           ;main.c: 113: printf("%02x/%02x   ", time[5],time[4]);
  5036  00E846  0ED2               	movlw	low STR_1
  5037  00E848  6E1F               	movwf	printf@f,c
  5038  00E84A  0EFF               	movlw	high STR_1
  5039  00E84C  6E20               	movwf	printf@f+1,c
  5040  00E84E  C065  F021         	movff	_time+5,?_printf+2
  5041  00E852  6A22               	clrf	?_printf+3,c
  5042  00E854  C064  F023         	movff	_time+4,?_printf+4
  5043  00E858  6A24               	clrf	?_printf+5,c
  5044  00E85A  ECE5  F072         	call	_printf	;wreg free
  5045                           
  5046                           ;main.c: 114: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  5047  00E85E  0E70               	movlw	low STR_2
  5048  00E860  6E1F               	movwf	printf@f,c
  5049  00E862  0EFF               	movlw	high STR_2
  5050  00E864  6E20               	movwf	printf@f+1,c
  5051  00E866  C062  F021         	movff	_time+2,?_printf+2
  5052  00E86A  6A22               	clrf	?_printf+3,c
  5053  00E86C  C061  F023         	movff	_time+1,?_printf+4
  5054  00E870  6A24               	clrf	?_printf+5,c
  5055  00E872  C060  F025         	movff	_time,?_printf+6
  5056  00E876  6A26               	clrf	?_printf+7,c
  5057  00E878  ECE5  F072         	call	_printf	;wreg free
  5058                           
  5059                           ;main.c: 115: _delay((unsigned long)((150)*(8000000/4000.0)));
  5060  00E87C  0E02               	movlw	2
  5061  00E87E  6E2E               	movwf	(??_getUserInput+1)& (0+255),c
  5062  00E880  0E86               	movlw	134
  5063  00E882  6E2D               	movwf	??_getUserInput& (0+255),c
  5064  00E884  0E99               	movlw	153
  5065  00E886                     u2737:
  5066  00E886  2EE8               	decfsz	wreg,f,c
  5067  00E888  D7FE               	bra	u2737
  5068  00E88A  2E2D               	decfsz	??_getUserInput& (0+255),f,c
  5069  00E88C  D7FC               	bra	u2737
  5070  00E88E  2E2E               	decfsz	(??_getUserInput+1)& (0+255),f,c
  5071  00E890  D7FA               	bra	u2737
  5072  00E892  F000               	nop	
  5073  00E894                     l2439:
  5074  00E894  A281               	btfss	3969,1,c	;volatile
  5075  00E896  D7CE               	goto	l2427
  5076                           
  5077                           ;main.c: 116: }
  5078                           ;main.c: 117: }
  5079                           ;main.c: 118: unsigned char keypress = (PORTB & 0xF0)>>4;
  5080  00E898  3881               	swapf	3969,w,c	;volatile
  5081  00E89A  0B0F               	andlw	15
  5082  00E89C  0B0F               	andlw	15
  5083  00E89E  6E2F               	movwf	getUserInput@keypress,c
  5084  00E8A0                     l145:
  5085  00E8A0  B281               	btfsc	3969,1,c	;volatile
  5086  00E8A2  D7FE               	goto	l145
  5087                           
  5088                           ;main.c: 120: }
  5089                           ;main.c: 121: __nop();
  5090  00E8A4  F000               	nop	
  5091                           
  5092                           ;main.c: 122: __nop();
  5093  00E8A6  F000               	nop	
  5094                           
  5095                           ;main.c: 123: return keypress;
  5096  00E8A8  502F               	movf	getUserInput@keypress,w,c
  5097  00E8AA  0012               	return	
  5098  00E8AC                     __end_of_getUserInput:
  5099                           	opt stack 0
  5100                           tblptru	equ	0xFF8
  5101                           tblptrh	equ	0xFF7
  5102                           tblptrl	equ	0xFF6
  5103                           tablat	equ	0xFF5
  5104                           prodh	equ	0xFF4
  5105                           prodl	equ	0xFF3
  5106                           intcon	equ	0xFF2
  5107                           intcon2	equ	0xFF1
  5108                           postinc0	equ	0xFEE
  5109                           wreg	equ	0xFE8
  5110                           indf1	equ	0xFE7
  5111                           postinc1	equ	0xFE6
  5112                           postdec1	equ	0xFE5
  5113                           fsr1h	equ	0xFE2
  5114                           fsr1l	equ	0xFE1
  5115                           indf2	equ	0xFDF
  5116                           postinc2	equ	0xFDE
  5117                           postdec2	equ	0xFDD
  5118                           fsr2h	equ	0xFDA
  5119                           fsr2l	equ	0xFD9
  5120                           status	equ	0xFD8
  5121                           
  5122 ;; *************** function _updateCurrentTime *****************
  5123 ;; Defined at:
  5124 ;;		line 127 in file "main.c"
  5125 ;; Parameters:    Size  Location     Type
  5126 ;;		None
  5127 ;; Auto vars:     Size  Location     Type
  5128 ;;  i               1    3[COMRAM] unsigned char 
  5129 ;; Return value:  Size  Location     Type
  5130 ;;                  1    wreg      void 
  5131 ;; Registers used:
  5132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5133 ;; Tracked objects:
  5134 ;;		On entry : 0/0
  5135 ;;		On exit  : 0/0
  5136 ;;		Unchanged: 0/0
  5137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5139 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5141 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5142 ;;Total ram usage:        1 bytes
  5143 ;; Hardware stack levels used:    1
  5144 ;; Hardware stack levels required when called:    2
  5145 ;; This function calls:
  5146 ;;		_I2C_Master_Read
  5147 ;;		_I2C_Master_Start
  5148 ;;		_I2C_Master_Stop
  5149 ;;		_I2C_Master_Write
  5150 ;; This function is called by:
  5151 ;;		_getUserInput
  5152 ;;		_displayMainProgramLcdScreen
  5153 ;;		_operation
  5154 ;; This function uses a non-reentrant model
  5155 ;;
  5156                           
  5157                           	psect	text21
  5158  00E7CC                     __ptext21:
  5159                           	opt stack 0
  5160  00E7CC                     _updateCurrentTime:
  5161                           	opt stack 26
  5162                           
  5163                           ;main.c: 129: I2C_Master_Start();
  5164                           
  5165                           ;incstack = 0
  5166  00E7CC  EC16  F072         	call	_I2C_Master_Start	;wreg free
  5167                           
  5168                           ;main.c: 130: I2C_Master_Write(0b11010000);
  5169  00E7D0  0E00               	movlw	0
  5170  00E7D2  6E03               	movwf	I2C_Master_Write@d+1,c
  5171  00E7D4  0ED0               	movlw	208
  5172  00E7D6  6E02               	movwf	I2C_Master_Write@d,c
  5173  00E7D8  EC1E  F072         	call	_I2C_Master_Write	;wreg free
  5174                           
  5175                           ;main.c: 131: I2C_Master_Write(0x00);
  5176  00E7DC  0E00               	movlw	0
  5177  00E7DE  6E03               	movwf	I2C_Master_Write@d+1,c
  5178  00E7E0  0E00               	movlw	0
  5179  00E7E2  6E02               	movwf	I2C_Master_Write@d,c
  5180  00E7E4  EC1E  F072         	call	_I2C_Master_Write	;wreg free
  5181                           
  5182                           ;main.c: 132: I2C_Master_Stop();
  5183  00E7E8  EC1A  F072         	call	_I2C_Master_Stop	;wreg free
  5184                           
  5185                           ;main.c: 135: I2C_Master_Start();
  5186  00E7EC  EC16  F072         	call	_I2C_Master_Start	;wreg free
  5187                           
  5188                           ;main.c: 136: I2C_Master_Write(0b11010001);
  5189  00E7F0  0E00               	movlw	0
  5190  00E7F2  6E03               	movwf	I2C_Master_Write@d+1,c
  5191  00E7F4  0ED1               	movlw	209
  5192  00E7F6  6E02               	movwf	I2C_Master_Write@d,c
  5193  00E7F8  EC1E  F072         	call	_I2C_Master_Write	;wreg free
  5194                           
  5195                           ;main.c: 137: for(unsigned char i=0;i<0x06;i++){
  5196  00E7FC  0E00               	movlw	0
  5197  00E7FE  6E04               	movwf	updateCurrentTime@i,c
  5198  00E800                     l2405:
  5199  00E800  0E05               	movlw	5
  5200  00E802  6404               	cpfsgt	updateCurrentTime@i,c
  5201  00E804  D001               	goto	l2409
  5202  00E806  D00E               	goto	l2415
  5203  00E808                     l2409:
  5204                           
  5205                           ;main.c: 138: time[i] = I2C_Master_Read(1);
  5206  00E808  5004               	movf	updateCurrentTime@i,w,c
  5207  00E80A  0D01               	mullw	1
  5208  00E80C  0E60               	movlw	low _time
  5209  00E80E  24F3               	addwf	prodl,w,c
  5210  00E810  6ED9               	movwf	fsr2l,c
  5211  00E812  0E00               	movlw	high _time
  5212  00E814  20F4               	addwfc	prodh,w,c
  5213  00E816  6EDA               	movwf	fsr2h,c
  5214  00E818  0E01               	movlw	1
  5215  00E81A  EC7B  F072         	call	_I2C_Master_Read
  5216  00E81E  6EDF               	movwf	indf2,c
  5217  00E820  2A04               	incf	updateCurrentTime@i,f,c
  5218  00E822  D7EE               	goto	l2405
  5219  00E824                     l2415:
  5220                           
  5221                           ;main.c: 139: }
  5222                           ;main.c: 140: time[6] = I2C_Master_Read(0);
  5223  00E824  0E00               	movlw	0
  5224  00E826  EC7B  F072         	call	_I2C_Master_Read
  5225  00E82A  6E66               	movwf	_time+6,c
  5226                           
  5227                           ;main.c: 141: I2C_Master_Stop();
  5228  00E82C  EC1A  F072         	call	_I2C_Master_Stop	;wreg free
  5229  00E830  0012               	return		;funcret
  5230  00E832                     __end_of_updateCurrentTime:
  5231                           	opt stack 0
  5232                           tblptru	equ	0xFF8
  5233                           tblptrh	equ	0xFF7
  5234                           tblptrl	equ	0xFF6
  5235                           tablat	equ	0xFF5
  5236                           prodh	equ	0xFF4
  5237                           prodl	equ	0xFF3
  5238                           intcon	equ	0xFF2
  5239                           intcon2	equ	0xFF1
  5240                           postinc0	equ	0xFEE
  5241                           wreg	equ	0xFE8
  5242                           indf1	equ	0xFE7
  5243                           postinc1	equ	0xFE6
  5244                           postdec1	equ	0xFE5
  5245                           fsr1h	equ	0xFE2
  5246                           fsr1l	equ	0xFE1
  5247                           indf2	equ	0xFDF
  5248                           postinc2	equ	0xFDE
  5249                           postdec2	equ	0xFDD
  5250                           fsr2h	equ	0xFDA
  5251                           fsr2l	equ	0xFD9
  5252                           status	equ	0xFD8
  5253                           
  5254 ;; *************** function _I2C_Master_Write *****************
  5255 ;; Defined at:
  5256 ;;		line 47 in file "I2C.c"
  5257 ;; Parameters:    Size  Location     Type
  5258 ;;  d               2    1[COMRAM] unsigned int 
  5259 ;; Auto vars:     Size  Location     Type
  5260 ;;		None
  5261 ;; Return value:  Size  Location     Type
  5262 ;;                  1    wreg      void 
  5263 ;; Registers used:
  5264 ;;		wreg, status,2, status,0, cstack
  5265 ;; Tracked objects:
  5266 ;;		On entry : 0/0
  5267 ;;		On exit  : 0/0
  5268 ;;		Unchanged: 0/0
  5269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5270 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5271 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5273 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5274 ;;Total ram usage:        2 bytes
  5275 ;; Hardware stack levels used:    1
  5276 ;; Hardware stack levels required when called:    1
  5277 ;; This function calls:
  5278 ;;		_I2C_Master_Wait
  5279 ;; This function is called by:
  5280 ;;		_updateCurrentTime
  5281 ;; This function uses a non-reentrant model
  5282 ;;
  5283                           
  5284                           	psect	text22
  5285  00E43C                     __ptext22:
  5286                           	opt stack 0
  5287  00E43C                     _I2C_Master_Write:
  5288                           	opt stack 26
  5289                           
  5290                           ;I2C.c: 49: I2C_Master_Wait();
  5291                           
  5292                           ;incstack = 0
  5293  00E43C  EC35  F072         	call	_I2C_Master_Wait	;wreg free
  5294                           
  5295                           ;I2C.c: 50: SSPBUF = d;
  5296  00E440  C002  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5297  00E444  0012               	return		;funcret
  5298  00E446                     __end_of_I2C_Master_Write:
  5299                           	opt stack 0
  5300                           tblptru	equ	0xFF8
  5301                           tblptrh	equ	0xFF7
  5302                           tblptrl	equ	0xFF6
  5303                           tablat	equ	0xFF5
  5304                           prodh	equ	0xFF4
  5305                           prodl	equ	0xFF3
  5306                           intcon	equ	0xFF2
  5307                           intcon2	equ	0xFF1
  5308                           postinc0	equ	0xFEE
  5309                           wreg	equ	0xFE8
  5310                           indf1	equ	0xFE7
  5311                           postinc1	equ	0xFE6
  5312                           postdec1	equ	0xFE5
  5313                           fsr1h	equ	0xFE2
  5314                           fsr1l	equ	0xFE1
  5315                           indf2	equ	0xFDF
  5316                           postinc2	equ	0xFDE
  5317                           postdec2	equ	0xFDD
  5318                           fsr2h	equ	0xFDA
  5319                           fsr2l	equ	0xFD9
  5320                           status	equ	0xFD8
  5321                           
  5322 ;; *************** function _I2C_Master_Stop *****************
  5323 ;; Defined at:
  5324 ;;		line 41 in file "I2C.c"
  5325 ;; Parameters:    Size  Location     Type
  5326 ;;		None
  5327 ;; Auto vars:     Size  Location     Type
  5328 ;;		None
  5329 ;; Return value:  Size  Location     Type
  5330 ;;                  2   66[None  ] int 
  5331 ;; Registers used:
  5332 ;;		wreg, status,2, status,0, cstack
  5333 ;; Tracked objects:
  5334 ;;		On entry : 0/0
  5335 ;;		On exit  : 0/0
  5336 ;;		Unchanged: 0/0
  5337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5342 ;;Total ram usage:        0 bytes
  5343 ;; Hardware stack levels used:    1
  5344 ;; Hardware stack levels required when called:    1
  5345 ;; This function calls:
  5346 ;;		_I2C_Master_Wait
  5347 ;; This function is called by:
  5348 ;;		_updateCurrentTime
  5349 ;; This function uses a non-reentrant model
  5350 ;;
  5351                           
  5352                           	psect	text23
  5353  00E434                     __ptext23:
  5354                           	opt stack 0
  5355  00E434                     _I2C_Master_Stop:
  5356                           	opt stack 26
  5357                           
  5358                           ;I2C.c: 43: I2C_Master_Wait();
  5359                           
  5360                           ;incstack = 0
  5361  00E434  EC35  F072         	call	_I2C_Master_Wait	;wreg free
  5362                           
  5363                           ;I2C.c: 44: PEN = 1;
  5364  00E438  84C5               	bsf	4037,2,c	;volatile
  5365  00E43A  0012               	return		;funcret
  5366  00E43C                     __end_of_I2C_Master_Stop:
  5367                           	opt stack 0
  5368                           tblptru	equ	0xFF8
  5369                           tblptrh	equ	0xFF7
  5370                           tblptrl	equ	0xFF6
  5371                           tablat	equ	0xFF5
  5372                           prodh	equ	0xFF4
  5373                           prodl	equ	0xFF3
  5374                           intcon	equ	0xFF2
  5375                           intcon2	equ	0xFF1
  5376                           postinc0	equ	0xFEE
  5377                           wreg	equ	0xFE8
  5378                           indf1	equ	0xFE7
  5379                           postinc1	equ	0xFE6
  5380                           postdec1	equ	0xFE5
  5381                           fsr1h	equ	0xFE2
  5382                           fsr1l	equ	0xFE1
  5383                           indf2	equ	0xFDF
  5384                           postinc2	equ	0xFDE
  5385                           postdec2	equ	0xFDD
  5386                           fsr2h	equ	0xFDA
  5387                           fsr2l	equ	0xFD9
  5388                           status	equ	0xFD8
  5389                           
  5390 ;; *************** function _I2C_Master_Start *****************
  5391 ;; Defined at:
  5392 ;;		line 29 in file "I2C.c"
  5393 ;; Parameters:    Size  Location     Type
  5394 ;;		None
  5395 ;; Auto vars:     Size  Location     Type
  5396 ;;		None
  5397 ;; Return value:  Size  Location     Type
  5398 ;;                  2   62[None  ] int 
  5399 ;; Registers used:
  5400 ;;		wreg, status,2, status,0, cstack
  5401 ;; Tracked objects:
  5402 ;;		On entry : 0/0
  5403 ;;		On exit  : 0/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5410 ;;Total ram usage:        0 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:    1
  5413 ;; This function calls:
  5414 ;;		_I2C_Master_Wait
  5415 ;; This function is called by:
  5416 ;;		_updateCurrentTime
  5417 ;; This function uses a non-reentrant model
  5418 ;;
  5419                           
  5420                           	psect	text24
  5421  00E42C                     __ptext24:
  5422                           	opt stack 0
  5423  00E42C                     _I2C_Master_Start:
  5424                           	opt stack 26
  5425                           
  5426                           ;I2C.c: 31: I2C_Master_Wait();
  5427                           
  5428                           ;incstack = 0
  5429  00E42C  EC35  F072         	call	_I2C_Master_Wait	;wreg free
  5430                           
  5431                           ;I2C.c: 32: SEN = 1;
  5432  00E430  80C5               	bsf	4037,0,c	;volatile
  5433  00E432  0012               	return		;funcret
  5434  00E434                     __end_of_I2C_Master_Start:
  5435                           	opt stack 0
  5436                           tblptru	equ	0xFF8
  5437                           tblptrh	equ	0xFF7
  5438                           tblptrl	equ	0xFF6
  5439                           tablat	equ	0xFF5
  5440                           prodh	equ	0xFF4
  5441                           prodl	equ	0xFF3
  5442                           intcon	equ	0xFF2
  5443                           intcon2	equ	0xFF1
  5444                           postinc0	equ	0xFEE
  5445                           wreg	equ	0xFE8
  5446                           indf1	equ	0xFE7
  5447                           postinc1	equ	0xFE6
  5448                           postdec1	equ	0xFE5
  5449                           fsr1h	equ	0xFE2
  5450                           fsr1l	equ	0xFE1
  5451                           indf2	equ	0xFDF
  5452                           postinc2	equ	0xFDE
  5453                           postdec2	equ	0xFDD
  5454                           fsr2h	equ	0xFDA
  5455                           fsr2l	equ	0xFD9
  5456                           status	equ	0xFD8
  5457                           
  5458 ;; *************** function _I2C_Master_Read *****************
  5459 ;; Defined at:
  5460 ;;		line 53 in file "I2C.c"
  5461 ;; Parameters:    Size  Location     Type
  5462 ;;  a               1    wreg     unsigned char 
  5463 ;; Auto vars:     Size  Location     Type
  5464 ;;  a               1    1[COMRAM] unsigned char 
  5465 ;;  temp            1    2[COMRAM] unsigned char 
  5466 ;; Return value:  Size  Location     Type
  5467 ;;                  1    wreg      unsigned char 
  5468 ;; Registers used:
  5469 ;;		wreg, status,2, status,0, cstack
  5470 ;; Tracked objects:
  5471 ;;		On entry : 0/0
  5472 ;;		On exit  : 0/0
  5473 ;;		Unchanged: 0/0
  5474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5476 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5478 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;Total ram usage:        2 bytes
  5480 ;; Hardware stack levels used:    1
  5481 ;; Hardware stack levels required when called:    1
  5482 ;; This function calls:
  5483 ;;		_I2C_Master_Wait
  5484 ;; This function is called by:
  5485 ;;		_updateCurrentTime
  5486 ;; This function uses a non-reentrant model
  5487 ;;
  5488                           
  5489                           	psect	text25
  5490  00E4F6                     __ptext25:
  5491                           	opt stack 0
  5492  00E4F6                     _I2C_Master_Read:
  5493                           	opt stack 26
  5494                           
  5495                           ;incstack = 0
  5496                           ;I2C_Master_Read@a stored from wreg
  5497  00E4F6  6E02               	movwf	I2C_Master_Read@a,c
  5498                           
  5499                           ;I2C.c: 55: unsigned char temp;
  5500                           ;I2C.c: 56: I2C_Master_Wait();
  5501  00E4F8  EC35  F072         	call	_I2C_Master_Wait	;wreg free
  5502                           
  5503                           ;I2C.c: 57: RCEN = 1;
  5504  00E4FC  86C5               	bsf	4037,3,c	;volatile
  5505                           
  5506                           ;I2C.c: 58: I2C_Master_Wait();
  5507  00E4FE  EC35  F072         	call	_I2C_Master_Wait	;wreg free
  5508                           
  5509                           ;I2C.c: 59: temp = SSPBUF;
  5510  00E502  CFC9 F003          	movff	4041,I2C_Master_Read@temp	;volatile
  5511                           
  5512                           ;I2C.c: 60: I2C_Master_Wait();
  5513  00E506  EC35  F072         	call	_I2C_Master_Wait	;wreg free
  5514                           
  5515                           ;I2C.c: 61: ACKDT = (a)?0:1;
  5516  00E50A  5002               	movf	I2C_Master_Read@a,w,c
  5517  00E50C  A4D8               	btfss	status,2,c
  5518  00E50E  D002               	goto	u460
  5519  00E510  8AC5               	bsf	4037,5,c	;volatile
  5520  00E512  D001               	goto	l1397
  5521  00E514                     u460:
  5522  00E514  9AC5               	bcf	4037,5,c	;volatile
  5523  00E516                     l1397:
  5524                           
  5525                           ;I2C.c: 62: ACKEN = 1;
  5526  00E516  88C5               	bsf	4037,4,c	;volatile
  5527                           
  5528                           ;I2C.c: 63: return temp;
  5529  00E518  5003               	movf	I2C_Master_Read@temp,w,c
  5530  00E51A  0012               	return	
  5531  00E51C                     __end_of_I2C_Master_Read:
  5532                           	opt stack 0
  5533                           tblptru	equ	0xFF8
  5534                           tblptrh	equ	0xFF7
  5535                           tblptrl	equ	0xFF6
  5536                           tablat	equ	0xFF5
  5537                           prodh	equ	0xFF4
  5538                           prodl	equ	0xFF3
  5539                           intcon	equ	0xFF2
  5540                           intcon2	equ	0xFF1
  5541                           postinc0	equ	0xFEE
  5542                           wreg	equ	0xFE8
  5543                           indf1	equ	0xFE7
  5544                           postinc1	equ	0xFE6
  5545                           postdec1	equ	0xFE5
  5546                           fsr1h	equ	0xFE2
  5547                           fsr1l	equ	0xFE1
  5548                           indf2	equ	0xFDF
  5549                           postinc2	equ	0xFDE
  5550                           postdec2	equ	0xFDD
  5551                           fsr2h	equ	0xFDA
  5552                           fsr2l	equ	0xFD9
  5553                           status	equ	0xFD8
  5554                           
  5555 ;; *************** function _I2C_Master_Wait *****************
  5556 ;; Defined at:
  5557 ;;		line 24 in file "I2C.c"
  5558 ;; Parameters:    Size  Location     Type
  5559 ;;		None
  5560 ;; Auto vars:     Size  Location     Type
  5561 ;;		None
  5562 ;; Return value:  Size  Location     Type
  5563 ;;                  1    wreg      void 
  5564 ;; Registers used:
  5565 ;;		wreg, status,2, status,0
  5566 ;; Tracked objects:
  5567 ;;		On entry : 0/0
  5568 ;;		On exit  : 0/0
  5569 ;;		Unchanged: 0/0
  5570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5573 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5574 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5575 ;;Total ram usage:        1 bytes
  5576 ;; Hardware stack levels used:    1
  5577 ;; This function calls:
  5578 ;;		Nothing
  5579 ;; This function is called by:
  5580 ;;		_I2C_Master_Start
  5581 ;;		_I2C_Master_Stop
  5582 ;;		_I2C_Master_Write
  5583 ;;		_I2C_Master_Read
  5584 ;;		_I2C_Master_RepeatedStart
  5585 ;; This function uses a non-reentrant model
  5586 ;;
  5587                           
  5588                           	psect	text26
  5589  00E46A                     __ptext26:
  5590                           	opt stack 0
  5591  00E46A                     _I2C_Master_Wait:
  5592                           	opt stack 26
  5593  00E46A                     l368:
  5594  00E46A  B4C7               	btfsc	4039,2,c	;volatile
  5595  00E46C  D7FE               	goto	l368
  5596  00E46E  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  5597  00E472  0E1F               	movlw	31
  5598  00E474  1601               	andwf	??_I2C_Master_Wait,f,c
  5599  00E476  B4D8               	btfsc	status,2,c
  5600  00E478  0012               	return	
  5601  00E47A  D7F7               	goto	l368
  5602  00E47C                     __end_of_I2C_Master_Wait:
  5603                           	opt stack 0
  5604                           tblptru	equ	0xFF8
  5605                           tblptrh	equ	0xFF7
  5606                           tblptrl	equ	0xFF6
  5607                           tablat	equ	0xFF5
  5608                           prodh	equ	0xFF4
  5609                           prodl	equ	0xFF3
  5610                           intcon	equ	0xFF2
  5611                           intcon2	equ	0xFF1
  5612                           postinc0	equ	0xFEE
  5613                           wreg	equ	0xFE8
  5614                           indf1	equ	0xFE7
  5615                           postinc1	equ	0xFE6
  5616                           postdec1	equ	0xFE5
  5617                           fsr1h	equ	0xFE2
  5618                           fsr1l	equ	0xFE1
  5619                           indf2	equ	0xFDF
  5620                           postinc2	equ	0xFDE
  5621                           postdec2	equ	0xFDD
  5622                           fsr2h	equ	0xFDA
  5623                           fsr2l	equ	0xFD9
  5624                           status	equ	0xFD8
  5625                           
  5626 ;; *************** function _printf *****************
  5627 ;; Defined at:
  5628 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
  5629 ;; Parameters:    Size  Location     Type
  5630 ;;  f               2   30[COMRAM] PTR const unsigned char 
  5631 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(18), 
  5632 ;;		 -> STR_32(13), STR_31(12), STR_30(5), STR_29(4), 
  5633 ;;		 -> STR_28(17), STR_27(14), STR_26(16), STR_25(18), 
  5634 ;;		 -> STR_24(15), STR_23(13), STR_22(17), STR_21(16), 
  5635 ;;		 -> STR_20(16), STR_19(14), STR_18(14), STR_17(16), 
  5636 ;;		 -> STR_16(17), STR_15(16), STR_14(16), STR_13(16), 
  5637 ;;		 -> STR_12(11), STR_11(17), STR_10(17), STR_9(14), 
  5638 ;;		 -> STR_8(15), STR_7(13), STR_6(14), STR_2(15), 
  5639 ;;		 -> STR_1(13), 
  5640 ;; Auto vars:     Size  Location     Type
  5641 ;;  pb              4   40[COMRAM] struct __prbuf
  5642 ;;  ap              2   38[COMRAM] PTR void [1]
  5643 ;;		 -> ?_sprintf(2), ?_printf(2), 
  5644 ;; Return value:  Size  Location     Type
  5645 ;;                  2   30[COMRAM] int 
  5646 ;; Registers used:
  5647 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5648 ;; Tracked objects:
  5649 ;;		On entry : 0/0
  5650 ;;		On exit  : 0/0
  5651 ;;		Unchanged: 0/0
  5652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5653 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5654 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5656 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5657 ;;Total ram usage:       14 bytes
  5658 ;; Hardware stack levels used:    1
  5659 ;; Hardware stack levels required when called:    3
  5660 ;; This function calls:
  5661 ;;		__doprnt
  5662 ;; This function is called by:
  5663 ;;		_getUserInput
  5664 ;;		_displayMainProgramLcdScreen
  5665 ;;		_update_eeprom_screen_state
  5666 ;;		_update_past_run_screen_state
  5667 ;;		_operation
  5668 ;;		_lcdClear
  5669 ;; This function uses a non-reentrant model
  5670 ;;
  5671                           
  5672                           	psect	text27
  5673  00E5CA                     __ptext27:
  5674                           	opt stack 0
  5675  00E5CA                     _printf:
  5676                           	opt stack 25
  5677                           
  5678                           ;incstack = 0
  5679  00E5CA  0E00               	movlw	0
  5680  00E5CC  6E29               	movwf	printf@pb,c
  5681  00E5CE  0E00               	movlw	0
  5682  00E5D0  6E2A               	movwf	printf@pb+1,c
  5683  00E5D2  0E52               	movlw	low _putch
  5684  00E5D4  6E2B               	movwf	printf@pb+2,c
  5685  00E5D6  0EE4               	movlw	high _putch
  5686  00E5D8  6E2C               	movwf	printf@pb+3,c
  5687  00E5DA  0E21               	movlw	low (?_printf+2)
  5688  00E5DC  6E27               	movwf	printf@ap,c
  5689  00E5DE  0E00               	movlw	high (?_printf+2)
  5690  00E5E0  6E28               	movwf	printf@ap+1,c
  5691                           
  5692                           ;	Return value of _printf is never used
  5693  00E5E2  0E29               	movlw	low printf@pb
  5694  00E5E4  6E0D               	movwf	__doprnt@pb,c
  5695  00E5E6  0E00               	movlw	high printf@pb
  5696  00E5E8  6E0E               	movwf	__doprnt@pb+1,c
  5697  00E5EA  C01F  F00F         	movff	printf@f,__doprnt@f
  5698  00E5EE  C020  F010         	movff	printf@f+1,__doprnt@f+1
  5699  00E5F2  0E27               	movlw	low printf@ap
  5700  00E5F4  6E11               	movwf	__doprnt@ap,c
  5701  00E5F6  0E00               	movlw	high printf@ap
  5702  00E5F8  6E12               	movwf	__doprnt@ap+1,c
  5703  00E5FA  EC41  F07C         	call	__doprnt	;wreg free
  5704  00E5FE  0012               	return	
  5705  00E600                     __end_of_printf:
  5706                           	opt stack 0
  5707                           tblptru	equ	0xFF8
  5708                           tblptrh	equ	0xFF7
  5709                           tblptrl	equ	0xFF6
  5710                           tablat	equ	0xFF5
  5711                           prodh	equ	0xFF4
  5712                           prodl	equ	0xFF3
  5713                           intcon	equ	0xFF2
  5714                           intcon2	equ	0xFF1
  5715                           postinc0	equ	0xFEE
  5716                           wreg	equ	0xFE8
  5717                           indf1	equ	0xFE7
  5718                           postinc1	equ	0xFE6
  5719                           postdec1	equ	0xFE5
  5720                           fsr1h	equ	0xFE2
  5721                           fsr1l	equ	0xFE1
  5722                           indf2	equ	0xFDF
  5723                           postinc2	equ	0xFDE
  5724                           postdec2	equ	0xFDD
  5725                           fsr2h	equ	0xFDA
  5726                           fsr2l	equ	0xFD9
  5727                           status	equ	0xFD8
  5728                           
  5729 ;; *************** function __doprnt *****************
  5730 ;; Defined at:
  5731 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5732 ;; Parameters:    Size  Location     Type
  5733 ;;  pb              2   12[COMRAM] PTR struct __prbuf
  5734 ;;		 -> sprintf@pb(4), printf@pb(4), 
  5735 ;;  f               2   14[COMRAM] PTR const unsigned char 
  5736 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(18), 
  5737 ;;		 -> STR_32(13), STR_31(12), STR_30(5), STR_29(4), 
  5738 ;;		 -> STR_28(17), STR_27(14), STR_26(16), STR_25(18), 
  5739 ;;		 -> STR_24(15), STR_23(13), STR_22(17), STR_21(16), 
  5740 ;;		 -> STR_20(16), STR_19(14), STR_18(14), STR_17(16), 
  5741 ;;		 -> STR_16(17), STR_15(16), STR_14(16), STR_13(16), 
  5742 ;;		 -> STR_12(11), STR_11(17), STR_10(17), STR_9(14), 
  5743 ;;		 -> STR_8(15), STR_7(13), STR_6(14), STR_5(5), 
  5744 ;;		 -> STR_4(5), STR_3(5), STR_2(15), STR_1(13), 
  5745 ;;  ap              2   16[COMRAM] PTR PTR void 
  5746 ;;		 -> sprintf@ap(2), printf@ap(2), 
  5747 ;; Auto vars:     Size  Location     Type
  5748 ;;  idx             1   22[COMRAM] unsigned char 
  5749 ;;  tmpval          4    0        struct .
  5750 ;;  cp              3    0        PTR const unsigned char 
  5751 ;;  width           2   27[COMRAM] int 
  5752 ;;  val             2   24[COMRAM] unsigned int 
  5753 ;;  len             2    0        unsigned int 
  5754 ;;  c               1   29[COMRAM] char 
  5755 ;;  flag            1   26[COMRAM] unsigned char 
  5756 ;;  prec            1   23[COMRAM] char 
  5757 ;; Return value:  Size  Location     Type
  5758 ;;                  2   12[COMRAM] int 
  5759 ;; Registers used:
  5760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5761 ;; Tracked objects:
  5762 ;;		On entry : 0/0
  5763 ;;		On exit  : 0/0
  5764 ;;		Unchanged: 0/0
  5765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5766 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5767 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5768 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5769 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5770 ;;Total ram usage:       18 bytes
  5771 ;; Hardware stack levels used:    1
  5772 ;; Hardware stack levels required when called:    2
  5773 ;; This function calls:
  5774 ;;		Absolute function
  5775 ;;		___lwdiv
  5776 ;;		___lwmod
  5777 ;;		___wmul
  5778 ;;		_isdigit
  5779 ;;		_putch
  5780 ;; This function is called by:
  5781 ;;		_printf
  5782 ;;		_sprintf
  5783 ;; This function uses a non-reentrant model
  5784 ;;
  5785                           
  5786                           	psect	text28
  5787  00F882                     __ptext28:
  5788                           	opt stack 0
  5789  00F882                     __doprnt:
  5790                           	opt stack 25
  5791                           
  5792                           ;doprnt.c: 499: signed char c;
  5793                           ;doprnt.c: 501: int width;
  5794                           ;doprnt.c: 506: signed char prec;
  5795                           ;doprnt.c: 508: unsigned char flag;
  5796                           ;doprnt.c: 523: union {
  5797                           ;doprnt.c: 524: unsigned long vd;
  5798                           ;doprnt.c: 525: double integ;
  5799                           ;doprnt.c: 526: } tmpval;
  5800                           ;doprnt.c: 528: unsigned int val;
  5801                           ;doprnt.c: 529: unsigned len;
  5802                           ;doprnt.c: 530: const char * cp;
  5803                           ;doprnt.c: 536: while(c = *f++) {
  5804                           
  5805                           ;incstack = 0
  5806  00F882  D2C4               	goto	l2381
  5807  00F884                     l2223:
  5808                           
  5809                           ;doprnt.c: 538: if(c != '%')
  5810  00F884  0E25               	movlw	37
  5811  00F886  181E               	xorwf	__doprnt@c,w,c
  5812  00F888  B4D8               	btfsc	status,2,c
  5813  00F88A  D036               	goto	l2233
  5814                           
  5815                           ;doprnt.c: 540: {
  5816                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  5817  00F88C  EE20 F002          	lfsr	2,2
  5818  00F890  500D               	movf	__doprnt@pb,w,c
  5819  00F892  26D9               	addwf	fsr2l,f,c
  5820  00F894  500E               	movf	__doprnt@pb+1,w,c
  5821  00F896  22DA               	addwfc	fsr2h,f,c
  5822  00F898  50DE               	movf	postinc2,w,c
  5823  00F89A  10DE               	iorwf	postinc2,w,c
  5824  00F89C  B4D8               	btfsc	status,2,c
  5825  00F89E  D016               	goto	l2229
  5826  00F8A0  EE20 F002          	lfsr	2,2
  5827  00F8A4  500D               	movf	__doprnt@pb,w,c
  5828  00F8A6  26D9               	addwf	fsr2l,f,c
  5829  00F8A8  500E               	movf	__doprnt@pb+1,w,c
  5830  00F8AA  22DA               	addwfc	fsr2h,f,c
  5831  00F8AC  CFDE F013          	movff	postinc2,??__doprnt
  5832  00F8B0  CFDD F014          	movff	postdec2,??__doprnt+1
  5833  00F8B4  D801               	call	u1428
  5834  00F8B6  D2AA               	goto	l2381
  5835  00F8B8                     u1428:
  5836  00F8B8  0005               	push	
  5837  00F8BA  6EFA               	movwf	pclath,c
  5838  00F8BC  5013               	movf	??__doprnt,w,c
  5839  00F8BE  6EFD               	movwf	tosl,c
  5840  00F8C0  5014               	movf	??__doprnt+1,w,c
  5841  00F8C2  6EFE               	movwf	tosh,c
  5842  00F8C4  6AFF               	clrf	tosu,c
  5843  00F8C6  50FA               	movf	pclath,w,c
  5844  00F8C8  501E               	movf	__doprnt@c,w,c
  5845  00F8CA  0012               	return		;indir
  5846  00F8CC                     l2229:
  5847  00F8CC  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  5848  00F8D0  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  5849  00F8D4  CFDE F013          	movff	postinc2,??__doprnt
  5850  00F8D8  CFDD F014          	movff	postdec2,??__doprnt+1
  5851  00F8DC  C013  FFD9         	movff	??__doprnt,fsr2l
  5852  00F8E0  C014  FFDA         	movff	??__doprnt+1,fsr2h
  5853  00F8E4  C01E  FFDF         	movff	__doprnt@c,indf2
  5854  00F8E8  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  5855  00F8EC  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  5856  00F8F0  2ADE               	incf	postinc2,f,c
  5857  00F8F2  0E00               	movlw	0
  5858  00F8F4  22DD               	addwfc	postdec2,f,c
  5859                           
  5860                           ;doprnt.c: 542: continue;
  5861  00F8F6  D28A               	goto	l2381
  5862  00F8F8                     l2233:
  5863                           
  5864                           ;doprnt.c: 543: }
  5865                           ;doprnt.c: 546: width = 0;
  5866  00F8F8  0E00               	movlw	0
  5867  00F8FA  6E1D               	movwf	__doprnt@width+1,c
  5868  00F8FC  0E00               	movlw	0
  5869  00F8FE  6E1C               	movwf	__doprnt@width,c
  5870                           
  5871                           ;doprnt.c: 548: flag = 0;
  5872  00F900  0E00               	movlw	0
  5873  00F902  6E1B               	movwf	__doprnt@flag,c
  5874                           
  5875                           ;doprnt.c: 551: switch(*f) {
  5876                           
  5877                           ;doprnt.c: 550: for(;;) {
  5878  00F904  D003               	goto	l2239
  5879  00F906                     l2235:
  5880                           
  5881                           ;doprnt.c: 580: flag |= 0x04;
  5882  00F906  841B               	bsf	__doprnt@flag,2,c
  5883                           
  5884                           ;doprnt.c: 581: f++;
  5885  00F908  4A0F               	infsnz	__doprnt@f,f,c
  5886  00F90A  2A10               	incf	__doprnt@f+1,f,c
  5887  00F90C                     l2239:
  5888  00F90C  C00F  FFF6         	movff	__doprnt@f,tblptrl
  5889  00F910  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  5890  00F914                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5891  00F914  6AF8               	clrf	tblptru,c
  5892  00F916                     	endif
  5893  00F916                     	if	0	;tblptru may be non-zero
  5894  00F916                     	endif
  5895  00F916  0008               	tblrd		*
  5896  00F918  50F5               	movf	tablat,w,c
  5897                           
  5898                           ; Switch size 1, requested type "space"
  5899                           ; Number of cases is 1, Range of values is 48 to 48
  5900                           ; switch strategies available:
  5901                           ; Name         Instructions Cycles
  5902                           ; simple_byte            4     3 (average)
  5903                           ;	Chosen strategy is simple_byte
  5904  00F91A  0A30               	xorlw	48	; case 48
  5905  00F91C  B4D8               	btfsc	status,2,c
  5906  00F91E  D7F3               	goto	l2235
  5907                           
  5908                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5909                           
  5910                           ;doprnt.c: 586: }
  5911                           
  5912                           ;doprnt.c: 585: break;
  5913  00F920  C00F  FFF6         	movff	__doprnt@f,tblptrl
  5914  00F924  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  5915  00F928                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5916  00F928  6AF8               	clrf	tblptru,c
  5917  00F92A                     	endif
  5918  00F92A                     	if	0	;tblptru may be non-zero
  5919  00F92A                     	endif
  5920  00F92A  0008               	tblrd		*
  5921  00F92C  50F5               	movf	tablat,w,c
  5922  00F92E  EC49  F072         	call	_isdigit
  5923  00F932  A0D8               	btfss	status,0,c
  5924  00F934  D037               	goto	l2257
  5925                           
  5926                           ;doprnt.c: 598: width = 0;
  5927  00F936  0E00               	movlw	0
  5928  00F938  6E1D               	movwf	__doprnt@width+1,c
  5929  00F93A  0E00               	movlw	0
  5930  00F93C  6E1C               	movwf	__doprnt@width,c
  5931  00F93E                     l2245:
  5932                           
  5933                           ;doprnt.c: 600: width *= 10;
  5934  00F93E  C01C  F001         	movff	__doprnt@width,___wmul@multiplier
  5935  00F942  C01D  F002         	movff	__doprnt@width+1,___wmul@multiplier+1
  5936  00F946  0E00               	movlw	0
  5937  00F948  6E04               	movwf	___wmul@multiplicand+1,c
  5938  00F94A  0E0A               	movlw	10
  5939  00F94C  6E03               	movwf	___wmul@multiplicand,c
  5940  00F94E  EC68  F072         	call	___wmul	;wreg free
  5941  00F952  C001  F01C         	movff	?___wmul,__doprnt@width
  5942  00F956  C002  F01D         	movff	?___wmul+1,__doprnt@width+1
  5943                           
  5944                           ;doprnt.c: 601: width += *f++ - '0';
  5945  00F95A  0ED0               	movlw	208
  5946  00F95C  6E13               	movwf	??__doprnt& (0+255),c
  5947  00F95E  0EFF               	movlw	255
  5948  00F960  6E14               	movwf	(??__doprnt+1)& (0+255),c
  5949  00F962  C00F  FFF6         	movff	__doprnt@f,tblptrl
  5950  00F966  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  5951  00F96A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5952  00F96A  6AF8               	clrf	tblptru,c
  5953  00F96C                     	endif
  5954  00F96C                     	if	0	;tblptru may be non-zero
  5955  00F96C                     	endif
  5956  00F96C  0008               	tblrd		*
  5957  00F96E  50F5               	movf	tablat,w,c
  5958  00F970  6E15               	movwf	(??__doprnt+2)& (0+255),c
  5959  00F972  6A16               	clrf	(??__doprnt+3)& (0+255),c
  5960  00F974  5013               	movf	??__doprnt,w,c
  5961  00F976  2615               	addwf	??__doprnt+2,f,c
  5962  00F978  5014               	movf	??__doprnt+1,w,c
  5963  00F97A  2216               	addwfc	??__doprnt+3,f,c
  5964  00F97C  5015               	movf	??__doprnt+2,w,c
  5965  00F97E  261C               	addwf	__doprnt@width,f,c
  5966  00F980  5016               	movf	??__doprnt+3,w,c
  5967  00F982  221D               	addwfc	__doprnt@width+1,f,c
  5968  00F984  4A0F               	infsnz	__doprnt@f,f,c
  5969  00F986  2A10               	incf	__doprnt@f+1,f,c
  5970                           
  5971                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5972  00F988  C00F  FFF6         	movff	__doprnt@f,tblptrl
  5973  00F98C  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  5974  00F990                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5975  00F990  6AF8               	clrf	tblptru,c
  5976  00F992                     	endif
  5977  00F992                     	if	0	;tblptru may be non-zero
  5978  00F992                     	endif
  5979  00F992  0008               	tblrd		*
  5980  00F994  50F5               	movf	tablat,w,c
  5981  00F996  EC49  F072         	call	_isdigit
  5982  00F99A  A0D8               	btfss	status,0,c
  5983  00F99C  D003               	goto	l2257
  5984  00F99E  D7CF               	goto	l2245
  5985  00F9A0                     l2253:
  5986                           
  5987                           ;doprnt.c: 721: flag |= 0x80;
  5988  00F9A0  8E1B               	bsf	__doprnt@flag,7,c
  5989                           
  5990                           ;doprnt.c: 723: break;
  5991  00F9A2  D018               	goto	l422
  5992  00F9A4                     l2257:
  5993  00F9A4  C00F  FFF6         	movff	__doprnt@f,tblptrl
  5994  00F9A8  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  5995  00F9AC  4A0F               	infsnz	__doprnt@f,f,c
  5996  00F9AE  2A10               	incf	__doprnt@f+1,f,c
  5997  00F9B0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5998  00F9B0  6AF8               	clrf	tblptru,c
  5999  00F9B2                     	endif
  6000  00F9B2                     	if	0	;tblptru may be non-zero
  6001  00F9B2                     	endif
  6002  00F9B2  0008               	tblrd		*
  6003  00F9B4  CFF5 F01E          	movff	tablat,__doprnt@c
  6004  00F9B8  501E               	movf	__doprnt@c,w,c
  6005                           
  6006                           ; Switch size 1, requested type "space"
  6007                           ; Number of cases is 4, Range of values is 0 to 120
  6008                           ; switch strategies available:
  6009                           ; Name         Instructions Cycles
  6010                           ; simple_byte           13     7 (average)
  6011                           ;	Chosen strategy is simple_byte
  6012  00F9BA  0A00               	xorlw	0	; case 0
  6013  00F9BC  B4D8               	btfsc	status,2,c
  6014  00F9BE  D233               	goto	l2383
  6015  00F9C0  0A64               	xorlw	100	; case 100
  6016  00F9C2  B4D8               	btfsc	status,2,c
  6017  00F9C4  D007               	goto	l422
  6018  00F9C6  0A0D               	xorlw	13	; case 105
  6019  00F9C8  B4D8               	btfsc	status,2,c
  6020  00F9CA  D004               	goto	l422
  6021  00F9CC  0A11               	xorlw	17	; case 120
  6022  00F9CE  B4D8               	btfsc	status,2,c
  6023  00F9D0  D7E7               	goto	l2253
  6024  00F9D2  D21C               	goto	l2381
  6025  00F9D4                     l422:
  6026                           
  6027                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6028  00F9D4  BE1B               	btfsc	__doprnt@flag,7,c
  6029  00F9D6  D01D               	goto	l2267
  6030                           
  6031                           ;doprnt.c: 1253: {
  6032                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6033  00F9D8  C011  FFD9         	movff	__doprnt@ap,fsr2l
  6034  00F9DC  C012  FFDA         	movff	__doprnt@ap+1,fsr2h
  6035  00F9E0  CFDF F013          	movff	indf2,??__doprnt
  6036  00F9E4  0E02               	movlw	2
  6037  00F9E6  26DE               	addwf	postinc2,f,c
  6038  00F9E8  CFDF F014          	movff	indf2,??__doprnt+1
  6039  00F9EC  0E00               	movlw	0
  6040  00F9EE  22DD               	addwfc	postdec2,f,c
  6041  00F9F0  C013  FFD9         	movff	??__doprnt,fsr2l
  6042  00F9F4  C014  FFDA         	movff	??__doprnt+1,fsr2h
  6043  00F9F8  CFDE F019          	movff	postinc2,__doprnt@val
  6044  00F9FC  CFDD F01A          	movff	postdec2,__doprnt@val+1
  6045                           
  6046                           ;doprnt.c: 1261: if((int)val < 0) {
  6047  00FA00  AE1A               	btfss	__doprnt@val+1,7,c
  6048  00FA02  D052               	goto	l2299
  6049                           
  6050                           ;doprnt.c: 1262: flag |= 0x03;
  6051  00FA04  0E03               	movlw	3
  6052  00FA06  121B               	iorwf	__doprnt@flag,f,c
  6053                           
  6054                           ;doprnt.c: 1263: val = -val;
  6055  00FA08  6C19               	negf	__doprnt@val,c
  6056  00FA0A  1E1A               	comf	__doprnt@val+1,f,c
  6057  00FA0C  B0D8               	btfsc	status,0,c
  6058  00FA0E  2A1A               	incf	__doprnt@val+1,f,c
  6059                           
  6060                           ;doprnt.c: 1264: }
  6061                           ;doprnt.c: 1266: }
  6062  00FA10  D04B               	goto	l2299
  6063  00FA12                     l2267:
  6064                           
  6065                           ;doprnt.c: 1268: else
  6066                           ;doprnt.c: 1273: {
  6067                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6068  00FA12  C011  FFD9         	movff	__doprnt@ap,fsr2l
  6069  00FA16  C012  FFDA         	movff	__doprnt@ap+1,fsr2h
  6070  00FA1A  CFDF F013          	movff	indf2,??__doprnt
  6071  00FA1E  0E02               	movlw	2
  6072  00FA20  26DE               	addwf	postinc2,f,c
  6073  00FA22  CFDF F014          	movff	indf2,??__doprnt+1
  6074  00FA26  0E00               	movlw	0
  6075  00FA28  22DD               	addwfc	postdec2,f,c
  6076  00FA2A  C013  FFD9         	movff	??__doprnt,fsr2l
  6077  00FA2E  C014  FFDA         	movff	??__doprnt+1,fsr2h
  6078  00FA32  CFDE F019          	movff	postinc2,__doprnt@val
  6079  00FA36  CFDD F01A          	movff	postdec2,__doprnt@val+1
  6080                           
  6081                           ;doprnt.c: 1287: }
  6082                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6083  00FA3A  D036               	goto	l2299
  6084  00FA3C                     l2269:
  6085                           
  6086                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6087  00FA3C  0E01               	movlw	1
  6088  00FA3E  6E1E               	movwf	__doprnt@c,c
  6089  00FA40                     l2271:
  6090  00FA40  0E05               	movlw	5
  6091  00FA42  181E               	xorwf	__doprnt@c,w,c
  6092  00FA44  B4D8               	btfsc	status,2,c
  6093  00FA46  D038               	goto	l2301
  6094                           
  6095                           ;doprnt.c: 1306: if(val < dpowers[c])
  6096  00FA48  501E               	movf	__doprnt@c,w,c
  6097  00FA4A  0D02               	mullw	2
  6098  00FA4C  0E42               	movlw	low _dpowers
  6099  00FA4E  24F3               	addwf	prodl,w,c
  6100  00FA50  6EF6               	movwf	tblptrl,c
  6101  00FA52  0EFE               	movlw	high _dpowers
  6102  00FA54  20F4               	addwfc	prodh,w,c
  6103  00FA56  6EF7               	movwf	tblptrh,c
  6104  00FA58                     	if	1	;There are 3 active tblptr bytes
  6105  00FA58  6AF8               	clrf	tblptru,c
  6106  00FA5A  0E00               	movlw	low (__mediumconst shr (0+16))
  6107  00FA5C  22F8               	addwfc	tblptru,f,c
  6108  00FA5E                     	endif
  6109  00FA5E  0009               	tblrd		*+
  6110  00FA60  50F5               	movf	tablat,w,c
  6111  00FA62  5C19               	subwf	__doprnt@val,w,c
  6112  00FA64  0009               	tblrd		*+
  6113  00FA66  50F5               	movf	tablat,w,c
  6114  00FA68  581A               	subwfb	__doprnt@val+1,w,c
  6115  00FA6A  A0D8               	btfss	status,0,c
  6116  00FA6C  D025               	goto	l2301
  6117                           
  6118                           ;doprnt.c: 1307: break;
  6119  00FA6E  2A1E               	incf	__doprnt@c,f,c
  6120  00FA70  D7E7               	goto	l2271
  6121  00FA72                     l2283:
  6122                           
  6123                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6124  00FA72  0E01               	movlw	1
  6125  00FA74  6E1E               	movwf	__doprnt@c,c
  6126  00FA76                     l2285:
  6127  00FA76  0E04               	movlw	4
  6128  00FA78  181E               	xorwf	__doprnt@c,w,c
  6129  00FA7A  B4D8               	btfsc	status,2,c
  6130  00FA7C  D01D               	goto	l2301
  6131                           
  6132                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6133  00FA7E  501E               	movf	__doprnt@c,w,c
  6134  00FA80  0D02               	mullw	2
  6135  00FA82  0E4C               	movlw	low _hexpowers
  6136  00FA84  24F3               	addwf	prodl,w,c
  6137  00FA86  6EF6               	movwf	tblptrl,c
  6138  00FA88  0EFE               	movlw	high _hexpowers
  6139  00FA8A  20F4               	addwfc	prodh,w,c
  6140  00FA8C  6EF7               	movwf	tblptrh,c
  6141  00FA8E                     	if	1	;There are 3 active tblptr bytes
  6142  00FA8E  6AF8               	clrf	tblptru,c
  6143  00FA90  0E00               	movlw	low (__mediumconst shr (0+16))
  6144  00FA92  22F8               	addwfc	tblptru,f,c
  6145  00FA94                     	endif
  6146  00FA94  0009               	tblrd		*+
  6147  00FA96  50F5               	movf	tablat,w,c
  6148  00FA98  5C19               	subwf	__doprnt@val,w,c
  6149  00FA9A  0009               	tblrd		*+
  6150  00FA9C  50F5               	movf	tablat,w,c
  6151  00FA9E  581A               	subwfb	__doprnt@val+1,w,c
  6152  00FAA0  A0D8               	btfss	status,0,c
  6153  00FAA2  D00A               	goto	l2301
  6154                           
  6155                           ;doprnt.c: 1318: break;
  6156  00FAA4  2A1E               	incf	__doprnt@c,f,c
  6157  00FAA6  D7E7               	goto	l2285
  6158  00FAA8                     l2299:
  6159  00FAA8  501B               	movf	__doprnt@flag,w,c
  6160  00FAAA  0B80               	andlw	128
  6161                           
  6162                           ; Switch size 1, requested type "space"
  6163                           ; Number of cases is 2, Range of values is 0 to 128
  6164                           ; switch strategies available:
  6165                           ; Name         Instructions Cycles
  6166                           ; simple_byte            7     4 (average)
  6167                           ;	Chosen strategy is simple_byte
  6168  00FAAC  0A00               	xorlw	0	; case 0
  6169  00FAAE  B4D8               	btfsc	status,2,c
  6170  00FAB0  D7C5               	goto	l2269
  6171  00FAB2  0A80               	xorlw	128	; case 128
  6172  00FAB4  B4D8               	btfsc	status,2,c
  6173  00FAB6  D7DD               	goto	l2283
  6174  00FAB8                     l2301:
  6175                           
  6176                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6177  00FAB8  501C               	movf	__doprnt@width,w,c
  6178  00FABA  101D               	iorwf	__doprnt@width+1,w,c
  6179  00FABC  B4D8               	btfsc	status,2,c
  6180  00FABE  D009               	goto	l2307
  6181  00FAC0  C01B  F013         	movff	__doprnt@flag,??__doprnt
  6182  00FAC4  0E03               	movlw	3
  6183  00FAC6  1613               	andwf	??__doprnt,f,c
  6184  00FAC8  B4D8               	btfsc	status,2,c
  6185  00FACA  D003               	goto	l2307
  6186                           
  6187                           ;doprnt.c: 1346: width--;
  6188  00FACC  061C               	decf	__doprnt@width,f,c
  6189  00FACE  A0D8               	btfss	status,0,c
  6190  00FAD0  061D               	decf	__doprnt@width+1,f,c
  6191  00FAD2                     l2307:
  6192                           
  6193                           ;doprnt.c: 1381: if(width > c)
  6194  00FAD2  0E80               	movlw	128
  6195  00FAD4  BE1E               	btfsc	__doprnt@c,7,c
  6196  00FAD6  0E7F               	movlw	127
  6197  00FAD8  6E13               	movwf	??__doprnt& (0+255),c
  6198  00FADA  501C               	movf	__doprnt@width,w,c
  6199  00FADC  5C1E               	subwf	__doprnt@c,w,c
  6200  00FADE  501D               	movf	__doprnt@width+1,w,c
  6201  00FAE0  0A80               	xorlw	128
  6202  00FAE2  5813               	subwfb	??__doprnt& (0+255),w,c
  6203  00FAE4  B0D8               	btfsc	status,0,c
  6204  00FAE6  D007               	goto	l2311
  6205                           
  6206                           ;doprnt.c: 1382: width -= c;
  6207  00FAE8  501E               	movf	__doprnt@c,w,c
  6208  00FAEA  5E1C               	subwf	__doprnt@width,f,c
  6209  00FAEC  0E00               	movlw	0
  6210  00FAEE  BE1E               	btfsc	__doprnt@c,7,c
  6211  00FAF0  0EFF               	movlw	255
  6212  00FAF2  5A1D               	subwfb	__doprnt@width+1,f,c
  6213  00FAF4  D004               	goto	l2313
  6214  00FAF6                     l2311:
  6215                           
  6216                           ;doprnt.c: 1383: else
  6217                           ;doprnt.c: 1384: width = 0;
  6218  00FAF6  0E00               	movlw	0
  6219  00FAF8  6E1D               	movwf	__doprnt@width+1,c
  6220  00FAFA  0E00               	movlw	0
  6221  00FAFC  6E1C               	movwf	__doprnt@width,c
  6222  00FAFE                     l2313:
  6223                           
  6224                           ;doprnt.c: 1387: if(flag & 0x04) {
  6225  00FAFE  A41B               	btfss	__doprnt@flag,2,c
  6226  00FB00  D078               	goto	l2337
  6227                           
  6228                           ;doprnt.c: 1392: if(flag & 0x03)
  6229  00FB02  C01B  F013         	movff	__doprnt@flag,??__doprnt
  6230  00FB06  0E03               	movlw	3
  6231  00FB08  1613               	andwf	??__doprnt,f,c
  6232  00FB0A  B4D8               	btfsc	status,2,c
  6233  00FB0C  D035               	goto	l2325
  6234                           
  6235                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  6236  00FB0E  EE20 F002          	lfsr	2,2
  6237  00FB12  500D               	movf	__doprnt@pb,w,c
  6238  00FB14  26D9               	addwf	fsr2l,f,c
  6239  00FB16  500E               	movf	__doprnt@pb+1,w,c
  6240  00FB18  22DA               	addwfc	fsr2h,f,c
  6241  00FB1A  50DE               	movf	postinc2,w,c
  6242  00FB1C  10DE               	iorwf	postinc2,w,c
  6243  00FB1E  B4D8               	btfsc	status,2,c
  6244  00FB20  D016               	goto	l2321
  6245  00FB22  EE20 F002          	lfsr	2,2
  6246  00FB26  500D               	movf	__doprnt@pb,w,c
  6247  00FB28  26D9               	addwf	fsr2l,f,c
  6248  00FB2A  500E               	movf	__doprnt@pb+1,w,c
  6249  00FB2C  22DA               	addwfc	fsr2h,f,c
  6250  00FB2E  CFDE F013          	movff	postinc2,??__doprnt
  6251  00FB32  CFDD F014          	movff	postdec2,??__doprnt+1
  6252  00FB36  D801               	call	u1598
  6253  00FB38  D01F               	goto	l2325
  6254  00FB3A                     u1598:
  6255  00FB3A  0005               	push	
  6256  00FB3C  6EFA               	movwf	pclath,c
  6257  00FB3E  5013               	movf	??__doprnt,w,c
  6258  00FB40  6EFD               	movwf	tosl,c
  6259  00FB42  5014               	movf	??__doprnt+1,w,c
  6260  00FB44  6EFE               	movwf	tosh,c
  6261  00FB46  6AFF               	clrf	tosu,c
  6262  00FB48  50FA               	movf	pclath,w,c
  6263  00FB4A  0E2D               	movlw	45
  6264  00FB4C  0012               	return		;indir
  6265  00FB4E                     l2321:
  6266  00FB4E  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6267  00FB52  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6268  00FB56  CFDE F013          	movff	postinc2,??__doprnt
  6269  00FB5A  CFDD F014          	movff	postdec2,??__doprnt+1
  6270  00FB5E  C013  FFD9         	movff	??__doprnt,fsr2l
  6271  00FB62  C014  FFDA         	movff	??__doprnt+1,fsr2h
  6272  00FB66  0E2D               	movlw	45
  6273  00FB68  6EDF               	movwf	indf2,c
  6274  00FB6A  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6275  00FB6E  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6276  00FB72  2ADE               	incf	postinc2,f,c
  6277  00FB74  0E00               	movlw	0
  6278  00FB76  22DD               	addwfc	postdec2,f,c
  6279  00FB78                     l2325:
  6280                           
  6281                           ;doprnt.c: 1415: if(width)
  6282  00FB78  501C               	movf	__doprnt@width,w,c
  6283  00FB7A  101D               	iorwf	__doprnt@width+1,w,c
  6284  00FB7C  B4D8               	btfsc	status,2,c
  6285  00FB7E  D0B4               	goto	l2359
  6286                           
  6287                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  6288                           
  6289                           ;doprnt.c: 1416: do
  6290  00FB80  EE20 F002          	lfsr	2,2
  6291  00FB84  500D               	movf	__doprnt@pb,w,c
  6292  00FB86  26D9               	addwf	fsr2l,f,c
  6293  00FB88  500E               	movf	__doprnt@pb+1,w,c
  6294  00FB8A  22DA               	addwfc	fsr2h,f,c
  6295  00FB8C  50DE               	movf	postinc2,w,c
  6296  00FB8E  10DE               	iorwf	postinc2,w,c
  6297  00FB90  B4D8               	btfsc	status,2,c
  6298  00FB92  D016               	goto	l2331
  6299  00FB94  EE20 F002          	lfsr	2,2
  6300  00FB98  500D               	movf	__doprnt@pb,w,c
  6301  00FB9A  26D9               	addwf	fsr2l,f,c
  6302  00FB9C  500E               	movf	__doprnt@pb+1,w,c
  6303  00FB9E  22DA               	addwfc	fsr2h,f,c
  6304  00FBA0  CFDE F013          	movff	postinc2,??__doprnt
  6305  00FBA4  CFDD F014          	movff	postdec2,??__doprnt+1
  6306  00FBA8  D801               	call	u1628
  6307  00FBAA  D01F               	goto	l2335
  6308  00FBAC                     u1628:
  6309  00FBAC  0005               	push	
  6310  00FBAE  6EFA               	movwf	pclath,c
  6311  00FBB0  5013               	movf	??__doprnt,w,c
  6312  00FBB2  6EFD               	movwf	tosl,c
  6313  00FBB4  5014               	movf	??__doprnt+1,w,c
  6314  00FBB6  6EFE               	movwf	tosh,c
  6315  00FBB8  6AFF               	clrf	tosu,c
  6316  00FBBA  50FA               	movf	pclath,w,c
  6317  00FBBC  0E30               	movlw	48
  6318  00FBBE  0012               	return		;indir
  6319  00FBC0                     l2331:
  6320  00FBC0  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6321  00FBC4  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6322  00FBC8  CFDE F013          	movff	postinc2,??__doprnt
  6323  00FBCC  CFDD F014          	movff	postdec2,??__doprnt+1
  6324  00FBD0  C013  FFD9         	movff	??__doprnt,fsr2l
  6325  00FBD4  C014  FFDA         	movff	??__doprnt+1,fsr2h
  6326  00FBD8  0E30               	movlw	48
  6327  00FBDA  6EDF               	movwf	indf2,c
  6328  00FBDC  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6329  00FBE0  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6330  00FBE4  2ADE               	incf	postinc2,f,c
  6331  00FBE6  0E00               	movlw	0
  6332  00FBE8  22DD               	addwfc	postdec2,f,c
  6333  00FBEA                     l2335:
  6334                           
  6335                           ;doprnt.c: 1418: while(--width);
  6336  00FBEA  061C               	decf	__doprnt@width,f,c
  6337  00FBEC  A0D8               	btfss	status,0,c
  6338  00FBEE  061D               	decf	__doprnt@width+1,f,c
  6339  00FBF0  D7C3               	goto	l2325
  6340  00FBF2                     l2337:
  6341                           
  6342                           ;doprnt.c: 1422: {
  6343                           ;doprnt.c: 1424: if(width
  6344                           ;doprnt.c: 1428: )
  6345  00FBF2  501C               	movf	__doprnt@width,w,c
  6346  00FBF4  101D               	iorwf	__doprnt@width+1,w,c
  6347  00FBF6  B4D8               	btfsc	status,2,c
  6348  00FBF8  D03C               	goto	l2349
  6349  00FBFA                     l2339:
  6350                           
  6351                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  6352  00FBFA  EE20 F002          	lfsr	2,2
  6353  00FBFE  500D               	movf	__doprnt@pb,w,c
  6354  00FC00  26D9               	addwf	fsr2l,f,c
  6355  00FC02  500E               	movf	__doprnt@pb+1,w,c
  6356  00FC04  22DA               	addwfc	fsr2h,f,c
  6357  00FC06  50DE               	movf	postinc2,w,c
  6358  00FC08  10DE               	iorwf	postinc2,w,c
  6359  00FC0A  B4D8               	btfsc	status,2,c
  6360  00FC0C  D016               	goto	l2343
  6361  00FC0E  EE20 F002          	lfsr	2,2
  6362  00FC12  500D               	movf	__doprnt@pb,w,c
  6363  00FC14  26D9               	addwf	fsr2l,f,c
  6364  00FC16  500E               	movf	__doprnt@pb+1,w,c
  6365  00FC18  22DA               	addwfc	fsr2h,f,c
  6366  00FC1A  CFDE F013          	movff	postinc2,??__doprnt
  6367  00FC1E  CFDD F014          	movff	postdec2,??__doprnt+1
  6368  00FC22  D801               	call	u1668
  6369  00FC24  D01F               	goto	l2347
  6370  00FC26                     u1668:
  6371  00FC26  0005               	push	
  6372  00FC28  6EFA               	movwf	pclath,c
  6373  00FC2A  5013               	movf	??__doprnt,w,c
  6374  00FC2C  6EFD               	movwf	tosl,c
  6375  00FC2E  5014               	movf	??__doprnt+1,w,c
  6376  00FC30  6EFE               	movwf	tosh,c
  6377  00FC32  6AFF               	clrf	tosu,c
  6378  00FC34  50FA               	movf	pclath,w,c
  6379  00FC36  0E20               	movlw	32
  6380  00FC38  0012               	return		;indir
  6381  00FC3A                     l2343:
  6382  00FC3A  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6383  00FC3E  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6384  00FC42  CFDE F013          	movff	postinc2,??__doprnt
  6385  00FC46  CFDD F014          	movff	postdec2,??__doprnt+1
  6386  00FC4A  C013  FFD9         	movff	??__doprnt,fsr2l
  6387  00FC4E  C014  FFDA         	movff	??__doprnt+1,fsr2h
  6388  00FC52  0E20               	movlw	32
  6389  00FC54  6EDF               	movwf	indf2,c
  6390  00FC56  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6391  00FC5A  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6392  00FC5E  2ADE               	incf	postinc2,f,c
  6393  00FC60  0E00               	movlw	0
  6394  00FC62  22DD               	addwfc	postdec2,f,c
  6395  00FC64                     l2347:
  6396                           
  6397                           ;doprnt.c: 1431: while(--width);
  6398  00FC64  061C               	decf	__doprnt@width,f,c
  6399  00FC66  A0D8               	btfss	status,0,c
  6400  00FC68  061D               	decf	__doprnt@width+1,f,c
  6401  00FC6A  501C               	movf	__doprnt@width,w,c
  6402  00FC6C  101D               	iorwf	__doprnt@width+1,w,c
  6403  00FC6E  A4D8               	btfss	status,2,c
  6404  00FC70  D7C4               	goto	l2339
  6405  00FC72                     l2349:
  6406                           
  6407                           ;doprnt.c: 1438: if(flag & 0x03)
  6408  00FC72  C01B  F013         	movff	__doprnt@flag,??__doprnt
  6409  00FC76  0E03               	movlw	3
  6410  00FC78  1613               	andwf	??__doprnt,f,c
  6411  00FC7A  B4D8               	btfsc	status,2,c
  6412  00FC7C  D035               	goto	l2359
  6413                           
  6414                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  6415  00FC7E  EE20 F002          	lfsr	2,2
  6416  00FC82  500D               	movf	__doprnt@pb,w,c
  6417  00FC84  26D9               	addwf	fsr2l,f,c
  6418  00FC86  500E               	movf	__doprnt@pb+1,w,c
  6419  00FC88  22DA               	addwfc	fsr2h,f,c
  6420  00FC8A  50DE               	movf	postinc2,w,c
  6421  00FC8C  10DE               	iorwf	postinc2,w,c
  6422  00FC8E  B4D8               	btfsc	status,2,c
  6423  00FC90  D016               	goto	l2355
  6424  00FC92  EE20 F002          	lfsr	2,2
  6425  00FC96  500D               	movf	__doprnt@pb,w,c
  6426  00FC98  26D9               	addwf	fsr2l,f,c
  6427  00FC9A  500E               	movf	__doprnt@pb+1,w,c
  6428  00FC9C  22DA               	addwfc	fsr2h,f,c
  6429  00FC9E  CFDE F013          	movff	postinc2,??__doprnt
  6430  00FCA2  CFDD F014          	movff	postdec2,??__doprnt+1
  6431  00FCA6  D801               	call	u1708
  6432  00FCA8  D01F               	goto	l2359
  6433  00FCAA                     u1708:
  6434  00FCAA  0005               	push	
  6435  00FCAC  6EFA               	movwf	pclath,c
  6436  00FCAE  5013               	movf	??__doprnt,w,c
  6437  00FCB0  6EFD               	movwf	tosl,c
  6438  00FCB2  5014               	movf	??__doprnt+1,w,c
  6439  00FCB4  6EFE               	movwf	tosh,c
  6440  00FCB6  6AFF               	clrf	tosu,c
  6441  00FCB8  50FA               	movf	pclath,w,c
  6442  00FCBA  0E2D               	movlw	45
  6443  00FCBC  0012               	return		;indir
  6444  00FCBE                     l2355:
  6445  00FCBE  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6446  00FCC2  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6447  00FCC6  CFDE F013          	movff	postinc2,??__doprnt
  6448  00FCCA  CFDD F014          	movff	postdec2,??__doprnt+1
  6449  00FCCE  C013  FFD9         	movff	??__doprnt,fsr2l
  6450  00FCD2  C014  FFDA         	movff	??__doprnt+1,fsr2h
  6451  00FCD6  0E2D               	movlw	45
  6452  00FCD8  6EDF               	movwf	indf2,c
  6453  00FCDA  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6454  00FCDE  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6455  00FCE2  2ADE               	incf	postinc2,f,c
  6456  00FCE4  0E00               	movlw	0
  6457  00FCE6  22DD               	addwfc	postdec2,f,c
  6458  00FCE8                     l2359:
  6459                           
  6460                           ;doprnt.c: 1469: }
  6461                           ;doprnt.c: 1472: prec = c;
  6462  00FCE8  C01E  F018         	movff	__doprnt@c,__doprnt@prec
  6463                           
  6464                           ;doprnt.c: 1474: while(prec--) {
  6465  00FCEC  D08B               	goto	l2379
  6466  00FCEE                     l2361:
  6467                           
  6468                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6469  00FCEE  5018               	movf	__doprnt@prec,w,c
  6470  00FCF0  0D02               	mullw	2
  6471  00FCF2  0E42               	movlw	low _dpowers
  6472  00FCF4  24F3               	addwf	prodl,w,c
  6473  00FCF6  6EF6               	movwf	tblptrl,c
  6474  00FCF8  0EFE               	movlw	high _dpowers
  6475  00FCFA  20F4               	addwfc	prodh,w,c
  6476  00FCFC  6EF7               	movwf	tblptrh,c
  6477  00FCFE                     	if	1	;There are 3 active tblptr bytes
  6478  00FCFE  6AF8               	clrf	tblptru,c
  6479  00FD00  0E00               	movlw	low (__mediumconst shr (0+16))
  6480  00FD02  22F8               	addwfc	tblptru,f,c
  6481  00FD04                     	endif
  6482  00FD04  0009               	tblrd		*+
  6483  00FD06  CFF5 F003          	movff	tablat,___lwdiv@divisor
  6484  00FD0A  000A               	tblrd		*-
  6485  00FD0C  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  6486  00FD10  C019  F001         	movff	__doprnt@val,___lwdiv@dividend
  6487  00FD14  C01A  F002         	movff	__doprnt@val+1,___lwdiv@dividend+1
  6488  00FD18  EC65  F073         	call	___lwdiv
  6489  00FD1C  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  6490  00FD20  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  6491  00FD24  0E00               	movlw	0
  6492  00FD26  6E0B               	movwf	___lwmod@divisor+1,c
  6493  00FD28  0E0A               	movlw	10
  6494  00FD2A  6E0A               	movwf	___lwmod@divisor,c
  6495  00FD2C  EC00  F073         	call	___lwmod	;wreg free
  6496  00FD30  5008               	movf	?___lwmod,w,c
  6497  00FD32  0F30               	addlw	48
  6498  00FD34  6E1E               	movwf	__doprnt@c,c
  6499                           
  6500                           ;doprnt.c: 1491: break;
  6501  00FD36  D031               	goto	l2371
  6502  00FD38                     l2363:
  6503                           
  6504                           ;doprnt.c: 1499: {
  6505                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6506  00FD38  C019  F001         	movff	__doprnt@val,___lwdiv@dividend
  6507  00FD3C  C01A  F002         	movff	__doprnt@val+1,___lwdiv@dividend+1
  6508  00FD40  5018               	movf	__doprnt@prec,w,c
  6509  00FD42  0D02               	mullw	2
  6510  00FD44  0E4C               	movlw	low _hexpowers
  6511  00FD46  24F3               	addwf	prodl,w,c
  6512  00FD48  6EF6               	movwf	tblptrl,c
  6513  00FD4A  0EFE               	movlw	high _hexpowers
  6514  00FD4C  20F4               	addwfc	prodh,w,c
  6515  00FD4E  6EF7               	movwf	tblptrh,c
  6516  00FD50                     	if	1	;There are 3 active tblptr bytes
  6517  00FD50  6AF8               	clrf	tblptru,c
  6518  00FD52  0E00               	movlw	low (__mediumconst shr (0+16))
  6519  00FD54  22F8               	addwfc	tblptru,f,c
  6520  00FD56                     	endif
  6521  00FD56  0009               	tblrd		*+
  6522  00FD58  CFF5 F003          	movff	tablat,___lwdiv@divisor
  6523  00FD5C  000A               	tblrd		*-
  6524  00FD5E  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  6525  00FD62  EC65  F073         	call	___lwdiv	;wreg free
  6526  00FD66  5001               	movf	?___lwdiv,w,c
  6527  00FD68  0B0F               	andlw	15
  6528  00FD6A  6E17               	movwf	__doprnt@idx,c
  6529                           
  6530                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6531  00FD6C  5017               	movf	__doprnt@idx,w,c
  6532  00FD6E  0D01               	mullw	1
  6533  00FD70  0E78               	movlw	low STR_37
  6534  00FD72  24F3               	addwf	prodl,w,c
  6535  00FD74  6EF6               	movwf	tblptrl,c
  6536  00FD76  0EFE               	movlw	high STR_37
  6537  00FD78  20F4               	addwfc	prodh,w,c
  6538  00FD7A  6EF7               	movwf	tblptrh,c
  6539  00FD7C                     	if	1	;There are 3 active tblptr bytes
  6540  00FD7C  6AF8               	clrf	tblptru,c
  6541  00FD7E  0E00               	movlw	low (__mediumconst shr (0+16))
  6542  00FD80  22F8               	addwfc	tblptru,f,c
  6543  00FD82                     	endif
  6544  00FD82  0008               	tblrd		*
  6545  00FD84  CFF5 F01E          	movff	tablat,__doprnt@c
  6546                           
  6547                           ;doprnt.c: 1523: }
  6548                           
  6549                           ;doprnt.c: 1508: }
  6550                           ;doprnt.c: 1510: break;
  6551  00FD88  D008               	goto	l2371
  6552  00FD8A                     l2369:
  6553  00FD8A  501B               	movf	__doprnt@flag,w,c
  6554  00FD8C  0B80               	andlw	128
  6555                           
  6556                           ; Switch size 1, requested type "space"
  6557                           ; Number of cases is 2, Range of values is 0 to 128
  6558                           ; switch strategies available:
  6559                           ; Name         Instructions Cycles
  6560                           ; simple_byte            7     4 (average)
  6561                           ;	Chosen strategy is simple_byte
  6562  00FD8E  0A00               	xorlw	0	; case 0
  6563  00FD90  B4D8               	btfsc	status,2,c
  6564  00FD92  D7AD               	goto	l2361
  6565  00FD94  0A80               	xorlw	128	; case 128
  6566  00FD96  B4D8               	btfsc	status,2,c
  6567  00FD98  D7CF               	goto	l2363
  6568  00FD9A                     l2371:
  6569                           
  6570                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  6571  00FD9A  EE20 F002          	lfsr	2,2
  6572  00FD9E  500D               	movf	__doprnt@pb,w,c
  6573  00FDA0  26D9               	addwf	fsr2l,f,c
  6574  00FDA2  500E               	movf	__doprnt@pb+1,w,c
  6575  00FDA4  22DA               	addwfc	fsr2h,f,c
  6576  00FDA6  50DE               	movf	postinc2,w,c
  6577  00FDA8  10DE               	iorwf	postinc2,w,c
  6578  00FDAA  B4D8               	btfsc	status,2,c
  6579  00FDAC  D016               	goto	l2375
  6580  00FDAE  EE20 F002          	lfsr	2,2
  6581  00FDB2  500D               	movf	__doprnt@pb,w,c
  6582  00FDB4  26D9               	addwf	fsr2l,f,c
  6583  00FDB6  500E               	movf	__doprnt@pb+1,w,c
  6584  00FDB8  22DA               	addwfc	fsr2h,f,c
  6585  00FDBA  CFDE F013          	movff	postinc2,??__doprnt
  6586  00FDBE  CFDD F014          	movff	postdec2,??__doprnt+1
  6587  00FDC2  D801               	call	u1728
  6588  00FDC4  D01F               	goto	l2379
  6589  00FDC6                     u1728:
  6590  00FDC6  0005               	push	
  6591  00FDC8  6EFA               	movwf	pclath,c
  6592  00FDCA  5013               	movf	??__doprnt,w,c
  6593  00FDCC  6EFD               	movwf	tosl,c
  6594  00FDCE  5014               	movf	??__doprnt+1,w,c
  6595  00FDD0  6EFE               	movwf	tosh,c
  6596  00FDD2  6AFF               	clrf	tosu,c
  6597  00FDD4  50FA               	movf	pclath,w,c
  6598  00FDD6  501E               	movf	__doprnt@c,w,c
  6599  00FDD8  0012               	return		;indir
  6600  00FDDA                     l2375:
  6601  00FDDA  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6602  00FDDE  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6603  00FDE2  CFDE F013          	movff	postinc2,??__doprnt
  6604  00FDE6  CFDD F014          	movff	postdec2,??__doprnt+1
  6605  00FDEA  C013  FFD9         	movff	??__doprnt,fsr2l
  6606  00FDEE  C014  FFDA         	movff	??__doprnt+1,fsr2h
  6607  00FDF2  C01E  FFDF         	movff	__doprnt@c,indf2
  6608  00FDF6  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6609  00FDFA  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6610  00FDFE  2ADE               	incf	postinc2,f,c
  6611  00FE00  0E00               	movlw	0
  6612  00FE02  22DD               	addwfc	postdec2,f,c
  6613  00FE04                     l2379:
  6614  00FE04  0618               	decf	__doprnt@prec,f,c
  6615  00FE06  2818               	incf	__doprnt@prec,w,c
  6616  00FE08  A4D8               	btfss	status,2,c
  6617  00FE0A  D7BF               	goto	l2369
  6618  00FE0C                     l2381:
  6619  00FE0C  C00F  FFF6         	movff	__doprnt@f,tblptrl
  6620  00FE10  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  6621  00FE14  4A0F               	infsnz	__doprnt@f,f,c
  6622  00FE16  2A10               	incf	__doprnt@f+1,f,c
  6623  00FE18                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6624  00FE18  6AF8               	clrf	tblptru,c
  6625  00FE1A                     	endif
  6626  00FE1A                     	if	0	;tblptru may be non-zero
  6627  00FE1A                     	endif
  6628  00FE1A  0008               	tblrd		*
  6629  00FE1C  CFF5 F01E          	movff	tablat,__doprnt@c
  6630  00FE20  501E               	movf	__doprnt@c,w,c
  6631  00FE22  A4D8               	btfss	status,2,c
  6632  00FE24  D52F               	goto	l2223
  6633  00FE26                     l2383:
  6634                           
  6635                           ;doprnt.c: 1540: return 0;
  6636  00FE26  0E00               	movlw	0
  6637  00FE28  6E0E               	movwf	?__doprnt+1,c
  6638  00FE2A  0E00               	movlw	0
  6639  00FE2C  6E0D               	movwf	?__doprnt,c
  6640  00FE2E  0012               	return	
  6641  00FE30                     __end_of__doprnt:
  6642                           	opt stack 0
  6643                           tosu	equ	0xFFF
  6644                           tosh	equ	0xFFE
  6645                           tosl	equ	0xFFD
  6646                           pclath	equ	0xFFA
  6647                           tblptru	equ	0xFF8
  6648                           tblptrh	equ	0xFF7
  6649                           tblptrl	equ	0xFF6
  6650                           tablat	equ	0xFF5
  6651                           prodh	equ	0xFF4
  6652                           prodl	equ	0xFF3
  6653                           intcon	equ	0xFF2
  6654                           intcon2	equ	0xFF1
  6655                           postinc0	equ	0xFEE
  6656                           wreg	equ	0xFE8
  6657                           indf1	equ	0xFE7
  6658                           postinc1	equ	0xFE6
  6659                           postdec1	equ	0xFE5
  6660                           fsr1h	equ	0xFE2
  6661                           fsr1l	equ	0xFE1
  6662                           indf2	equ	0xFDF
  6663                           postinc2	equ	0xFDE
  6664                           postdec2	equ	0xFDD
  6665                           fsr2h	equ	0xFDA
  6666                           fsr2l	equ	0xFD9
  6667                           status	equ	0xFD8
  6668                           
  6669 ;; *************** function _putch *****************
  6670 ;; Defined at:
  6671 ;;		line 30 in file "lcd.c"
  6672 ;; Parameters:    Size  Location     Type
  6673 ;;  data            1    wreg     unsigned char 
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;  data            1    2[COMRAM] unsigned char 
  6676 ;; Return value:  Size  Location     Type
  6677 ;;                  1    wreg      void 
  6678 ;; Registers used:
  6679 ;;		wreg, status,2, status,0, cstack
  6680 ;; Tracked objects:
  6681 ;;		On entry : 0/0
  6682 ;;		On exit  : 0/0
  6683 ;;		Unchanged: 0/0
  6684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6686 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6688 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;Total ram usage:        1 bytes
  6690 ;; Hardware stack levels used:    1
  6691 ;; Hardware stack levels required when called:    1
  6692 ;; This function calls:
  6693 ;;		_lcdNibble
  6694 ;; This function is called by:
  6695 ;;		_printf
  6696 ;;		__doprnt
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           	psect	text29
  6701  00E452                     __ptext29:
  6702                           	opt stack 0
  6703  00E452                     _putch:
  6704                           	opt stack 25
  6705                           
  6706                           ;incstack = 0
  6707                           ;putch@data stored from wreg
  6708  00E452  6E03               	movwf	putch@data,c
  6709                           
  6710                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  6711  00E454  848C               	bsf	3980,2,c	;volatile
  6712                           
  6713                           ;lcd.c: 32: lcdNibble(data);
  6714  00E456  5003               	movf	putch@data,w,c
  6715  00E458  EC8E  F073         	call	_lcdNibble
  6716  00E45C  0012               	return		;funcret
  6717  00E45E                     __end_of_putch:
  6718                           	opt stack 0
  6719                           tosu	equ	0xFFF
  6720                           tosh	equ	0xFFE
  6721                           tosl	equ	0xFFD
  6722                           pclath	equ	0xFFA
  6723                           tblptru	equ	0xFF8
  6724                           tblptrh	equ	0xFF7
  6725                           tblptrl	equ	0xFF6
  6726                           tablat	equ	0xFF5
  6727                           prodh	equ	0xFF4
  6728                           prodl	equ	0xFF3
  6729                           intcon	equ	0xFF2
  6730                           intcon2	equ	0xFF1
  6731                           postinc0	equ	0xFEE
  6732                           wreg	equ	0xFE8
  6733                           indf1	equ	0xFE7
  6734                           postinc1	equ	0xFE6
  6735                           postdec1	equ	0xFE5
  6736                           fsr1h	equ	0xFE2
  6737                           fsr1l	equ	0xFE1
  6738                           indf2	equ	0xFDF
  6739                           postinc2	equ	0xFDE
  6740                           postdec2	equ	0xFDD
  6741                           fsr2h	equ	0xFDA
  6742                           fsr2l	equ	0xFD9
  6743                           status	equ	0xFD8
  6744                           
  6745 ;; *************** function _isdigit *****************
  6746 ;; Defined at:
  6747 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;  c               1    wreg     unsigned char 
  6750 ;; Auto vars:     Size  Location     Type
  6751 ;;  c               1    2[COMRAM] unsigned char 
  6752 ;; Return value:  Size  Location     Type
  6753 ;;		None               void
  6754 ;; Registers used:
  6755 ;;		wreg, status,2, status,0
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6761 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6763 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6764 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6765 ;;Total ram usage:        3 bytes
  6766 ;; Hardware stack levels used:    1
  6767 ;; This function calls:
  6768 ;;		Nothing
  6769 ;; This function is called by:
  6770 ;;		__doprnt
  6771 ;;		_atoi
  6772 ;; This function uses a non-reentrant model
  6773 ;;
  6774                           
  6775                           	psect	text30
  6776  00E492                     __ptext30:
  6777                           	opt stack 0
  6778  00E492                     _isdigit:
  6779                           	opt stack 26
  6780                           
  6781                           ;incstack = 0
  6782                           ;isdigit@c stored from wreg
  6783  00E492  6E03               	movwf	isdigit@c,c
  6784  00E494  0E00               	movlw	0
  6785  00E496  6E02               	movwf	_isdigit$982,c
  6786  00E498  0E3A               	movlw	58
  6787  00E49A  6003               	cpfslt	isdigit@c,c
  6788  00E49C  D005               	goto	l2173
  6789  00E49E  0E2F               	movlw	47
  6790  00E4A0  6403               	cpfsgt	isdigit@c,c
  6791  00E4A2  D002               	goto	l2173
  6792  00E4A4  0E01               	movlw	1
  6793  00E4A6  6E02               	movwf	_isdigit$982,c
  6794  00E4A8                     l2173:
  6795  00E4A8  C002  F001         	movff	_isdigit$982,??_isdigit
  6796  00E4AC  3001               	rrcf	??_isdigit,w,c
  6797  00E4AE  0012               	return	
  6798  00E4B0                     __end_of_isdigit:
  6799                           	opt stack 0
  6800                           tosu	equ	0xFFF
  6801                           tosh	equ	0xFFE
  6802                           tosl	equ	0xFFD
  6803                           pclath	equ	0xFFA
  6804                           tblptru	equ	0xFF8
  6805                           tblptrh	equ	0xFF7
  6806                           tblptrl	equ	0xFF6
  6807                           tablat	equ	0xFF5
  6808                           prodh	equ	0xFF4
  6809                           prodl	equ	0xFF3
  6810                           intcon	equ	0xFF2
  6811                           intcon2	equ	0xFF1
  6812                           postinc0	equ	0xFEE
  6813                           wreg	equ	0xFE8
  6814                           indf1	equ	0xFE7
  6815                           postinc1	equ	0xFE6
  6816                           postdec1	equ	0xFE5
  6817                           fsr1h	equ	0xFE2
  6818                           fsr1l	equ	0xFE1
  6819                           indf2	equ	0xFDF
  6820                           postinc2	equ	0xFDE
  6821                           postdec2	equ	0xFDD
  6822                           fsr2h	equ	0xFDA
  6823                           fsr2l	equ	0xFD9
  6824                           status	equ	0xFD8
  6825                           
  6826 ;; *************** function ___lwmod *****************
  6827 ;; Defined at:
  6828 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6829 ;; Parameters:    Size  Location     Type
  6830 ;;  dividend        2    7[COMRAM] unsigned int 
  6831 ;;  divisor         2    9[COMRAM] unsigned int 
  6832 ;; Auto vars:     Size  Location     Type
  6833 ;;  counter         1   11[COMRAM] unsigned char 
  6834 ;; Return value:  Size  Location     Type
  6835 ;;                  2    7[COMRAM] unsigned int 
  6836 ;; Registers used:
  6837 ;;		wreg, status,2, status,0
  6838 ;; Tracked objects:
  6839 ;;		On entry : 0/0
  6840 ;;		On exit  : 0/0
  6841 ;;		Unchanged: 0/0
  6842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6843 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6844 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6845 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6846 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6847 ;;Total ram usage:        5 bytes
  6848 ;; Hardware stack levels used:    1
  6849 ;; This function calls:
  6850 ;;		Nothing
  6851 ;; This function is called by:
  6852 ;;		__doprnt
  6853 ;; This function uses a non-reentrant model
  6854 ;;
  6855                           
  6856                           	psect	text31
  6857  00E600                     __ptext31:
  6858                           	opt stack 0
  6859  00E600                     ___lwmod:
  6860                           	opt stack 26
  6861                           
  6862                           ;incstack = 0
  6863  00E600  500A               	movf	___lwmod@divisor,w,c
  6864  00E602  100B               	iorwf	___lwmod@divisor+1,w,c
  6865  00E604  B4D8               	btfsc	status,2,c
  6866  00E606  D018               	goto	l902
  6867  00E608  0E01               	movlw	1
  6868  00E60A  6E0C               	movwf	___lwmod@counter,c
  6869  00E60C  D004               	goto	l2211
  6870  00E60E                     l2209:
  6871  00E60E  90D8               	bcf	status,0,c
  6872  00E610  360A               	rlcf	___lwmod@divisor,f,c
  6873  00E612  360B               	rlcf	___lwmod@divisor+1,f,c
  6874  00E614  2A0C               	incf	___lwmod@counter,f,c
  6875  00E616                     l2211:
  6876  00E616  AE0B               	btfss	___lwmod@divisor+1,7,c
  6877  00E618  D7FA               	goto	l2209
  6878  00E61A                     l2213:
  6879  00E61A  500A               	movf	___lwmod@divisor,w,c
  6880  00E61C  5C08               	subwf	___lwmod@dividend,w,c
  6881  00E61E  500B               	movf	___lwmod@divisor+1,w,c
  6882  00E620  5809               	subwfb	___lwmod@dividend+1,w,c
  6883  00E622  A0D8               	btfss	status,0,c
  6884  00E624  D004               	goto	l2217
  6885  00E626  500A               	movf	___lwmod@divisor,w,c
  6886  00E628  5E08               	subwf	___lwmod@dividend,f,c
  6887  00E62A  500B               	movf	___lwmod@divisor+1,w,c
  6888  00E62C  5A09               	subwfb	___lwmod@dividend+1,f,c
  6889  00E62E                     l2217:
  6890  00E62E  90D8               	bcf	status,0,c
  6891  00E630  320B               	rrcf	___lwmod@divisor+1,f,c
  6892  00E632  320A               	rrcf	___lwmod@divisor,f,c
  6893  00E634  2E0C               	decfsz	___lwmod@counter,f,c
  6894  00E636  D7F1               	goto	l2213
  6895  00E638                     l902:
  6896  00E638  C008  F008         	movff	___lwmod@dividend,?___lwmod
  6897  00E63C  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  6898  00E640  0012               	return		;funcret
  6899  00E642                     __end_of___lwmod:
  6900                           	opt stack 0
  6901                           tosu	equ	0xFFF
  6902                           tosh	equ	0xFFE
  6903                           tosl	equ	0xFFD
  6904                           pclath	equ	0xFFA
  6905                           tblptru	equ	0xFF8
  6906                           tblptrh	equ	0xFF7
  6907                           tblptrl	equ	0xFF6
  6908                           tablat	equ	0xFF5
  6909                           prodh	equ	0xFF4
  6910                           prodl	equ	0xFF3
  6911                           intcon	equ	0xFF2
  6912                           intcon2	equ	0xFF1
  6913                           postinc0	equ	0xFEE
  6914                           wreg	equ	0xFE8
  6915                           indf1	equ	0xFE7
  6916                           postinc1	equ	0xFE6
  6917                           postdec1	equ	0xFE5
  6918                           fsr1h	equ	0xFE2
  6919                           fsr1l	equ	0xFE1
  6920                           indf2	equ	0xFDF
  6921                           postinc2	equ	0xFDE
  6922                           postdec2	equ	0xFDD
  6923                           fsr2h	equ	0xFDA
  6924                           fsr2l	equ	0xFD9
  6925                           status	equ	0xFD8
  6926                           
  6927 ;; *************** function ___lwdiv *****************
  6928 ;; Defined at:
  6929 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6930 ;; Parameters:    Size  Location     Type
  6931 ;;  dividend        2    0[COMRAM] unsigned int 
  6932 ;;  divisor         2    2[COMRAM] unsigned int 
  6933 ;; Auto vars:     Size  Location     Type
  6934 ;;  quotient        2    4[COMRAM] unsigned int 
  6935 ;;  counter         1    6[COMRAM] unsigned char 
  6936 ;; Return value:  Size  Location     Type
  6937 ;;                  2    0[COMRAM] unsigned int 
  6938 ;; Registers used:
  6939 ;;		wreg, status,2, status,0
  6940 ;; Tracked objects:
  6941 ;;		On entry : 0/0
  6942 ;;		On exit  : 0/0
  6943 ;;		Unchanged: 0/0
  6944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6945 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6946 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6948 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6949 ;;Total ram usage:        7 bytes
  6950 ;; Hardware stack levels used:    1
  6951 ;; This function calls:
  6952 ;;		Nothing
  6953 ;; This function is called by:
  6954 ;;		__doprnt
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           	psect	text32
  6959  00E6CA                     __ptext32:
  6960                           	opt stack 0
  6961  00E6CA                     ___lwdiv:
  6962                           	opt stack 26
  6963                           
  6964                           ;incstack = 0
  6965  00E6CA  0E00               	movlw	0
  6966  00E6CC  6E06               	movwf	___lwdiv@quotient+1,c
  6967  00E6CE  0E00               	movlw	0
  6968  00E6D0  6E05               	movwf	___lwdiv@quotient,c
  6969  00E6D2  5003               	movf	___lwdiv@divisor,w,c
  6970  00E6D4  1004               	iorwf	___lwdiv@divisor+1,w,c
  6971  00E6D6  B4D8               	btfsc	status,2,c
  6972  00E6D8  D01C               	goto	l892
  6973  00E6DA  0E01               	movlw	1
  6974  00E6DC  6E07               	movwf	___lwdiv@counter,c
  6975  00E6DE  D004               	goto	l2191
  6976  00E6E0                     l2189:
  6977  00E6E0  90D8               	bcf	status,0,c
  6978  00E6E2  3603               	rlcf	___lwdiv@divisor,f,c
  6979  00E6E4  3604               	rlcf	___lwdiv@divisor+1,f,c
  6980  00E6E6  2A07               	incf	___lwdiv@counter,f,c
  6981  00E6E8                     l2191:
  6982  00E6E8  AE04               	btfss	___lwdiv@divisor+1,7,c
  6983  00E6EA  D7FA               	goto	l2189
  6984  00E6EC                     l2193:
  6985  00E6EC  90D8               	bcf	status,0,c
  6986  00E6EE  3605               	rlcf	___lwdiv@quotient,f,c
  6987  00E6F0  3606               	rlcf	___lwdiv@quotient+1,f,c
  6988  00E6F2  5003               	movf	___lwdiv@divisor,w,c
  6989  00E6F4  5C01               	subwf	___lwdiv@dividend,w,c
  6990  00E6F6  5004               	movf	___lwdiv@divisor+1,w,c
  6991  00E6F8  5802               	subwfb	___lwdiv@dividend+1,w,c
  6992  00E6FA  A0D8               	btfss	status,0,c
  6993  00E6FC  D005               	goto	l2201
  6994  00E6FE  5003               	movf	___lwdiv@divisor,w,c
  6995  00E700  5E01               	subwf	___lwdiv@dividend,f,c
  6996  00E702  5004               	movf	___lwdiv@divisor+1,w,c
  6997  00E704  5A02               	subwfb	___lwdiv@dividend+1,f,c
  6998  00E706  8005               	bsf	___lwdiv@quotient,0,c
  6999  00E708                     l2201:
  7000  00E708  90D8               	bcf	status,0,c
  7001  00E70A  3204               	rrcf	___lwdiv@divisor+1,f,c
  7002  00E70C  3203               	rrcf	___lwdiv@divisor,f,c
  7003  00E70E  2E07               	decfsz	___lwdiv@counter,f,c
  7004  00E710  D7ED               	goto	l2193
  7005  00E712                     l892:
  7006  00E712  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  7007  00E716  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7008  00E71A  0012               	return		;funcret
  7009  00E71C                     __end_of___lwdiv:
  7010                           	opt stack 0
  7011                           tosu	equ	0xFFF
  7012                           tosh	equ	0xFFE
  7013                           tosl	equ	0xFFD
  7014                           pclath	equ	0xFFA
  7015                           tblptru	equ	0xFF8
  7016                           tblptrh	equ	0xFF7
  7017                           tblptrl	equ	0xFF6
  7018                           tablat	equ	0xFF5
  7019                           prodh	equ	0xFF4
  7020                           prodl	equ	0xFF3
  7021                           intcon	equ	0xFF2
  7022                           intcon2	equ	0xFF1
  7023                           postinc0	equ	0xFEE
  7024                           wreg	equ	0xFE8
  7025                           indf1	equ	0xFE7
  7026                           postinc1	equ	0xFE6
  7027                           postdec1	equ	0xFE5
  7028                           fsr1h	equ	0xFE2
  7029                           fsr1l	equ	0xFE1
  7030                           indf2	equ	0xFDF
  7031                           postinc2	equ	0xFDE
  7032                           postdec2	equ	0xFDD
  7033                           fsr2h	equ	0xFDA
  7034                           fsr2l	equ	0xFD9
  7035                           status	equ	0xFD8
  7036                           
  7037 ;; *************** function _lcdInst *****************
  7038 ;; Defined at:
  7039 ;;		line 25 in file "lcd.c"
  7040 ;; Parameters:    Size  Location     Type
  7041 ;;  data            1    wreg     unsigned char 
  7042 ;; Auto vars:     Size  Location     Type
  7043 ;;  data            1    2[COMRAM] unsigned char 
  7044 ;; Return value:  Size  Location     Type
  7045 ;;                  1    wreg      void 
  7046 ;; Registers used:
  7047 ;;		wreg, status,2, status,0, cstack
  7048 ;; Tracked objects:
  7049 ;;		On entry : 0/0
  7050 ;;		On exit  : 0/0
  7051 ;;		Unchanged: 0/0
  7052 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7054 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7056 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7057 ;;Total ram usage:        1 bytes
  7058 ;; Hardware stack levels used:    1
  7059 ;; Hardware stack levels required when called:    1
  7060 ;; This function calls:
  7061 ;;		_lcdNibble
  7062 ;; This function is called by:
  7063 ;;		_getUserInput
  7064 ;;		_displayMainProgramLcdScreen
  7065 ;;		_update_eeprom_screen_state
  7066 ;;		_update_past_run_screen_state
  7067 ;;		_operation
  7068 ;;		_initializeLCDScreen
  7069 ;;		_lcdClear
  7070 ;; This function uses a non-reentrant model
  7071 ;;
  7072                           
  7073                           	psect	text33
  7074  00E446                     __ptext33:
  7075                           	opt stack 0
  7076  00E446                     _lcdInst:
  7077                           	opt stack 27
  7078                           
  7079                           ;incstack = 0
  7080                           ;lcdInst@data stored from wreg
  7081  00E446  6E03               	movwf	lcdInst@data,c
  7082                           
  7083                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  7084  00E448  948C               	bcf	3980,2,c	;volatile
  7085                           
  7086                           ;lcd.c: 27: lcdNibble(data);
  7087  00E44A  5003               	movf	lcdInst@data,w,c
  7088  00E44C  EC8E  F073         	call	_lcdNibble
  7089  00E450  0012               	return		;funcret
  7090  00E452                     __end_of_lcdInst:
  7091                           	opt stack 0
  7092                           tosu	equ	0xFFF
  7093                           tosh	equ	0xFFE
  7094                           tosl	equ	0xFFD
  7095                           pclath	equ	0xFFA
  7096                           tblptru	equ	0xFF8
  7097                           tblptrh	equ	0xFF7
  7098                           tblptrl	equ	0xFF6
  7099                           tablat	equ	0xFF5
  7100                           prodh	equ	0xFF4
  7101                           prodl	equ	0xFF3
  7102                           intcon	equ	0xFF2
  7103                           intcon2	equ	0xFF1
  7104                           postinc0	equ	0xFEE
  7105                           wreg	equ	0xFE8
  7106                           indf1	equ	0xFE7
  7107                           postinc1	equ	0xFE6
  7108                           postdec1	equ	0xFE5
  7109                           fsr1h	equ	0xFE2
  7110                           fsr1l	equ	0xFE1
  7111                           indf2	equ	0xFDF
  7112                           postinc2	equ	0xFDE
  7113                           postdec2	equ	0xFDD
  7114                           fsr2h	equ	0xFDA
  7115                           fsr2l	equ	0xFD9
  7116                           status	equ	0xFD8
  7117                           
  7118 ;; *************** function _lcdNibble *****************
  7119 ;; Defined at:
  7120 ;;		line 43 in file "lcd.c"
  7121 ;; Parameters:    Size  Location     Type
  7122 ;;  data            1    wreg     unsigned char 
  7123 ;; Auto vars:     Size  Location     Type
  7124 ;;  data            1    1[COMRAM] unsigned char 
  7125 ;;  temp            1    0[COMRAM] unsigned char 
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  1    wreg      void 
  7128 ;; Registers used:
  7129 ;;		wreg, status,2, status,0
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7136 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7138 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7139 ;;Total ram usage:        2 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; This function calls:
  7142 ;;		Nothing
  7143 ;; This function is called by:
  7144 ;;		_lcdInst
  7145 ;;		_putch
  7146 ;; This function uses a non-reentrant model
  7147 ;;
  7148                           
  7149                           	psect	text34
  7150  00E71C                     __ptext34:
  7151                           	opt stack 0
  7152  00E71C                     _lcdNibble:
  7153                           	opt stack 25
  7154                           
  7155                           ;incstack = 0
  7156                           ;lcdNibble@data stored from wreg
  7157  00E71C  6E02               	movwf	lcdNibble@data,c
  7158                           
  7159                           ;lcd.c: 45: char temp = data & 0xF0;
  7160  00E71E  5002               	movf	lcdNibble@data,w,c
  7161  00E720  0BF0               	andlw	240
  7162  00E722  6E01               	movwf	lcdNibble@temp,c
  7163                           
  7164                           ;lcd.c: 46: LATD = LATD & 0x0F;
  7165  00E724  508C               	movf	3980,w,c	;volatile
  7166  00E726  0B0F               	andlw	15
  7167  00E728  6E8C               	movwf	3980,c	;volatile
  7168                           
  7169                           ;lcd.c: 47: LATD = temp | LATD;
  7170  00E72A  5001               	movf	lcdNibble@temp,w,c
  7171  00E72C  108C               	iorwf	3980,w,c	;volatile
  7172  00E72E  6E8C               	movwf	3980,c	;volatile
  7173                           
  7174                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  7175  00E730  968C               	bcf	3980,3,c	;volatile
  7176                           
  7177                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
  7178  00E732  0E10               	movlw	16
  7179  00E734                     u2747:
  7180  00E734  2EE8               	decfsz	wreg,f,c
  7181  00E736  D7FE               	bra	u2747
  7182  00E738  D000               	nop2	
  7183                           
  7184                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  7185  00E73A  868C               	bsf	3980,3,c	;volatile
  7186                           
  7187                           ;lcd.c: 52: _delay((unsigned long)((25)*(8000000/4000000.0)));
  7188  00E73C  0E10               	movlw	16
  7189  00E73E                     u2757:
  7190  00E73E  2EE8               	decfsz	wreg,f,c
  7191  00E740  D7FE               	bra	u2757
  7192  00E742  D000               	nop2	
  7193                           
  7194                           ;lcd.c: 54: data = data << 4;
  7195  00E744  3802               	swapf	lcdNibble@data,w,c
  7196  00E746  0BF0               	andlw	240
  7197  00E748  6E02               	movwf	lcdNibble@data,c
  7198                           
  7199                           ;lcd.c: 56: temp = data & 0xF0;
  7200  00E74A  5002               	movf	lcdNibble@data,w,c
  7201  00E74C  0BF0               	andlw	240
  7202  00E74E  6E01               	movwf	lcdNibble@temp,c
  7203                           
  7204                           ;lcd.c: 57: LATD = LATD & 0x0F;
  7205  00E750  508C               	movf	3980,w,c	;volatile
  7206  00E752  0B0F               	andlw	15
  7207  00E754  6E8C               	movwf	3980,c	;volatile
  7208                           
  7209                           ;lcd.c: 58: LATD = temp | LATD;
  7210  00E756  5001               	movf	lcdNibble@temp,w,c
  7211  00E758  108C               	iorwf	3980,w,c	;volatile
  7212  00E75A  6E8C               	movwf	3980,c	;volatile
  7213                           
  7214                           ;lcd.c: 60: LATDbits.LATD3 = 0;
  7215  00E75C  968C               	bcf	3980,3,c	;volatile
  7216                           
  7217                           ;lcd.c: 61: _delay((unsigned long)((25)*(8000000/4000000.0)));
  7218  00E75E  0E10               	movlw	16
  7219  00E760                     u2767:
  7220  00E760  2EE8               	decfsz	wreg,f,c
  7221  00E762  D7FE               	bra	u2767
  7222  00E764  D000               	nop2	
  7223                           
  7224                           ;lcd.c: 62: LATDbits.LATD3 = 1;
  7225  00E766  868C               	bsf	3980,3,c	;volatile
  7226                           
  7227                           ;lcd.c: 63: _delay((unsigned long)((25)*(8000000/4000000.0)));
  7228  00E768  0E10               	movlw	16
  7229  00E76A                     u2777:
  7230  00E76A  2EE8               	decfsz	wreg,f,c
  7231  00E76C  D7FE               	bra	u2777
  7232  00E76E  D000               	nop2	
  7233  00E770  0012               	return		;funcret
  7234  00E772                     __end_of_lcdNibble:
  7235                           	opt stack 0
  7236                           tosu	equ	0xFFF
  7237                           tosh	equ	0xFFE
  7238                           tosl	equ	0xFFD
  7239                           pclath	equ	0xFFA
  7240                           tblptru	equ	0xFF8
  7241                           tblptrh	equ	0xFF7
  7242                           tblptrl	equ	0xFF6
  7243                           tablat	equ	0xFF5
  7244                           prodh	equ	0xFF4
  7245                           prodl	equ	0xFF3
  7246                           intcon	equ	0xFF2
  7247                           intcon2	equ	0xFF1
  7248                           postinc0	equ	0xFEE
  7249                           wreg	equ	0xFE8
  7250                           indf1	equ	0xFE7
  7251                           postinc1	equ	0xFE6
  7252                           postdec1	equ	0xFE5
  7253                           fsr1h	equ	0xFE2
  7254                           fsr1l	equ	0xFE1
  7255                           indf2	equ	0xFDF
  7256                           postinc2	equ	0xFDE
  7257                           postdec2	equ	0xFDD
  7258                           fsr2h	equ	0xFDA
  7259                           fsr2l	equ	0xFD9
  7260                           status	equ	0xFD8
  7261                           
  7262 ;; *************** function _getEEPROM *****************
  7263 ;; Defined at:
  7264 ;;		line 452 in file "main.c"
  7265 ;; Parameters:    Size  Location     Type
  7266 ;;  num             2    8[COMRAM] int 
  7267 ;; Auto vars:     Size  Location     Type
  7268 ;;  i               2   14[COMRAM] int 
  7269 ;; Return value:  Size  Location     Type
  7270 ;;                  1    wreg      void 
  7271 ;; Registers used:
  7272 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7273 ;; Tracked objects:
  7274 ;;		On entry : 0/0
  7275 ;;		On exit  : 0/0
  7276 ;;		Unchanged: 0/0
  7277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7278 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7279 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7280 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7281 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7282 ;;Total ram usage:        8 bytes
  7283 ;; Hardware stack levels used:    1
  7284 ;; Hardware stack levels required when called:    1
  7285 ;; This function calls:
  7286 ;;		_Eeprom_ReadByte
  7287 ;;		___wmul
  7288 ;; This function is called by:
  7289 ;;		_EEPROM
  7290 ;; This function uses a non-reentrant model
  7291 ;;
  7292                           
  7293                           	psect	text35
  7294  00ED7C                     __ptext35:
  7295                           	opt stack 0
  7296  00ED7C                     _getEEPROM:
  7297                           	opt stack 28
  7298                           
  7299                           ;main.c: 453: int i;
  7300                           ;main.c: 454: for (i = 0; i<6; i++){
  7301                           
  7302                           ;incstack = 0
  7303  00ED7C  0E00               	movlw	0
  7304  00ED7E  6E10               	movwf	getEEPROM@i+1,c
  7305  00ED80  0E00               	movlw	0
  7306  00ED82  6E0F               	movwf	getEEPROM@i,c
  7307  00ED84                     l2779:
  7308  00ED84  BE10               	btfsc	getEEPROM@i+1,7,c
  7309  00ED86  D006               	goto	l2783
  7310  00ED88  5010               	movf	getEEPROM@i+1,w,c
  7311  00ED8A  E136               	bnz	l2789
  7312  00ED8C  0E06               	movlw	6
  7313  00ED8E  5C0F               	subwf	getEEPROM@i,w,c
  7314  00ED90  B0D8               	btfsc	status,0,c
  7315  00ED92  D032               	goto	l2789
  7316  00ED94                     l2783:
  7317                           
  7318                           ;main.c: 455: runInfo[i] = Eeprom_ReadByte(12*i+num*200);
  7319  00ED94  C00F  F001         	movff	getEEPROM@i,___wmul@multiplier
  7320  00ED98  C010  F002         	movff	getEEPROM@i+1,___wmul@multiplier+1
  7321  00ED9C  0E00               	movlw	0
  7322  00ED9E  6E04               	movwf	___wmul@multiplicand+1,c
  7323  00EDA0  0E0C               	movlw	12
  7324  00EDA2  6E03               	movwf	___wmul@multiplicand,c
  7325  00EDA4  EC68  F072         	call	___wmul	;wreg free
  7326  00EDA8  C001  F00B         	movff	?___wmul,??_getEEPROM
  7327  00EDAC  C002  F00C         	movff	?___wmul+1,??_getEEPROM+1
  7328  00EDB0  C009  F001         	movff	getEEPROM@num,___wmul@multiplier
  7329  00EDB4  C00A  F002         	movff	getEEPROM@num+1,___wmul@multiplier+1
  7330  00EDB8  0E00               	movlw	0
  7331  00EDBA  6E04               	movwf	___wmul@multiplicand+1,c
  7332  00EDBC  0EC8               	movlw	200
  7333  00EDBE  6E03               	movwf	___wmul@multiplicand,c
  7334  00EDC0  EC68  F072         	call	___wmul	;wreg free
  7335  00EDC4  5001               	movf	?___wmul,w,c
  7336  00EDC6  240B               	addwf	??_getEEPROM,w,c
  7337  00EDC8  6E07               	movwf	Eeprom_ReadByte@address,c
  7338  00EDCA  5002               	movf	?___wmul+1,w,c
  7339  00EDCC  200C               	addwfc	??_getEEPROM+1,w,c
  7340  00EDCE  6E08               	movwf	Eeprom_ReadByte@address+1,c
  7341  00EDD0  EC3E  F072         	call	_Eeprom_ReadByte	;wreg free
  7342  00EDD4  6E0D               	movwf	(??_getEEPROM+2)& (0+255),c
  7343  00EDD6  6A0E               	clrf	(??_getEEPROM+3)& (0+255),c
  7344  00EDD8  90D8               	bcf	status,0,c
  7345  00EDDA  340F               	rlcf	getEEPROM@i,w,c
  7346  00EDDC  6ED9               	movwf	fsr2l,c
  7347  00EDDE  3410               	rlcf	getEEPROM@i+1,w,c
  7348  00EDE0  6EDA               	movwf	fsr2h,c
  7349  00EDE2  0E69               	movlw	low _runInfo
  7350  00EDE4  26D9               	addwf	fsr2l,f,c
  7351  00EDE6  0E00               	movlw	high _runInfo
  7352  00EDE8  22DA               	addwfc	fsr2h,f,c
  7353  00EDEA  C00D  FFDE         	movff	??_getEEPROM+2,postinc2
  7354  00EDEE  C00E  FFDD         	movff	??_getEEPROM+3,postdec2
  7355  00EDF2  4A0F               	infsnz	getEEPROM@i,f,c
  7356  00EDF4  2A10               	incf	getEEPROM@i+1,f,c
  7357  00EDF6  D7C6               	goto	l2779
  7358  00EDF8                     l2789:
  7359                           
  7360                           ;main.c: 456: }
  7361                           ;main.c: 457: for (i = 0; i<7; i++){
  7362  00EDF8  0E00               	movlw	0
  7363  00EDFA  6E10               	movwf	getEEPROM@i+1,c
  7364  00EDFC  0E00               	movlw	0
  7365  00EDFE  6E0F               	movwf	getEEPROM@i,c
  7366  00EE00                     l2791:
  7367  00EE00  BE10               	btfsc	getEEPROM@i+1,7,c
  7368  00EE02  D006               	goto	l2795
  7369  00EE04  5010               	movf	getEEPROM@i+1,w,c
  7370  00EE06  E130               	bnz	l280
  7371  00EE08  0E07               	movlw	7
  7372  00EE0A  5C0F               	subwf	getEEPROM@i,w,c
  7373  00EE0C  B0D8               	btfsc	status,0,c
  7374  00EE0E  0012               	return	
  7375  00EE10                     l2795:
  7376                           
  7377                           ;main.c: 458: lastRunTime[i] = Eeprom_ReadByte(12*(6+i)+num*200);
  7378  00EE10  0E59               	movlw	low _lastRunTime
  7379  00EE12  240F               	addwf	getEEPROM@i,w,c
  7380  00EE14  6ED9               	movwf	fsr2l,c
  7381  00EE16  0E00               	movlw	high _lastRunTime
  7382  00EE18  2010               	addwfc	getEEPROM@i+1,w,c
  7383  00EE1A  6EDA               	movwf	fsr2h,c
  7384  00EE1C  0E06               	movlw	6
  7385  00EE1E  240F               	addwf	getEEPROM@i,w,c
  7386  00EE20  6E01               	movwf	___wmul@multiplier,c
  7387  00EE22  0E00               	movlw	0
  7388  00EE24  2010               	addwfc	getEEPROM@i+1,w,c
  7389  00EE26  6E02               	movwf	___wmul@multiplier+1,c
  7390  00EE28  0E00               	movlw	0
  7391  00EE2A  6E04               	movwf	___wmul@multiplicand+1,c
  7392  00EE2C  0E0C               	movlw	12
  7393  00EE2E  6E03               	movwf	___wmul@multiplicand,c
  7394  00EE30  EC68  F072         	call	___wmul	;wreg free
  7395  00EE34  C001  F00B         	movff	?___wmul,??_getEEPROM
  7396  00EE38  C002  F00C         	movff	?___wmul+1,??_getEEPROM+1
  7397  00EE3C  C009  F001         	movff	getEEPROM@num,___wmul@multiplier
  7398  00EE40  C00A  F002         	movff	getEEPROM@num+1,___wmul@multiplier+1
  7399  00EE44  0E00               	movlw	0
  7400  00EE46  6E04               	movwf	___wmul@multiplicand+1,c
  7401  00EE48  0EC8               	movlw	200
  7402  00EE4A  6E03               	movwf	___wmul@multiplicand,c
  7403  00EE4C  EC68  F072         	call	___wmul	;wreg free
  7404  00EE50  5001               	movf	?___wmul,w,c
  7405  00EE52  240B               	addwf	??_getEEPROM,w,c
  7406  00EE54  6E07               	movwf	Eeprom_ReadByte@address,c
  7407  00EE56  5002               	movf	?___wmul+1,w,c
  7408  00EE58  200C               	addwfc	??_getEEPROM+1,w,c
  7409  00EE5A  6E08               	movwf	Eeprom_ReadByte@address+1,c
  7410  00EE5C  EC3E  F072         	call	_Eeprom_ReadByte	;wreg free
  7411  00EE60  6EDF               	movwf	indf2,c
  7412  00EE62  4A0F               	infsnz	getEEPROM@i,f,c
  7413  00EE64  2A10               	incf	getEEPROM@i+1,f,c
  7414  00EE66  D7CC               	goto	l2791
  7415  00EE68                     l280:
  7416  00EE68  0012               	return		;funcret
  7417  00EE6A                     __end_of_getEEPROM:
  7418                           	opt stack 0
  7419                           tosu	equ	0xFFF
  7420                           tosh	equ	0xFFE
  7421                           tosl	equ	0xFFD
  7422                           pclath	equ	0xFFA
  7423                           tblptru	equ	0xFF8
  7424                           tblptrh	equ	0xFF7
  7425                           tblptrl	equ	0xFF6
  7426                           tablat	equ	0xFF5
  7427                           prodh	equ	0xFF4
  7428                           prodl	equ	0xFF3
  7429                           intcon	equ	0xFF2
  7430                           intcon2	equ	0xFF1
  7431                           postinc0	equ	0xFEE
  7432                           wreg	equ	0xFE8
  7433                           indf1	equ	0xFE7
  7434                           postinc1	equ	0xFE6
  7435                           postdec1	equ	0xFE5
  7436                           fsr1h	equ	0xFE2
  7437                           fsr1l	equ	0xFE1
  7438                           indf2	equ	0xFDF
  7439                           postinc2	equ	0xFDE
  7440                           postdec2	equ	0xFDD
  7441                           fsr2h	equ	0xFDA
  7442                           fsr2l	equ	0xFD9
  7443                           status	equ	0xFD8
  7444                           
  7445 ;; *************** function ___wmul *****************
  7446 ;; Defined at:
  7447 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7448 ;; Parameters:    Size  Location     Type
  7449 ;;  multiplier      2    0[COMRAM] unsigned int 
  7450 ;;  multiplicand    2    2[COMRAM] unsigned int 
  7451 ;; Auto vars:     Size  Location     Type
  7452 ;;  product         2    4[COMRAM] unsigned int 
  7453 ;; Return value:  Size  Location     Type
  7454 ;;                  2    0[COMRAM] unsigned int 
  7455 ;; Registers used:
  7456 ;;		wreg, status,2, status,0, prodl, prodh
  7457 ;; Tracked objects:
  7458 ;;		On entry : 0/0
  7459 ;;		On exit  : 0/0
  7460 ;;		Unchanged: 0/0
  7461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7462 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7463 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7464 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7465 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7466 ;;Total ram usage:        6 bytes
  7467 ;; Hardware stack levels used:    1
  7468 ;; This function calls:
  7469 ;;		Nothing
  7470 ;; This function is called by:
  7471 ;;		_getCurrentTime
  7472 ;;		_saveEEPROM
  7473 ;;		_getEEPROM
  7474 ;;		__doprnt
  7475 ;;		_atoi
  7476 ;; This function uses a non-reentrant model
  7477 ;;
  7478                           
  7479                           	psect	text36
  7480  00E4D0                     __ptext36:
  7481                           	opt stack 0
  7482  00E4D0                     ___wmul:
  7483                           	opt stack 26
  7484                           
  7485                           ;incstack = 0
  7486  00E4D0  5001               	movf	___wmul@multiplier,w,c
  7487  00E4D2  0203               	mulwf	___wmul@multiplicand,c
  7488  00E4D4  CFF3 F005          	movff	prodl,___wmul@product
  7489  00E4D8  CFF4 F006          	movff	prodh,___wmul@product+1
  7490  00E4DC  5001               	movf	___wmul@multiplier,w,c
  7491  00E4DE  0204               	mulwf	___wmul@multiplicand+1,c
  7492  00E4E0  50F3               	movf	prodl,w,c
  7493  00E4E2  2606               	addwf	___wmul@product+1,f,c
  7494  00E4E4  5002               	movf	___wmul@multiplier+1,w,c
  7495  00E4E6  0203               	mulwf	___wmul@multiplicand,c
  7496  00E4E8  50F3               	movf	prodl,w,c
  7497  00E4EA  2606               	addwf	___wmul@product+1,f,c
  7498  00E4EC  C005  F001         	movff	___wmul@product,?___wmul
  7499  00E4F0  C006  F002         	movff	___wmul@product+1,?___wmul+1
  7500  00E4F4  0012               	return	
  7501  00E4F6                     __end_of___wmul:
  7502                           	opt stack 0
  7503                           tosu	equ	0xFFF
  7504                           tosh	equ	0xFFE
  7505                           tosl	equ	0xFFD
  7506                           pclath	equ	0xFFA
  7507                           tblptru	equ	0xFF8
  7508                           tblptrh	equ	0xFF7
  7509                           tblptrl	equ	0xFF6
  7510                           tablat	equ	0xFF5
  7511                           prodh	equ	0xFF4
  7512                           prodl	equ	0xFF3
  7513                           intcon	equ	0xFF2
  7514                           intcon2	equ	0xFF1
  7515                           postinc0	equ	0xFEE
  7516                           wreg	equ	0xFE8
  7517                           indf1	equ	0xFE7
  7518                           postinc1	equ	0xFE6
  7519                           postdec1	equ	0xFE5
  7520                           fsr1h	equ	0xFE2
  7521                           fsr1l	equ	0xFE1
  7522                           indf2	equ	0xFDF
  7523                           postinc2	equ	0xFDE
  7524                           postdec2	equ	0xFDD
  7525                           fsr2h	equ	0xFDA
  7526                           fsr2l	equ	0xFD9
  7527                           status	equ	0xFD8
  7528                           
  7529 ;; *************** function _Eeprom_ReadByte *****************
  7530 ;; Defined at:
  7531 ;;		line 493 in file "main.c"
  7532 ;; Parameters:    Size  Location     Type
  7533 ;;  address         2    6[COMRAM] unsigned int 
  7534 ;; Auto vars:     Size  Location     Type
  7535 ;;		None
  7536 ;; Return value:  Size  Location     Type
  7537 ;;                  1    wreg      unsigned char 
  7538 ;; Registers used:
  7539 ;;		wreg, status,2
  7540 ;; Tracked objects:
  7541 ;;		On entry : 0/0
  7542 ;;		On exit  : 0/0
  7543 ;;		Unchanged: 0/0
  7544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7545 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7548 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7549 ;;Total ram usage:        2 bytes
  7550 ;; Hardware stack levels used:    1
  7551 ;; This function calls:
  7552 ;;		Nothing
  7553 ;; This function is called by:
  7554 ;;		_saveEEPROM
  7555 ;;		_getEEPROM
  7556 ;; This function uses a non-reentrant model
  7557 ;;
  7558                           
  7559                           	psect	text37
  7560  00E47C                     __ptext37:
  7561                           	opt stack 0
  7562  00E47C                     _Eeprom_ReadByte:
  7563                           	opt stack 28
  7564                           
  7565                           ;main.c: 497: EEADRH = (uint8_t)(address >> 8);
  7566                           
  7567                           ;incstack = 0
  7568  00E47C  5008               	movf	Eeprom_ReadByte@address+1,w,c
  7569  00E47E  6EAA               	movwf	4010,c	;volatile
  7570                           
  7571                           ;main.c: 498: EEADR = (uint8_t)address;
  7572  00E480  C007  FFA9         	movff	Eeprom_ReadByte@address,4009	;volatile
  7573                           
  7574                           ;main.c: 500: EECON1bits.EEPGD = 0;
  7575  00E484  9EA6               	bcf	4006,7,c	;volatile
  7576                           
  7577                           ;main.c: 501: EECON1bits.CFGS = 0;
  7578  00E486  9CA6               	bcf	4006,6,c	;volatile
  7579                           
  7580                           ;main.c: 502: EECON1bits.RD = 1;
  7581  00E488  80A6               	bsf	4006,0,c	;volatile
  7582  00E48A                     l298:
  7583  00E48A  B0A6               	btfsc	4006,0,c	;volatile
  7584  00E48C  D7FE               	goto	l298
  7585                           
  7586                           ;main.c: 508: return EEDATA;
  7587  00E48E  50A8               	movf	4008,w,c	;volatile
  7588  00E490  0012               	return	
  7589  00E492                     __end_of_Eeprom_ReadByte:
  7590                           	opt stack 0
  7591                           tosu	equ	0xFFF
  7592                           tosh	equ	0xFFE
  7593                           tosl	equ	0xFFD
  7594                           pclath	equ	0xFFA
  7595                           tblptru	equ	0xFF8
  7596                           tblptrh	equ	0xFF7
  7597                           tblptrl	equ	0xFF6
  7598                           tablat	equ	0xFF5
  7599                           prodh	equ	0xFF4
  7600                           prodl	equ	0xFF3
  7601                           intcon	equ	0xFF2
  7602                           intcon2	equ	0xFF1
  7603                           postinc0	equ	0xFEE
  7604                           wreg	equ	0xFE8
  7605                           indf1	equ	0xFE7
  7606                           postinc1	equ	0xFE6
  7607                           postdec1	equ	0xFE5
  7608                           fsr1h	equ	0xFE2
  7609                           fsr1l	equ	0xFE1
  7610                           indf2	equ	0xFDF
  7611                           postinc2	equ	0xFDE
  7612                           postdec2	equ	0xFDD
  7613                           fsr2h	equ	0xFDA
  7614                           fsr2l	equ	0xFD9
  7615                           status	equ	0xFD8
  7616                           tosu	equ	0xFFF
  7617                           tosh	equ	0xFFE
  7618                           tosl	equ	0xFFD
  7619                           pclath	equ	0xFFA
  7620                           tblptru	equ	0xFF8
  7621                           tblptrh	equ	0xFF7
  7622                           tblptrl	equ	0xFF6
  7623                           tablat	equ	0xFF5
  7624                           prodh	equ	0xFF4
  7625                           prodl	equ	0xFF3
  7626                           intcon	equ	0xFF2
  7627                           intcon2	equ	0xFF1
  7628                           postinc0	equ	0xFEE
  7629                           wreg	equ	0xFE8
  7630                           indf1	equ	0xFE7
  7631                           postinc1	equ	0xFE6
  7632                           postdec1	equ	0xFE5
  7633                           fsr1h	equ	0xFE2
  7634                           fsr1l	equ	0xFE1
  7635                           indf2	equ	0xFDF
  7636                           postinc2	equ	0xFDE
  7637                           postdec2	equ	0xFDD
  7638                           fsr2h	equ	0xFDA
  7639                           fsr2l	equ	0xFD9
  7640                           status	equ	0xFD8
  7641                           
  7642                           	psect	text38
  7643  000000                     __ptext38:
  7644                           	opt stack 0
  7645                           tosu	equ	0xFFF
  7646                           tosh	equ	0xFFE
  7647                           tosl	equ	0xFFD
  7648                           pclath	equ	0xFFA
  7649                           tblptru	equ	0xFF8
  7650                           tblptrh	equ	0xFF7
  7651                           tblptrl	equ	0xFF6
  7652                           tablat	equ	0xFF5
  7653                           prodh	equ	0xFF4
  7654                           prodl	equ	0xFF3
  7655                           intcon	equ	0xFF2
  7656                           intcon2	equ	0xFF1
  7657                           postinc0	equ	0xFEE
  7658                           wreg	equ	0xFE8
  7659                           indf1	equ	0xFE7
  7660                           postinc1	equ	0xFE6
  7661                           postdec1	equ	0xFE5
  7662                           fsr1h	equ	0xFE2
  7663                           fsr1l	equ	0xFE1
  7664                           indf2	equ	0xFDF
  7665                           postinc2	equ	0xFDE
  7666                           postdec2	equ	0xFDD
  7667                           fsr2h	equ	0xFDA
  7668                           fsr2l	equ	0xFD9
  7669                           status	equ	0xFD8
  7670                           
  7671                           	psect	rparam
  7672  0000                     tosu	equ	0xFFF
  7673                           tosh	equ	0xFFE
  7674                           tosl	equ	0xFFD
  7675                           pclath	equ	0xFFA
  7676                           tblptru	equ	0xFF8
  7677                           tblptrh	equ	0xFF7
  7678                           tblptrl	equ	0xFF6
  7679                           tablat	equ	0xFF5
  7680                           prodh	equ	0xFF4
  7681                           prodl	equ	0xFF3
  7682                           intcon	equ	0xFF2
  7683                           intcon2	equ	0xFF1
  7684                           postinc0	equ	0xFEE
  7685                           wreg	equ	0xFE8
  7686                           indf1	equ	0xFE7
  7687                           postinc1	equ	0xFE6
  7688                           postdec1	equ	0xFE5
  7689                           fsr1h	equ	0xFE2
  7690                           fsr1l	equ	0xFE1
  7691                           indf2	equ	0xFDF
  7692                           postinc2	equ	0xFDE
  7693                           postdec2	equ	0xFDD
  7694                           fsr2h	equ	0xFDA
  7695                           fsr2l	equ	0xFD9
  7696                           status	equ	0xFD8


Data Sizes:
    Strings     427
    Constant    35
    Data        12
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     88     116
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 2
		 -> getCurrentTime@str(COMRAM[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTime@str(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[18]), 
		 -> STR_32(CODE[13]), STR_31(CODE[12]), STR_30(CODE[5]), STR_29(CODE[4]), 
		 -> STR_28(CODE[17]), STR_27(CODE[14]), STR_26(CODE[16]), STR_25(CODE[18]), 
		 -> STR_24(CODE[15]), STR_23(CODE[13]), STR_22(CODE[17]), STR_21(CODE[16]), 
		 -> STR_20(CODE[16]), STR_19(CODE[14]), STR_18(CODE[14]), STR_17(CODE[16]), 
		 -> STR_16(CODE[17]), STR_15(CODE[16]), STR_14(CODE[16]), STR_13(CODE[16]), 
		 -> STR_12(CODE[11]), STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[14]), 
		 -> STR_8(CODE[15]), STR_7(CODE[13]), STR_6(CODE[14]), STR_2(CODE[15]), 
		 -> STR_1(CODE[13]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTime@str(COMRAM[2]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 2
		 -> getCurrentTime@str(COMRAM[2]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), printf@ap(COMRAM[2]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[18]), 
		 -> STR_32(CODE[13]), STR_31(CODE[12]), STR_30(CODE[5]), STR_29(CODE[4]), 
		 -> STR_28(CODE[17]), STR_27(CODE[14]), STR_26(CODE[16]), STR_25(CODE[18]), 
		 -> STR_24(CODE[15]), STR_23(CODE[13]), STR_22(CODE[17]), STR_21(CODE[16]), 
		 -> STR_20(CODE[16]), STR_19(CODE[14]), STR_18(CODE[14]), STR_17(CODE[16]), 
		 -> STR_16(CODE[17]), STR_15(CODE[16]), STR_14(CODE[16]), STR_13(CODE[16]), 
		 -> STR_12(CODE[11]), STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[14]), 
		 -> STR_8(CODE[15]), STR_7(CODE[13]), STR_6(CODE[14]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[15]), STR_1(CODE[13]), 

    S719__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S719__prbuf$ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTime@str(COMRAM[2]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTime@str(COMRAM[2]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(COMRAM[4]), printf@pb(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_EEPROM
    _operation->_getCurrentTime
    _saveEEPROM->_Eeprom_WriteByte
    _Eeprom_WriteByte->___wmul
    _getCurrentTime->_sprintf
    _sprintf->__doprnt
    _atoi->___wmul
    _initializePicSettings->_initializeRTC
    _initializeRTC->___lldiv
    _initializeLCDScreen->_lcdInst
    _displayMainProgramLcdScreen->_printf
    _EEPROM->_past_run_access
    _update_eeprom_screen_state->_printf
    _past_run_access->_update_past_run_screen_state
    _update_past_run_screen_state->_printf
    _lcdClear->_printf
    _getUserInput->_printf
    _updateCurrentTime->_I2C_Master_Read
    _updateCurrentTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _printf->__doprnt
    __doprnt->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _getEEPROM->_Eeprom_ReadByte
    _Eeprom_ReadByte->___wmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  135585
                                             85 COMRAM     3     3      0
                             _EEPROM
        _displayMainProgramLcdScreen
                       _getUserInput
              _initializePicSettings
                       _moveBinServo
                          _operation
                    _past_run_access
 ---------------------------------------------------------------------------------
 (1) _operation                                           15    15      0   38534
                                             50 COMRAM    15    15      0
                     _getCurrentTime
                       _getUserInput
                           _lcdClear
                            _lcdInst
                       _moveBinServo
                             _printf
                         _pushBottle
                         _saveEEPROM
                  _updateCurrentTime
 ---------------------------------------------------------------------------------
 (2) _saveEEPROM                                           5     5      0    3796
                                              9 COMRAM     5     5      0
                    _Eeprom_ReadByte
                   _Eeprom_WriteByte
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _Eeprom_WriteByte                                     3     0      3     706
                                              6 COMRAM     3     0      3
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _pushBottle                                           4     4      0      60
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (2) _moveBinServo                                         6     4      2     592
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _getCurrentTime                                      10     8      2   10803
                                             42 COMRAM     8     6      2
                             ___wmul
                               _atoi
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             12     6      6    5631
                                             30 COMRAM    12     6      6
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    2695
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _initializePicSettings                                0     0      0     511
                _initializeLCDScreen
                  _initializePicPins
                      _initializeRTC
 ---------------------------------------------------------------------------------
 (2) _initializeRTC                                        8     4      4     376
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _initializePicPins                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initializeLCDScreen                                  1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _displayMainProgramLcdScreen                          4     2      2   15530
                                             44 COMRAM     4     2      2
                           _lcdClear
                            _lcdInst
                             _printf
                  _updateCurrentTime
 ---------------------------------------------------------------------------------
 (1) _EEPROM                                              33    33      0   49533
                                             52 COMRAM    33    33      0
                          _getEEPROM
                       _getUserInput
                    _past_run_access
         _update_eeprom_screen_state
 ---------------------------------------------------------------------------------
 (2) _update_eeprom_screen_state                           4     2      2   15154
                                             44 COMRAM     4     2      2
                           _lcdClear
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _past_run_access                                      4     4      0   23045
                                             48 COMRAM     4     4      0
                       _getUserInput
       _update_past_run_screen_state
 ---------------------------------------------------------------------------------
 (2) _update_past_run_screen_state                         4     2      2   15090
                                             44 COMRAM     4     2      2
                           _lcdClear
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (3) _lcdClear                                             0     0      0    7438
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _getUserInput                                         3     3      0    7773
                                             44 COMRAM     3     3      0
                            _lcdInst
                             _printf
                  _updateCurrentTime
 ---------------------------------------------------------------------------------
 (3) _updateCurrentTime                                    1     1      0     312
                                              3 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     2     0      2     214
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _printf                                              14     6      8    7303
                                             30 COMRAM    14     6      8
                            __doprnt
 ---------------------------------------------------------------------------------
 (4) __doprnt                                             27    21      6    5065
                                             12 COMRAM    18    12      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     418
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (5) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (6) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _getEEPROM                                            8     6      2    2859
                                              8 COMRAM     8     6      2
                    _Eeprom_ReadByte
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4    2207
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _Eeprom_ReadByte                                      2     0      2     364
                                              6 COMRAM     2     0      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROM
     _getEEPROM
       _Eeprom_ReadByte
         ___wmul (ARG)
       ___wmul
     _getUserInput
       _lcdInst
         _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
       _updateCurrentTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _past_run_access
       _getUserInput
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
         _updateCurrentTime
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _update_past_run_screen_state
         _lcdClear
           _lcdInst
             _lcdNibble
           _printf
             __doprnt
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               ___wmul *
               _isdigit *
               _putch *
                 _lcdNibble
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
     _update_eeprom_screen_state
       _lcdClear
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
   _displayMainProgramLcdScreen
     _lcdClear
       _lcdInst
         _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
     _updateCurrentTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _getUserInput
     _lcdInst
       _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
     _updateCurrentTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _initializePicSettings
     _initializeLCDScreen
       _lcdInst
         _lcdNibble
     _initializePicPins
     _initializeRTC
       ___lldiv
   _moveBinServo
   _operation
     _getCurrentTime
       ___wmul
       _atoi
         ___wmul
         _isdigit
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
     _getUserInput
       _lcdInst
         _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
       _updateCurrentTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _lcdClear
       _lcdInst
         _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
     _lcdInst
       _lcdNibble
     _moveBinServo
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
     _pushBottle
     _saveEEPROM
       _Eeprom_ReadByte
         ___wmul (ARG)
       _Eeprom_WriteByte
         ___wmul (ARG)
       ___wmul
     _updateCurrentTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _past_run_access
     _getUserInput
       _lcdInst
         _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
       _updateCurrentTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _update_past_run_screen_state
       _lcdClear
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     58      74       1       91.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      74      34        0.0%
DATA                 0      0      74       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Feb 28 14:44:58 2017

                 operation@bottle_type 003A               __end_of_Eeprom_WriteByte E542  
 __end_of_update_past_run_screen_state EF98  __size_of_update_past_run_screen_state 012E  
         _update_past_run_screen_state EE6A                    ___wmul@multiplicand 0003  
                          __CFG_BORV$3 000000             __size_of_updateCurrentTime 0066  
                         __CFG_CP0$OFF 000000                           __CFG_CP1$OFF 000000  
                         __CFG_CP2$OFF 000000                           __CFG_CP3$OFF 000000  
                          __CFG_OSC$HS 000000                                    l304 E538  
                                  l145 E8A0                                    l422 F9D4  
                                  l239 EFB8                                    l280 EE68  
                                  l273 F412                                    l193 F6AC  
                                  l368 E46A                                    l298 E48A  
                                  l642 EC9E                                    l902 E638  
                                  l839 E91C                                    l892 E712  
                         __CFG_CPB$OFF 000000                                    _PEN 007E2A  
                         __CFG_CPD$OFF 000000                                    u460 E514  
                                  _SEN 007E28                         ??_getUserInput 002D  
                                  prod 000FF3                                    tosl 000FFD  
                                  wreg 000FE8                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l2201 E708  
                                 l3001 F5A6                                   l2211 E616  
                                 l2213 E61A                                   l2301 FAB8  
                                 l3013 F5E0                                   l2311 FAF6  
                                 l2223 F884                                   l3023 F61C  
                                 l3015 F5E6                                   l3031 F0DE  
                                 l2217 E62E                                   l2209 E60E  
                                 l2321 FB4E                                   l2313 FAFE  
                                 l2233 F8F8                                   l3025 F620  
                                 l3017 F5F4                                   l3041 F14E  
                                 l2331 FBC0                                   l2307 FAD2  
                                 l2235 F906                                   l3043 F154  
                                 l3051 F192                                   l2173 E4A8  
                                 l2325 FB78                                   l2253 F9A0  
                                 l2245 F93E                                   l2229 F8CC  
                                 l2405 E800                                   l2501 EF48  
                                 l3061 F1CC                                   l3037 F116  
                                 l2191 E6E8                                   l2343 FC3A  
                                 l2335 FBEA                                   l2271 FA40  
                                 l2239 F90C                                   l2415 E824  
                                 l2503 EF84                                   l3071 F204  
                                 l3039 F11C                                   l3047 F15A  
                                 l2193 E6EC                                   l2361 FCEE  
                                 l2337 FBF2                                   l2257 F9A4  
                                 l2409 E808                                   l3057 F1B8  
                                 l3049 F184                                   l2363 FD38  
                                 l2371 FD9A                                   l2355 FCBE  
                                 l2347 FC64                                   l2339 FBFA  
                                 l2283 FA72                                   l2267 FA12  
                                 l2427 E834                                   l2603 F06C  
                                 l3067 F1F4                                   l3059 F1BE  
                                 l2189 E6E0                                   l2349 FC72  
                                 l2285 FA76                                   l2269 FA3C  
                                 l2381 FE0C                                   l1397 E516  
                                 l2701 E958                                   l3069 F1F8  
                                 l2375 FDDA                                   l2359 FCE8  
                                 l2383 FE26                                   l2439 E894  
                                 l2623 EB30                                   l2703 E96A  
                                 l2607 F07E                                   l1743 EA14  
                                 l2369 FD8A                                   l2641 EBA0  
                                 l2545 E8CE                                   l2473 EC32  
                                 l2457 EBDC                                   l2617 F0B4  
                                 l1753 EA48                                   l1729 E9C2  
                                 l2379 FE04                                   l2299 FAA8  
                                 l2491 EEBE                                   l2707 E97C  
                                 l2811 EA68                                   l2547 E8DA  
                                 l2475 EC68                                   l2459 EBE0  
                                 l1739 E9F4                                   l2731 F294  
                                 l2723 F232                                   l2493 EED8  
                                 l2485 EE70                                   l2637 EB8C  
                                 l2709 E9A6                                   l2821 EABA  
                                 l2813 EA7A                                   l2557 E90E  
                                 l2549 E8DE                                   l2477 EC6C  
                                 l2469 EC20                                   l2741 F2FE  
                                 l2495 EEF2                                   l2487 EE8A  
                                 l2647 EBC8                                   l2639 EB92  
                                 l2823 EACC                                   l2575 EFE2  
                                 l2743 F306                                   l2735 F2A4  
                                 l2719 F222                                   l2497 EF0C  
                                 l2489 EEA4                                   l2649 EBCC  
                                 l2593 F038                                   l2753 F36C  
                                 l2729 F28C                                   l2921 F814  
                                 l2905 F7AC                                   l2841 F648  
                                 l2827 EADE                                   l2579 EFF2  
                                 l2771 F3D8                                   l2755 F374  
                                 l2747 F316                                   l2931 F846  
                                 l2851 F678                                   l2829 EB08  
                                 l2589 F026                                   l2765 F3C0  
                                 l2933 F84A                                   l2925 F824  
                                 l2845 F658                                   l2791 EE00  
                                 l2783 ED94                                   l2943 F428  
                                 l2767 F3C8                                   l2759 F384  
                                 l2697 E934                                   l2961 F4B0  
                                 l2953 F476                                   l2857 F69A  
                                 l2795 EE10                                   l2779 ED84  
                                 l2699 E946                                   l2971 F4F2  
                                 l2875 F6FA                                   l2789 EDF8  
                                 l2965 F4C0                                   l2949 F466  
                                 l2885 F71C                                   l2983 F526  
                                 l2959 F4A8                                   l2889 F730  
                                 l2995 F574                                   l2979 F516  
                                 l2989 F558                                   STR_1 FFD2  
                                 STR_2 FF70                                   STR_3 FF7A  
                                 STR_4 FF7A                                   STR_5 FF7A  
                                 STR_6 FF9B                                   STR_7 FFD2  
                                 STR_8 FF70                                   STR_9 FF8D  
                                 u2300 F7BC                                   _LATB 000F8A  
                                 _LATC 000F8B                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u2410 F572  
                                 u1428 F8B8                                   u2420 F5A4  
                                 u2085 E7A0                                   u1708 FCAA  
                                 u1628 FBAC                                   u2607 EA3A  
                                 u1728 FDC6                                   u1920 EFB6  
                                 u2617 EA52                                   u2707 F0BE  
                                 u2627 EFBC                                   u2547 F6D0  
                                 u1668 FC26                                   u2717 E68A  
                                 u2637 EFD0                                   u2557 F78C  
                                 u1598 FB3A                                   u2727 E6BE  
                                 u2647 F006                                   u2567 E9D2  
                                 u2737 E886                                   u2657 F018  
                                 u2577 E9E6                                   u2747 E734  
                                 u2667 F04C                                   u2587 E9FE  
                                 u2757 E73E                                   u2677 F05C  
                                 u2597 EA28                                   u2767 E760  
                                 u2687 F092                                   u2777 E76A  
                                 u2697 F0A4                                   _RCEN 007E2B  
                                 _RSEN 007E29                                   _atoi EBDA  
                                 _main F0CE                                   _keys FE31  
   __end_of_update_eeprom_screen_state E9BA             _update_eeprom_screen_state E92E  
                                 _time 0060                                   fsr1h 000FE2  
                                 fsr2h 000FDA                                   indf1 000FE7  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   prodh 000FF4  
                                 prodl 000FF3                                   start 0000  
                        __CFG_IESO$OFF 000000           __size_of_initializeLCDScreen 0046  
                        __CFG_MCLRE$ON 000000                           ___param_bank 000000  
                  past_run_access@temp 0032                       ?_I2C_Master_Read 0001  
                     ?_I2C_Master_Wait 0001                       ?_I2C_Master_Stop 0001  
        ?_update_past_run_screen_state 002D                                  ?_atoi 0007  
                                ?_main 0001                                  _ACKEN 007E2C  
                                _ACKDT 007E2D                                  _EEADR 000FA9  
                                STR_10 FEBC                                  STR_11 FECD  
                                STR_12 FFEB                                  STR_20 FF50  
                                STR_21 FF40                                  STR_13 FF00  
                                STR_30 FFF6                                  STR_14 FF10  
                                STR_22 FEEF                                  STR_23 FFD2  
                                STR_31 FFDF                                  STR_15 FF20  
                                STR_24 FF70                                  STR_32 FFC5  
                                STR_16 FEDE                                  STR_17 FF60  
                                STR_25 FE66                                  STR_33 FE54  
                                STR_18 FFB7                                  STR_26 FF30  
                                STR_34 FE9A                                  STR_19 FFA9  
                                STR_27 FF7F                                  STR_35 FE89  
                                STR_36 FE89                                  STR_28 FEAB  
                                STR_29 FFFB                                  STR_37 FE78  
                      __end_of___lldiv E92E                        __end_of___lwdiv E71C  
                      __end_of___lwmod E642                ??_initializePicSettings 0016  
                                _PORTB 000F81                        __end_of__doprnt FE30  
                                _TRISA 000F92                                  _TRISB 000F93  
                                _TRISC 000F94                                  _TRISD 000F95  
                                _TRISE 000F96                          __CFG_PWRT$OFF 000000  
                        __CFG_WRT0$OFF 000000                          __CFG_WRT1$OFF 000000  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst E452                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                       __CFG_EBTRB$OFF 000000                        __end_of_dpowers FE4C  
                     ?_Eeprom_ReadByte 0007                        __end_of_isdigit E4B0  
                                atoi@a 000C                                  atoi@s 0007  
                                _putch E452                                  pclath 000FFA  
                                tablat 000FF5                                  status 000FD8  
                      __end_of_sprintf E684                         saveEEPROM@temp 000B  
                       __CFG_PBADEN$ON 000000                        __initialization E598  
                         __end_of_atoi ECA8                           __end_of_main F21A  
                         __end_of_keys FE42                        _past_run_access EB1C  
                               ??_atoi 0009                                 ??_main 0056  
                        __activetblptr 000003                     EEPROM@screen_state 0052  
                    ?_I2C_Master_Start 0001                      ?_I2C_Master_Write 0002  
                   ??_I2C_Master_Start 0002                                 _ADCON0 000FC2  
                               _ADCON1 000FC1                     ??_I2C_Master_Write 0004  
                               _EEADRH 000FAA                                 _EEDATA 000FA8  
                               _EECON2 000FA7                                 ?_putch 0001  
                               _EEPROM F414                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                       __end_of_lcdClear E598  
                 __end_of_getUserInput E8AC                         __CFG_XINST$OFF 000000  
                               ___wmul E4D0                         __CFG_STVREN$ON 000000  
                            ??___lldiv 0009                              ??___lwdiv 0005  
                            ??___lwmod 000C                              ??__doprnt 0013  
                               clear_0 E5BE                           __doprnt@flag 001B  
                            ??_lcdInst 0003                                 _printf E5CA  
                         __doprnt@prec 0018                           __pdataCOMRAM 0069  
                            ??_isdigit 0001                           __mediumconst FE30  
       ??_update_past_run_screen_state 002F                                 tblptrh 000FF7  
              Eeprom_WriteByte@address 0007                                 tblptrl 000FF6  
                               tblptru 000FF8                 __size_of_initializeRTC 005A  
                            ??_sprintf 0025                             __accesstop 0080  
              __end_of__initialization E5C4                          ___rparam_used 000001  
                          saveEEPROM@i 000D                __end_of_past_run_access EBDA  
                       __pcstackCOMRAM 0001                     __size_of_getEEPROM 00EE  
                        __end_of_putch E45E                      ?_Eeprom_WriteByte 0007  
                   ??_Eeprom_WriteByte 000A                     __size_of_lcdNibble 0056  
                  _initializeLCDScreen E684                                EEPROM@i 0054  
                           __doprnt@ap 0011                             __doprnt@pb 000D  
                              ??_putch 0003                                ?_EEPROM 0001  
              __size_of_getCurrentTime 00D4                          ?_moveBinServo 0001  
          ?_update_eeprom_screen_state 002D                   ?_initializeLCDScreen 0001  
                        _initializeRTC E772                                ?___wmul 0001  
                              ?_printf 001F                     __size_of_operation 0254  
                    _initializePicPins E542                     ?_initializePicPins 0001  
       __size_of_initializePicSettings 0020                              ?_lcdClear 0001  
        __end_of_initializePicSettings E4D0                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                      __end_of_getEEPROM EE6A  
         ?_displayMainProgramLcdScreen 002D                                _SSPSTAT 000FC7  
                      __size_of_EEPROM 021A                    ??_initializePicPins 0001  
                __size_of_getUserInput 007A                         ??_moveBinServo 0003  
                  _getCurrentTime$1352 002F                  ??_initializeLCDScreen 0004  
                    __end_of_lcdNibble E772                             getEEPROM@i 000F  
                              __Hparam 0000                         ?_initializeRTC 000E  
                              __Lparam 0000                       ?_past_run_access 0001  
                 Eeprom_WriteByte@data 0009                                ___lldiv E8AC  
                      __size_of___wmul 0026                                ___lwdiv E6CA  
                              ___lwmod E600                                __doprnt F882  
            __end_of_initializePicPins E56C                                __pcinit E598  
                              __ramtop 1000                          moveBinServo@i 0005  
                              _lcdInst E446                                __ptext0 F0CE  
                              __ptext1 F62E                                __ptext2 F21A  
                              __ptext3 E51C                                __ptext4 E9BA  
                              __ptext5 EF98                                __ptext6 ECA8  
                              __ptext7 E642                                __ptext8 EBDA  
                              __ptext9 E4B0                        __size_of_printf 0036  
                    __end_of_hexpowers FE54                             _saveEEPROM F21A  
                              _dpowers FE42                                _isdigit E492  
                         _getUserInput E832               __size_of_I2C_Master_Read 0026  
                           ??_lcdClear 002D               __size_of_I2C_Master_Wait 0012  
                           EEPROM@temp 0051               __size_of_I2C_Master_Stop 0008  
      update_past_run_screen_state@num 002D                                _runInfo 0069  
                              _sprintf E642                          __doprnt@width 001C  
                 end_of_initialization E5C4          ??_displayMainProgramLcdScreen 002F  
                    __end_of_operation F882         displayMainProgramLcdScreen@num 002D  
             __size_of_Eeprom_ReadByte 0016              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0005  
                      ___lldiv@counter 000D                                printf@f 001F  
                     I2C_Master_Read@a 0002                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc1 000FE6                                postinc2 000FDE  
        update_eeprom_screen_state@num 002D                          EEPROM@storage 0045  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                            _PORTCbits 000F82                             _pushBottle E9BA  
                       _getCurrentTime ECA8            past_run_access@screen_state 0033  
                operation@startingTime 0035                         __end_of_EEPROM F62E  
                      ??_initializeRTC 0012                      getCurrentTime@str 0031  
 __size_of_displayMainProgramLcdScreen 00BA                         __end_of___wmul E4F6  
           __size_of_initializePicPins 002A                          __pidataCOMRAM E45E  
                 __end_of_moveBinServo F0CE                            ?_saveEEPROM 0001  
                       __end_of_printf E600                            pushBottle@i 0003  
                  start_initialization E598                 __end_of_getCurrentTime ED7C  
                         getEEPROM@num 0009                               ??_EEPROM 0035  
            __size_of_Eeprom_WriteByte 0026                      ??_I2C_Master_Read 0002  
                    ??_I2C_Master_Wait 0001                   getUserInput@keypress 002F  
                    ??_I2C_Master_Stop 0002                               ??___wmul 0005  
                          __doprnt@idx 0017                            __doprnt@val 0019  
                    ??_Eeprom_ReadByte 0009                       __CFG_LPT1OSC$OFF 000000  
                    EEPROM@timeStorage 0037                               ??_printf 0027  
                          __pbssCOMRAM 0059                            ?_pushBottle 0001  
                      ?_getCurrentTime 002B                      __size_of_lcdClear 002C  
                            __doprnt@c 001E                              __doprnt@f 000F  
                            _getEEPROM ED7C                       _I2C_Master_Start E42C  
                     _I2C_Master_Write E43C                    __size_of_saveEEPROM 01FA  
                     ___lwdiv@dividend 0001                      __CFG_CCP2MX$PORTC 000000  
                      moveBinServo@num 0001                          __pmediumconst FE30  
                            _lcdNibble E71C                               ?___lldiv 0001  
                             ?___lwdiv 0001                               ?___lwmod 0008  
                             ?__doprnt 000D                               ?_lcdInst 0001  
                             ?_isdigit 0001                              _hexpowers FE4C  
                     ___lwdiv@quotient 0005                               ?_sprintf 001F  
                _initializePicSettings E4B0            __end_of_initializeLCDScreen E6CA  
                       __size_of_putch 000C                             operation@i 0040  
                           ?_getEEPROM 0009                         ___wmul@product 0005  
                        operation@temp 0039                               _LATDbits 000F8C  
                             _PIR2bits 000FA1                              _operation F62E  
                  __size_of_pushBottle 00A8                       __CFG_WDTPS$32768 000000  
                __size_of_moveBinServo 0136                             ?_lcdNibble 0001  
                    ___wmul@multiplier 0001               __size_of_past_run_access 00BE  
                        lcdNibble@data 0002                          lcdNibble@temp 0001  
                  I2C_Master_Read@temp 0003                              copy_data0 E5AC  
                     _Eeprom_WriteByte E51C                           _moveBinServo EF98  
                           _EECON1bits 000FA6                               __Hrparam 0000  
                           ?_operation 0001                            _lastRunTime 0059  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                     __size_of___lldiv 0082                       __size_of___lwdiv 0052  
                     __size_of___lwmod 0042                       __size_of__doprnt 05AE  
               Eeprom_ReadByte@address 0007                            _isdigit$982 0002  
                     __size_of_lcdInst 000C                           ??_saveEEPROM 000A  
                    _updateCurrentTime E7CC                        _I2C_Master_Read E4F6  
                      _I2C_Master_Wait E46A                        _I2C_Master_Stop E434  
                     __size_of_isdigit 001E                     ?_updateCurrentTime 0001  
                             _lcdClear E56C                        ___lwdiv@divisor 0003  
                      ___lwdiv@counter 0007                 ?_initializePicSettings 0001  
  __end_of_displayMainProgramLcdScreen EB1C            _displayMainProgramLcdScreen EA62  
                             __ptext10 E772                               __ptext11 E8AC  
                             __ptext20 E832                               __ptext12 E542  
                             __ptext21 E7CC                               __ptext13 E684  
                             __ptext30 E492                               __ptext22 E43C  
                             __ptext14 EA62                               __ptext31 E600  
                             __ptext23 E434                               __ptext15 F414  
                             __ptext32 E6CA                               __ptext24 E42C  
                             __ptext16 E92E                               __ptext33 E446  
                             __ptext25 E4F6                               __ptext17 EB1C  
                             __ptext34 E71C                               __ptext26 E46A  
                             __ptext18 EE6A                               __ptext35 ED7C  
                             __ptext27 E5CA                               __ptext19 E56C  
                             __ptext36 E4D0                               __ptext28 F882  
                             __ptext37 E47C                               __ptext29 E452  
                             __ptext38 0000                       __size_of_sprintf 0042  
                  ??_updateCurrentTime 0004                            ??_getEEPROM 000B  
                        __size_of_atoi 00CE                          __size_of_main 014C  
                      _Eeprom_ReadByte E47C           ??_update_eeprom_screen_state 002F  
                __end_of_initializeRTC E7CC                     __end_of_saveEEPROM F414  
                          ??_lcdNibble 0001                         initializeRTC@c 000E  
                             atoi@sign 000B                        operation@bottle 003E  
                             main@temp 0058              __end_of_updateCurrentTime E832  
                     ??_getCurrentTime 002D                              putch@data 0003  
             __end_of_I2C_Master_Start E434               __end_of_I2C_Master_Write E446  
                           _INTCONbits 000FF2                           ??_pushBottle 0001  
            getCurrentTime@currentTime 002D                               isdigit@c 0003  
                    ??_past_run_access 0031    __size_of_update_eeprom_screen_state 008C  
                            sprintf@ap 0025                              sprintf@pb 0027  
                            sprintf@wh 001F                       ___lwmod@dividend 0008  
                     ___lldiv@dividend 0001                            ??_operation 0033  
                   updateCurrentTime@i 0004                               printf@ap 0027  
                             printf@pb 0029                     __end_of_pushBottle EA62  
              __end_of_I2C_Master_Read E51C                __end_of_I2C_Master_Wait E47C  
              __end_of_I2C_Master_Stop E43C                            lcdInst@data 0003  
                             sprintf@f 0021                       ___lldiv@quotient 0009  
                    I2C_Master_Write@d 0002                        ___lwmod@divisor 000A  
                        ?_getUserInput 0001                        ___lwmod@counter 000C  
              __end_of_Eeprom_ReadByte E492                    operation@endingTime 0037  
                      _initScreenState 0067                    operation@bottle_cap 003C  
