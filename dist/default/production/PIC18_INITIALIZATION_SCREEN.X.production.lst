

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Feb 07 16:50:03 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    43                           	psect	text31,global,reloc=2,class=CODE,delta=1
    44                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    45  0000                     
    46                           ; Version 1.40
    47                           ; Generated 01/12/2016 GMT
    48                           ; 
    49                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    50                           ; All rights reserved.
    51                           ; 
    52                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    53                           ; 
    54                           ; Redistribution and use in source and binary forms, with or without modification, are
    55                           ; permitted provided that the following conditions are met:
    56                           ; 
    57                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    58                           ;        conditions and the following disclaimer.
    59                           ; 
    60                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    61                           ;        of conditions and the following disclaimer in the documentation and/or other
    62                           ;        materials provided with the distribution.
    63                           ; 
    64                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    65                           ;        software without specific prior written permission.
    66                           ; 
    67                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    68                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    69                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    70                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    71                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    72                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    73                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    74                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    75                           ; 
    76                           ; 
    77                           ; Code-generator required, PIC18F4620 Definitions
    78                           ; 
    79                           ; SFR Addresses
    80  0000                     
    81                           	psect	idataCOMRAM
    82  00EB3C                     __pidataCOMRAM:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _runInfo
    86  00EB3C  0028               	dw	40
    87  00EB3E  000A               	dw	10
    88  00EB40  0002               	dw	2
    89  00EB42  0003               	dw	3
    90  00EB44  0003               	dw	3
    91  00EB46  0002               	dw	2
    92                           
    93                           	psect	mediumconst
    94  00FE1A                     __pmediumconst:
    95                           	opt stack 0
    96  00FE1A  00                 	db	0
    97  00FE1B                     _keys:
    98                           	opt stack 0
    99  00FE1B  31                 	db	49
   100  00FE1C  32                 	db	50
   101  00FE1D  33                 	db	51
   102  00FE1E  41                 	db	65
   103  00FE1F  34                 	db	52
   104  00FE20  35                 	db	53
   105  00FE21  36                 	db	54
   106  00FE22  42                 	db	66
   107  00FE23  37                 	db	55
   108  00FE24  38                 	db	56
   109  00FE25  39                 	db	57
   110  00FE26  43                 	db	67
   111  00FE27  2A                 	db	42
   112  00FE28  30                 	db	48
   113  00FE29  23                 	db	35
   114  00FE2A  44                 	db	68
   115  00FE2B  00                 	db	0
   116  00FE2C                     __end_of_keys:
   117                           	opt stack 0
   118  00FE2C                     _dpowers:
   119                           	opt stack 0
   120  00FE2C  0001               	dw	1
   121  00FE2E  000A               	dw	10
   122  00FE30  0064               	dw	100
   123  00FE32  03E8               	dw	1000
   124  00FE34  2710               	dw	10000
   125  00FE36                     __end_of_dpowers:
   126                           	opt stack 0
   127  00FE36                     _hexpowers:
   128                           	opt stack 0
   129  00FE36  0001               	dw	1
   130  00FE38  0010               	dw	16
   131  00FE3A  0100               	dw	256
   132  00FE3C  1000               	dw	4096
   133  00FE3E                     __end_of_hexpowers:
   134                           	opt stack 0
   135  0000                     _ADCON0	set	4034
   136  0000                     _ADCON1	set	4033
   137  0000                     _CCP1CON	set	4029
   138  0000                     _CCPR1L	set	4030
   139  0000                     _INTCONbits	set	4082
   140  0000                     _LATB	set	3978
   141  0000                     _LATC	set	3979
   142  0000                     _LATD	set	3980
   143  0000                     _LATDbits	set	3980
   144  0000                     _LATE	set	3981
   145  0000                     _OSCCON	set	4051
   146  0000                     _PORTAbits	set	3968
   147  0000                     _PORTB	set	3969
   148  0000                     _PORTBbits	set	3969
   149  0000                     _PORTCbits	set	3970
   150  0000                     _PR2	set	4043
   151  0000                     _SSPADD	set	4040
   152  0000                     _SSPBUF	set	4041
   153  0000                     _SSPCON1	set	4038
   154  0000                     _SSPCON2	set	4037
   155  0000                     _SSPSTAT	set	4039
   156  0000                     _T2CON	set	4042
   157  0000                     _TRISA	set	3986
   158  0000                     _TRISB	set	3987
   159  0000                     _TRISC	set	3988
   160  0000                     _TRISD	set	3989
   161  0000                     _TRISE	set	3990
   162  0000                     _ACKDT	set	32301
   163  0000                     _ACKEN	set	32300
   164  0000                     _PEN	set	32298
   165  0000                     _RCEN	set	32299
   166  0000                     _RSEN	set	32297
   167  0000                     _SEN	set	32296
   168  0000                     _TRISC3	set	31907
   169  0000                     _TRISC4	set	31908
   170  0000                     _nRBPU	set	32655
   171  00FE3E                     STR_29:
   172  00FE3E  43                 	db	67	;'C'
   173  00FE3F  4F                 	db	79	;'O'
   174  00FE40  4D                 	db	77	;'M'
   175  00FE41  50                 	db	80	;'P'
   176  00FE42  4C                 	db	76	;'L'
   177  00FE43  45                 	db	69	;'E'
   178  00FE44  54                 	db	84	;'T'
   179  00FE45  45                 	db	69	;'E'
   180  00FE46  44                 	db	68	;'D'
   181  00FE47  21                 	db	33
   182  00FE48  21                 	db	33
   183  00FE49  21                 	db	33
   184  00FE4A  20                 	db	32
   185  00FE4B  20                 	db	32
   186  00FE4C  20                 	db	32
   187  00FE4D  20                 	db	32
   188  00FE4E  20                 	db	32
   189  00FE4F  00                 	db	0
   190  00FE50                     STR_21:
   191  00FE50  3C                 	db	60	;'<'
   192  00FE51  34                 	db	52	;'4'
   193  00FE52  20                 	db	32
   194  00FE53  20                 	db	32
   195  00FE54  42                 	db	66	;'B'
   196  00FE55  61                 	db	97	;'a'
   197  00FE56  63                 	db	99	;'c'
   198  00FE57  6B                 	db	107	;'k'
   199  00FE58  3A                 	db	58	;':'
   200  00FE59  20                 	db	32
   201  00FE5A  20                 	db	32
   202  00FE5B  44                 	db	68	;'D'
   203  00FE5C  20                 	db	32
   204  00FE5D  20                 	db	32
   205  00FE5E  36                 	db	54	;'6'
   206  00FE5F  3E                 	db	62	;'>'
   207  00FE60  20                 	db	32
   208  00FE61  00                 	db	0
   209  00FE62                     STR_34:
   210  00FE62  30                 	db	48	;'0'
   211  00FE63  31                 	db	49	;'1'
   212  00FE64  32                 	db	50	;'2'
   213  00FE65  33                 	db	51	;'3'
   214  00FE66  34                 	db	52	;'4'
   215  00FE67  35                 	db	53	;'5'
   216  00FE68  36                 	db	54	;'6'
   217  00FE69  37                 	db	55	;'7'
   218  00FE6A  38                 	db	56	;'8'
   219  00FE6B  39                 	db	57	;'9'
   220  00FE6C  61                 	db	97	;'a'
   221  00FE6D  62                 	db	98	;'b'
   222  00FE6E  63                 	db	99	;'c'
   223  00FE6F  64                 	db	100	;'d'
   224  00FE70  65                 	db	101	;'e'
   225  00FE71  66                 	db	102	;'f'
   226  00FE72  00                 	db	0
   227  00FE73                     STR_32:
   228  00FE73  20                 	db	32
   229  00FE74  20                 	db	32
   230  00FE75  20                 	db	32
   231  00FE76  20                 	db	32
   232  00FE77  20                 	db	32
   233  00FE78  20                 	db	32
   234  00FE79  20                 	db	32
   235  00FE7A  20                 	db	32
   236  00FE7B  20                 	db	32
   237  00FE7C  20                 	db	32
   238  00FE7D  20                 	db	32
   239  00FE7E  20                 	db	32
   240  00FE7F  20                 	db	32
   241  00FE80  20                 	db	32
   242  00FE81  20                 	db	32
   243  00FE82  20                 	db	32
   244  00FE83  00                 	db	0
   245  00FE84                     STR_30:
   246  00FE84  41                 	db	65	;'A'
   247  00FE85  20                 	db	32
   248  00FE86  74                 	db	116	;'t'
   249  00FE87  6F                 	db	111	;'o'
   250  00FE88  20                 	db	32
   251  00FE89  62                 	db	98	;'b'
   252  00FE8A  61                 	db	97	;'a'
   253  00FE8B  63                 	db	99	;'c'
   254  00FE8C  6B                 	db	107	;'k'
   255  00FE8D  20                 	db	32
   256  00FE8E  20                 	db	32
   257  00FE8F  20                 	db	32
   258  00FE90  20                 	db	32
   259  00FE91  20                 	db	32
   260  00FE92  20                 	db	32
   261  00FE93  20                 	db	32
   262  00FE94  00                 	db	0
   263  00FE95                     STR_24:
   264  00FE95  42                 	db	66	;'B'
   265  00FE96  4F                 	db	79	;'O'
   266  00FE97  54                 	db	84	;'T'
   267  00FE98  54                 	db	84	;'T'
   268  00FE99  4C                 	db	76	;'L'
   269  00FE9A  45                 	db	69	;'E'
   270  00FE9B  20                 	db	32
   271  00FE9C  49                 	db	73	;'I'
   272  00FE9D  4E                 	db	78	;'N'
   273  00FE9E  53                 	db	83	;'S'
   274  00FE9F  49                 	db	73	;'I'
   275  00FEA0  44                 	db	68	;'D'
   276  00FEA1  45                 	db	69	;'E'
   277  00FEA2  20                 	db	32
   278  00FEA3  20                 	db	32
   279  00FEA4  20                 	db	32
   280  00FEA5  00                 	db	0
   281  00FEA6                     STR_8:
   282  00FEA6  41                 	db	65	;'A'
   283  00FEA7  63                 	db	99	;'c'
   284  00FEA8  63                 	db	99	;'c'
   285  00FEA9  65                 	db	101	;'e'
   286  00FEAA  73                 	db	115	;'s'
   287  00FEAB  73                 	db	115	;'s'
   288  00FEAC  20                 	db	32
   289  00FEAD  4C                 	db	76	;'L'
   290  00FEAE  61                 	db	97	;'a'
   291  00FEAF  73                 	db	115	;'s'
   292  00FEB0  74                 	db	116	;'t'
   293  00FEB1  20                 	db	32
   294  00FEB2  52                 	db	82	;'R'
   295  00FEB3  75                 	db	117	;'u'
   296  00FEB4  6E                 	db	110	;'n'
   297  00FEB5  20                 	db	32
   298  00FEB6  00                 	db	0
   299  00FEB7                     STR_31:
   300  00FEB7  73                 	db	115	;'s'
   301  00FEB8  65                 	db	101	;'e'
   302  00FEB9  72                 	db	114	;'r'
   303  00FEBA  76                 	db	118	;'v'
   304  00FEBB  6F                 	db	111	;'o'
   305  00FEBC  20                 	db	32
   306  00FEBD  74                 	db	116	;'t'
   307  00FEBE  65                 	db	101	;'e'
   308  00FEBF  73                 	db	115	;'s'
   309  00FEC0  74                 	db	116	;'t'
   310  00FEC1  69                 	db	105	;'i'
   311  00FEC2  6E                 	db	110	;'n'
   312  00FEC3  67                 	db	103	;'g'
   313  00FEC4  21                 	db	33
   314  00FEC5  21                 	db	33
   315  00FEC6  21                 	db	33
   316  00FEC7  00                 	db	0
   317  00FEC8                     STR_9:
   318  00FEC8  3C                 	db	60	;'<'
   319  00FEC9  34                 	db	52	;'4'
   320  00FECA  20                 	db	32
   321  00FECB  20                 	db	32
   322  00FECC  53                 	db	83	;'S'
   323  00FECD  74                 	db	116	;'t'
   324  00FECE  61                 	db	97	;'a'
   325  00FECF  72                 	db	114	;'r'
   326  00FED0  74                 	db	116	;'t'
   327  00FED1  3A                 	db	58	;':'
   328  00FED2  20                 	db	32
   329  00FED3  41                 	db	65	;'A'
   330  00FED4  20                 	db	32
   331  00FED5  20                 	db	32
   332  00FED6  36                 	db	54	;'6'
   333  00FED7  3E                 	db	62	;'>'
   334  00FED8  00                 	db	0
   335  00FED9                     STR_14:
   336  00FED9  3C                 	db	60	;'<'
   337  00FEDA  34                 	db	52	;'4'
   338  00FEDB  20                 	db	32
   339  00FEDC  20                 	db	32
   340  00FEDD  4E                 	db	78	;'N'
   341  00FEDE  61                 	db	97	;'a'
   342  00FEDF  76                 	db	118	;'v'
   343  00FEE0  3A                 	db	58	;':'
   344  00FEE1  20                 	db	32
   345  00FEE2  41                 	db	65	;'A'
   346  00FEE3  2F                 	db	47
   347  00FEE4  44                 	db	68	;'D'
   348  00FEE5  20                 	db	32
   349  00FEE6  20                 	db	32
   350  00FEE7  36                 	db	54	;'6'
   351  00FEE8  3E                 	db	62	;'>'
   352  00FEE9  00                 	db	0
   353  00FEEA                     STR_20:
   354  00FEEA  45                 	db	69	;'E'
   355  00FEEB  73                 	db	115	;'s'
   356  00FEEC  6B                 	db	107	;'k'
   357  00FEED  61                 	db	97	;'a'
   358  00FEEE  20                 	db	32
   359  00FEEF  77                 	db	119	;'w'
   360  00FEF0  2F                 	db	47
   361  00FEF1  6F                 	db	111	;'o'
   362  00FEF2  20                 	db	32
   363  00FEF3  43                 	db	67	;'C'
   364  00FEF4  61                 	db	97	;'a'
   365  00FEF5  70                 	db	112	;'p'
   366  00FEF6  3A                 	db	58	;':'
   367  00FEF7  20                 	db	32
   368  00FEF8  25                 	db	37
   369  00FEF9  69                 	db	105	;'i'
   370  00FEFA  00                 	db	0
   371  00FEFB                     STR_10:
   372  00FEFB  20                 	db	32
   373  00FEFC  20                 	db	32
   374  00FEFD  20                 	db	32
   375  00FEFE  50                 	db	80	;'P'
   376  00FEFF  61                 	db	97	;'a'
   377  00FF00  73                 	db	115	;'s'
   378  00FF01  74                 	db	116	;'t'
   379  00FF02  20                 	db	32
   380  00FF03  52                 	db	82	;'R'
   381  00FF04  75                 	db	117	;'u'
   382  00FF05  6E                 	db	110	;'n'
   383  00FF06  20                 	db	32
   384  00FF07  31                 	db	49	;'1'
   385  00FF08  20                 	db	32
   386  00FF09  20                 	db	32
   387  00FF0A  00                 	db	0
   388  00FF0B                     STR_11:
   389  00FF0B  20                 	db	32
   390  00FF0C  20                 	db	32
   391  00FF0D  20                 	db	32
   392  00FF0E  50                 	db	80	;'P'
   393  00FF0F  61                 	db	97	;'a'
   394  00FF10  73                 	db	115	;'s'
   395  00FF11  74                 	db	116	;'t'
   396  00FF12  20                 	db	32
   397  00FF13  52                 	db	82	;'R'
   398  00FF14  75                 	db	117	;'u'
   399  00FF15  6E                 	db	110	;'n'
   400  00FF16  20                 	db	32
   401  00FF17  32                 	db	50	;'2'
   402  00FF18  20                 	db	32
   403  00FF19  20                 	db	32
   404  00FF1A  00                 	db	0
   405  00FF1B                     STR_12:
   406  00FF1B  20                 	db	32
   407  00FF1C  20                 	db	32
   408  00FF1D  20                 	db	32
   409  00FF1E  50                 	db	80	;'P'
   410  00FF1F  61                 	db	97	;'a'
   411  00FF20  73                 	db	115	;'s'
   412  00FF21  74                 	db	116	;'t'
   413  00FF22  20                 	db	32
   414  00FF23  52                 	db	82	;'R'
   415  00FF24  75                 	db	117	;'u'
   416  00FF25  6E                 	db	110	;'n'
   417  00FF26  20                 	db	32
   418  00FF27  33                 	db	51	;'3'
   419  00FF28  20                 	db	32
   420  00FF29  20                 	db	32
   421  00FF2A  00                 	db	0
   422  00FF2B                     STR_13:
   423  00FF2B  20                 	db	32
   424  00FF2C  20                 	db	32
   425  00FF2D  20                 	db	32
   426  00FF2E  50                 	db	80	;'P'
   427  00FF2F  61                 	db	97	;'a'
   428  00FF30  73                 	db	115	;'s'
   429  00FF31  74                 	db	116	;'t'
   430  00FF32  20                 	db	32
   431  00FF33  52                 	db	82	;'R'
   432  00FF34  75                 	db	117	;'u'
   433  00FF35  6E                 	db	110	;'n'
   434  00FF36  20                 	db	32
   435  00FF37  34                 	db	52	;'4'
   436  00FF38  20                 	db	32
   437  00FF39  20                 	db	32
   438  00FF3A  00                 	db	0
   439  00FF3B                     STR_22:
   440  00FF3B  2E                 	db	46
   441  00FF3C  2E                 	db	46
   442  00FF3D  2E                 	db	46
   443  00FF3E  4F                 	db	79	;'O'
   444  00FF3F  70                 	db	112	;'p'
   445  00FF40  65                 	db	101	;'e'
   446  00FF41  72                 	db	114	;'r'
   447  00FF42  61                 	db	97	;'a'
   448  00FF43  74                 	db	116	;'t'
   449  00FF44  69                 	db	105	;'i'
   450  00FF45  6E                 	db	110	;'n'
   451  00FF46  67                 	db	103	;'g'
   452  00FF47  2E                 	db	46
   453  00FF48  2E                 	db	46
   454  00FF49  2E                 	db	46
   455  00FF4A  00                 	db	0
   456  00FF4B                     STR_19:
   457  00FF4B  45                 	db	69	;'E'
   458  00FF4C  73                 	db	115	;'s'
   459  00FF4D  6B                 	db	107	;'k'
   460  00FF4E  61                 	db	97	;'a'
   461  00FF4F  20                 	db	32
   462  00FF50  77                 	db	119	;'w'
   463  00FF51  2F                 	db	47
   464  00FF52  20                 	db	32
   465  00FF53  43                 	db	67	;'C'
   466  00FF54  61                 	db	97	;'a'
   467  00FF55  70                 	db	112	;'p'
   468  00FF56  3A                 	db	58	;':'
   469  00FF57  20                 	db	32
   470  00FF58  25                 	db	37
   471  00FF59  69                 	db	105	;'i'
   472  00FF5A  00                 	db	0
   473  00FF5B                     STR_18:
   474  00FF5B  59                 	db	89	;'Y'
   475  00FF5C  6F                 	db	111	;'o'
   476  00FF5D  70                 	db	112	;'p'
   477  00FF5E  20                 	db	32
   478  00FF5F  77                 	db	119	;'w'
   479  00FF60  2F                 	db	47
   480  00FF61  6F                 	db	111	;'o'
   481  00FF62  20                 	db	32
   482  00FF63  43                 	db	67	;'C'
   483  00FF64  61                 	db	97	;'a'
   484  00FF65  70                 	db	112	;'p'
   485  00FF66  3A                 	db	58	;':'
   486  00FF67  20                 	db	32
   487  00FF68  25                 	db	37
   488  00FF69  69                 	db	105	;'i'
   489  00FF6A  00                 	db	0
   490  00FF6B                     STR_15:
   491  00FF6B  54                 	db	84	;'T'
   492  00FF6C  69                 	db	105	;'i'
   493  00FF6D  6D                 	db	109	;'m'
   494  00FF6E  65                 	db	101	;'e'
   495  00FF6F  20                 	db	32
   496  00FF70  74                 	db	116	;'t'
   497  00FF71  61                 	db	97	;'a'
   498  00FF72  6B                 	db	107	;'k'
   499  00FF73  65                 	db	101	;'e'
   500  00FF74  6E                 	db	110	;'n'
   501  00FF75  3A                 	db	58	;':'
   502  00FF76  20                 	db	32
   503  00FF77  25                 	db	37
   504  00FF78  69                 	db	105	;'i'
   505  00FF79  73                 	db	115	;'s'
   506  00FF7A  00                 	db	0
   507  00FF7B                     STR_6:
   508  00FF7B  25                 	db	37
   509  00FF7C  30                 	db	48	;'0'
   510  00FF7D  32                 	db	50	;'2'
   511  00FF7E  78                 	db	120	;'x'
   512  00FF7F  3A                 	db	58	;':'
   513  00FF80  25                 	db	37
   514  00FF81  30                 	db	48	;'0'
   515  00FF82  32                 	db	50	;'2'
   516  00FF83  78                 	db	120	;'x'
   517  00FF84  3A                 	db	58	;':'
   518  00FF85  25                 	db	37
   519  00FF86  30                 	db	48	;'0'
   520  00FF87  32                 	db	50	;'2'
   521  00FF88  78                 	db	120	;'x'
   522  00FF89  00                 	db	0
   523  00FF8A                     STR_23:
   524  00FF8A  4E                 	db	78	;'N'
   525  00FF8B  4F                 	db	79	;'O'
   526  00FF8C  20                 	db	32
   527  00FF8D  42                 	db	66	;'B'
   528  00FF8E  4F                 	db	79	;'O'
   529  00FF8F  54                 	db	84	;'T'
   530  00FF90  54                 	db	84	;'T'
   531  00FF91  4C                 	db	76	;'L'
   532  00FF92  45                 	db	69	;'E'
   533  00FF93  20                 	db	32
   534  00FF94  20                 	db	32
   535  00FF95  20                 	db	32
   536  00FF96  20                 	db	32
   537  00FF97  00                 	db	0
   538  00FF98                     STR_7:
   539  00FF98  41                 	db	65	;'A'
   540  00FF99  63                 	db	99	;'c'
   541  00FF9A  63                 	db	99	;'c'
   542  00FF9B  65                 	db	101	;'e'
   543  00FF9C  73                 	db	115	;'s'
   544  00FF9D  73                 	db	115	;'s'
   545  00FF9E  20                 	db	32
   546  00FF9F  45                 	db	69	;'E'
   547  00FFA0  45                 	db	69	;'E'
   548  00FFA1  50                 	db	80	;'P'
   549  00FFA2  52                 	db	82	;'R'
   550  00FFA3  4F                 	db	79	;'O'
   551  00FFA4  4D                 	db	77	;'M'
   552  00FFA5  00                 	db	0
   553  00FFA6                     STR_4:
   554  00FFA6  42                 	db	66	;'B'
   555  00FFA7  65                 	db	101	;'e'
   556  00FFA8  67                 	db	103	;'g'
   557  00FFA9  69                 	db	105	;'i'
   558  00FFAA  6E                 	db	110	;'n'
   559  00FFAB  20                 	db	32
   560  00FFAC  53                 	db	83	;'S'
   561  00FFAD  6F                 	db	111	;'o'
   562  00FFAE  72                 	db	114	;'r'
   563  00FFAF  74                 	db	116	;'t'
   564  00FFB0  69                 	db	105	;'i'
   565  00FFB1  6E                 	db	110	;'n'
   566  00FFB2  67                 	db	103	;'g'
   567  00FFB3  00                 	db	0
   568  00FFB4                     STR_17:
   569  00FFB4  59                 	db	89	;'Y'
   570  00FFB5  6F                 	db	111	;'o'
   571  00FFB6  70                 	db	112	;'p'
   572  00FFB7  20                 	db	32
   573  00FFB8  77                 	db	119	;'w'
   574  00FFB9  2F                 	db	47
   575  00FFBA  43                 	db	67	;'C'
   576  00FFBB  61                 	db	97	;'a'
   577  00FFBC  70                 	db	112	;'p'
   578  00FFBD  3A                 	db	58	;':'
   579  00FFBE  20                 	db	32
   580  00FFBF  25                 	db	37
   581  00FFC0  69                 	db	105	;'i'
   582  00FFC1  00                 	db	0
   583  00FFC2                     STR_16:
   584  00FFC2  23                 	db	35
   585  00FFC3  20                 	db	32
   586  00FFC4  42                 	db	66	;'B'
   587  00FFC5  6F                 	db	111	;'o'
   588  00FFC6  74                 	db	116	;'t'
   589  00FFC7  74                 	db	116	;'t'
   590  00FFC8  6C                 	db	108	;'l'
   591  00FFC9  65                 	db	101	;'e'
   592  00FFCA  73                 	db	115	;'s'
   593  00FFCB  3A                 	db	58	;':'
   594  00FFCC  20                 	db	32
   595  00FFCD  25                 	db	37
   596  00FFCE  69                 	db	105	;'i'
   597  00FFCF  00                 	db	0
   598  00FFD0                     STR_28:
   599  00FFD0  20                 	db	32
   600  00FFD1  77                 	db	119	;'w'
   601  00FFD2  2F                 	db	47
   602  00FFD3  6F                 	db	111	;'o'
   603  00FFD4  20                 	db	32
   604  00FFD5  43                 	db	67	;'C'
   605  00FFD6  61                 	db	97	;'a'
   606  00FFD7  70                 	db	112	;'p'
   607  00FFD8  20                 	db	32
   608  00FFD9  20                 	db	32
   609  00FFDA  20                 	db	32
   610  00FFDB  20                 	db	32
   611  00FFDC  00                 	db	0
   612  00FFDD                     STR_5:
   613  00FFDD  25                 	db	37
   614  00FFDE  30                 	db	48	;'0'
   615  00FFDF  32                 	db	50	;'2'
   616  00FFE0  78                 	db	120	;'x'
   617  00FFE1  2F                 	db	47
   618  00FFE2  25                 	db	37
   619  00FFE3  30                 	db	48	;'0'
   620  00FFE4  32                 	db	50	;'2'
   621  00FFE5  78                 	db	120	;'x'
   622  00FFE6  20                 	db	32
   623  00FFE7  20                 	db	32
   624  00FFE8  20                 	db	32
   625  00FFE9  00                 	db	0
   626  00FFEA                     STR_27:
   627  00FFEA  20                 	db	32
   628  00FFEB  77                 	db	119	;'w'
   629  00FFEC  2F                 	db	47
   630  00FFED  20                 	db	32
   631  00FFEE  43                 	db	67	;'C'
   632  00FFEF  61                 	db	97	;'a'
   633  00FFF0  70                 	db	112	;'p'
   634  00FFF1  20                 	db	32
   635  00FFF2  20                 	db	32
   636  00FFF3  20                 	db	32
   637  00FFF4  20                 	db	32
   638  00FFF5  00                 	db	0
   639  00FFF6                     STR_26:
   640  00FFF6  45                 	db	69	;'E'
   641  00FFF7  53                 	db	83	;'S'
   642  00FFF8  4B                 	db	75	;'K'
   643  00FFF9  41                 	db	65	;'A'
   644  00FFFA  00                 	db	0
   645  00FFFB                     STR_25:
   646  00FFFB  59                 	db	89	;'Y'
   647  00FFFC  4F                 	db	79	;'O'
   648  00FFFD  50                 	db	80	;'P'
   649  00FFFE  00                 	db	0
   650  0000                     
   651                           ; #config settings
   652  00FFFF  00                 	db	0	; dummy byte at the end
   653  0000                     
   654                           	psect	cinit
   655  00EC08                     __pcinit:
   656                           	opt stack 0
   657  00EC08                     start_initialization:
   658                           	opt stack 0
   659  00EC08                     __initialization:
   660                           	opt stack 0
   661                           
   662                           ; Initialize objects allocated to COMRAM (12 bytes)
   663                           ; load TBLPTR registers with __pidataCOMRAM
   664  00EC08  0E3C               	movlw	low __pidataCOMRAM
   665  00EC0A  6EF6               	movwf	tblptrl,c
   666  00EC0C  0EEB               	movlw	high __pidataCOMRAM
   667  00EC0E  6EF7               	movwf	tblptrh,c
   668  00EC10  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   669  00EC12  6EF8               	movwf	tblptru,c
   670  00EC14  EE00  F049         	lfsr	0,__pdataCOMRAM
   671  00EC18  EE10 F00C          	lfsr	1,12
   672  00EC1C                     copy_data0:
   673  00EC1C  0009               	tblrd		*+
   674  00EC1E  CFF5 FFEE          	movff	tablat,postinc0
   675  00EC22  50E5               	movf	postdec1,w,c
   676  00EC24  50E1               	movf	fsr1l,w,c
   677  00EC26  E1FA               	bnz	copy_data0
   678                           
   679                           ; Clear objects allocated to COMRAM (7 bytes)
   680  00EC28  EE00  F055         	lfsr	0,__pbssCOMRAM
   681  00EC2C  0E07               	movlw	7
   682  00EC2E                     clear_0:
   683  00EC2E  6AEE               	clrf	postinc0,c
   684  00EC30  06E8               	decf	wreg,f,c
   685  00EC32  E1FD               	bnz	clear_0
   686  00EC34                     end_of_initialization:
   687                           	opt stack 0
   688  00EC34                     __end_of__initialization:
   689                           	opt stack 0
   690  00EC34  0100               	movlb	0
   691  00EC36  EF7E  F07A         	goto	_main	;jump to C main() function
   692                           tblptru	equ	0xFF8
   693                           tblptrh	equ	0xFF7
   694                           tblptrl	equ	0xFF6
   695                           tablat	equ	0xFF5
   696                           postinc0	equ	0xFEE
   697                           wreg	equ	0xFE8
   698                           postdec1	equ	0xFE5
   699                           fsr1l	equ	0xFE1
   700                           
   701                           	psect	bssCOMRAM
   702  000055                     __pbssCOMRAM:
   703                           	opt stack 0
   704  000055                     _time:
   705                           	opt stack 0
   706  000055                     	ds	7
   707                           tblptru	equ	0xFF8
   708                           tblptrh	equ	0xFF7
   709                           tblptrl	equ	0xFF6
   710                           tablat	equ	0xFF5
   711                           postinc0	equ	0xFEE
   712                           wreg	equ	0xFE8
   713                           postdec1	equ	0xFE5
   714                           fsr1l	equ	0xFE1
   715                           
   716                           	psect	dataCOMRAM
   717  000049                     __pdataCOMRAM:
   718                           	opt stack 0
   719  000049                     _runInfo:
   720                           	opt stack 0
   721  000049                     	ds	12
   722                           tblptru	equ	0xFF8
   723                           tblptrh	equ	0xFF7
   724                           tblptrl	equ	0xFF6
   725                           tablat	equ	0xFF5
   726                           postinc0	equ	0xFEE
   727                           wreg	equ	0xFE8
   728                           postdec1	equ	0xFE5
   729                           fsr1l	equ	0xFE1
   730                           
   731                           	psect	cstackCOMRAM
   732  000001                     __pcstackCOMRAM:
   733                           	opt stack 0
   734  000001                     ??_isdigit:
   735  000001                     ??_I2C_Master_Wait:
   736  000001                     ?___wmul:
   737                           	opt stack 0
   738  000001                     ?___lwdiv:
   739                           	opt stack 0
   740  000001                     ?___lldiv:
   741                           	opt stack 0
   742  000001                     user_input@keypress:
   743                           	opt stack 0
   744  000001                     lcdNibble@temp:
   745                           	opt stack 0
   746  000001                     ___wmul@multiplier:
   747                           	opt stack 0
   748  000001                     ___lwdiv@dividend:
   749                           	opt stack 0
   750  000001                     ___lldiv@dividend:
   751                           	opt stack 0
   752                           
   753                           ; 4 bytes @ 0x0
   754  000001                     	ds	1
   755  000002                     lcdNibble@data:
   756                           	opt stack 0
   757  000002                     I2C_Master_Read@a:
   758                           	opt stack 0
   759  000002                     _isdigit$852:
   760                           	opt stack 0
   761  000002                     I2C_Master_Write@d:
   762                           	opt stack 0
   763                           
   764                           ; 2 bytes @ 0x1
   765  000002                     	ds	1
   766  000003                     lcdInst@data:
   767                           	opt stack 0
   768  000003                     putch@data:
   769                           	opt stack 0
   770  000003                     I2C_Master_Read@temp:
   771                           	opt stack 0
   772  000003                     isdigit@c:
   773                           	opt stack 0
   774  000003                     ___wmul@multiplicand:
   775                           	opt stack 0
   776  000003                     ___lwdiv@divisor:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x2
   780  000003                     	ds	1
   781  000004                     ??_initLCD:
   782  000004                     updateCurrentTime@i:
   783                           	opt stack 0
   784                           
   785                           ; 1 bytes @ 0x3
   786  000004                     	ds	1
   787  000005                     ___wmul@product:
   788                           	opt stack 0
   789  000005                     ___lwdiv@quotient:
   790                           	opt stack 0
   791  000005                     ___lldiv@divisor:
   792                           	opt stack 0
   793                           
   794                           ; 4 bytes @ 0x4
   795  000005                     	ds	2
   796  000007                     ?_atoi:
   797                           	opt stack 0
   798  000007                     ___lwdiv@counter:
   799                           	opt stack 0
   800  000007                     atoi@s:
   801                           	opt stack 0
   802                           
   803                           ; 2 bytes @ 0x6
   804  000007                     	ds	1
   805  000008                     ?___lwmod:
   806                           	opt stack 0
   807  000008                     ___lwmod@dividend:
   808                           	opt stack 0
   809                           
   810                           ; 2 bytes @ 0x7
   811  000008                     	ds	1
   812  000009                     ??_atoi:
   813  000009                     ___lldiv@quotient:
   814                           	opt stack 0
   815                           
   816                           ; 4 bytes @ 0x8
   817  000009                     	ds	1
   818  00000A                     ___lwmod@divisor:
   819                           	opt stack 0
   820                           
   821                           ; 2 bytes @ 0x9
   822  00000A                     	ds	1
   823  00000B                     atoi@sign:
   824                           	opt stack 0
   825                           
   826                           ; 1 bytes @ 0xA
   827  00000B                     	ds	1
   828  00000C                     ___lwmod@counter:
   829                           	opt stack 0
   830  00000C                     atoi@a:
   831                           	opt stack 0
   832                           
   833                           ; 2 bytes @ 0xB
   834  00000C                     	ds	1
   835  00000D                     ?__doprnt:
   836                           	opt stack 0
   837  00000D                     ___lldiv@counter:
   838                           	opt stack 0
   839  00000D                     __doprnt@pb:
   840                           	opt stack 0
   841                           
   842                           ; 2 bytes @ 0xC
   843  00000D                     	ds	1
   844  00000E                     I2C_Master_Init@c:
   845                           	opt stack 0
   846                           
   847                           ; 4 bytes @ 0xD
   848  00000E                     	ds	1
   849  00000F                     __doprnt@f:
   850                           	opt stack 0
   851                           
   852                           ; 2 bytes @ 0xE
   853  00000F                     	ds	2
   854  000011                     __doprnt@ap:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x10
   858  000011                     	ds	1
   859  000012                     ??_I2C_Master_Init:
   860                           
   861                           ; 1 bytes @ 0x11
   862  000012                     	ds	1
   863  000013                     ??__doprnt:
   864                           
   865                           ; 1 bytes @ 0x12
   866  000013                     	ds	4
   867  000017                     __doprnt@idx:
   868                           	opt stack 0
   869                           
   870                           ; 1 bytes @ 0x16
   871  000017                     	ds	1
   872  000018                     __doprnt@prec:
   873                           	opt stack 0
   874                           
   875                           ; 1 bytes @ 0x17
   876  000018                     	ds	1
   877  000019                     __doprnt@val:
   878                           	opt stack 0
   879                           
   880                           ; 2 bytes @ 0x18
   881  000019                     	ds	2
   882  00001B                     __doprnt@flag:
   883                           	opt stack 0
   884                           
   885                           ; 1 bytes @ 0x1A
   886  00001B                     	ds	1
   887  00001C                     __doprnt@width:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x1B
   891  00001C                     	ds	2
   892  00001E                     __doprnt@c:
   893                           	opt stack 0
   894                           
   895                           ; 1 bytes @ 0x1D
   896  00001E                     	ds	1
   897  00001F                     ?_sprintf:
   898                           	opt stack 0
   899  00001F                     ?_printf:
   900                           	opt stack 0
   901  00001F                     printf@f:
   902                           	opt stack 0
   903  00001F                     sprintf@wh:
   904                           	opt stack 0
   905                           
   906                           ; 2 bytes @ 0x1E
   907  00001F                     	ds	2
   908  000021                     sprintf@f:
   909                           	opt stack 0
   910                           
   911                           ; 2 bytes @ 0x20
   912  000021                     	ds	4
   913  000025                     sprintf@ap:
   914                           	opt stack 0
   915                           
   916                           ; 2 bytes @ 0x24
   917  000025                     	ds	2
   918  000027                     printf@ap:
   919                           	opt stack 0
   920  000027                     sprintf@pb:
   921                           	opt stack 0
   922                           
   923                           ; 4 bytes @ 0x26
   924  000027                     	ds	2
   925  000029                     printf@pb:
   926                           	opt stack 0
   927                           
   928                           ; 4 bytes @ 0x28
   929  000029                     	ds	2
   930  00002B                     ?_getCurrentTime:
   931                           	opt stack 0
   932                           
   933                           ; 2 bytes @ 0x2A
   934  00002B                     	ds	2
   935  00002D                     ??_activateServo:
   936  00002D                     getCurrentTime@currentTime:
   937                           	opt stack 0
   938  00002D                     update_init_screen_state@num:
   939                           	opt stack 0
   940  00002D                     update_eeprom_screen_state@num:
   941                           	opt stack 0
   942  00002D                     update_past_run_screen_state@num:
   943                           	opt stack 0
   944                           
   945                           ; 2 bytes @ 0x2C
   946  00002D                     	ds	2
   947  00002F                     ??_update_init_screen_state:
   948  00002F                     ??_update_eeprom_screen_state:
   949  00002F                     ??_update_past_run_screen_state:
   950  00002F                     _getCurrentTime$1224:
   951                           	opt stack 0
   952                           
   953                           ; 2 bytes @ 0x2E
   954  00002F                     	ds	2
   955  000031                     ??_past_run_access:
   956  000031                     getCurrentTime@str:
   957                           	opt stack 0
   958                           
   959                           ; 2 bytes @ 0x30
   960  000031                     	ds	1
   961  000032                     past_run_access@temp:
   962                           	opt stack 0
   963                           
   964                           ; 1 bytes @ 0x31
   965  000032                     	ds	1
   966  000033                     ??_operation:
   967  000033                     past_run_access@screen_state:
   968                           	opt stack 0
   969                           
   970                           ; 2 bytes @ 0x32
   971  000033                     	ds	2
   972  000035                     ??_EEPROM:
   973  000035                     operation@currentBin:
   974                           	opt stack 0
   975                           
   976                           ; 2 bytes @ 0x34
   977  000035                     	ds	1
   978  000036                     EEPROM@temp:
   979                           	opt stack 0
   980                           
   981                           ; 1 bytes @ 0x35
   982  000036                     	ds	1
   983  000037                     operation@startingTime:
   984                           	opt stack 0
   985  000037                     EEPROM@screen_state:
   986                           	opt stack 0
   987                           
   988                           ; 2 bytes @ 0x36
   989  000037                     	ds	2
   990  000039                     operation@bottle:
   991                           	opt stack 0
   992                           
   993                           ; 2 bytes @ 0x38
   994  000039                     	ds	2
   995  00003B                     operation@endingTime:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x3A
   999  00003B                     	ds	2
  1000  00003D                     operation@temp:
  1001                           	opt stack 0
  1002                           
  1003                           ; 1 bytes @ 0x3C
  1004  00003D                     	ds	1
  1005  00003E                     operation@bottle_type:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0x3D
  1009  00003E                     	ds	2
  1010  000040                     operation@bottle_cap:
  1011                           	opt stack 0
  1012                           
  1013                           ; 2 bytes @ 0x3F
  1014  000040                     	ds	2
  1015  000042                     operation@i:
  1016                           	opt stack 0
  1017                           
  1018                           ; 2 bytes @ 0x41
  1019  000042                     	ds	2
  1020  000044                     ??_main:
  1021                           
  1022                           ; 1 bytes @ 0x43
  1023  000044                     	ds	2
  1024  000046                     main@temp:
  1025                           	opt stack 0
  1026                           
  1027                           ; 1 bytes @ 0x45
  1028  000046                     	ds	1
  1029  000047                     main@screen_state:
  1030                           	opt stack 0
  1031                           
  1032                           ; 2 bytes @ 0x46
  1033  000047                     	ds	2
  1034                           tblptru	equ	0xFF8
  1035                           tblptrh	equ	0xFF7
  1036                           tblptrl	equ	0xFF6
  1037                           tablat	equ	0xFF5
  1038                           postinc0	equ	0xFEE
  1039                           wreg	equ	0xFE8
  1040                           postdec1	equ	0xFE5
  1041                           fsr1l	equ	0xFE1
  1042                           
  1043 ;;
  1044 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1045 ;;
  1046 ;; *************** function _main *****************
  1047 ;; Defined at:
  1048 ;;		line 38 in file "main.c"
  1049 ;; Parameters:    Size  Location     Type
  1050 ;;		None
  1051 ;; Auto vars:     Size  Location     Type
  1052 ;;  temp            1   69[COMRAM] unsigned char 
  1053 ;;  screen_state    2   70[COMRAM] int 
  1054 ;; Return value:  Size  Location     Type
  1055 ;;                  1    wreg      void 
  1056 ;; Registers used:
  1057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1058 ;; Tracked objects:
  1059 ;;		On entry : 0/0
  1060 ;;		On exit  : 0/0
  1061 ;;		Unchanged: 0/0
  1062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1064 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1065 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1066 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1067 ;;Total ram usage:        5 bytes
  1068 ;; Hardware stack levels required when called:    8
  1069 ;; This function calls:
  1070 ;;		_EEPROM
  1071 ;;		_I2C_Master_Init
  1072 ;;		_activateServo
  1073 ;;		_initLCD
  1074 ;;		_operation
  1075 ;;		_past_run_access
  1076 ;;		_update_init_screen_state
  1077 ;;		_user_input
  1078 ;; This function is called by:
  1079 ;;		Startup code after reset
  1080 ;; This function uses a non-reentrant model
  1081 ;;
  1082                           
  1083                           	psect	text0
  1084  00F4FC                     __ptext0:
  1085                           	opt stack 0
  1086  00F4FC                     _main:
  1087                           	opt stack 23
  1088                           
  1089                           ;main.c: 39: TRISA = 0xFF;
  1090                           
  1091                           ;incstack = 0
  1092  00F4FC  6892               	setf	3986,c	;volatile
  1093                           
  1094                           ;main.c: 40: TRISB = 0xFF;
  1095  00F4FE  6893               	setf	3987,c	;volatile
  1096                           
  1097                           ;main.c: 41: TRISC = 0x00;
  1098  00F500  0E00               	movlw	0
  1099  00F502  6E94               	movwf	3988,c	;volatile
  1100                           
  1101                           ;main.c: 42: TRISD = 0x00;
  1102  00F504  0E00               	movlw	0
  1103  00F506  6E95               	movwf	3989,c	;volatile
  1104                           
  1105                           ;main.c: 43: TRISE = 0x00;
  1106  00F508  0E00               	movlw	0
  1107  00F50A  6E96               	movwf	3990,c	;volatile
  1108                           
  1109                           ;main.c: 45: LATB = 0x00;
  1110  00F50C  0E00               	movlw	0
  1111  00F50E  6E8A               	movwf	3978,c	;volatile
  1112                           
  1113                           ;main.c: 46: LATC = 0x00;
  1114  00F510  0E00               	movlw	0
  1115  00F512  6E8B               	movwf	3979,c	;volatile
  1116                           
  1117                           ;main.c: 47: LATD = 0x00;
  1118  00F514  0E00               	movlw	0
  1119  00F516  6E8C               	movwf	3980,c	;volatile
  1120                           
  1121                           ;main.c: 48: LATE = 0x00;
  1122  00F518  0E00               	movlw	0
  1123  00F51A  6E8D               	movwf	3981,c	;volatile
  1124                           
  1125                           ;main.c: 50: ADCON0 = 0x00;
  1126  00F51C  0E00               	movlw	0
  1127  00F51E  6EC2               	movwf	4034,c	;volatile
  1128                           
  1129                           ;main.c: 51: ADCON1 = 0xFF;
  1130  00F520  68C1               	setf	4033,c	;volatile
  1131                           
  1132                           ;main.c: 52: nRBPU = 0;
  1133  00F522  9EF1               	bcf	intcon2,7,c	;volatile
  1134                           
  1135                           ;main.c: 53: initLCD();
  1136  00F524  EC7A  F076         	call	_initLCD	;wreg free
  1137                           
  1138                           ;main.c: 55: I2C_Master_Init(10000);
  1139  00F528  0E10               	movlw	16
  1140  00F52A  6E0E               	movwf	I2C_Master_Init@c,c
  1141  00F52C  0E27               	movlw	39
  1142  00F52E  6E0F               	movwf	I2C_Master_Init@c+1,c
  1143  00F530  0E00               	movlw	0
  1144  00F532  6E10               	movwf	I2C_Master_Init@c+2,c
  1145  00F534  0E00               	movlw	0
  1146  00F536  6E11               	movwf	I2C_Master_Init@c+3,c
  1147  00F538  ECF1  F076         	call	_I2C_Master_Init	;wreg free
  1148                           
  1149                           ;main.c: 56: (INTCONbits.GIE = 0);
  1150  00F53C  9EF2               	bcf	intcon,7,c	;volatile
  1151                           
  1152                           ;main.c: 58: int screen_state = 0;
  1153  00F53E  0E00               	movlw	0
  1154  00F540  6E48               	movwf	main@screen_state+1,c
  1155  00F542  0E00               	movlw	0
  1156  00F544  6E47               	movwf	main@screen_state,c
  1157                           
  1158                           ;main.c: 59: update_init_screen_state(screen_state);
  1159  00F546  C047  F02D         	movff	main@screen_state,update_init_screen_state@num
  1160  00F54A  C048  F02E         	movff	main@screen_state+1,update_init_screen_state@num+1
  1161  00F54E  EC09  F078         	call	_update_init_screen_state	;wreg free
  1162  00F552                     l2440:
  1163                           
  1164                           ;main.c: 62: unsigned char temp = keys[user_input()];
  1165  00F552  ECAD  F075         	call	_user_input	;wreg free
  1166  00F556  6E44               	movwf	??_main& (0+255),c
  1167  00F558  5044               	movf	??_main,w,c
  1168  00F55A  0D01               	mullw	1
  1169  00F55C  0E1B               	movlw	low _keys
  1170  00F55E  24F3               	addwf	prodl,w,c
  1171  00F560  6EF6               	movwf	tblptrl,c
  1172  00F562  0EFE               	movlw	high _keys
  1173  00F564  20F4               	addwfc	prodh,w,c
  1174  00F566  6EF7               	movwf	tblptrh,c
  1175  00F568                     	if	1	;There are 3 active tblptr bytes
  1176  00F568  6AF8               	clrf	tblptru,c
  1177  00F56A  0E00               	movlw	low (__mediumconst shr (0+16))
  1178  00F56C  22F8               	addwfc	tblptru,f,c
  1179  00F56E                     	endif
  1180  00F56E  0008               	tblrd		*
  1181  00F570  CFF5 F046          	movff	tablat,main@temp
  1182                           
  1183                           ;main.c: 63: if (temp == keys[3]){
  1184  00F574  0E1E               	movlw	low (_keys+3)
  1185  00F576  6EF6               	movwf	tblptrl,c
  1186  00F578  0EFE               	movlw	high (_keys+3)
  1187  00F57A  6EF7               	movwf	tblptrh,c
  1188  00F57C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1189  00F57C  6AF8               	clrf	tblptru,c
  1190  00F57E                     	endif
  1191  00F57E                     	if	0	;tblptru may be non-zero
  1192  00F57E                     	endif
  1193  00F57E  0008               	tblrd		*
  1194  00F580  50F5               	movf	tablat,w,c
  1195  00F582  1846               	xorwf	main@temp,w,c
  1196  00F584  B4D8               	btfsc	status,2,c
  1197  00F586  D00D               	goto	l2456
  1198  00F588  D028               	goto	l2460
  1199  00F58A                     l2446:
  1200  00F58A  EC31  F07B         	call	_operation	;wreg free
  1201                           
  1202                           ;main.c: 66: break;
  1203  00F58E  D01E               	goto	l2458
  1204  00F590                     l2448:
  1205  00F590  EC1E  F077         	call	_activateServo	;wreg free
  1206                           
  1207                           ;main.c: 68: break;
  1208  00F594  D01B               	goto	l2458
  1209  00F596                     l2450:
  1210  00F596  EC96  F079         	call	_EEPROM	;wreg free
  1211                           
  1212                           ;main.c: 70: break;
  1213  00F59A  D018               	goto	l2458
  1214  00F59C                     l2452:
  1215  00F59C  EC66  F078         	call	_past_run_access	;wreg free
  1216                           
  1217                           ;main.c: 73: }
  1218                           
  1219                           ;main.c: 72: break;
  1220  00F5A0  D015               	goto	l2458
  1221  00F5A2                     l2456:
  1222  00F5A2  C047  F044         	movff	main@screen_state,??_main
  1223  00F5A6  C048  F045         	movff	main@screen_state+1,??_main+1
  1224                           
  1225                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1226                           ; Switch size 1, requested type "space"
  1227                           ; Number of cases is 1, Range of values is 0 to 0
  1228                           ; switch strategies available:
  1229                           ; Name         Instructions Cycles
  1230                           ; simple_byte            4     3 (average)
  1231                           ;	Chosen strategy is simple_byte
  1232  00F5AA  5045               	movf	??_main+1,w,c
  1233  00F5AC  0A00               	xorlw	0	; case 0
  1234  00F5AE  A4D8               	btfss	status,2,c
  1235  00F5B0  D00D               	goto	l2458
  1236                           
  1237                           ; Switch size 1, requested type "space"
  1238                           ; Number of cases is 4, Range of values is 0 to 3
  1239                           ; switch strategies available:
  1240                           ; Name         Instructions Cycles
  1241                           ; simple_byte           13     7 (average)
  1242                           ;	Chosen strategy is simple_byte
  1243  00F5B2  5044               	movf	??_main,w,c
  1244  00F5B4  0A00               	xorlw	0	; case 0
  1245  00F5B6  B4D8               	btfsc	status,2,c
  1246  00F5B8  D7E8               	goto	l2446
  1247  00F5BA  0A01               	xorlw	1	; case 1
  1248  00F5BC  B4D8               	btfsc	status,2,c
  1249  00F5BE  D7E8               	goto	l2448
  1250  00F5C0  0A03               	xorlw	3	; case 2
  1251  00F5C2  B4D8               	btfsc	status,2,c
  1252  00F5C4  D7E8               	goto	l2450
  1253  00F5C6  0A01               	xorlw	1	; case 3
  1254  00F5C8  B4D8               	btfsc	status,2,c
  1255  00F5CA  D7E8               	goto	l2452
  1256  00F5CC                     l2458:
  1257                           
  1258                           ;main.c: 74: update_init_screen_state(screen_state);
  1259  00F5CC  C047  F02D         	movff	main@screen_state,update_init_screen_state@num
  1260  00F5D0  C048  F02E         	movff	main@screen_state+1,update_init_screen_state@num+1
  1261  00F5D4  EC09  F078         	call	_update_init_screen_state	;wreg free
  1262                           
  1263                           ;main.c: 75: }else if (temp == keys[4]){
  1264  00F5D8  D039               	goto	l2480
  1265  00F5DA                     l2460:
  1266  00F5DA  0E1F               	movlw	low (_keys+4)
  1267  00F5DC  6EF6               	movwf	tblptrl,c
  1268  00F5DE  0EFE               	movlw	high (_keys+4)
  1269  00F5E0  6EF7               	movwf	tblptrh,c
  1270  00F5E2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1271  00F5E2  6AF8               	clrf	tblptru,c
  1272  00F5E4                     	endif
  1273  00F5E4                     	if	0	;tblptru may be non-zero
  1274  00F5E4                     	endif
  1275  00F5E4  0008               	tblrd		*
  1276  00F5E6  50F5               	movf	tablat,w,c
  1277  00F5E8  1846               	xorwf	main@temp,w,c
  1278  00F5EA  A4D8               	btfss	status,2,c
  1279  00F5EC  D013               	goto	l2470
  1280                           
  1281                           ;main.c: 76: if (screen_state == 0){
  1282  00F5EE  5047               	movf	main@screen_state,w,c
  1283  00F5F0  1048               	iorwf	main@screen_state+1,w,c
  1284  00F5F2  A4D8               	btfss	status,2,c
  1285  00F5F4  D005               	goto	l2466
  1286                           
  1287                           ;main.c: 77: screen_state = 3;
  1288  00F5F6  0E00               	movlw	0
  1289  00F5F8  6E48               	movwf	main@screen_state+1,c
  1290  00F5FA  0E03               	movlw	3
  1291  00F5FC  6E47               	movwf	main@screen_state,c
  1292                           
  1293                           ;main.c: 78: }else{
  1294  00F5FE  D003               	goto	l2468
  1295  00F600                     l2466:
  1296                           
  1297                           ;main.c: 79: screen_state -= 1;
  1298  00F600  0647               	decf	main@screen_state,f,c
  1299  00F602  A0D8               	btfss	status,0,c
  1300  00F604  0648               	decf	main@screen_state+1,f,c
  1301  00F606                     l2468:
  1302                           
  1303                           ;main.c: 80: }
  1304                           ;main.c: 81: update_init_screen_state(screen_state);
  1305  00F606  C047  F02D         	movff	main@screen_state,update_init_screen_state@num
  1306  00F60A  C048  F02E         	movff	main@screen_state+1,update_init_screen_state@num+1
  1307  00F60E  EC09  F078         	call	_update_init_screen_state	;wreg free
  1308                           
  1309                           ;main.c: 82: }else if (temp == keys[6]){
  1310  00F612  D01C               	goto	l2480
  1311  00F614                     l2470:
  1312  00F614  0E21               	movlw	low (_keys+6)
  1313  00F616  6EF6               	movwf	tblptrl,c
  1314  00F618  0EFE               	movlw	high (_keys+6)
  1315  00F61A  6EF7               	movwf	tblptrh,c
  1316  00F61C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1317  00F61C  6AF8               	clrf	tblptru,c
  1318  00F61E                     	endif
  1319  00F61E                     	if	0	;tblptru may be non-zero
  1320  00F61E                     	endif
  1321  00F61E  0008               	tblrd		*
  1322  00F620  50F5               	movf	tablat,w,c
  1323  00F622  1846               	xorwf	main@temp,w,c
  1324  00F624  A4D8               	btfss	status,2,c
  1325  00F626  D012               	goto	l2480
  1326                           
  1327                           ;main.c: 83: if (screen_state == 3){
  1328  00F628  0E03               	movlw	3
  1329  00F62A  1847               	xorwf	main@screen_state,w,c
  1330  00F62C  1048               	iorwf	main@screen_state+1,w,c
  1331  00F62E  A4D8               	btfss	status,2,c
  1332  00F630  D005               	goto	l2476
  1333                           
  1334                           ;main.c: 84: screen_state = 0;
  1335  00F632  0E00               	movlw	0
  1336  00F634  6E48               	movwf	main@screen_state+1,c
  1337  00F636  0E00               	movlw	0
  1338  00F638  6E47               	movwf	main@screen_state,c
  1339                           
  1340                           ;main.c: 85: }else{
  1341  00F63A  D002               	goto	l2478
  1342  00F63C                     l2476:
  1343                           
  1344                           ;main.c: 86: screen_state += 1;
  1345  00F63C  4A47               	infsnz	main@screen_state,f,c
  1346  00F63E  2A48               	incf	main@screen_state+1,f,c
  1347  00F640                     l2478:
  1348                           
  1349                           ;main.c: 87: }
  1350                           ;main.c: 88: update_init_screen_state(screen_state);
  1351  00F640  C047  F02D         	movff	main@screen_state,update_init_screen_state@num
  1352  00F644  C048  F02E         	movff	main@screen_state+1,update_init_screen_state@num+1
  1353  00F648  EC09  F078         	call	_update_init_screen_state	;wreg free
  1354  00F64C                     l2480:
  1355                           
  1356                           ;main.c: 89: }
  1357                           ;main.c: 90: if (screen_state == 1){
  1358  00F64C  0447               	decf	main@screen_state,w,c
  1359  00F64E  1048               	iorwf	main@screen_state+1,w,c
  1360  00F650  A4D8               	btfss	status,2,c
  1361  00F652  D77F               	goto	l2440
  1362                           
  1363                           ;main.c: 91: update_init_screen_state(screen_state);
  1364  00F654  C047  F02D         	movff	main@screen_state,update_init_screen_state@num
  1365  00F658  C048  F02E         	movff	main@screen_state+1,update_init_screen_state@num+1
  1366  00F65C  EC09  F078         	call	_update_init_screen_state	;wreg free
  1367  00F660  D778               	goto	l2440
  1368  00F662                     __end_of_main:
  1369                           	opt stack 0
  1370                           tblptru	equ	0xFF8
  1371                           tblptrh	equ	0xFF7
  1372                           tblptrl	equ	0xFF6
  1373                           tablat	equ	0xFF5
  1374                           prodh	equ	0xFF4
  1375                           prodl	equ	0xFF3
  1376                           intcon	equ	0xFF2
  1377                           intcon2	equ	0xFF1
  1378                           postinc0	equ	0xFEE
  1379                           wreg	equ	0xFE8
  1380                           postdec1	equ	0xFE5
  1381                           fsr1l	equ	0xFE1
  1382                           status	equ	0xFD8
  1383                           
  1384 ;; *************** function _update_init_screen_state *****************
  1385 ;; Defined at:
  1386 ;;		line 138 in file "main.c"
  1387 ;; Parameters:    Size  Location     Type
  1388 ;;  num             2   44[COMRAM] int 
  1389 ;; Auto vars:     Size  Location     Type
  1390 ;;		None
  1391 ;; Return value:  Size  Location     Type
  1392 ;;                  1    wreg      void 
  1393 ;; Registers used:
  1394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1395 ;; Tracked objects:
  1396 ;;		On entry : 0/0
  1397 ;;		On exit  : 0/0
  1398 ;;		Unchanged: 0/0
  1399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1400 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1402 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1403 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1404 ;;Total ram usage:        4 bytes
  1405 ;; Hardware stack levels used:    1
  1406 ;; Hardware stack levels required when called:    5
  1407 ;; This function calls:
  1408 ;;		_lcdClear
  1409 ;;		_lcdInst
  1410 ;;		_printf
  1411 ;;		_updateCurrentTime
  1412 ;; This function is called by:
  1413 ;;		_main
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417                           	psect	text1
  1418  00F012                     __ptext1:
  1419                           	opt stack 0
  1420  00F012                     _update_init_screen_state:
  1421                           	opt stack 25
  1422                           
  1423                           ;main.c: 139: lcdClear();
  1424                           
  1425                           ;incstack = 0
  1426  00F012  ECEE  F075         	call	_lcdClear	;wreg free
  1427                           
  1428                           ;main.c: 140: switch(num){
  1429  00F016  D03B               	goto	l2274
  1430  00F018                     l2258:
  1431                           
  1432                           ;main.c: 142: lcdClear();
  1433  00F018  ECEE  F075         	call	_lcdClear	;wreg free
  1434                           
  1435                           ;main.c: 143: printf("Begin Sorting");
  1436  00F01C  0EA6               	movlw	low STR_4
  1437  00F01E  6E1F               	movwf	printf@f,c
  1438  00F020  0EFF               	movlw	high STR_4
  1439  00F022  6E20               	movwf	printf@f+1,c
  1440  00F024  EC1D  F076         	call	_printf	;wreg free
  1441                           
  1442                           ;main.c: 144: break;
  1443  00F028  D047               	goto	l2276
  1444  00F02A                     l2260:
  1445                           
  1446                           ;main.c: 146: updateCurrentTime();
  1447  00F02A  EC4F  F077         	call	_updateCurrentTime	;wreg free
  1448                           
  1449                           ;main.c: 147: lcdClear();
  1450  00F02E  ECEE  F075         	call	_lcdClear	;wreg free
  1451                           
  1452                           ;main.c: 148: printf("%02x/%02x   ", time[5],time[4]);
  1453  00F032  0EDD               	movlw	low STR_5
  1454  00F034  6E1F               	movwf	printf@f,c
  1455  00F036  0EFF               	movlw	high STR_5
  1456  00F038  6E20               	movwf	printf@f+1,c
  1457  00F03A  C05A  F021         	movff	_time+5,?_printf+2
  1458  00F03E  6A22               	clrf	?_printf+3,c
  1459  00F040  C059  F023         	movff	_time+4,?_printf+4
  1460  00F044  6A24               	clrf	?_printf+5,c
  1461  00F046  EC1D  F076         	call	_printf	;wreg free
  1462                           
  1463                           ;main.c: 149: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  1464  00F04A  0E7B               	movlw	low STR_6
  1465  00F04C  6E1F               	movwf	printf@f,c
  1466  00F04E  0EFF               	movlw	high STR_6
  1467  00F050  6E20               	movwf	printf@f+1,c
  1468  00F052  C057  F021         	movff	_time+2,?_printf+2
  1469  00F056  6A22               	clrf	?_printf+3,c
  1470  00F058  C056  F023         	movff	_time+1,?_printf+4
  1471  00F05C  6A24               	clrf	?_printf+5,c
  1472  00F05E  C055  F025         	movff	_time,?_printf+6
  1473  00F062  6A26               	clrf	?_printf+7,c
  1474  00F064  EC1D  F076         	call	_printf	;wreg free
  1475                           
  1476                           ;main.c: 150: break;
  1477  00F068  D027               	goto	l2276
  1478  00F06A                     l2268:
  1479                           
  1480                           ;main.c: 152: lcdClear();
  1481  00F06A  ECEE  F075         	call	_lcdClear	;wreg free
  1482                           
  1483                           ;main.c: 153: printf("Access EEPROM");
  1484  00F06E  0E98               	movlw	low STR_7
  1485  00F070  6E1F               	movwf	printf@f,c
  1486  00F072  0EFF               	movlw	high STR_7
  1487  00F074  6E20               	movwf	printf@f+1,c
  1488  00F076  EC1D  F076         	call	_printf	;wreg free
  1489                           
  1490                           ;main.c: 154: break;
  1491  00F07A  D01E               	goto	l2276
  1492  00F07C                     l2270:
  1493                           
  1494                           ;main.c: 156: lcdClear();
  1495  00F07C  ECEE  F075         	call	_lcdClear	;wreg free
  1496                           
  1497                           ;main.c: 157: printf("Access Last Run ");
  1498  00F080  0EA6               	movlw	low STR_8
  1499  00F082  6E1F               	movwf	printf@f,c
  1500  00F084  0EFE               	movlw	high STR_8
  1501  00F086  6E20               	movwf	printf@f+1,c
  1502  00F088  EC1D  F076         	call	_printf	;wreg free
  1503                           
  1504                           ;main.c: 159: }
  1505                           
  1506                           ;main.c: 158: break;
  1507  00F08C  D015               	goto	l2276
  1508  00F08E                     l2274:
  1509  00F08E  C02D  F02F         	movff	update_init_screen_state@num,??_update_init_screen_state
  1510  00F092  C02E  F030         	movff	update_init_screen_state@num+1,??_update_init_screen_state+1
  1511                           
  1512                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1513                           ; Switch size 1, requested type "space"
  1514                           ; Number of cases is 1, Range of values is 0 to 0
  1515                           ; switch strategies available:
  1516                           ; Name         Instructions Cycles
  1517                           ; simple_byte            4     3 (average)
  1518                           ;	Chosen strategy is simple_byte
  1519  00F096  5030               	movf	??_update_init_screen_state+1,w,c
  1520  00F098  0A00               	xorlw	0	; case 0
  1521  00F09A  A4D8               	btfss	status,2,c
  1522  00F09C  D00D               	goto	l2276
  1523                           
  1524                           ; Switch size 1, requested type "space"
  1525                           ; Number of cases is 4, Range of values is 0 to 3
  1526                           ; switch strategies available:
  1527                           ; Name         Instructions Cycles
  1528                           ; simple_byte           13     7 (average)
  1529                           ;	Chosen strategy is simple_byte
  1530  00F09E  502F               	movf	??_update_init_screen_state,w,c
  1531  00F0A0  0A00               	xorlw	0	; case 0
  1532  00F0A2  B4D8               	btfsc	status,2,c
  1533  00F0A4  D7B9               	goto	l2258
  1534  00F0A6  0A01               	xorlw	1	; case 1
  1535  00F0A8  B4D8               	btfsc	status,2,c
  1536  00F0AA  D7BF               	goto	l2260
  1537  00F0AC  0A03               	xorlw	3	; case 2
  1538  00F0AE  B4D8               	btfsc	status,2,c
  1539  00F0B0  D7DC               	goto	l2268
  1540  00F0B2  0A01               	xorlw	1	; case 3
  1541  00F0B4  B4D8               	btfsc	status,2,c
  1542  00F0B6  D7E2               	goto	l2270
  1543  00F0B8                     l2276:
  1544                           
  1545                           ;main.c: 160: lcdInst(0b11000000);;
  1546  00F0B8  0EC0               	movlw	192
  1547  00F0BA  EC92  F075         	call	_lcdInst
  1548                           
  1549                           ;main.c: 161: printf("<4  Start: A  6>");
  1550  00F0BE  0EC8               	movlw	low STR_9
  1551  00F0C0  6E1F               	movwf	printf@f,c
  1552  00F0C2  0EFE               	movlw	high STR_9
  1553  00F0C4  6E20               	movwf	printf@f+1,c
  1554  00F0C6  EC1D  F076         	call	_printf	;wreg free
  1555  00F0CA  0012               	return		;funcret
  1556  00F0CC                     __end_of_update_init_screen_state:
  1557                           	opt stack 0
  1558                           tblptru	equ	0xFF8
  1559                           tblptrh	equ	0xFF7
  1560                           tblptrl	equ	0xFF6
  1561                           tablat	equ	0xFF5
  1562                           prodh	equ	0xFF4
  1563                           prodl	equ	0xFF3
  1564                           intcon	equ	0xFF2
  1565                           intcon2	equ	0xFF1
  1566                           postinc0	equ	0xFEE
  1567                           wreg	equ	0xFE8
  1568                           postdec1	equ	0xFE5
  1569                           fsr1l	equ	0xFE1
  1570                           status	equ	0xFD8
  1571                           
  1572 ;; *************** function _operation *****************
  1573 ;; Defined at:
  1574 ;;		line 223 in file "main.c"
  1575 ;; Parameters:    Size  Location     Type
  1576 ;;		None
  1577 ;; Auto vars:     Size  Location     Type
  1578 ;;  bottle          2   56[COMRAM] int 
  1579 ;;  temp            1   60[COMRAM] unsigned char 
  1580 ;;  i               2   65[COMRAM] int 
  1581 ;;  bottle_cap      2   63[COMRAM] int 
  1582 ;;  bottle_type     2   61[COMRAM] int 
  1583 ;;  endingTime      2   58[COMRAM] int 
  1584 ;;  startingTime    2   54[COMRAM] int 
  1585 ;;  currentBin      2   52[COMRAM] int 
  1586 ;; Return value:  Size  Location     Type
  1587 ;;                  1    wreg      void 
  1588 ;; Registers used:
  1589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1590 ;; Tracked objects:
  1591 ;;		On entry : 0/0
  1592 ;;		On exit  : 0/0
  1593 ;;		Unchanged: 0/0
  1594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1596 ;;      Locals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1597 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1598 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1599 ;;Total ram usage:       17 bytes
  1600 ;; Hardware stack levels used:    1
  1601 ;; Hardware stack levels required when called:    5
  1602 ;; This function calls:
  1603 ;;		_getCurrentTime
  1604 ;;		_lcdClear
  1605 ;;		_lcdInst
  1606 ;;		_printf
  1607 ;;		_updateCurrentTime
  1608 ;;		_user_input
  1609 ;; This function is called by:
  1610 ;;		_main
  1611 ;; This function uses a non-reentrant model
  1612 ;;
  1613                           
  1614                           	psect	text2
  1615  00F662                     __ptext2:
  1616                           	opt stack 0
  1617  00F662                     _operation:
  1618                           	opt stack 25
  1619                           
  1620                           ;main.c: 224: PORTCbits.RC0 = 1;
  1621                           
  1622                           ;incstack = 0
  1623  00F662  8082               	bsf	3970,0,c	;volatile
  1624                           
  1625                           ;main.c: 225: int currentBin = 0;
  1626  00F664  0E00               	movlw	0
  1627  00F666  6E36               	movwf	operation@currentBin+1,c
  1628  00F668  0E00               	movlw	0
  1629  00F66A  6E35               	movwf	operation@currentBin,c
  1630                           
  1631                           ;main.c: 226: int bottle_type = 0;
  1632  00F66C  0E00               	movlw	0
  1633  00F66E  6E3F               	movwf	operation@bottle_type+1,c
  1634  00F670  0E00               	movlw	0
  1635  00F672  6E3E               	movwf	operation@bottle_type,c
  1636                           
  1637                           ;main.c: 227: int bottle_cap = 0;
  1638  00F674  0E00               	movlw	0
  1639  00F676  6E41               	movwf	operation@bottle_cap+1,c
  1640  00F678  0E00               	movlw	0
  1641  00F67A  6E40               	movwf	operation@bottle_cap,c
  1642                           
  1643                           ;main.c: 228: int i;
  1644                           ;main.c: 229: for (i=0;i<6;i++){
  1645  00F67C  0E00               	movlw	0
  1646  00F67E  6E43               	movwf	operation@i+1,c
  1647  00F680  0E00               	movlw	0
  1648  00F682  6E42               	movwf	operation@i,c
  1649  00F684                     l2288:
  1650  00F684  BE43               	btfsc	operation@i+1,7,c
  1651  00F686  D006               	goto	l2292
  1652  00F688  5043               	movf	operation@i+1,w,c
  1653  00F68A  E114               	bnz	l2298
  1654  00F68C  0E06               	movlw	6
  1655  00F68E  5C42               	subwf	operation@i,w,c
  1656  00F690  B0D8               	btfsc	status,0,c
  1657  00F692  D010               	goto	l2298
  1658  00F694                     l2292:
  1659                           
  1660                           ;main.c: 230: runInfo[i] = 0;
  1661  00F694  90D8               	bcf	status,0,c
  1662  00F696  3442               	rlcf	operation@i,w,c
  1663  00F698  6ED9               	movwf	fsr2l,c
  1664  00F69A  3443               	rlcf	operation@i+1,w,c
  1665  00F69C  6EDA               	movwf	fsr2h,c
  1666  00F69E  0E49               	movlw	low _runInfo
  1667  00F6A0  26D9               	addwf	fsr2l,f,c
  1668  00F6A2  0E00               	movlw	high _runInfo
  1669  00F6A4  22DA               	addwfc	fsr2h,f,c
  1670  00F6A6  0E00               	movlw	0
  1671  00F6A8  6EDE               	movwf	postinc2,c
  1672  00F6AA  0E00               	movlw	0
  1673  00F6AC  6EDD               	movwf	postdec2,c
  1674  00F6AE  4A42               	infsnz	operation@i,f,c
  1675  00F6B0  2A43               	incf	operation@i+1,f,c
  1676  00F6B2  D7E8               	goto	l2288
  1677  00F6B4                     l2298:
  1678                           
  1679                           ;main.c: 231: }
  1680                           ;main.c: 232: lcdClear();
  1681  00F6B4  ECEE  F075         	call	_lcdClear	;wreg free
  1682                           
  1683                           ;main.c: 233: printf("...Operating...");
  1684  00F6B8  0E3B               	movlw	low STR_22
  1685  00F6BA  6E1F               	movwf	printf@f,c
  1686  00F6BC  0EFF               	movlw	high STR_22
  1687  00F6BE  6E20               	movwf	printf@f+1,c
  1688  00F6C0  EC1D  F076         	call	_printf	;wreg free
  1689                           
  1690                           ;main.c: 234: updateCurrentTime();
  1691  00F6C4  EC4F  F077         	call	_updateCurrentTime	;wreg free
  1692                           
  1693                           ;main.c: 235: int startingTime = getCurrentTime();
  1694  00F6C8  EC2C  F079         	call	_getCurrentTime	;wreg free
  1695  00F6CC  C02B  F037         	movff	?_getCurrentTime,operation@startingTime
  1696  00F6D0  C02C  F038         	movff	?_getCurrentTime+1,operation@startingTime+1
  1697                           
  1698                           ;main.c: 237: while (runInfo[1] < 10){
  1699  00F6D4  D07F               	goto	l2348
  1700  00F6D6                     l2304:
  1701                           
  1702                           ;main.c: 238: lcdInst(0b11000000);;
  1703  00F6D6  0EC0               	movlw	192
  1704  00F6D8  EC92  F075         	call	_lcdInst
  1705                           
  1706                           ;main.c: 239: printf("NO BOTTLE    ");
  1707  00F6DC  0E8A               	movlw	low STR_23
  1708  00F6DE  6E1F               	movwf	printf@f,c
  1709  00F6E0  0EFF               	movlw	high STR_23
  1710  00F6E2  6E20               	movwf	printf@f+1,c
  1711  00F6E4  EC1D  F076         	call	_printf	;wreg free
  1712  00F6E8                     l163:
  1713  00F6E8  A080               	btfss	3968,0,c	;volatile
  1714  00F6EA  D7FE               	goto	l163
  1715                           
  1716                           ;main.c: 241: if (PORTAbits.RA0){
  1717  00F6EC  A080               	btfss	3968,0,c	;volatile
  1718  00F6EE  D072               	goto	l2348
  1719                           
  1720                           ;main.c: 242: lcdInst(0b11000000);;
  1721  00F6F0  0EC0               	movlw	192
  1722  00F6F2  EC92  F075         	call	_lcdInst
  1723                           
  1724                           ;main.c: 243: printf("BOTTLE INSIDE   ");
  1725  00F6F6  0E95               	movlw	low STR_24
  1726  00F6F8  6E1F               	movwf	printf@f,c
  1727  00F6FA  0EFE               	movlw	high STR_24
  1728  00F6FC  6E20               	movwf	printf@f+1,c
  1729  00F6FE  EC1D  F076         	call	_printf	;wreg free
  1730                           
  1731                           ;main.c: 244: _delay((unsigned long)((1000)*(8000000/4000.0)));
  1732  00F702  0E0B               	movlw	11
  1733  00F704  6E34               	movwf	(??_operation+1)& (0+255),c
  1734  00F706  0E26               	movlw	38
  1735  00F708  6E33               	movwf	??_operation& (0+255),c
  1736  00F70A  0E5E               	movlw	94
  1737  00F70C                     u1767:
  1738  00F70C  2EE8               	decfsz	wreg,f,c
  1739  00F70E  D7FE               	bra	u1767
  1740  00F710  2E33               	decfsz	??_operation& (0+255),f,c
  1741  00F712  D7FC               	bra	u1767
  1742  00F714  2E34               	decfsz	(??_operation+1)& (0+255),f,c
  1743  00F716  D7FA               	bra	u1767
  1744                           
  1745                           ;main.c: 245: if (PORTAbits.RA1 == 0){
  1746  00F718  B280               	btfsc	3968,1,c	;volatile
  1747  00F71A  D00D               	goto	l2322
  1748                           
  1749                           ;main.c: 246: lcdInst(0b11000000);;
  1750  00F71C  0EC0               	movlw	192
  1751  00F71E  EC92  F075         	call	_lcdInst
  1752                           
  1753                           ;main.c: 247: printf("YOP");
  1754  00F722  0EFB               	movlw	low STR_25
  1755  00F724  6E1F               	movwf	printf@f,c
  1756  00F726  0EFF               	movlw	high STR_25
  1757  00F728  6E20               	movwf	printf@f+1,c
  1758  00F72A  EC1D  F076         	call	_printf	;wreg free
  1759                           
  1760                           ;main.c: 248: bottle_type = 0;
  1761  00F72E  0E00               	movlw	0
  1762  00F730  6E3F               	movwf	operation@bottle_type+1,c
  1763  00F732  0E00               	movlw	0
  1764  00F734  D00C               	goto	L1
  1765  00F736                     l2322:
  1766                           
  1767                           ;main.c: 250: lcdInst(0b11000000);;
  1768  00F736  0EC0               	movlw	192
  1769  00F738  EC92  F075         	call	_lcdInst
  1770                           
  1771                           ;main.c: 251: printf("ESKA");
  1772  00F73C  0EF6               	movlw	low STR_26
  1773  00F73E  6E1F               	movwf	printf@f,c
  1774  00F740  0EFF               	movlw	high STR_26
  1775  00F742  6E20               	movwf	printf@f+1,c
  1776  00F744  EC1D  F076         	call	_printf	;wreg free
  1777                           
  1778                           ;main.c: 252: bottle_type = 1;
  1779  00F748  0E00               	movlw	0
  1780  00F74A  6E3F               	movwf	operation@bottle_type+1,c
  1781  00F74C  0E01               	movlw	1
  1782  00F74E                     L1:
  1783  00F74E  6E3E               	movwf	operation@bottle_type,c
  1784                           
  1785                           ;main.c: 253: }
  1786                           ;main.c: 254: if (PORTAbits.RA2 == 0||PORTAbits.RA3 == 0){
  1787  00F750  B480               	btfsc	3968,2,c	;volatile
  1788  00F752  A680               	btfss	3968,3,c	;volatile
  1789  00F754  D001               	goto	l2332
  1790  00F756  D00A               	goto	l2336
  1791  00F758                     l2332:
  1792                           
  1793                           ;main.c: 255: printf(" w/ Cap    ");
  1794  00F758  0EEA               	movlw	low STR_27
  1795  00F75A  6E1F               	movwf	printf@f,c
  1796  00F75C  0EFF               	movlw	high STR_27
  1797  00F75E  6E20               	movwf	printf@f+1,c
  1798  00F760  EC1D  F076         	call	_printf	;wreg free
  1799                           
  1800                           ;main.c: 256: bottle_cap = 0;
  1801  00F764  0E00               	movlw	0
  1802  00F766  6E41               	movwf	operation@bottle_cap+1,c
  1803  00F768  0E00               	movlw	0
  1804  00F76A  D009               	goto	L2
  1805  00F76C                     l2336:
  1806                           
  1807                           ;main.c: 258: printf(" w/o Cap    ");
  1808  00F76C  0ED0               	movlw	low STR_28
  1809  00F76E  6E1F               	movwf	printf@f,c
  1810  00F770  0EFF               	movlw	high STR_28
  1811  00F772  6E20               	movwf	printf@f+1,c
  1812  00F774  EC1D  F076         	call	_printf	;wreg free
  1813                           
  1814                           ;main.c: 259: bottle_cap = 1;
  1815  00F778  0E00               	movlw	0
  1816  00F77A  6E41               	movwf	operation@bottle_cap+1,c
  1817  00F77C  0E01               	movlw	1
  1818  00F77E                     L2:
  1819  00F77E  6E40               	movwf	operation@bottle_cap,c
  1820                           
  1821                           ;main.c: 260: }
  1822                           ;main.c: 261: runInfo[1] += 1;
  1823  00F780  4A4B               	infsnz	_runInfo+2,f,c
  1824  00F782  2A4C               	incf	_runInfo+3,f,c
  1825                           
  1826                           ;main.c: 262: int bottle = bottle_type*2 + bottle_cap + 2;
  1827  00F784  C03E  F033         	movff	operation@bottle_type,??_operation
  1828  00F788  C03F  F034         	movff	operation@bottle_type+1,??_operation+1
  1829  00F78C  90D8               	bcf	status,0,c
  1830  00F78E  3633               	rlcf	??_operation,f,c
  1831  00F790  3634               	rlcf	??_operation+1,f,c
  1832  00F792  5040               	movf	operation@bottle_cap,w,c
  1833  00F794  2633               	addwf	??_operation,f,c
  1834  00F796  5041               	movf	operation@bottle_cap+1,w,c
  1835  00F798  2234               	addwfc	??_operation+1,f,c
  1836  00F79A  0E02               	movlw	2
  1837  00F79C  2433               	addwf	??_operation,w,c
  1838  00F79E  6E39               	movwf	operation@bottle,c
  1839  00F7A0  0E00               	movlw	0
  1840  00F7A2  2034               	addwfc	??_operation+1,w,c
  1841  00F7A4  6E3A               	movwf	operation@bottle+1,c
  1842                           
  1843                           ;main.c: 263: runInfo[bottle] += 1;
  1844  00F7A6  90D8               	bcf	status,0,c
  1845  00F7A8  3439               	rlcf	operation@bottle,w,c
  1846  00F7AA  6ED9               	movwf	fsr2l,c
  1847  00F7AC  343A               	rlcf	operation@bottle+1,w,c
  1848  00F7AE  6EDA               	movwf	fsr2h,c
  1849  00F7B0  0E49               	movlw	low _runInfo
  1850  00F7B2  26D9               	addwf	fsr2l,f,c
  1851  00F7B4  0E00               	movlw	high _runInfo
  1852  00F7B6  22DA               	addwfc	fsr2h,f,c
  1853  00F7B8  2ADE               	incf	postinc2,f,c
  1854  00F7BA  0E00               	movlw	0
  1855  00F7BC  22DD               	addwfc	postdec2,f,c
  1856                           
  1857                           ;main.c: 265: _delay((unsigned long)((1000)*(8000000/4000.0)));
  1858  00F7BE  0E0B               	movlw	11
  1859  00F7C0  6E34               	movwf	(??_operation+1)& (0+255),c
  1860  00F7C2  0E26               	movlw	38
  1861  00F7C4  6E33               	movwf	??_operation& (0+255),c
  1862  00F7C6  0E5E               	movlw	94
  1863  00F7C8                     u1777:
  1864  00F7C8  2EE8               	decfsz	wreg,f,c
  1865  00F7CA  D7FE               	bra	u1777
  1866  00F7CC  2E33               	decfsz	??_operation& (0+255),f,c
  1867  00F7CE  D7FC               	bra	u1777
  1868  00F7D0  2E34               	decfsz	(??_operation+1)& (0+255),f,c
  1869  00F7D2  D7FA               	bra	u1777
  1870  00F7D4                     l2348:
  1871  00F7D4  BE4C               	btfsc	_runInfo+3,7,c
  1872  00F7D6  D77F               	goto	l2304
  1873  00F7D8  504C               	movf	_runInfo+3,w,c
  1874  00F7DA  E104               	bnz	u1590
  1875  00F7DC  0E0A               	movlw	10
  1876  00F7DE  5C4B               	subwf	_runInfo+2,w,c
  1877  00F7E0  A0D8               	btfss	status,0,c
  1878  00F7E2  D779               	goto	l2304
  1879  00F7E4                     u1590:
  1880                           
  1881                           ;main.c: 268: }
  1882                           ;main.c: 269: }
  1883                           ;main.c: 270: PORTCbits.RC0 = 0;
  1884  00F7E4  9082               	bcf	3970,0,c	;volatile
  1885                           
  1886                           ;main.c: 271: lcdClear();
  1887  00F7E6  ECEE  F075         	call	_lcdClear	;wreg free
  1888                           
  1889                           ;main.c: 272: printf("COMPLETED!!!     ");
  1890  00F7EA  0E3E               	movlw	low STR_29
  1891  00F7EC  6E1F               	movwf	printf@f,c
  1892  00F7EE  0EFE               	movlw	high STR_29
  1893  00F7F0  6E20               	movwf	printf@f+1,c
  1894  00F7F2  EC1D  F076         	call	_printf	;wreg free
  1895                           
  1896                           ;main.c: 273: lcdInst(0b11000000);;
  1897  00F7F6  0EC0               	movlw	192
  1898  00F7F8  EC92  F075         	call	_lcdInst
  1899                           
  1900                           ;main.c: 274: printf("A to back       ");
  1901  00F7FC  0E84               	movlw	low STR_30
  1902  00F7FE  6E1F               	movwf	printf@f,c
  1903  00F800  0EFE               	movlw	high STR_30
  1904  00F802  6E20               	movwf	printf@f+1,c
  1905  00F804  EC1D  F076         	call	_printf	;wreg free
  1906                           
  1907                           ;main.c: 275: updateCurrentTime();
  1908  00F808  EC4F  F077         	call	_updateCurrentTime	;wreg free
  1909                           
  1910                           ;main.c: 276: int endingTime = getCurrentTime();
  1911  00F80C  EC2C  F079         	call	_getCurrentTime	;wreg free
  1912  00F810  C02B  F03B         	movff	?_getCurrentTime,operation@endingTime
  1913  00F814  C02C  F03C         	movff	?_getCurrentTime+1,operation@endingTime+1
  1914                           
  1915                           ;main.c: 277: runInfo[0] = endingTime - startingTime;
  1916  00F818  C037  F033         	movff	operation@startingTime,??_operation
  1917  00F81C  C038  F034         	movff	operation@startingTime+1,??_operation+1
  1918  00F820  1E33               	comf	??_operation,f,c
  1919  00F822  1E34               	comf	??_operation+1,f,c
  1920  00F824  4A33               	infsnz	??_operation,f,c
  1921  00F826  2A34               	incf	??_operation+1,f,c
  1922  00F828  503B               	movf	operation@endingTime,w,c
  1923  00F82A  2433               	addwf	??_operation,w,c
  1924  00F82C  6E49               	movwf	_runInfo,c
  1925  00F82E  503C               	movf	operation@endingTime+1,w,c
  1926  00F830  2034               	addwfc	??_operation+1,w,c
  1927  00F832  6E4A               	movwf	_runInfo+1,c
  1928  00F834                     l2362:
  1929                           
  1930                           ;main.c: 280: unsigned char temp = keys[user_input()];
  1931  00F834  ECAD  F075         	call	_user_input	;wreg free
  1932  00F838  6E33               	movwf	??_operation& (0+255),c
  1933  00F83A  5033               	movf	??_operation,w,c
  1934  00F83C  0D01               	mullw	1
  1935  00F83E  0E1B               	movlw	low _keys
  1936  00F840  24F3               	addwf	prodl,w,c
  1937  00F842  6EF6               	movwf	tblptrl,c
  1938  00F844  0EFE               	movlw	high _keys
  1939  00F846  20F4               	addwfc	prodh,w,c
  1940  00F848  6EF7               	movwf	tblptrh,c
  1941  00F84A                     	if	1	;There are 3 active tblptr bytes
  1942  00F84A  6AF8               	clrf	tblptru,c
  1943  00F84C  0E00               	movlw	low (__mediumconst shr (0+16))
  1944  00F84E  22F8               	addwfc	tblptru,f,c
  1945  00F850                     	endif
  1946  00F850  0008               	tblrd		*
  1947  00F852  CFF5 F03D          	movff	tablat,operation@temp
  1948                           
  1949                           ;main.c: 281: if (temp == keys[3]){
  1950  00F856  0E1E               	movlw	low (_keys+3)
  1951  00F858  6EF6               	movwf	tblptrl,c
  1952  00F85A  0EFE               	movlw	high (_keys+3)
  1953  00F85C  6EF7               	movwf	tblptrh,c
  1954  00F85E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  1955  00F85E  6AF8               	clrf	tblptru,c
  1956  00F860                     	endif
  1957  00F860                     	if	0	;tblptru may be non-zero
  1958  00F860                     	endif
  1959  00F860  0008               	tblrd		*
  1960  00F862  50F5               	movf	tablat,w,c
  1961  00F864  183D               	xorwf	operation@temp,w,c
  1962  00F866  B4D8               	btfsc	status,2,c
  1963  00F868  0012               	return	
  1964  00F86A  D7E4               	goto	l2362
  1965  00F86C                     __end_of_operation:
  1966                           	opt stack 0
  1967                           tblptru	equ	0xFF8
  1968                           tblptrh	equ	0xFF7
  1969                           tblptrl	equ	0xFF6
  1970                           tablat	equ	0xFF5
  1971                           prodh	equ	0xFF4
  1972                           prodl	equ	0xFF3
  1973                           intcon	equ	0xFF2
  1974                           intcon2	equ	0xFF1
  1975                           postinc0	equ	0xFEE
  1976                           wreg	equ	0xFE8
  1977                           postdec1	equ	0xFE5
  1978                           fsr1l	equ	0xFE1
  1979                           postinc2	equ	0xFDE
  1980                           postdec2	equ	0xFDD
  1981                           fsr2h	equ	0xFDA
  1982                           fsr2l	equ	0xFD9
  1983                           status	equ	0xFD8
  1984                           
  1985 ;; *************** function _updateCurrentTime *****************
  1986 ;; Defined at:
  1987 ;;		line 107 in file "main.c"
  1988 ;; Parameters:    Size  Location     Type
  1989 ;;		None
  1990 ;; Auto vars:     Size  Location     Type
  1991 ;;  i               1    3[COMRAM] unsigned char 
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      void 
  1994 ;; Registers used:
  1995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2002 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2004 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2005 ;;Total ram usage:        1 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:    2
  2008 ;; This function calls:
  2009 ;;		_I2C_Master_Read
  2010 ;;		_I2C_Master_Start
  2011 ;;		_I2C_Master_Stop
  2012 ;;		_I2C_Master_Write
  2013 ;; This function is called by:
  2014 ;;		_update_init_screen_state
  2015 ;;		_operation
  2016 ;; This function uses a non-reentrant model
  2017 ;;
  2018                           
  2019                           	psect	text3
  2020  00EE9E                     __ptext3:
  2021                           	opt stack 0
  2022  00EE9E                     _updateCurrentTime:
  2023                           	opt stack 27
  2024                           
  2025                           ;main.c: 109: I2C_Master_Start();
  2026                           
  2027                           ;incstack = 0
  2028  00EE9E  EC85  F075         	call	_I2C_Master_Start	;wreg free
  2029                           
  2030                           ;main.c: 110: I2C_Master_Write(0b11010000);
  2031  00EEA2  0E00               	movlw	0
  2032  00EEA4  6E03               	movwf	I2C_Master_Write@d+1,c
  2033  00EEA6  0ED0               	movlw	208
  2034  00EEA8  6E02               	movwf	I2C_Master_Write@d,c
  2035  00EEAA  EC8D  F075         	call	_I2C_Master_Write	;wreg free
  2036                           
  2037                           ;main.c: 111: I2C_Master_Write(0x00);
  2038  00EEAE  0E00               	movlw	0
  2039  00EEB0  6E03               	movwf	I2C_Master_Write@d+1,c
  2040  00EEB2  0E00               	movlw	0
  2041  00EEB4  6E02               	movwf	I2C_Master_Write@d,c
  2042  00EEB6  EC8D  F075         	call	_I2C_Master_Write	;wreg free
  2043                           
  2044                           ;main.c: 112: I2C_Master_Stop();
  2045  00EEBA  EC89  F075         	call	_I2C_Master_Stop	;wreg free
  2046                           
  2047                           ;main.c: 115: I2C_Master_Start();
  2048  00EEBE  EC85  F075         	call	_I2C_Master_Start	;wreg free
  2049                           
  2050                           ;main.c: 116: I2C_Master_Write(0b11010001);
  2051  00EEC2  0E00               	movlw	0
  2052  00EEC4  6E03               	movwf	I2C_Master_Write@d+1,c
  2053  00EEC6  0ED1               	movlw	209
  2054  00EEC8  6E02               	movwf	I2C_Master_Write@d,c
  2055  00EECA  EC8D  F075         	call	_I2C_Master_Write	;wreg free
  2056                           
  2057                           ;main.c: 117: for(unsigned char i=0;i<0x06;i++){
  2058  00EECE  0E00               	movlw	0
  2059  00EED0  6E04               	movwf	updateCurrentTime@i,c
  2060  00EED2                     l2156:
  2061  00EED2  0E05               	movlw	5
  2062  00EED4  6404               	cpfsgt	updateCurrentTime@i,c
  2063  00EED6  D001               	goto	l2160
  2064  00EED8  D00E               	goto	l2166
  2065  00EEDA                     l2160:
  2066                           
  2067                           ;main.c: 118: time[i] = I2C_Master_Read(1);
  2068  00EEDA  5004               	movf	updateCurrentTime@i,w,c
  2069  00EEDC  0D01               	mullw	1
  2070  00EEDE  0E55               	movlw	low _time
  2071  00EEE0  24F3               	addwf	prodl,w,c
  2072  00EEE2  6ED9               	movwf	fsr2l,c
  2073  00EEE4  0E00               	movlw	high _time
  2074  00EEE6  20F4               	addwfc	prodh,w,c
  2075  00EEE8  6EDA               	movwf	fsr2h,c
  2076  00EEEA  0E01               	movlw	1
  2077  00EEEC  ECDB  F075         	call	_I2C_Master_Read
  2078  00EEF0  6EDF               	movwf	indf2,c
  2079  00EEF2  2A04               	incf	updateCurrentTime@i,f,c
  2080  00EEF4  D7EE               	goto	l2156
  2081  00EEF6                     l2166:
  2082                           
  2083                           ;main.c: 119: }
  2084                           ;main.c: 120: time[6] = I2C_Master_Read(0);
  2085  00EEF6  0E00               	movlw	0
  2086  00EEF8  ECDB  F075         	call	_I2C_Master_Read
  2087  00EEFC  6E5B               	movwf	_time+6,c
  2088                           
  2089                           ;main.c: 121: I2C_Master_Stop();
  2090  00EEFE  EC89  F075         	call	_I2C_Master_Stop	;wreg free
  2091  00EF02  0012               	return		;funcret
  2092  00EF04                     __end_of_updateCurrentTime:
  2093                           	opt stack 0
  2094                           tblptru	equ	0xFF8
  2095                           tblptrh	equ	0xFF7
  2096                           tblptrl	equ	0xFF6
  2097                           tablat	equ	0xFF5
  2098                           prodh	equ	0xFF4
  2099                           prodl	equ	0xFF3
  2100                           intcon	equ	0xFF2
  2101                           intcon2	equ	0xFF1
  2102                           postinc0	equ	0xFEE
  2103                           wreg	equ	0xFE8
  2104                           postdec1	equ	0xFE5
  2105                           fsr1l	equ	0xFE1
  2106                           indf2	equ	0xFDF
  2107                           postinc2	equ	0xFDE
  2108                           postdec2	equ	0xFDD
  2109                           fsr2h	equ	0xFDA
  2110                           fsr2l	equ	0xFD9
  2111                           status	equ	0xFD8
  2112                           
  2113 ;; *************** function _I2C_Master_Write *****************
  2114 ;; Defined at:
  2115 ;;		line 47 in file "I2C.c"
  2116 ;; Parameters:    Size  Location     Type
  2117 ;;  d               2    1[COMRAM] unsigned int 
  2118 ;; Auto vars:     Size  Location     Type
  2119 ;;		None
  2120 ;; Return value:  Size  Location     Type
  2121 ;;                  1    wreg      void 
  2122 ;; Registers used:
  2123 ;;		wreg, status,2, status,0, cstack
  2124 ;; Tracked objects:
  2125 ;;		On entry : 0/0
  2126 ;;		On exit  : 0/0
  2127 ;;		Unchanged: 0/0
  2128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2129 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2131 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2132 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2133 ;;Total ram usage:        2 bytes
  2134 ;; Hardware stack levels used:    1
  2135 ;; Hardware stack levels required when called:    1
  2136 ;; This function calls:
  2137 ;;		_I2C_Master_Wait
  2138 ;; This function is called by:
  2139 ;;		_updateCurrentTime
  2140 ;; This function uses a non-reentrant model
  2141 ;;
  2142                           
  2143                           	psect	text4
  2144  00EB1A                     __ptext4:
  2145                           	opt stack 0
  2146  00EB1A                     _I2C_Master_Write:
  2147                           	opt stack 27
  2148                           
  2149                           ;I2C.c: 49: I2C_Master_Wait();
  2150                           
  2151                           ;incstack = 0
  2152  00EB1A  ECA4  F075         	call	_I2C_Master_Wait	;wreg free
  2153                           
  2154                           ;I2C.c: 50: SSPBUF = d;
  2155  00EB1E  C002  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  2156  00EB22  0012               	return		;funcret
  2157  00EB24                     __end_of_I2C_Master_Write:
  2158                           	opt stack 0
  2159                           tblptru	equ	0xFF8
  2160                           tblptrh	equ	0xFF7
  2161                           tblptrl	equ	0xFF6
  2162                           tablat	equ	0xFF5
  2163                           prodh	equ	0xFF4
  2164                           prodl	equ	0xFF3
  2165                           intcon	equ	0xFF2
  2166                           intcon2	equ	0xFF1
  2167                           postinc0	equ	0xFEE
  2168                           wreg	equ	0xFE8
  2169                           postdec1	equ	0xFE5
  2170                           fsr1l	equ	0xFE1
  2171                           indf2	equ	0xFDF
  2172                           postinc2	equ	0xFDE
  2173                           postdec2	equ	0xFDD
  2174                           fsr2h	equ	0xFDA
  2175                           fsr2l	equ	0xFD9
  2176                           status	equ	0xFD8
  2177                           
  2178 ;; *************** function _I2C_Master_Stop *****************
  2179 ;; Defined at:
  2180 ;;		line 41 in file "I2C.c"
  2181 ;; Parameters:    Size  Location     Type
  2182 ;;		None
  2183 ;; Auto vars:     Size  Location     Type
  2184 ;;		None
  2185 ;; Return value:  Size  Location     Type
  2186 ;;                  2   54[None  ] int 
  2187 ;; Registers used:
  2188 ;;		wreg, status,2, status,0, cstack
  2189 ;; Tracked objects:
  2190 ;;		On entry : 0/0
  2191 ;;		On exit  : 0/0
  2192 ;;		Unchanged: 0/0
  2193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2198 ;;Total ram usage:        0 bytes
  2199 ;; Hardware stack levels used:    1
  2200 ;; Hardware stack levels required when called:    1
  2201 ;; This function calls:
  2202 ;;		_I2C_Master_Wait
  2203 ;; This function is called by:
  2204 ;;		_updateCurrentTime
  2205 ;; This function uses a non-reentrant model
  2206 ;;
  2207                           
  2208                           	psect	text5
  2209  00EB12                     __ptext5:
  2210                           	opt stack 0
  2211  00EB12                     _I2C_Master_Stop:
  2212                           	opt stack 27
  2213                           
  2214                           ;I2C.c: 43: I2C_Master_Wait();
  2215                           
  2216                           ;incstack = 0
  2217  00EB12  ECA4  F075         	call	_I2C_Master_Wait	;wreg free
  2218                           
  2219                           ;I2C.c: 44: PEN = 1;
  2220  00EB16  84C5               	bsf	4037,2,c	;volatile
  2221  00EB18  0012               	return		;funcret
  2222  00EB1A                     __end_of_I2C_Master_Stop:
  2223                           	opt stack 0
  2224                           tblptru	equ	0xFF8
  2225                           tblptrh	equ	0xFF7
  2226                           tblptrl	equ	0xFF6
  2227                           tablat	equ	0xFF5
  2228                           prodh	equ	0xFF4
  2229                           prodl	equ	0xFF3
  2230                           intcon	equ	0xFF2
  2231                           intcon2	equ	0xFF1
  2232                           postinc0	equ	0xFEE
  2233                           wreg	equ	0xFE8
  2234                           postdec1	equ	0xFE5
  2235                           fsr1l	equ	0xFE1
  2236                           indf2	equ	0xFDF
  2237                           postinc2	equ	0xFDE
  2238                           postdec2	equ	0xFDD
  2239                           fsr2h	equ	0xFDA
  2240                           fsr2l	equ	0xFD9
  2241                           status	equ	0xFD8
  2242                           
  2243 ;; *************** function _I2C_Master_Start *****************
  2244 ;; Defined at:
  2245 ;;		line 29 in file "I2C.c"
  2246 ;; Parameters:    Size  Location     Type
  2247 ;;		None
  2248 ;; Auto vars:     Size  Location     Type
  2249 ;;		None
  2250 ;; Return value:  Size  Location     Type
  2251 ;;                  2   50[None  ] int 
  2252 ;; Registers used:
  2253 ;;		wreg, status,2, status,0, cstack
  2254 ;; Tracked objects:
  2255 ;;		On entry : 0/0
  2256 ;;		On exit  : 0/0
  2257 ;;		Unchanged: 0/0
  2258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2263 ;;Total ram usage:        0 bytes
  2264 ;; Hardware stack levels used:    1
  2265 ;; Hardware stack levels required when called:    1
  2266 ;; This function calls:
  2267 ;;		_I2C_Master_Wait
  2268 ;; This function is called by:
  2269 ;;		_updateCurrentTime
  2270 ;; This function uses a non-reentrant model
  2271 ;;
  2272                           
  2273                           	psect	text6
  2274  00EB0A                     __ptext6:
  2275                           	opt stack 0
  2276  00EB0A                     _I2C_Master_Start:
  2277                           	opt stack 27
  2278                           
  2279                           ;I2C.c: 31: I2C_Master_Wait();
  2280                           
  2281                           ;incstack = 0
  2282  00EB0A  ECA4  F075         	call	_I2C_Master_Wait	;wreg free
  2283                           
  2284                           ;I2C.c: 32: SEN = 1;
  2285  00EB0E  80C5               	bsf	4037,0,c	;volatile
  2286  00EB10  0012               	return		;funcret
  2287  00EB12                     __end_of_I2C_Master_Start:
  2288                           	opt stack 0
  2289                           tblptru	equ	0xFF8
  2290                           tblptrh	equ	0xFF7
  2291                           tblptrl	equ	0xFF6
  2292                           tablat	equ	0xFF5
  2293                           prodh	equ	0xFF4
  2294                           prodl	equ	0xFF3
  2295                           intcon	equ	0xFF2
  2296                           intcon2	equ	0xFF1
  2297                           postinc0	equ	0xFEE
  2298                           wreg	equ	0xFE8
  2299                           postdec1	equ	0xFE5
  2300                           fsr1l	equ	0xFE1
  2301                           indf2	equ	0xFDF
  2302                           postinc2	equ	0xFDE
  2303                           postdec2	equ	0xFDD
  2304                           fsr2h	equ	0xFDA
  2305                           fsr2l	equ	0xFD9
  2306                           status	equ	0xFD8
  2307                           
  2308 ;; *************** function _I2C_Master_Read *****************
  2309 ;; Defined at:
  2310 ;;		line 53 in file "I2C.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;  a               1    wreg     unsigned char 
  2313 ;; Auto vars:     Size  Location     Type
  2314 ;;  a               1    1[COMRAM] unsigned char 
  2315 ;;  temp            1    2[COMRAM] unsigned char 
  2316 ;; Return value:  Size  Location     Type
  2317 ;;                  1    wreg      unsigned char 
  2318 ;; Registers used:
  2319 ;;		wreg, status,2, status,0, cstack
  2320 ;; Tracked objects:
  2321 ;;		On entry : 0/0
  2322 ;;		On exit  : 0/0
  2323 ;;		Unchanged: 0/0
  2324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2326 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2328 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2329 ;;Total ram usage:        2 bytes
  2330 ;; Hardware stack levels used:    1
  2331 ;; Hardware stack levels required when called:    1
  2332 ;; This function calls:
  2333 ;;		_I2C_Master_Wait
  2334 ;; This function is called by:
  2335 ;;		_updateCurrentTime
  2336 ;; This function uses a non-reentrant model
  2337 ;;
  2338                           
  2339                           	psect	text7
  2340  00EBB6                     __ptext7:
  2341                           	opt stack 0
  2342  00EBB6                     _I2C_Master_Read:
  2343                           	opt stack 27
  2344                           
  2345                           ;incstack = 0
  2346                           ;I2C_Master_Read@a stored from wreg
  2347  00EBB6  6E02               	movwf	I2C_Master_Read@a,c
  2348                           
  2349                           ;I2C.c: 55: unsigned char temp;
  2350                           ;I2C.c: 56: I2C_Master_Wait();
  2351  00EBB8  ECA4  F075         	call	_I2C_Master_Wait	;wreg free
  2352                           
  2353                           ;I2C.c: 57: RCEN = 1;
  2354  00EBBC  86C5               	bsf	4037,3,c	;volatile
  2355                           
  2356                           ;I2C.c: 58: I2C_Master_Wait();
  2357  00EBBE  ECA4  F075         	call	_I2C_Master_Wait	;wreg free
  2358                           
  2359                           ;I2C.c: 59: temp = SSPBUF;
  2360  00EBC2  CFC9 F003          	movff	4041,I2C_Master_Read@temp	;volatile
  2361                           
  2362                           ;I2C.c: 60: I2C_Master_Wait();
  2363  00EBC6  ECA4  F075         	call	_I2C_Master_Wait	;wreg free
  2364                           
  2365                           ;I2C.c: 61: ACKDT = (a)?0:1;
  2366  00EBCA  5002               	movf	I2C_Master_Read@a,w,c
  2367  00EBCC  A4D8               	btfss	status,2,c
  2368  00EBCE  D002               	goto	u480
  2369  00EBD0  8AC5               	bsf	4037,5,c	;volatile
  2370  00EBD2  D001               	goto	l1330
  2371  00EBD4                     u480:
  2372  00EBD4  9AC5               	bcf	4037,5,c	;volatile
  2373  00EBD6                     l1330:
  2374                           
  2375                           ;I2C.c: 62: ACKEN = 1;
  2376  00EBD6  88C5               	bsf	4037,4,c	;volatile
  2377                           
  2378                           ;I2C.c: 63: return temp;
  2379  00EBD8  5003               	movf	I2C_Master_Read@temp,w,c
  2380  00EBDA  0012               	return	
  2381  00EBDC                     __end_of_I2C_Master_Read:
  2382                           	opt stack 0
  2383                           tblptru	equ	0xFF8
  2384                           tblptrh	equ	0xFF7
  2385                           tblptrl	equ	0xFF6
  2386                           tablat	equ	0xFF5
  2387                           prodh	equ	0xFF4
  2388                           prodl	equ	0xFF3
  2389                           intcon	equ	0xFF2
  2390                           intcon2	equ	0xFF1
  2391                           postinc0	equ	0xFEE
  2392                           wreg	equ	0xFE8
  2393                           postdec1	equ	0xFE5
  2394                           fsr1l	equ	0xFE1
  2395                           indf2	equ	0xFDF
  2396                           postinc2	equ	0xFDE
  2397                           postdec2	equ	0xFDD
  2398                           fsr2h	equ	0xFDA
  2399                           fsr2l	equ	0xFD9
  2400                           status	equ	0xFD8
  2401                           
  2402 ;; *************** function _I2C_Master_Wait *****************
  2403 ;; Defined at:
  2404 ;;		line 24 in file "I2C.c"
  2405 ;; Parameters:    Size  Location     Type
  2406 ;;		None
  2407 ;; Auto vars:     Size  Location     Type
  2408 ;;		None
  2409 ;; Return value:  Size  Location     Type
  2410 ;;                  1    wreg      void 
  2411 ;; Registers used:
  2412 ;;		wreg, status,2, status,0
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2420 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2421 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2422 ;;Total ram usage:        1 bytes
  2423 ;; Hardware stack levels used:    1
  2424 ;; This function calls:
  2425 ;;		Nothing
  2426 ;; This function is called by:
  2427 ;;		_I2C_Master_Start
  2428 ;;		_I2C_Master_Stop
  2429 ;;		_I2C_Master_Write
  2430 ;;		_I2C_Master_Read
  2431 ;;		_I2C_Master_RepeatedStart
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434                           
  2435                           	psect	text8
  2436  00EB48                     __ptext8:
  2437                           	opt stack 0
  2438  00EB48                     _I2C_Master_Wait:
  2439                           	opt stack 27
  2440  00EB48                     l285:
  2441  00EB48  B4C7               	btfsc	4039,2,c	;volatile
  2442  00EB4A  D7FE               	goto	l285
  2443  00EB4C  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  2444  00EB50  0E1F               	movlw	31
  2445  00EB52  1601               	andwf	??_I2C_Master_Wait,f,c
  2446  00EB54  B4D8               	btfsc	status,2,c
  2447  00EB56  0012               	return	
  2448  00EB58  D7F7               	goto	l285
  2449  00EB5A                     __end_of_I2C_Master_Wait:
  2450                           	opt stack 0
  2451                           tblptru	equ	0xFF8
  2452                           tblptrh	equ	0xFF7
  2453                           tblptrl	equ	0xFF6
  2454                           tablat	equ	0xFF5
  2455                           prodh	equ	0xFF4
  2456                           prodl	equ	0xFF3
  2457                           intcon	equ	0xFF2
  2458                           intcon2	equ	0xFF1
  2459                           postinc0	equ	0xFEE
  2460                           wreg	equ	0xFE8
  2461                           postdec1	equ	0xFE5
  2462                           fsr1l	equ	0xFE1
  2463                           indf2	equ	0xFDF
  2464                           postinc2	equ	0xFDE
  2465                           postdec2	equ	0xFDD
  2466                           fsr2h	equ	0xFDA
  2467                           fsr2l	equ	0xFD9
  2468                           status	equ	0xFD8
  2469                           
  2470 ;; *************** function _getCurrentTime *****************
  2471 ;; Defined at:
  2472 ;;		line 125 in file "main.c"
  2473 ;; Parameters:    Size  Location     Type
  2474 ;;		None
  2475 ;; Auto vars:     Size  Location     Type
  2476 ;;  str             2   48[COMRAM] unsigned char [2]
  2477 ;;  currentTime     2   44[COMRAM] int 
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  2   42[COMRAM] int 
  2480 ;; Registers used:
  2481 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 0/0
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2487 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2488 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2490 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2491 ;;Total ram usage:        8 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; Hardware stack levels required when called:    4
  2494 ;; This function calls:
  2495 ;;		___wmul
  2496 ;;		_atoi
  2497 ;;		_sprintf
  2498 ;; This function is called by:
  2499 ;;		_operation
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           	psect	text9
  2504  00F258                     __ptext9:
  2505                           	opt stack 0
  2506  00F258                     _getCurrentTime:
  2507                           	opt stack 25
  2508                           
  2509                           ;main.c: 126: int currentTime = 0;
  2510                           
  2511                           ;incstack = 0
  2512  00F258  0E00               	movlw	0
  2513  00F25A  6E2E               	movwf	getCurrentTime@currentTime+1,c
  2514  00F25C  0E00               	movlw	0
  2515  00F25E  6E2D               	movwf	getCurrentTime@currentTime,c
  2516                           
  2517                           ;main.c: 127: char str[2];
  2518                           ;main.c: 128: sprintf(str, "%02x",time[0]);
  2519  00F260  0E31               	movlw	low getCurrentTime@str
  2520  00F262  6E1F               	movwf	sprintf@wh,c
  2521  00F264  0E00               	movlw	high getCurrentTime@str
  2522  00F266  6E20               	movwf	sprintf@wh+1,c
  2523  00F268  0E85               	movlw	low (STR_6+10)
  2524  00F26A  6E21               	movwf	sprintf@f,c
  2525  00F26C  0EFF               	movlw	high (STR_6+10)
  2526  00F26E  6E22               	movwf	sprintf@f+1,c
  2527  00F270  C055  F023         	movff	_time,?_sprintf+4
  2528  00F274  6A24               	clrf	?_sprintf+5,c
  2529  00F276  EC59  F076         	call	_sprintf	;wreg free
  2530                           
  2531                           ;main.c: 129: currentTime += atoi(str);
  2532  00F27A  0E31               	movlw	low getCurrentTime@str
  2533  00F27C  6E07               	movwf	atoi@s,c
  2534  00F27E  0E00               	movlw	high getCurrentTime@str
  2535  00F280  6E08               	movwf	atoi@s+1,c
  2536  00F282  ECC5  F078         	call	_atoi	;wreg free
  2537  00F286  5007               	movf	?_atoi,w,c
  2538  00F288  262D               	addwf	getCurrentTime@currentTime,f,c
  2539  00F28A  5008               	movf	?_atoi+1,w,c
  2540  00F28C  222E               	addwfc	getCurrentTime@currentTime+1,f,c
  2541                           
  2542                           ;main.c: 130: sprintf(str, "%02x",time[1]);
  2543  00F28E  0E31               	movlw	low getCurrentTime@str
  2544  00F290  6E1F               	movwf	sprintf@wh,c
  2545  00F292  0E00               	movlw	high getCurrentTime@str
  2546  00F294  6E20               	movwf	sprintf@wh+1,c
  2547  00F296  0E85               	movlw	low (STR_6+10)
  2548  00F298  6E21               	movwf	sprintf@f,c
  2549  00F29A  0EFF               	movlw	high (STR_6+10)
  2550  00F29C  6E22               	movwf	sprintf@f+1,c
  2551  00F29E  C056  F023         	movff	_time+1,?_sprintf+4
  2552  00F2A2  6A24               	clrf	?_sprintf+5,c
  2553  00F2A4  EC59  F076         	call	_sprintf	;wreg free
  2554                           
  2555                           ;main.c: 131: currentTime += atoi(str)*60;
  2556  00F2A8  0E31               	movlw	low getCurrentTime@str
  2557  00F2AA  6E07               	movwf	atoi@s,c
  2558  00F2AC  0E00               	movlw	high getCurrentTime@str
  2559  00F2AE  6E08               	movwf	atoi@s+1,c
  2560  00F2B0  ECC5  F078         	call	_atoi	;wreg free
  2561  00F2B4  C007  F02F         	movff	?_atoi,_getCurrentTime$1224
  2562  00F2B8  C008  F030         	movff	?_atoi+1,_getCurrentTime$1224+1
  2563                           
  2564                           ;main.c: 131: currentTime += atoi(str)*60;
  2565  00F2BC  C02F  F001         	movff	_getCurrentTime$1224,___wmul@multiplier
  2566  00F2C0  C030  F002         	movff	_getCurrentTime$1224+1,___wmul@multiplier+1
  2567  00F2C4  0E00               	movlw	0
  2568  00F2C6  6E04               	movwf	___wmul@multiplicand+1,c
  2569  00F2C8  0E3C               	movlw	60
  2570  00F2CA  6E03               	movwf	___wmul@multiplicand,c
  2571  00F2CC  ECC8  F075         	call	___wmul	;wreg free
  2572  00F2D0  5001               	movf	?___wmul,w,c
  2573  00F2D2  262D               	addwf	getCurrentTime@currentTime,f,c
  2574  00F2D4  5002               	movf	?___wmul+1,w,c
  2575  00F2D6  222E               	addwfc	getCurrentTime@currentTime+1,f,c
  2576                           
  2577                           ;main.c: 132: sprintf(str, "%02x",time[2]);
  2578  00F2D8  0E31               	movlw	low getCurrentTime@str
  2579  00F2DA  6E1F               	movwf	sprintf@wh,c
  2580  00F2DC  0E00               	movlw	high getCurrentTime@str
  2581  00F2DE  6E20               	movwf	sprintf@wh+1,c
  2582  00F2E0  0E85               	movlw	low (STR_6+10)
  2583  00F2E2  6E21               	movwf	sprintf@f,c
  2584  00F2E4  0EFF               	movlw	high (STR_6+10)
  2585  00F2E6  6E22               	movwf	sprintf@f+1,c
  2586  00F2E8  C057  F023         	movff	_time+2,?_sprintf+4
  2587  00F2EC  6A24               	clrf	?_sprintf+5,c
  2588  00F2EE  EC59  F076         	call	_sprintf	;wreg free
  2589                           
  2590                           ;main.c: 133: currentTime += atoi(str)*3600;
  2591  00F2F2  0E31               	movlw	low getCurrentTime@str
  2592  00F2F4  6E07               	movwf	atoi@s,c
  2593  00F2F6  0E00               	movlw	high getCurrentTime@str
  2594  00F2F8  6E08               	movwf	atoi@s+1,c
  2595  00F2FA  ECC5  F078         	call	_atoi	;wreg free
  2596  00F2FE  C007  F02F         	movff	?_atoi,_getCurrentTime$1224
  2597  00F302  C008  F030         	movff	?_atoi+1,_getCurrentTime$1224+1
  2598                           
  2599                           ;main.c: 133: currentTime += atoi(str)*3600;
  2600  00F306  C02F  F001         	movff	_getCurrentTime$1224,___wmul@multiplier
  2601  00F30A  C030  F002         	movff	_getCurrentTime$1224+1,___wmul@multiplier+1
  2602  00F30E  0E0E               	movlw	14
  2603  00F310  6E04               	movwf	___wmul@multiplicand+1,c
  2604  00F312  0E10               	movlw	16
  2605  00F314  6E03               	movwf	___wmul@multiplicand,c
  2606  00F316  ECC8  F075         	call	___wmul	;wreg free
  2607  00F31A  5001               	movf	?___wmul,w,c
  2608  00F31C  262D               	addwf	getCurrentTime@currentTime,f,c
  2609  00F31E  5002               	movf	?___wmul+1,w,c
  2610  00F320  222E               	addwfc	getCurrentTime@currentTime+1,f,c
  2611                           
  2612                           ;main.c: 134: return currentTime;
  2613  00F322  C02D  F02B         	movff	getCurrentTime@currentTime,?_getCurrentTime
  2614  00F326  C02E  F02C         	movff	getCurrentTime@currentTime+1,?_getCurrentTime+1
  2615  00F32A  0012               	return	
  2616  00F32C                     __end_of_getCurrentTime:
  2617                           	opt stack 0
  2618                           tblptru	equ	0xFF8
  2619                           tblptrh	equ	0xFF7
  2620                           tblptrl	equ	0xFF6
  2621                           tablat	equ	0xFF5
  2622                           prodh	equ	0xFF4
  2623                           prodl	equ	0xFF3
  2624                           intcon	equ	0xFF2
  2625                           intcon2	equ	0xFF1
  2626                           postinc0	equ	0xFEE
  2627                           wreg	equ	0xFE8
  2628                           postdec1	equ	0xFE5
  2629                           fsr1l	equ	0xFE1
  2630                           indf2	equ	0xFDF
  2631                           postinc2	equ	0xFDE
  2632                           postdec2	equ	0xFDD
  2633                           fsr2h	equ	0xFDA
  2634                           fsr2l	equ	0xFD9
  2635                           status	equ	0xFD8
  2636                           
  2637 ;; *************** function _sprintf *****************
  2638 ;; Defined at:
  2639 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprintf.c"
  2640 ;; Parameters:    Size  Location     Type
  2641 ;;  wh              2   30[COMRAM] PTR unsigned char 
  2642 ;;		 -> getCurrentTime@str(2), 
  2643 ;;  f               2   32[COMRAM] PTR const unsigned char 
  2644 ;;		 -> STR_3(5), STR_2(5), STR_1(5), 
  2645 ;; Auto vars:     Size  Location     Type
  2646 ;;  pb              4   38[COMRAM] struct __prbuf
  2647 ;;  ap              2   36[COMRAM] PTR void [1]
  2648 ;;		 -> ?_sprintf(2), ?_printf(2), 
  2649 ;; Return value:  Size  Location     Type
  2650 ;;                  2   30[COMRAM] int 
  2651 ;; Registers used:
  2652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2653 ;; Tracked objects:
  2654 ;;		On entry : 0/0
  2655 ;;		On exit  : 0/0
  2656 ;;		Unchanged: 0/0
  2657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2658 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2659 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2661 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2662 ;;Total ram usage:       12 bytes
  2663 ;; Hardware stack levels used:    1
  2664 ;; Hardware stack levels required when called:    3
  2665 ;; This function calls:
  2666 ;;		__doprnt
  2667 ;; This function is called by:
  2668 ;;		_getCurrentTime
  2669 ;; This function uses a non-reentrant model
  2670 ;;
  2671                           
  2672                           	psect	text10
  2673  00ECB2                     __ptext10:
  2674                           	opt stack 0
  2675  00ECB2                     _sprintf:
  2676                           	opt stack 25
  2677                           
  2678                           ;incstack = 0
  2679  00ECB2  C01F  F027         	movff	sprintf@wh,sprintf@pb
  2680  00ECB6  C020  F028         	movff	sprintf@wh+1,sprintf@pb+1
  2681  00ECBA  0E00               	movlw	0
  2682  00ECBC  6E29               	movwf	sprintf@pb+2,c
  2683  00ECBE  0E00               	movlw	0
  2684  00ECC0  6E2A               	movwf	sprintf@pb+3,c
  2685  00ECC2  0E23               	movlw	low (?_sprintf+4)
  2686  00ECC4  6E25               	movwf	sprintf@ap,c
  2687  00ECC6  0E00               	movlw	high (?_sprintf+4)
  2688  00ECC8  6E26               	movwf	sprintf@ap+1,c
  2689  00ECCA  0E27               	movlw	low sprintf@pb
  2690  00ECCC  6E0D               	movwf	__doprnt@pb,c
  2691  00ECCE  0E00               	movlw	high sprintf@pb
  2692  00ECD0  6E0E               	movwf	__doprnt@pb+1,c
  2693  00ECD2  C021  F00F         	movff	sprintf@f,__doprnt@f
  2694  00ECD6  C022  F010         	movff	sprintf@f+1,__doprnt@f+1
  2695  00ECDA  0E25               	movlw	low sprintf@ap
  2696  00ECDC  6E11               	movwf	__doprnt@ap,c
  2697  00ECDE  0E00               	movlw	high sprintf@ap
  2698  00ECE0  6E12               	movwf	__doprnt@ap+1,c
  2699  00ECE2  EC36  F07C         	call	__doprnt	;wreg free
  2700  00ECE6  C027  FFD9         	movff	sprintf@pb,fsr2l
  2701  00ECEA  C028  FFDA         	movff	sprintf@pb+1,fsr2h
  2702  00ECEE  0E00               	movlw	0
  2703  00ECF0  6EDF               	movwf	indf2,c
  2704  00ECF2  0012               	return	
  2705  00ECF4                     __end_of_sprintf:
  2706                           	opt stack 0
  2707                           tblptru	equ	0xFF8
  2708                           tblptrh	equ	0xFF7
  2709                           tblptrl	equ	0xFF6
  2710                           tablat	equ	0xFF5
  2711                           prodh	equ	0xFF4
  2712                           prodl	equ	0xFF3
  2713                           intcon	equ	0xFF2
  2714                           intcon2	equ	0xFF1
  2715                           postinc0	equ	0xFEE
  2716                           wreg	equ	0xFE8
  2717                           postdec1	equ	0xFE5
  2718                           fsr1l	equ	0xFE1
  2719                           indf2	equ	0xFDF
  2720                           postinc2	equ	0xFDE
  2721                           postdec2	equ	0xFDD
  2722                           fsr2h	equ	0xFDA
  2723                           fsr2l	equ	0xFD9
  2724                           status	equ	0xFD8
  2725                           
  2726 ;; *************** function _atoi *****************
  2727 ;; Defined at:
  2728 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\atoi.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;  s               2    6[COMRAM] PTR const unsigned char 
  2731 ;;		 -> getCurrentTime@str(2), 
  2732 ;; Auto vars:     Size  Location     Type
  2733 ;;  a               2   11[COMRAM] int 
  2734 ;;  sign            1   10[COMRAM] unsigned char 
  2735 ;; Return value:  Size  Location     Type
  2736 ;;                  2    6[COMRAM] int 
  2737 ;; Registers used:
  2738 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2739 ;; Tracked objects:
  2740 ;;		On entry : 0/0
  2741 ;;		On exit  : 0/0
  2742 ;;		Unchanged: 0/0
  2743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2744 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2745 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2746 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2747 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2748 ;;Total ram usage:        7 bytes
  2749 ;; Hardware stack levels used:    1
  2750 ;; Hardware stack levels required when called:    1
  2751 ;; This function calls:
  2752 ;;		___wmul
  2753 ;;		_isdigit
  2754 ;; This function is called by:
  2755 ;;		_getCurrentTime
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           	psect	text11
  2760  00F18A                     __ptext11:
  2761                           	opt stack 0
  2762  00F18A                     _atoi:
  2763                           	opt stack 27
  2764                           
  2765                           ;incstack = 0
  2766  00F18A  D002               	goto	l2070
  2767  00F18C                     l2068:
  2768  00F18C  4A07               	infsnz	atoi@s,f,c
  2769  00F18E  2A08               	incf	atoi@s+1,f,c
  2770  00F190                     l2070:
  2771  00F190  C007  FFD9         	movff	atoi@s,fsr2l
  2772  00F194  C008  FFDA         	movff	atoi@s+1,fsr2h
  2773  00F198  0E20               	movlw	32
  2774  00F19A  18DE               	xorwf	postinc2,w,c
  2775  00F19C  B4D8               	btfsc	status,2,c
  2776  00F19E  D7F6               	goto	l2068
  2777  00F1A0  C007  FFD9         	movff	atoi@s,fsr2l
  2778  00F1A4  C008  FFDA         	movff	atoi@s+1,fsr2h
  2779  00F1A8  0E09               	movlw	9
  2780  00F1AA  18DE               	xorwf	postinc2,w,c
  2781  00F1AC  B4D8               	btfsc	status,2,c
  2782  00F1AE  D7EE               	goto	l2068
  2783  00F1B0  0E00               	movlw	0
  2784  00F1B2  6E0D               	movwf	atoi@a+1,c
  2785  00F1B4  0E00               	movlw	0
  2786  00F1B6  6E0C               	movwf	atoi@a,c
  2787  00F1B8  0E00               	movlw	0
  2788  00F1BA  6E0B               	movwf	atoi@sign,c
  2789  00F1BC  C007  FFD9         	movff	atoi@s,fsr2l
  2790  00F1C0  C008  FFDA         	movff	atoi@s+1,fsr2h
  2791  00F1C4  0E2D               	movlw	45
  2792  00F1C6  18DE               	xorwf	postinc2,w,c
  2793  00F1C8  A4D8               	btfss	status,2,c
  2794  00F1CA  D002               	goto	l2080
  2795  00F1CC  2A0B               	incf	atoi@sign,f,c
  2796  00F1CE  D024               	goto	l2086
  2797  00F1D0                     l2080:
  2798  00F1D0  C007  FFD9         	movff	atoi@s,fsr2l
  2799  00F1D4  C008  FFDA         	movff	atoi@s+1,fsr2h
  2800  00F1D8  0E2B               	movlw	43
  2801  00F1DA  18DE               	xorwf	postinc2,w,c
  2802  00F1DC  A4D8               	btfss	status,2,c
  2803  00F1DE  D01E               	goto	l2088
  2804  00F1E0  D01B               	goto	l2086
  2805  00F1E2                     l2084:
  2806  00F1E2  C00C  F001         	movff	atoi@a,___wmul@multiplier
  2807  00F1E6  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  2808  00F1EA  0E00               	movlw	0
  2809  00F1EC  6E04               	movwf	___wmul@multiplicand+1,c
  2810  00F1EE  0E0A               	movlw	10
  2811  00F1F0  6E03               	movwf	___wmul@multiplicand,c
  2812  00F1F2  ECC8  F075         	call	___wmul	;wreg free
  2813  00F1F6  C007  FFD9         	movff	atoi@s,fsr2l
  2814  00F1FA  C008  FFDA         	movff	atoi@s+1,fsr2h
  2815  00F1FE  50DF               	movf	indf2,w,c
  2816  00F200  6E09               	movwf	??_atoi& (0+255),c
  2817  00F202  6A0A               	clrf	(??_atoi+1)& (0+255),c
  2818  00F204  5001               	movf	?___wmul,w,c
  2819  00F206  2609               	addwf	??_atoi,f,c
  2820  00F208  5002               	movf	?___wmul+1,w,c
  2821  00F20A  220A               	addwfc	??_atoi+1,f,c
  2822  00F20C  0ED0               	movlw	208
  2823  00F20E  2409               	addwf	??_atoi,w,c
  2824  00F210  6E0C               	movwf	atoi@a,c
  2825  00F212  0EFF               	movlw	255
  2826  00F214  200A               	addwfc	??_atoi+1,w,c
  2827  00F216  6E0D               	movwf	atoi@a+1,c
  2828  00F218                     l2086:
  2829  00F218  4A07               	infsnz	atoi@s,f,c
  2830  00F21A  2A08               	incf	atoi@s+1,f,c
  2831  00F21C                     l2088:
  2832  00F21C  C007  FFD9         	movff	atoi@s,fsr2l
  2833  00F220  C008  FFDA         	movff	atoi@s+1,fsr2h
  2834  00F224  50DF               	movf	indf2,w,c
  2835  00F226  ECB9  F075         	call	_isdigit
  2836  00F22A  B0D8               	btfsc	status,0,c
  2837  00F22C  D7DA               	goto	l2084
  2838  00F22E  500B               	movf	atoi@sign,w,c
  2839  00F230  B4D8               	btfsc	status,2,c
  2840  00F232  D00D               	goto	l559
  2841  00F234  C00C  F009         	movff	atoi@a,??_atoi
  2842  00F238  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  2843  00F23C  1E09               	comf	??_atoi,f,c
  2844  00F23E  1E0A               	comf	??_atoi+1,f,c
  2845  00F240  4A09               	infsnz	??_atoi,f,c
  2846  00F242  2A0A               	incf	??_atoi+1,f,c
  2847  00F244  C009  F007         	movff	??_atoi,?_atoi
  2848  00F248  C00A  F008         	movff	??_atoi+1,?_atoi+1
  2849  00F24C  0012               	return	
  2850  00F24E                     l559:
  2851  00F24E  C00C  F007         	movff	atoi@a,?_atoi
  2852  00F252  C00D  F008         	movff	atoi@a+1,?_atoi+1
  2853  00F256  0012               	return		;funcret
  2854  00F258                     __end_of_atoi:
  2855                           	opt stack 0
  2856                           tblptru	equ	0xFF8
  2857                           tblptrh	equ	0xFF7
  2858                           tblptrl	equ	0xFF6
  2859                           tablat	equ	0xFF5
  2860                           prodh	equ	0xFF4
  2861                           prodl	equ	0xFF3
  2862                           intcon	equ	0xFF2
  2863                           intcon2	equ	0xFF1
  2864                           postinc0	equ	0xFEE
  2865                           wreg	equ	0xFE8
  2866                           postdec1	equ	0xFE5
  2867                           fsr1l	equ	0xFE1
  2868                           indf2	equ	0xFDF
  2869                           postinc2	equ	0xFDE
  2870                           postdec2	equ	0xFDD
  2871                           fsr2h	equ	0xFDA
  2872                           fsr2l	equ	0xFD9
  2873                           status	equ	0xFD8
  2874                           
  2875 ;; *************** function _initLCD *****************
  2876 ;; Defined at:
  2877 ;;		line 14 in file "lcd.c"
  2878 ;; Parameters:    Size  Location     Type
  2879 ;;		None
  2880 ;; Auto vars:     Size  Location     Type
  2881 ;;		None
  2882 ;; Return value:  Size  Location     Type
  2883 ;;                  1    wreg      void 
  2884 ;; Registers used:
  2885 ;;		wreg, status,2, status,0, cstack
  2886 ;; Tracked objects:
  2887 ;;		On entry : 0/0
  2888 ;;		On exit  : 0/0
  2889 ;;		Unchanged: 0/0
  2890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2893 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2894 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2895 ;;Total ram usage:        1 bytes
  2896 ;; Hardware stack levels used:    1
  2897 ;; Hardware stack levels required when called:    2
  2898 ;; This function calls:
  2899 ;;		_lcdInst
  2900 ;; This function is called by:
  2901 ;;		_main
  2902 ;; This function uses a non-reentrant model
  2903 ;;
  2904                           
  2905                           	psect	text12
  2906  00ECF4                     __ptext12:
  2907                           	opt stack 0
  2908  00ECF4                     _initLCD:
  2909                           	opt stack 28
  2910                           
  2911                           ;lcd.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  2912                           
  2913                           ;incstack = 0
  2914  00ECF4  0E27               	movlw	39
  2915  00ECF6  6E04               	movwf	??_initLCD& (0+255),c
  2916  00ECF8  0EF5               	movlw	245
  2917  00ECFA                     u1787:
  2918  00ECFA  2EE8               	decfsz	wreg,f,c
  2919  00ECFC  D7FE               	bra	u1787
  2920  00ECFE  2E04               	decfsz	??_initLCD& (0+255),f,c
  2921  00ED00  D7FC               	bra	u1787
  2922  00ED02  F000               	nop	
  2923                           
  2924                           ;lcd.c: 16: lcdInst(0b00110011);
  2925  00ED04  0E33               	movlw	51
  2926  00ED06  EC92  F075         	call	_lcdInst
  2927                           
  2928                           ;lcd.c: 17: lcdInst(0b00110010);
  2929  00ED0A  0E32               	movlw	50
  2930  00ED0C  EC92  F075         	call	_lcdInst
  2931                           
  2932                           ;lcd.c: 18: lcdInst(0b00101000);
  2933  00ED10  0E28               	movlw	40
  2934  00ED12  EC92  F075         	call	_lcdInst
  2935                           
  2936                           ;lcd.c: 19: lcdInst(0b00001111);
  2937  00ED16  0E0F               	movlw	15
  2938  00ED18  EC92  F075         	call	_lcdInst
  2939                           
  2940                           ;lcd.c: 20: lcdInst(0b00000110);
  2941  00ED1C  0E06               	movlw	6
  2942  00ED1E  EC92  F075         	call	_lcdInst
  2943                           
  2944                           ;lcd.c: 21: lcdInst(0b00000001);
  2945  00ED22  0E01               	movlw	1
  2946  00ED24  EC92  F075         	call	_lcdInst
  2947                           
  2948                           ;lcd.c: 22: _delay((unsigned long)((15)*(8000000/4000.0)));
  2949  00ED28  0E27               	movlw	39
  2950  00ED2A  6E04               	movwf	??_initLCD& (0+255),c
  2951  00ED2C  0EF5               	movlw	245
  2952  00ED2E                     u1797:
  2953  00ED2E  2EE8               	decfsz	wreg,f,c
  2954  00ED30  D7FE               	bra	u1797
  2955  00ED32  2E04               	decfsz	??_initLCD& (0+255),f,c
  2956  00ED34  D7FC               	bra	u1797
  2957  00ED36  F000               	nop	
  2958  00ED38  0012               	return		;funcret
  2959  00ED3A                     __end_of_initLCD:
  2960                           	opt stack 0
  2961                           tblptru	equ	0xFF8
  2962                           tblptrh	equ	0xFF7
  2963                           tblptrl	equ	0xFF6
  2964                           tablat	equ	0xFF5
  2965                           prodh	equ	0xFF4
  2966                           prodl	equ	0xFF3
  2967                           intcon	equ	0xFF2
  2968                           intcon2	equ	0xFF1
  2969                           postinc0	equ	0xFEE
  2970                           wreg	equ	0xFE8
  2971                           postdec1	equ	0xFE5
  2972                           fsr1l	equ	0xFE1
  2973                           indf2	equ	0xFDF
  2974                           postinc2	equ	0xFDE
  2975                           postdec2	equ	0xFDD
  2976                           fsr2h	equ	0xFDA
  2977                           fsr2l	equ	0xFD9
  2978                           status	equ	0xFD8
  2979                           
  2980 ;; *************** function _activateServo *****************
  2981 ;; Defined at:
  2982 ;;		line 319 in file "main.c"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;		None
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;		None
  2987 ;; Return value:  Size  Location     Type
  2988 ;;                  1    wreg      void 
  2989 ;; Registers used:
  2990 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2991 ;; Tracked objects:
  2992 ;;		On entry : 0/0
  2993 ;;		On exit  : 0/0
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2998 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2999 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3000 ;;Total ram usage:        1 bytes
  3001 ;; Hardware stack levels used:    1
  3002 ;; Hardware stack levels required when called:    5
  3003 ;; This function calls:
  3004 ;;		_lcdClear
  3005 ;;		_printf
  3006 ;; This function is called by:
  3007 ;;		_main
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010                           
  3011                           	psect	text13
  3012  00EE3C                     __ptext13:
  3013                           	opt stack 0
  3014  00EE3C                     _activateServo:
  3015                           	opt stack 25
  3016                           
  3017                           ;main.c: 321: OSCCON = 0b01110000;
  3018                           
  3019                           ;incstack = 0
  3020  00EE3C  0E70               	movlw	112
  3021  00EE3E  6ED3               	movwf	4051,c	;volatile
  3022                           
  3023                           ;main.c: 323: CCP1CON = 0b00001100;
  3024  00EE40  0E0C               	movlw	12
  3025  00EE42  6EBD               	movwf	4029,c	;volatile
  3026                           
  3027                           ;main.c: 324: TRISC = 0b11111011;
  3028  00EE44  0EFB               	movlw	251
  3029  00EE46  6E94               	movwf	3988,c	;volatile
  3030                           
  3031                           ;main.c: 325: T2CON = 0b10010110;
  3032  00EE48  0E96               	movlw	150
  3033  00EE4A  6ECA               	movwf	4042,c	;volatile
  3034                           
  3035                           ;main.c: 326: PR2 = 255;
  3036  00EE4C  68CB               	setf	4043,c	;volatile
  3037                           
  3038                           ;main.c: 327: CCPR1L = 18;
  3039  00EE4E  0E12               	movlw	18
  3040  00EE50  6EBE               	movwf	4030,c	;volatile
  3041                           
  3042                           ;main.c: 332: lcdClear();
  3043  00EE52  ECEE  F075         	call	_lcdClear	;wreg free
  3044                           
  3045                           ;main.c: 333: printf("servo testing!!!");
  3046  00EE56  0EB7               	movlw	low STR_31
  3047  00EE58  6E1F               	movwf	printf@f,c
  3048  00EE5A  0EFE               	movlw	high STR_31
  3049  00EE5C  6E20               	movwf	printf@f+1,c
  3050  00EE5E  EC1D  F076         	call	_printf	;wreg free
  3051  00EE62                     l199:
  3052  00EE62  A281               	btfss	3969,1,c	;volatile
  3053  00EE64  D7FE               	goto	l199
  3054                           
  3055                           ;main.c: 338: lcdClear();
  3056  00EE66  ECEE  F075         	call	_lcdClear	;wreg free
  3057                           
  3058                           ;main.c: 339: _delay((unsigned long)((10)*(8000000/4000.0)));
  3059  00EE6A  0E1A               	movlw	26
  3060  00EE6C  6E2D               	movwf	??_activateServo& (0+255),c
  3061  00EE6E  0EF8               	movlw	248
  3062  00EE70                     u1807:
  3063  00EE70  2EE8               	decfsz	wreg,f,c
  3064  00EE72  D7FE               	bra	u1807
  3065  00EE74  2E2D               	decfsz	??_activateServo& (0+255),f,c
  3066  00EE76  D7FC               	bra	u1807
  3067  00EE78  D000               	nop2	
  3068                           
  3069                           ;main.c: 342: if (CCPR1L < 24) CCPR1L += 1;
  3070  00EE7A  0E18               	movlw	24
  3071  00EE7C  60BE               	cpfslt	4030,c	;volatile
  3072  00EE7E  D002               	goto	l2384
  3073  00EE80  2ABE               	incf	4030,f,c	;volatile
  3074  00EE82  D002               	goto	l204
  3075  00EE84                     l2384:
  3076                           
  3077                           ;main.c: 343: else CCPR1L = 12;
  3078  00EE84  0E0C               	movlw	12
  3079  00EE86  6EBE               	movwf	4030,c	;volatile
  3080  00EE88                     l204:
  3081  00EE88  B281               	btfsc	3969,1,c	;volatile
  3082  00EE8A  D7FE               	goto	l204
  3083                           
  3084                           ;main.c: 347: _delay((unsigned long)((10)*(8000000/4000.0)));
  3085  00EE8C  0E1A               	movlw	26
  3086  00EE8E  6E2D               	movwf	??_activateServo& (0+255),c
  3087  00EE90  0EF8               	movlw	248
  3088  00EE92                     u1817:
  3089  00EE92  2EE8               	decfsz	wreg,f,c
  3090  00EE94  D7FE               	bra	u1817
  3091  00EE96  2E2D               	decfsz	??_activateServo& (0+255),f,c
  3092  00EE98  D7FC               	bra	u1817
  3093  00EE9A  D000               	nop2	
  3094  00EE9C  D7E2               	goto	l199
  3095  00EE9E                     __end_of_activateServo:
  3096                           	opt stack 0
  3097                           tblptru	equ	0xFF8
  3098                           tblptrh	equ	0xFF7
  3099                           tblptrl	equ	0xFF6
  3100                           tablat	equ	0xFF5
  3101                           prodh	equ	0xFF4
  3102                           prodl	equ	0xFF3
  3103                           intcon	equ	0xFF2
  3104                           intcon2	equ	0xFF1
  3105                           postinc0	equ	0xFEE
  3106                           wreg	equ	0xFE8
  3107                           postdec1	equ	0xFE5
  3108                           fsr1l	equ	0xFE1
  3109                           indf2	equ	0xFDF
  3110                           postinc2	equ	0xFDE
  3111                           postdec2	equ	0xFDD
  3112                           fsr2h	equ	0xFDA
  3113                           fsr2l	equ	0xFD9
  3114                           status	equ	0xFD8
  3115                           
  3116 ;; *************** function _I2C_Master_Init *****************
  3117 ;; Defined at:
  3118 ;;		line 13 in file "I2C.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;  c               4   13[COMRAM] const unsigned long 
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;		None
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  1    wreg      void 
  3125 ;; Registers used:
  3126 ;;		wreg, status,2, status,0, cstack
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3132 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3134 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3135 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3136 ;;Total ram usage:        8 bytes
  3137 ;; Hardware stack levels used:    1
  3138 ;; Hardware stack levels required when called:    1
  3139 ;; This function calls:
  3140 ;;		___lldiv
  3141 ;; This function is called by:
  3142 ;;		_main
  3143 ;; This function uses a non-reentrant model
  3144 ;;
  3145                           
  3146                           	psect	text14
  3147  00EDE2                     __ptext14:
  3148                           	opt stack 0
  3149  00EDE2                     _I2C_Master_Init:
  3150                           	opt stack 29
  3151                           
  3152                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3153                           
  3154                           ;incstack = 0
  3155  00EDE2  0E00               	movlw	0
  3156  00EDE4  6EC7               	movwf	4039,c	;volatile
  3157                           
  3158                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3159  00EDE6  0E28               	movlw	40
  3160  00EDE8  6EC6               	movwf	4038,c	;volatile
  3161                           
  3162                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3163  00EDEA  0E00               	movlw	0
  3164  00EDEC  6EC5               	movwf	4037,c	;volatile
  3165                           
  3166                           ;I2C.c: 19: SSPADD = (8000000/(4*c))-1;
  3167  00EDEE  0E00               	movlw	0
  3168  00EDF0  6E01               	movwf	___lldiv@dividend,c
  3169  00EDF2  0E12               	movlw	18
  3170  00EDF4  6E02               	movwf	___lldiv@dividend+1,c
  3171  00EDF6  0E7A               	movlw	122
  3172  00EDF8  6E03               	movwf	___lldiv@dividend+2,c
  3173  00EDFA  0E00               	movlw	0
  3174  00EDFC  6E04               	movwf	___lldiv@dividend+3,c
  3175  00EDFE  C00E  F012         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  3176  00EE02  C00F  F013         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  3177  00EE06  C010  F014         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  3178  00EE0A  C011  F015         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  3179  00EE0E  0E02               	movlw	2
  3180  00EE10                     u1515:
  3181  00EE10  90D8               	bcf	status,0,c
  3182  00EE12  3612               	rlcf	??_I2C_Master_Init,f,c
  3183  00EE14  3613               	rlcf	??_I2C_Master_Init+1,f,c
  3184  00EE16  3614               	rlcf	??_I2C_Master_Init+2,f,c
  3185  00EE18  3615               	rlcf	??_I2C_Master_Init+3,f,c
  3186  00EE1A  2EE8               	decfsz	wreg,f,c
  3187  00EE1C  D7F9               	goto	u1515
  3188  00EE1E  C012  F005         	movff	??_I2C_Master_Init,___lldiv@divisor
  3189  00EE22  C013  F006         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  3190  00EE26  C014  F007         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  3191  00EE2A  C015  F008         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  3192  00EE2E  EC82  F077         	call	___lldiv	;wreg free
  3193  00EE32  0401               	decf	?___lldiv,w,c
  3194  00EE34  6EC8               	movwf	4040,c	;volatile
  3195                           
  3196                           ;I2C.c: 20: TRISC3 = 1;
  3197  00EE36  8694               	bsf	3988,3,c	;volatile
  3198                           
  3199                           ;I2C.c: 21: TRISC4 = 1;
  3200  00EE38  8894               	bsf	3988,4,c	;volatile
  3201  00EE3A  0012               	return		;funcret
  3202  00EE3C                     __end_of_I2C_Master_Init:
  3203                           	opt stack 0
  3204                           tblptru	equ	0xFF8
  3205                           tblptrh	equ	0xFF7
  3206                           tblptrl	equ	0xFF6
  3207                           tablat	equ	0xFF5
  3208                           prodh	equ	0xFF4
  3209                           prodl	equ	0xFF3
  3210                           intcon	equ	0xFF2
  3211                           intcon2	equ	0xFF1
  3212                           postinc0	equ	0xFEE
  3213                           wreg	equ	0xFE8
  3214                           postdec1	equ	0xFE5
  3215                           fsr1l	equ	0xFE1
  3216                           indf2	equ	0xFDF
  3217                           postinc2	equ	0xFDE
  3218                           postdec2	equ	0xFDD
  3219                           fsr2h	equ	0xFDA
  3220                           fsr2l	equ	0xFD9
  3221                           status	equ	0xFD8
  3222                           
  3223 ;; *************** function ___lldiv *****************
  3224 ;; Defined at:
  3225 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;  dividend        4    0[COMRAM] unsigned long 
  3228 ;;  divisor         4    4[COMRAM] unsigned long 
  3229 ;; Auto vars:     Size  Location     Type
  3230 ;;  quotient        4    8[COMRAM] unsigned long 
  3231 ;;  counter         1   12[COMRAM] unsigned char 
  3232 ;; Return value:  Size  Location     Type
  3233 ;;                  4    0[COMRAM] unsigned long 
  3234 ;; Registers used:
  3235 ;;		wreg, status,2, status,0
  3236 ;; Tracked objects:
  3237 ;;		On entry : 0/0
  3238 ;;		On exit  : 0/0
  3239 ;;		Unchanged: 0/0
  3240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3241 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3244 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3245 ;;Total ram usage:       13 bytes
  3246 ;; Hardware stack levels used:    1
  3247 ;; This function calls:
  3248 ;;		Nothing
  3249 ;; This function is called by:
  3250 ;;		_I2C_Master_Init
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           	psect	text15
  3255  00EF04                     __ptext15:
  3256                           	opt stack 0
  3257  00EF04                     ___lldiv:
  3258                           	opt stack 29
  3259                           
  3260                           ;incstack = 0
  3261  00EF04  0E00               	movlw	0
  3262  00EF06  6E09               	movwf	___lldiv@quotient,c
  3263  00EF08  0E00               	movlw	0
  3264  00EF0A  6E0A               	movwf	___lldiv@quotient+1,c
  3265  00EF0C  0E00               	movlw	0
  3266  00EF0E  6E0B               	movwf	___lldiv@quotient+2,c
  3267  00EF10  0E00               	movlw	0
  3268  00EF12  6E0C               	movwf	___lldiv@quotient+3,c
  3269  00EF14  5005               	movf	___lldiv@divisor,w,c
  3270  00EF16  1006               	iorwf	___lldiv@divisor+1,w,c
  3271  00EF18  1007               	iorwf	___lldiv@divisor+2,w,c
  3272  00EF1A  1008               	iorwf	___lldiv@divisor+3,w,c
  3273  00EF1C  B4D8               	btfsc	status,2,c
  3274  00EF1E  D02A               	goto	l756
  3275  00EF20  0E01               	movlw	1
  3276  00EF22  6E0D               	movwf	___lldiv@counter,c
  3277  00EF24  D006               	goto	l2220
  3278  00EF26                     l2218:
  3279  00EF26  90D8               	bcf	status,0,c
  3280  00EF28  3605               	rlcf	___lldiv@divisor,f,c
  3281  00EF2A  3606               	rlcf	___lldiv@divisor+1,f,c
  3282  00EF2C  3607               	rlcf	___lldiv@divisor+2,f,c
  3283  00EF2E  3608               	rlcf	___lldiv@divisor+3,f,c
  3284  00EF30  2A0D               	incf	___lldiv@counter,f,c
  3285  00EF32                     l2220:
  3286  00EF32  AE08               	btfss	___lldiv@divisor+3,7,c
  3287  00EF34  D7F8               	goto	l2218
  3288  00EF36                     l2222:
  3289  00EF36  90D8               	bcf	status,0,c
  3290  00EF38  3609               	rlcf	___lldiv@quotient,f,c
  3291  00EF3A  360A               	rlcf	___lldiv@quotient+1,f,c
  3292  00EF3C  360B               	rlcf	___lldiv@quotient+2,f,c
  3293  00EF3E  360C               	rlcf	___lldiv@quotient+3,f,c
  3294  00EF40  5005               	movf	___lldiv@divisor,w,c
  3295  00EF42  5C01               	subwf	___lldiv@dividend,w,c
  3296  00EF44  5006               	movf	___lldiv@divisor+1,w,c
  3297  00EF46  5802               	subwfb	___lldiv@dividend+1,w,c
  3298  00EF48  5007               	movf	___lldiv@divisor+2,w,c
  3299  00EF4A  5803               	subwfb	___lldiv@dividend+2,w,c
  3300  00EF4C  5008               	movf	___lldiv@divisor+3,w,c
  3301  00EF4E  5804               	subwfb	___lldiv@dividend+3,w,c
  3302  00EF50  A0D8               	btfss	status,0,c
  3303  00EF52  D009               	goto	l2230
  3304  00EF54  5005               	movf	___lldiv@divisor,w,c
  3305  00EF56  5E01               	subwf	___lldiv@dividend,f,c
  3306  00EF58  5006               	movf	___lldiv@divisor+1,w,c
  3307  00EF5A  5A02               	subwfb	___lldiv@dividend+1,f,c
  3308  00EF5C  5007               	movf	___lldiv@divisor+2,w,c
  3309  00EF5E  5A03               	subwfb	___lldiv@dividend+2,f,c
  3310  00EF60  5008               	movf	___lldiv@divisor+3,w,c
  3311  00EF62  5A04               	subwfb	___lldiv@dividend+3,f,c
  3312  00EF64  8009               	bsf	___lldiv@quotient,0,c
  3313  00EF66                     l2230:
  3314  00EF66  90D8               	bcf	status,0,c
  3315  00EF68  3208               	rrcf	___lldiv@divisor+3,f,c
  3316  00EF6A  3207               	rrcf	___lldiv@divisor+2,f,c
  3317  00EF6C  3206               	rrcf	___lldiv@divisor+1,f,c
  3318  00EF6E  3205               	rrcf	___lldiv@divisor,f,c
  3319  00EF70  2E0D               	decfsz	___lldiv@counter,f,c
  3320  00EF72  D7E1               	goto	l2222
  3321  00EF74                     l756:
  3322  00EF74  C009  F001         	movff	___lldiv@quotient,?___lldiv
  3323  00EF78  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  3324  00EF7C  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3325  00EF80  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3326  00EF84  0012               	return		;funcret
  3327  00EF86                     __end_of___lldiv:
  3328                           	opt stack 0
  3329                           tblptru	equ	0xFF8
  3330                           tblptrh	equ	0xFF7
  3331                           tblptrl	equ	0xFF6
  3332                           tablat	equ	0xFF5
  3333                           prodh	equ	0xFF4
  3334                           prodl	equ	0xFF3
  3335                           intcon	equ	0xFF2
  3336                           intcon2	equ	0xFF1
  3337                           postinc0	equ	0xFEE
  3338                           wreg	equ	0xFE8
  3339                           postdec1	equ	0xFE5
  3340                           fsr1l	equ	0xFE1
  3341                           indf2	equ	0xFDF
  3342                           postinc2	equ	0xFDE
  3343                           postdec2	equ	0xFDD
  3344                           fsr2h	equ	0xFDA
  3345                           fsr2l	equ	0xFD9
  3346                           status	equ	0xFD8
  3347                           
  3348 ;; *************** function _EEPROM *****************
  3349 ;; Defined at:
  3350 ;;		line 288 in file "main.c"
  3351 ;; Parameters:    Size  Location     Type
  3352 ;;		None
  3353 ;; Auto vars:     Size  Location     Type
  3354 ;;  temp            1   53[COMRAM] unsigned char 
  3355 ;;  screen_state    2   54[COMRAM] int 
  3356 ;; Return value:  Size  Location     Type
  3357 ;;                  1    wreg      void 
  3358 ;; Registers used:
  3359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3360 ;; Tracked objects:
  3361 ;;		On entry : 0/0
  3362 ;;		On exit  : 0/0
  3363 ;;		Unchanged: 0/0
  3364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3366 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3367 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;Total ram usage:        4 bytes
  3370 ;; Hardware stack levels used:    1
  3371 ;; Hardware stack levels required when called:    7
  3372 ;; This function calls:
  3373 ;;		_past_run_access
  3374 ;;		_update_eeprom_screen_state
  3375 ;;		_user_input
  3376 ;; This function is called by:
  3377 ;;		_main
  3378 ;; This function uses a non-reentrant model
  3379 ;;
  3380                           
  3381                           	psect	text16
  3382  00F32C                     __ptext16:
  3383                           	opt stack 0
  3384  00F32C                     _EEPROM:
  3385                           	opt stack 23
  3386                           
  3387                           ;main.c: 289: int screen_state = 0;
  3388                           
  3389                           ;incstack = 0
  3390  00F32C  0E00               	movlw	0
  3391  00F32E  6E38               	movwf	EEPROM@screen_state+1,c
  3392  00F330  0E00               	movlw	0
  3393  00F332  6E37               	movwf	EEPROM@screen_state,c
  3394                           
  3395                           ;main.c: 290: update_eeprom_screen_state(screen_state);
  3396  00F334  C037  F02D         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  3397  00F338  C038  F02E         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  3398  00F33C  ECC3  F077         	call	_update_eeprom_screen_state	;wreg free
  3399  00F340                     l2392:
  3400                           
  3401                           ;main.c: 292: unsigned char temp = keys[user_input()];
  3402  00F340  ECAD  F075         	call	_user_input	;wreg free
  3403  00F344  6E35               	movwf	??_EEPROM& (0+255),c
  3404  00F346  5035               	movf	??_EEPROM,w,c
  3405  00F348  0D01               	mullw	1
  3406  00F34A  0E1B               	movlw	low _keys
  3407  00F34C  24F3               	addwf	prodl,w,c
  3408  00F34E  6EF6               	movwf	tblptrl,c
  3409  00F350  0EFE               	movlw	high _keys
  3410  00F352  20F4               	addwfc	prodh,w,c
  3411  00F354  6EF7               	movwf	tblptrh,c
  3412  00F356                     	if	1	;There are 3 active tblptr bytes
  3413  00F356  6AF8               	clrf	tblptru,c
  3414  00F358  0E00               	movlw	low (__mediumconst shr (0+16))
  3415  00F35A  22F8               	addwfc	tblptru,f,c
  3416  00F35C                     	endif
  3417  00F35C  0008               	tblrd		*
  3418  00F35E  CFF5 F036          	movff	tablat,EEPROM@temp
  3419                           
  3420                           ;main.c: 293: if (temp == keys[3]){
  3421  00F362  0E1E               	movlw	low (_keys+3)
  3422  00F364  6EF6               	movwf	tblptrl,c
  3423  00F366  0EFE               	movlw	high (_keys+3)
  3424  00F368  6EF7               	movwf	tblptrh,c
  3425  00F36A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3426  00F36A  6AF8               	clrf	tblptru,c
  3427  00F36C                     	endif
  3428  00F36C                     	if	0	;tblptru may be non-zero
  3429  00F36C                     	endif
  3430  00F36C  0008               	tblrd		*
  3431  00F36E  50F5               	movf	tablat,w,c
  3432  00F370  1836               	xorwf	EEPROM@temp,w,c
  3433  00F372  A4D8               	btfss	status,2,c
  3434  00F374  D009               	goto	l2398
  3435                           
  3436                           ;main.c: 296: past_run_access();
  3437  00F376  EC66  F078         	call	_past_run_access	;wreg free
  3438                           
  3439                           ;main.c: 297: update_eeprom_screen_state(screen_state);
  3440  00F37A  C037  F02D         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  3441  00F37E  C038  F02E         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  3442  00F382  ECC3  F077         	call	_update_eeprom_screen_state	;wreg free
  3443                           
  3444                           ;main.c: 299: }else if (temp == keys[15]){
  3445  00F386  D7DC               	goto	l2392
  3446  00F388                     l2398:
  3447  00F388  0E2A               	movlw	low (_keys+15)
  3448  00F38A  6EF6               	movwf	tblptrl,c
  3449  00F38C  0EFE               	movlw	high (_keys+15)
  3450  00F38E  6EF7               	movwf	tblptrh,c
  3451  00F390                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3452  00F390  6AF8               	clrf	tblptru,c
  3453  00F392                     	endif
  3454  00F392                     	if	0	;tblptru may be non-zero
  3455  00F392                     	endif
  3456  00F392  0008               	tblrd		*
  3457  00F394  50F5               	movf	tablat,w,c
  3458  00F396  1836               	xorwf	EEPROM@temp,w,c
  3459  00F398  B4D8               	btfsc	status,2,c
  3460  00F39A  0012               	return	
  3461                           
  3462                           ;main.c: 301: }else if (temp == keys[4]){
  3463                           
  3464                           ;main.c: 300: break;
  3465  00F39C  0E1F               	movlw	low (_keys+4)
  3466  00F39E  6EF6               	movwf	tblptrl,c
  3467  00F3A0  0EFE               	movlw	high (_keys+4)
  3468  00F3A2  6EF7               	movwf	tblptrh,c
  3469  00F3A4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3470  00F3A4  6AF8               	clrf	tblptru,c
  3471  00F3A6                     	endif
  3472  00F3A6                     	if	0	;tblptru may be non-zero
  3473  00F3A6                     	endif
  3474  00F3A6  0008               	tblrd		*
  3475  00F3A8  50F5               	movf	tablat,w,c
  3476  00F3AA  1836               	xorwf	EEPROM@temp,w,c
  3477  00F3AC  A4D8               	btfss	status,2,c
  3478  00F3AE  D013               	goto	l2414
  3479                           
  3480                           ;main.c: 302: if (screen_state == 0){
  3481  00F3B0  5037               	movf	EEPROM@screen_state,w,c
  3482  00F3B2  1038               	iorwf	EEPROM@screen_state+1,w,c
  3483  00F3B4  A4D8               	btfss	status,2,c
  3484  00F3B6  D005               	goto	l2410
  3485                           
  3486                           ;main.c: 303: screen_state = 3;
  3487  00F3B8  0E00               	movlw	0
  3488  00F3BA  6E38               	movwf	EEPROM@screen_state+1,c
  3489  00F3BC  0E03               	movlw	3
  3490  00F3BE  6E37               	movwf	EEPROM@screen_state,c
  3491                           
  3492                           ;main.c: 304: }else{
  3493  00F3C0  D003               	goto	l2412
  3494  00F3C2                     l2410:
  3495                           
  3496                           ;main.c: 305: screen_state -= 1;
  3497  00F3C2  0637               	decf	EEPROM@screen_state,f,c
  3498  00F3C4  A0D8               	btfss	status,0,c
  3499  00F3C6  0638               	decf	EEPROM@screen_state+1,f,c
  3500  00F3C8                     l2412:
  3501                           
  3502                           ;main.c: 306: }
  3503                           ;main.c: 307: update_eeprom_screen_state(screen_state);
  3504  00F3C8  C037  F02D         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  3505  00F3CC  C038  F02E         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  3506  00F3D0  ECC3  F077         	call	_update_eeprom_screen_state	;wreg free
  3507                           
  3508                           ;main.c: 308: }else if (temp == keys[6]){
  3509  00F3D4  D7B5               	goto	l2392
  3510  00F3D6                     l2414:
  3511  00F3D6  0E21               	movlw	low (_keys+6)
  3512  00F3D8  6EF6               	movwf	tblptrl,c
  3513  00F3DA  0EFE               	movlw	high (_keys+6)
  3514  00F3DC  6EF7               	movwf	tblptrh,c
  3515  00F3DE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3516  00F3DE  6AF8               	clrf	tblptru,c
  3517  00F3E0                     	endif
  3518  00F3E0                     	if	0	;tblptru may be non-zero
  3519  00F3E0                     	endif
  3520  00F3E0  0008               	tblrd		*
  3521  00F3E2  50F5               	movf	tablat,w,c
  3522  00F3E4  1836               	xorwf	EEPROM@temp,w,c
  3523  00F3E6  A4D8               	btfss	status,2,c
  3524  00F3E8  D7AB               	goto	l2392
  3525                           
  3526                           ;main.c: 309: if (screen_state == 3){
  3527  00F3EA  0E03               	movlw	3
  3528  00F3EC  1837               	xorwf	EEPROM@screen_state,w,c
  3529  00F3EE  1038               	iorwf	EEPROM@screen_state+1,w,c
  3530  00F3F0  A4D8               	btfss	status,2,c
  3531  00F3F2  D005               	goto	l2420
  3532                           
  3533                           ;main.c: 310: screen_state = 0;
  3534  00F3F4  0E00               	movlw	0
  3535  00F3F6  6E38               	movwf	EEPROM@screen_state+1,c
  3536  00F3F8  0E00               	movlw	0
  3537  00F3FA  6E37               	movwf	EEPROM@screen_state,c
  3538                           
  3539                           ;main.c: 311: }else{
  3540  00F3FC  D002               	goto	l2422
  3541  00F3FE                     l2420:
  3542                           
  3543                           ;main.c: 312: screen_state += 1;
  3544  00F3FE  4A37               	infsnz	EEPROM@screen_state,f,c
  3545  00F400  2A38               	incf	EEPROM@screen_state+1,f,c
  3546  00F402                     l2422:
  3547                           
  3548                           ;main.c: 313: }
  3549                           ;main.c: 314: update_eeprom_screen_state(screen_state);
  3550  00F402  C037  F02D         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  3551  00F406  C038  F02E         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  3552  00F40A  ECC3  F077         	call	_update_eeprom_screen_state	;wreg free
  3553  00F40E  D798               	goto	l2392
  3554  00F410                     __end_of_EEPROM:
  3555                           	opt stack 0
  3556                           tblptru	equ	0xFF8
  3557                           tblptrh	equ	0xFF7
  3558                           tblptrl	equ	0xFF6
  3559                           tablat	equ	0xFF5
  3560                           prodh	equ	0xFF4
  3561                           prodl	equ	0xFF3
  3562                           intcon	equ	0xFF2
  3563                           intcon2	equ	0xFF1
  3564                           postinc0	equ	0xFEE
  3565                           wreg	equ	0xFE8
  3566                           postdec1	equ	0xFE5
  3567                           fsr1l	equ	0xFE1
  3568                           indf2	equ	0xFDF
  3569                           postinc2	equ	0xFDE
  3570                           postdec2	equ	0xFDD
  3571                           fsr2h	equ	0xFDA
  3572                           fsr2l	equ	0xFD9
  3573                           status	equ	0xFD8
  3574                           
  3575 ;; *************** function _update_eeprom_screen_state *****************
  3576 ;; Defined at:
  3577 ;;		line 165 in file "main.c"
  3578 ;; Parameters:    Size  Location     Type
  3579 ;;  num             2   44[COMRAM] int 
  3580 ;; Auto vars:     Size  Location     Type
  3581 ;;		None
  3582 ;; Return value:  Size  Location     Type
  3583 ;;                  1    wreg      void 
  3584 ;; Registers used:
  3585 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3586 ;; Tracked objects:
  3587 ;;		On entry : 0/0
  3588 ;;		On exit  : 0/0
  3589 ;;		Unchanged: 0/0
  3590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3591 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3593 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3594 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3595 ;;Total ram usage:        4 bytes
  3596 ;; Hardware stack levels used:    1
  3597 ;; Hardware stack levels required when called:    5
  3598 ;; This function calls:
  3599 ;;		_lcdClear
  3600 ;;		_lcdInst
  3601 ;;		_printf
  3602 ;; This function is called by:
  3603 ;;		_EEPROM
  3604 ;; This function uses a non-reentrant model
  3605 ;;
  3606                           
  3607                           	psect	text17
  3608  00EF86                     __ptext17:
  3609                           	opt stack 0
  3610  00EF86                     _update_eeprom_screen_state:
  3611                           	opt stack 24
  3612                           
  3613                           ;main.c: 166: lcdClear();
  3614                           
  3615                           ;incstack = 0
  3616  00EF86  ECEE  F075         	call	_lcdClear	;wreg free
  3617                           
  3618                           ;main.c: 167: switch(num){
  3619  00EF8A  D024               	goto	l2202
  3620  00EF8C                     l2192:
  3621                           
  3622                           ;main.c: 169: lcdClear();
  3623  00EF8C  ECEE  F075         	call	_lcdClear	;wreg free
  3624                           
  3625                           ;main.c: 170: printf("   Past Run 1  ");
  3626  00EF90  0EFB               	movlw	low STR_10
  3627  00EF92  6E1F               	movwf	printf@f,c
  3628  00EF94  0EFE               	movlw	high STR_10
  3629  00EF96  6E20               	movwf	printf@f+1,c
  3630  00EF98  EC1D  F076         	call	_printf	;wreg free
  3631                           
  3632                           ;main.c: 171: break;
  3633  00EF9C  D030               	goto	l2204
  3634  00EF9E                     l2194:
  3635                           
  3636                           ;main.c: 173: lcdClear();
  3637  00EF9E  ECEE  F075         	call	_lcdClear	;wreg free
  3638                           
  3639                           ;main.c: 174: printf("   Past Run 2  ");
  3640  00EFA2  0E0B               	movlw	low STR_11
  3641  00EFA4  6E1F               	movwf	printf@f,c
  3642  00EFA6  0EFF               	movlw	high STR_11
  3643  00EFA8  6E20               	movwf	printf@f+1,c
  3644  00EFAA  EC1D  F076         	call	_printf	;wreg free
  3645                           
  3646                           ;main.c: 175: break;
  3647  00EFAE  D027               	goto	l2204
  3648  00EFB0                     l2196:
  3649                           
  3650                           ;main.c: 177: lcdClear();
  3651  00EFB0  ECEE  F075         	call	_lcdClear	;wreg free
  3652                           
  3653                           ;main.c: 178: printf("   Past Run 3  ");
  3654  00EFB4  0E1B               	movlw	low STR_12
  3655  00EFB6  6E1F               	movwf	printf@f,c
  3656  00EFB8  0EFF               	movlw	high STR_12
  3657  00EFBA  6E20               	movwf	printf@f+1,c
  3658  00EFBC  EC1D  F076         	call	_printf	;wreg free
  3659                           
  3660                           ;main.c: 179: break;
  3661  00EFC0  D01E               	goto	l2204
  3662  00EFC2                     l2198:
  3663                           
  3664                           ;main.c: 181: lcdClear();
  3665  00EFC2  ECEE  F075         	call	_lcdClear	;wreg free
  3666                           
  3667                           ;main.c: 182: printf("   Past Run 4  ");
  3668  00EFC6  0E2B               	movlw	low STR_13
  3669  00EFC8  6E1F               	movwf	printf@f,c
  3670  00EFCA  0EFF               	movlw	high STR_13
  3671  00EFCC  6E20               	movwf	printf@f+1,c
  3672  00EFCE  EC1D  F076         	call	_printf	;wreg free
  3673                           
  3674                           ;main.c: 184: }
  3675                           
  3676                           ;main.c: 183: break;
  3677  00EFD2  D015               	goto	l2204
  3678  00EFD4                     l2202:
  3679  00EFD4  C02D  F02F         	movff	update_eeprom_screen_state@num,??_update_eeprom_screen_state
  3680  00EFD8  C02E  F030         	movff	update_eeprom_screen_state@num+1,??_update_eeprom_screen_state+1
  3681                           
  3682                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3683                           ; Switch size 1, requested type "space"
  3684                           ; Number of cases is 1, Range of values is 0 to 0
  3685                           ; switch strategies available:
  3686                           ; Name         Instructions Cycles
  3687                           ; simple_byte            4     3 (average)
  3688                           ;	Chosen strategy is simple_byte
  3689  00EFDC  5030               	movf	??_update_eeprom_screen_state+1,w,c
  3690  00EFDE  0A00               	xorlw	0	; case 0
  3691  00EFE0  A4D8               	btfss	status,2,c
  3692  00EFE2  D00D               	goto	l2204
  3693                           
  3694                           ; Switch size 1, requested type "space"
  3695                           ; Number of cases is 4, Range of values is 0 to 3
  3696                           ; switch strategies available:
  3697                           ; Name         Instructions Cycles
  3698                           ; simple_byte           13     7 (average)
  3699                           ;	Chosen strategy is simple_byte
  3700  00EFE4  502F               	movf	??_update_eeprom_screen_state,w,c
  3701  00EFE6  0A00               	xorlw	0	; case 0
  3702  00EFE8  B4D8               	btfsc	status,2,c
  3703  00EFEA  D7D0               	goto	l2192
  3704  00EFEC  0A01               	xorlw	1	; case 1
  3705  00EFEE  B4D8               	btfsc	status,2,c
  3706  00EFF0  D7D6               	goto	l2194
  3707  00EFF2  0A03               	xorlw	3	; case 2
  3708  00EFF4  B4D8               	btfsc	status,2,c
  3709  00EFF6  D7DC               	goto	l2196
  3710  00EFF8  0A01               	xorlw	1	; case 3
  3711  00EFFA  B4D8               	btfsc	status,2,c
  3712  00EFFC  D7E2               	goto	l2198
  3713  00EFFE                     l2204:
  3714                           
  3715                           ;main.c: 185: lcdInst(0b11000000);;
  3716  00EFFE  0EC0               	movlw	192
  3717  00F000  EC92  F075         	call	_lcdInst
  3718                           
  3719                           ;main.c: 186: printf("<4  Nav: A/D  6>");
  3720  00F004  0ED9               	movlw	low STR_14
  3721  00F006  6E1F               	movwf	printf@f,c
  3722  00F008  0EFE               	movlw	high STR_14
  3723  00F00A  6E20               	movwf	printf@f+1,c
  3724  00F00C  EC1D  F076         	call	_printf	;wreg free
  3725  00F010  0012               	return		;funcret
  3726  00F012                     __end_of_update_eeprom_screen_state:
  3727                           	opt stack 0
  3728                           tblptru	equ	0xFF8
  3729                           tblptrh	equ	0xFF7
  3730                           tblptrl	equ	0xFF6
  3731                           tablat	equ	0xFF5
  3732                           prodh	equ	0xFF4
  3733                           prodl	equ	0xFF3
  3734                           intcon	equ	0xFF2
  3735                           intcon2	equ	0xFF1
  3736                           postinc0	equ	0xFEE
  3737                           wreg	equ	0xFE8
  3738                           postdec1	equ	0xFE5
  3739                           fsr1l	equ	0xFE1
  3740                           indf2	equ	0xFDF
  3741                           postinc2	equ	0xFDE
  3742                           postdec2	equ	0xFDD
  3743                           fsr2h	equ	0xFDA
  3744                           fsr2l	equ	0xFD9
  3745                           status	equ	0xFD8
  3746                           
  3747 ;; *************** function _past_run_access *****************
  3748 ;; Defined at:
  3749 ;;		line 352 in file "main.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;		None
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;  temp            1   49[COMRAM] unsigned char 
  3754 ;;  screen_state    2   50[COMRAM] int 
  3755 ;; Return value:  Size  Location     Type
  3756 ;;                  1    wreg      void 
  3757 ;; Registers used:
  3758 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3759 ;; Tracked objects:
  3760 ;;		On entry : 0/0
  3761 ;;		On exit  : 0/0
  3762 ;;		Unchanged: 0/0
  3763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3766 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3767 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3768 ;;Total ram usage:        4 bytes
  3769 ;; Hardware stack levels used:    1
  3770 ;; Hardware stack levels required when called:    6
  3771 ;; This function calls:
  3772 ;;		_update_past_run_screen_state
  3773 ;;		_user_input
  3774 ;; This function is called by:
  3775 ;;		_main
  3776 ;;		_EEPROM
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           	psect	text18
  3781  00F0CC                     __ptext18:
  3782                           	opt stack 0
  3783  00F0CC                     _past_run_access:
  3784                           	opt stack 24
  3785                           
  3786                           ;main.c: 353: int screen_state = 0;
  3787                           
  3788                           ;incstack = 0
  3789  00F0CC  0E00               	movlw	0
  3790  00F0CE  6E34               	movwf	past_run_access@screen_state+1,c
  3791  00F0D0  0E00               	movlw	0
  3792  00F0D2  6E33               	movwf	past_run_access@screen_state,c
  3793                           
  3794                           ;main.c: 354: update_past_run_screen_state(screen_state);
  3795  00F0D4  C033  F02D         	movff	past_run_access@screen_state,update_past_run_screen_state@num
  3796  00F0D8  C034  F02E         	movff	past_run_access@screen_state+1,update_past_run_screen_state@num+1
  3797  00F0DC  EC08  F07A         	call	_update_past_run_screen_state	;wreg free
  3798  00F0E0                     l2124:
  3799                           
  3800                           ;main.c: 356: unsigned char temp = keys[user_input()];
  3801  00F0E0  ECAD  F075         	call	_user_input	;wreg free
  3802  00F0E4  6E31               	movwf	??_past_run_access& (0+255),c
  3803  00F0E6  5031               	movf	??_past_run_access,w,c
  3804  00F0E8  0D01               	mullw	1
  3805  00F0EA  0E1B               	movlw	low _keys
  3806  00F0EC  24F3               	addwf	prodl,w,c
  3807  00F0EE  6EF6               	movwf	tblptrl,c
  3808  00F0F0  0EFE               	movlw	high _keys
  3809  00F0F2  20F4               	addwfc	prodh,w,c
  3810  00F0F4  6EF7               	movwf	tblptrh,c
  3811  00F0F6                     	if	1	;There are 3 active tblptr bytes
  3812  00F0F6  6AF8               	clrf	tblptru,c
  3813  00F0F8  0E00               	movlw	low (__mediumconst shr (0+16))
  3814  00F0FA  22F8               	addwfc	tblptru,f,c
  3815  00F0FC                     	endif
  3816  00F0FC  0008               	tblrd		*
  3817  00F0FE  CFF5 F032          	movff	tablat,past_run_access@temp
  3818                           
  3819                           ;main.c: 357: if (temp == keys[15]){
  3820  00F102  0E2A               	movlw	low (_keys+15)
  3821  00F104  6EF6               	movwf	tblptrl,c
  3822  00F106  0EFE               	movlw	high (_keys+15)
  3823  00F108  6EF7               	movwf	tblptrh,c
  3824  00F10A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3825  00F10A  6AF8               	clrf	tblptru,c
  3826  00F10C                     	endif
  3827  00F10C                     	if	0	;tblptru may be non-zero
  3828  00F10C                     	endif
  3829  00F10C  0008               	tblrd		*
  3830  00F10E  50F5               	movf	tablat,w,c
  3831  00F110  1832               	xorwf	past_run_access@temp,w,c
  3832  00F112  B4D8               	btfsc	status,2,c
  3833  00F114  0012               	return	
  3834                           
  3835                           ;main.c: 359: }else if (temp == keys[4]){
  3836                           
  3837                           ;main.c: 358: break;
  3838  00F116  0E1F               	movlw	low (_keys+4)
  3839  00F118  6EF6               	movwf	tblptrl,c
  3840  00F11A  0EFE               	movlw	high (_keys+4)
  3841  00F11C  6EF7               	movwf	tblptrh,c
  3842  00F11E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3843  00F11E  6AF8               	clrf	tblptru,c
  3844  00F120                     	endif
  3845  00F120                     	if	0	;tblptru may be non-zero
  3846  00F120                     	endif
  3847  00F120  0008               	tblrd		*
  3848  00F122  50F5               	movf	tablat,w,c
  3849  00F124  1832               	xorwf	past_run_access@temp,w,c
  3850  00F126  A4D8               	btfss	status,2,c
  3851  00F128  D013               	goto	l2142
  3852                           
  3853                           ;main.c: 360: if (screen_state == 0){
  3854  00F12A  5033               	movf	past_run_access@screen_state,w,c
  3855  00F12C  1034               	iorwf	past_run_access@screen_state+1,w,c
  3856  00F12E  A4D8               	btfss	status,2,c
  3857  00F130  D005               	goto	l2138
  3858                           
  3859                           ;main.c: 361: screen_state = 5;
  3860  00F132  0E00               	movlw	0
  3861  00F134  6E34               	movwf	past_run_access@screen_state+1,c
  3862  00F136  0E05               	movlw	5
  3863  00F138  6E33               	movwf	past_run_access@screen_state,c
  3864                           
  3865                           ;main.c: 362: }else{
  3866  00F13A  D003               	goto	l2140
  3867  00F13C                     l2138:
  3868                           
  3869                           ;main.c: 363: screen_state -= 1;
  3870  00F13C  0633               	decf	past_run_access@screen_state,f,c
  3871  00F13E  A0D8               	btfss	status,0,c
  3872  00F140  0634               	decf	past_run_access@screen_state+1,f,c
  3873  00F142                     l2140:
  3874                           
  3875                           ;main.c: 364: }
  3876                           ;main.c: 365: update_past_run_screen_state(screen_state);
  3877  00F142  C033  F02D         	movff	past_run_access@screen_state,update_past_run_screen_state@num
  3878  00F146  C034  F02E         	movff	past_run_access@screen_state+1,update_past_run_screen_state@num+1
  3879  00F14A  EC08  F07A         	call	_update_past_run_screen_state	;wreg free
  3880                           
  3881                           ;main.c: 366: }else if (temp == keys[6]){
  3882  00F14E  D7C8               	goto	l2124
  3883  00F150                     l2142:
  3884  00F150  0E21               	movlw	low (_keys+6)
  3885  00F152  6EF6               	movwf	tblptrl,c
  3886  00F154  0EFE               	movlw	high (_keys+6)
  3887  00F156  6EF7               	movwf	tblptrh,c
  3888  00F158                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3889  00F158  6AF8               	clrf	tblptru,c
  3890  00F15A                     	endif
  3891  00F15A                     	if	0	;tblptru may be non-zero
  3892  00F15A                     	endif
  3893  00F15A  0008               	tblrd		*
  3894  00F15C  50F5               	movf	tablat,w,c
  3895  00F15E  1832               	xorwf	past_run_access@temp,w,c
  3896  00F160  A4D8               	btfss	status,2,c
  3897  00F162  D7BE               	goto	l2124
  3898                           
  3899                           ;main.c: 367: if (screen_state == 5){
  3900  00F164  0E05               	movlw	5
  3901  00F166  1833               	xorwf	past_run_access@screen_state,w,c
  3902  00F168  1034               	iorwf	past_run_access@screen_state+1,w,c
  3903  00F16A  A4D8               	btfss	status,2,c
  3904  00F16C  D005               	goto	l2148
  3905                           
  3906                           ;main.c: 368: screen_state = 0;
  3907  00F16E  0E00               	movlw	0
  3908  00F170  6E34               	movwf	past_run_access@screen_state+1,c
  3909  00F172  0E00               	movlw	0
  3910  00F174  6E33               	movwf	past_run_access@screen_state,c
  3911                           
  3912                           ;main.c: 369: }else{
  3913  00F176  D002               	goto	l2150
  3914  00F178                     l2148:
  3915                           
  3916                           ;main.c: 370: screen_state += 1;
  3917  00F178  4A33               	infsnz	past_run_access@screen_state,f,c
  3918  00F17A  2A34               	incf	past_run_access@screen_state+1,f,c
  3919  00F17C                     l2150:
  3920                           
  3921                           ;main.c: 371: }
  3922                           ;main.c: 372: update_past_run_screen_state(screen_state);
  3923  00F17C  C033  F02D         	movff	past_run_access@screen_state,update_past_run_screen_state@num
  3924  00F180  C034  F02E         	movff	past_run_access@screen_state+1,update_past_run_screen_state@num+1
  3925  00F184  EC08  F07A         	call	_update_past_run_screen_state	;wreg free
  3926  00F188  D7AB               	goto	l2124
  3927  00F18A                     __end_of_past_run_access:
  3928                           	opt stack 0
  3929                           tblptru	equ	0xFF8
  3930                           tblptrh	equ	0xFF7
  3931                           tblptrl	equ	0xFF6
  3932                           tablat	equ	0xFF5
  3933                           prodh	equ	0xFF4
  3934                           prodl	equ	0xFF3
  3935                           intcon	equ	0xFF2
  3936                           intcon2	equ	0xFF1
  3937                           postinc0	equ	0xFEE
  3938                           wreg	equ	0xFE8
  3939                           postdec1	equ	0xFE5
  3940                           fsr1l	equ	0xFE1
  3941                           indf2	equ	0xFDF
  3942                           postinc2	equ	0xFDE
  3943                           postdec2	equ	0xFDD
  3944                           fsr2h	equ	0xFDA
  3945                           fsr2l	equ	0xFD9
  3946                           status	equ	0xFD8
  3947                           
  3948 ;; *************** function _user_input *****************
  3949 ;; Defined at:
  3950 ;;		line 97 in file "main.c"
  3951 ;; Parameters:    Size  Location     Type
  3952 ;;		None
  3953 ;; Auto vars:     Size  Location     Type
  3954 ;;  keypress        1    0[COMRAM] unsigned char 
  3955 ;; Return value:  Size  Location     Type
  3956 ;;                  1    wreg      unsigned char 
  3957 ;; Registers used:
  3958 ;;		wreg, status,2, status,0
  3959 ;; Tracked objects:
  3960 ;;		On entry : 0/0
  3961 ;;		On exit  : 0/0
  3962 ;;		Unchanged: 0/0
  3963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3964 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3965 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3967 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3968 ;;Total ram usage:        1 bytes
  3969 ;; Hardware stack levels used:    1
  3970 ;; This function calls:
  3971 ;;		Nothing
  3972 ;; This function is called by:
  3973 ;;		_main
  3974 ;;		_operation
  3975 ;;		_EEPROM
  3976 ;;		_past_run_access
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           	psect	text19
  3981  00EB5A                     __ptext19:
  3982                           	opt stack 0
  3983  00EB5A                     _user_input:
  3984                           	opt stack 30
  3985  00EB5A                     l113:
  3986  00EB5A  A281               	btfss	3969,1,c	;volatile
  3987  00EB5C  D7FE               	goto	l113
  3988                           
  3989                           ;main.c: 99: unsigned char keypress = (PORTB & 0xF0)>>4;
  3990  00EB5E  3881               	swapf	3969,w,c	;volatile
  3991  00EB60  0B0F               	andlw	15
  3992  00EB62  0B0F               	andlw	15
  3993  00EB64  6E01               	movwf	user_input@keypress,c
  3994  00EB66                     l116:
  3995  00EB66  B281               	btfsc	3969,1,c	;volatile
  3996  00EB68  D7FE               	goto	l116
  3997                           
  3998                           ;main.c: 101: __nop();
  3999  00EB6A  F000               	nop	
  4000                           
  4001                           ;main.c: 102: __nop();
  4002  00EB6C  F000               	nop	
  4003                           
  4004                           ;main.c: 103: return keypress;
  4005  00EB6E  5001               	movf	user_input@keypress,w,c
  4006  00EB70  0012               	return	
  4007  00EB72                     __end_of_user_input:
  4008                           	opt stack 0
  4009                           tblptru	equ	0xFF8
  4010                           tblptrh	equ	0xFF7
  4011                           tblptrl	equ	0xFF6
  4012                           tablat	equ	0xFF5
  4013                           prodh	equ	0xFF4
  4014                           prodl	equ	0xFF3
  4015                           intcon	equ	0xFF2
  4016                           intcon2	equ	0xFF1
  4017                           postinc0	equ	0xFEE
  4018                           wreg	equ	0xFE8
  4019                           postdec1	equ	0xFE5
  4020                           fsr1l	equ	0xFE1
  4021                           indf2	equ	0xFDF
  4022                           postinc2	equ	0xFDE
  4023                           postdec2	equ	0xFDD
  4024                           fsr2h	equ	0xFDA
  4025                           fsr2l	equ	0xFD9
  4026                           status	equ	0xFD8
  4027                           
  4028 ;; *************** function _update_past_run_screen_state *****************
  4029 ;; Defined at:
  4030 ;;		line 190 in file "main.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;  num             2   44[COMRAM] int 
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;		None
  4035 ;; Return value:  Size  Location     Type
  4036 ;;                  1    wreg      void 
  4037 ;; Registers used:
  4038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4039 ;; Tracked objects:
  4040 ;;		On entry : 0/0
  4041 ;;		On exit  : 0/0
  4042 ;;		Unchanged: 0/0
  4043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4044 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4046 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4047 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4048 ;;Total ram usage:        4 bytes
  4049 ;; Hardware stack levels used:    1
  4050 ;; Hardware stack levels required when called:    5
  4051 ;; This function calls:
  4052 ;;		_lcdClear
  4053 ;;		_lcdInst
  4054 ;;		_printf
  4055 ;; This function is called by:
  4056 ;;		_past_run_access
  4057 ;; This function uses a non-reentrant model
  4058 ;;
  4059                           
  4060                           	psect	text20
  4061  00F410                     __ptext20:
  4062                           	opt stack 0
  4063  00F410                     _update_past_run_screen_state:
  4064                           	opt stack 24
  4065                           
  4066                           ;main.c: 191: lcdClear();
  4067                           
  4068                           ;incstack = 0
  4069  00F410  ECEE  F075         	call	_lcdClear	;wreg free
  4070                           
  4071                           ;main.c: 192: switch(num){
  4072  00F414  D04E               	goto	l2110
  4073  00F416                     l2096:
  4074                           
  4075                           ;main.c: 194: lcdClear();
  4076  00F416  ECEE  F075         	call	_lcdClear	;wreg free
  4077                           
  4078                           ;main.c: 195: printf("Time taken: %is", runInfo[0]);
  4079  00F41A  0E6B               	movlw	low STR_15
  4080  00F41C  6E1F               	movwf	printf@f,c
  4081  00F41E  0EFF               	movlw	high STR_15
  4082  00F420  6E20               	movwf	printf@f+1,c
  4083  00F422  C049  F021         	movff	_runInfo,?_printf+2
  4084  00F426  C04A  F022         	movff	_runInfo+1,?_printf+3
  4085  00F42A  EC1D  F076         	call	_printf	;wreg free
  4086                           
  4087                           ;main.c: 196: break;
  4088  00F42E  D05C               	goto	l2112
  4089  00F430                     l2098:
  4090                           
  4091                           ;main.c: 198: lcdClear();
  4092  00F430  ECEE  F075         	call	_lcdClear	;wreg free
  4093                           
  4094                           ;main.c: 199: printf("# Bottles: %i", runInfo[1]);
  4095  00F434  0EC2               	movlw	low STR_16
  4096  00F436  6E1F               	movwf	printf@f,c
  4097  00F438  0EFF               	movlw	high STR_16
  4098  00F43A  6E20               	movwf	printf@f+1,c
  4099  00F43C  C04B  F021         	movff	_runInfo+2,?_printf+2
  4100  00F440  C04C  F022         	movff	_runInfo+3,?_printf+3
  4101  00F444  EC1D  F076         	call	_printf	;wreg free
  4102                           
  4103                           ;main.c: 200: break;
  4104  00F448  D04F               	goto	l2112
  4105  00F44A                     l2100:
  4106                           
  4107                           ;main.c: 202: lcdClear();
  4108  00F44A  ECEE  F075         	call	_lcdClear	;wreg free
  4109                           
  4110                           ;main.c: 203: printf("Yop w/Cap: %i", runInfo[2]);
  4111  00F44E  0EB4               	movlw	low STR_17
  4112  00F450  6E1F               	movwf	printf@f,c
  4113  00F452  0EFF               	movlw	high STR_17
  4114  00F454  6E20               	movwf	printf@f+1,c
  4115  00F456  C04D  F021         	movff	_runInfo+4,?_printf+2
  4116  00F45A  C04E  F022         	movff	_runInfo+5,?_printf+3
  4117  00F45E  EC1D  F076         	call	_printf	;wreg free
  4118                           
  4119                           ;main.c: 204: break;
  4120  00F462  D042               	goto	l2112
  4121  00F464                     l2102:
  4122                           
  4123                           ;main.c: 206: lcdClear();
  4124  00F464  ECEE  F075         	call	_lcdClear	;wreg free
  4125                           
  4126                           ;main.c: 207: printf("Yop w/o Cap: %i", runInfo[3]);
  4127  00F468  0E5B               	movlw	low STR_18
  4128  00F46A  6E1F               	movwf	printf@f,c
  4129  00F46C  0EFF               	movlw	high STR_18
  4130  00F46E  6E20               	movwf	printf@f+1,c
  4131  00F470  C04F  F021         	movff	_runInfo+6,?_printf+2
  4132  00F474  C050  F022         	movff	_runInfo+7,?_printf+3
  4133  00F478  EC1D  F076         	call	_printf	;wreg free
  4134                           
  4135                           ;main.c: 208: break;
  4136  00F47C  D035               	goto	l2112
  4137  00F47E                     l2104:
  4138                           
  4139                           ;main.c: 210: lcdClear();
  4140  00F47E  ECEE  F075         	call	_lcdClear	;wreg free
  4141                           
  4142                           ;main.c: 211: printf("Eska w/ Cap: %i", runInfo[4]);
  4143  00F482  0E4B               	movlw	low STR_19
  4144  00F484  6E1F               	movwf	printf@f,c
  4145  00F486  0EFF               	movlw	high STR_19
  4146  00F488  6E20               	movwf	printf@f+1,c
  4147  00F48A  C051  F021         	movff	_runInfo+8,?_printf+2
  4148  00F48E  C052  F022         	movff	_runInfo+9,?_printf+3
  4149  00F492  EC1D  F076         	call	_printf	;wreg free
  4150                           
  4151                           ;main.c: 212: break;
  4152  00F496  D028               	goto	l2112
  4153  00F498                     l2106:
  4154                           
  4155                           ;main.c: 214: lcdClear();
  4156  00F498  ECEE  F075         	call	_lcdClear	;wreg free
  4157                           
  4158                           ;main.c: 215: printf("Eska w/o Cap: %i", runInfo[5]);
  4159  00F49C  0EEA               	movlw	low STR_20
  4160  00F49E  6E1F               	movwf	printf@f,c
  4161  00F4A0  0EFE               	movlw	high STR_20
  4162  00F4A2  6E20               	movwf	printf@f+1,c
  4163  00F4A4  C053  F021         	movff	_runInfo+10,?_printf+2
  4164  00F4A8  C054  F022         	movff	_runInfo+11,?_printf+3
  4165  00F4AC  EC1D  F076         	call	_printf	;wreg free
  4166                           
  4167                           ;main.c: 217: }
  4168                           
  4169                           ;main.c: 216: break;
  4170  00F4B0  D01B               	goto	l2112
  4171  00F4B2                     l2110:
  4172  00F4B2  C02D  F02F         	movff	update_past_run_screen_state@num,??_update_past_run_screen_state
  4173  00F4B6  C02E  F030         	movff	update_past_run_screen_state@num+1,??_update_past_run_screen_state+1
  4174                           
  4175                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4176                           ; Switch size 1, requested type "space"
  4177                           ; Number of cases is 1, Range of values is 0 to 0
  4178                           ; switch strategies available:
  4179                           ; Name         Instructions Cycles
  4180                           ; simple_byte            4     3 (average)
  4181                           ;	Chosen strategy is simple_byte
  4182  00F4BA  5030               	movf	??_update_past_run_screen_state+1,w,c
  4183  00F4BC  0A00               	xorlw	0	; case 0
  4184  00F4BE  A4D8               	btfss	status,2,c
  4185  00F4C0  D013               	goto	l2112
  4186                           
  4187                           ; Switch size 1, requested type "space"
  4188                           ; Number of cases is 6, Range of values is 0 to 5
  4189                           ; switch strategies available:
  4190                           ; Name         Instructions Cycles
  4191                           ; simple_byte           19    10 (average)
  4192                           ;	Chosen strategy is simple_byte
  4193  00F4C2  502F               	movf	??_update_past_run_screen_state,w,c
  4194  00F4C4  0A00               	xorlw	0	; case 0
  4195  00F4C6  B4D8               	btfsc	status,2,c
  4196  00F4C8  D7A6               	goto	l2096
  4197  00F4CA  0A01               	xorlw	1	; case 1
  4198  00F4CC  B4D8               	btfsc	status,2,c
  4199  00F4CE  D7B0               	goto	l2098
  4200  00F4D0  0A03               	xorlw	3	; case 2
  4201  00F4D2  B4D8               	btfsc	status,2,c
  4202  00F4D4  D7BA               	goto	l2100
  4203  00F4D6  0A01               	xorlw	1	; case 3
  4204  00F4D8  B4D8               	btfsc	status,2,c
  4205  00F4DA  D7C4               	goto	l2102
  4206  00F4DC  0A07               	xorlw	7	; case 4
  4207  00F4DE  B4D8               	btfsc	status,2,c
  4208  00F4E0  D7CE               	goto	l2104
  4209  00F4E2  0A01               	xorlw	1	; case 5
  4210  00F4E4  B4D8               	btfsc	status,2,c
  4211  00F4E6  D7D8               	goto	l2106
  4212  00F4E8                     l2112:
  4213                           
  4214                           ;main.c: 218: lcdInst(0b11000000);;
  4215  00F4E8  0EC0               	movlw	192
  4216  00F4EA  EC92  F075         	call	_lcdInst
  4217                           
  4218                           ;main.c: 219: printf("<4  Back:  D  6> ");
  4219  00F4EE  0E50               	movlw	low STR_21
  4220  00F4F0  6E1F               	movwf	printf@f,c
  4221  00F4F2  0EFE               	movlw	high STR_21
  4222  00F4F4  6E20               	movwf	printf@f+1,c
  4223  00F4F6  EC1D  F076         	call	_printf	;wreg free
  4224  00F4FA  0012               	return		;funcret
  4225  00F4FC                     __end_of_update_past_run_screen_state:
  4226                           	opt stack 0
  4227                           tblptru	equ	0xFF8
  4228                           tblptrh	equ	0xFF7
  4229                           tblptrl	equ	0xFF6
  4230                           tablat	equ	0xFF5
  4231                           prodh	equ	0xFF4
  4232                           prodl	equ	0xFF3
  4233                           intcon	equ	0xFF2
  4234                           intcon2	equ	0xFF1
  4235                           postinc0	equ	0xFEE
  4236                           wreg	equ	0xFE8
  4237                           postdec1	equ	0xFE5
  4238                           fsr1l	equ	0xFE1
  4239                           indf2	equ	0xFDF
  4240                           postinc2	equ	0xFDE
  4241                           postdec2	equ	0xFDD
  4242                           fsr2h	equ	0xFDA
  4243                           fsr2l	equ	0xFD9
  4244                           status	equ	0xFD8
  4245                           
  4246 ;; *************** function _lcdClear *****************
  4247 ;; Defined at:
  4248 ;;		line 35 in file "lcd.c"
  4249 ;; Parameters:    Size  Location     Type
  4250 ;;		None
  4251 ;; Auto vars:     Size  Location     Type
  4252 ;;		None
  4253 ;; Return value:  Size  Location     Type
  4254 ;;                  2   62[None  ] int 
  4255 ;; Registers used:
  4256 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4257 ;; Tracked objects:
  4258 ;;		On entry : 0/0
  4259 ;;		On exit  : 0/0
  4260 ;;		Unchanged: 0/0
  4261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4263 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4265 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4266 ;;Total ram usage:        0 bytes
  4267 ;; Hardware stack levels used:    1
  4268 ;; Hardware stack levels required when called:    4
  4269 ;; This function calls:
  4270 ;;		_lcdInst
  4271 ;;		_printf
  4272 ;; This function is called by:
  4273 ;;		_update_init_screen_state
  4274 ;;		_update_eeprom_screen_state
  4275 ;;		_update_past_run_screen_state
  4276 ;;		_operation
  4277 ;;		_activateServo
  4278 ;; This function uses a non-reentrant model
  4279 ;;
  4280                           
  4281                           	psect	text21
  4282  00EBDC                     __ptext21:
  4283                           	opt stack 0
  4284  00EBDC                     _lcdClear:
  4285                           	opt stack 25
  4286                           
  4287                           ;lcd.c: 36: lcdInst(0b10000000);
  4288                           
  4289                           ;incstack = 0
  4290  00EBDC  0E80               	movlw	128
  4291  00EBDE  EC92  F075         	call	_lcdInst
  4292                           
  4293                           ;lcd.c: 37: printf("                ");
  4294  00EBE2  0E73               	movlw	low STR_32
  4295  00EBE4  6E1F               	movwf	printf@f,c
  4296  00EBE6  0EFE               	movlw	high STR_32
  4297  00EBE8  6E20               	movwf	printf@f+1,c
  4298  00EBEA  EC1D  F076         	call	_printf	;wreg free
  4299                           
  4300                           ;lcd.c: 38: lcdInst(0b11000000);
  4301  00EBEE  0EC0               	movlw	192
  4302  00EBF0  EC92  F075         	call	_lcdInst
  4303                           
  4304                           ;lcd.c: 39: printf("                ");
  4305  00EBF4  0E73               	movlw	low STR_32
  4306  00EBF6  6E1F               	movwf	printf@f,c
  4307  00EBF8  0EFE               	movlw	high STR_32
  4308  00EBFA  6E20               	movwf	printf@f+1,c
  4309  00EBFC  EC1D  F076         	call	_printf	;wreg free
  4310                           
  4311                           ;lcd.c: 40: lcdInst(0b10000000);
  4312  00EC00  0E80               	movlw	128
  4313  00EC02  EC92  F075         	call	_lcdInst
  4314  00EC06  0012               	return		;funcret
  4315  00EC08                     __end_of_lcdClear:
  4316                           	opt stack 0
  4317                           tblptru	equ	0xFF8
  4318                           tblptrh	equ	0xFF7
  4319                           tblptrl	equ	0xFF6
  4320                           tablat	equ	0xFF5
  4321                           prodh	equ	0xFF4
  4322                           prodl	equ	0xFF3
  4323                           intcon	equ	0xFF2
  4324                           intcon2	equ	0xFF1
  4325                           postinc0	equ	0xFEE
  4326                           wreg	equ	0xFE8
  4327                           postdec1	equ	0xFE5
  4328                           fsr1l	equ	0xFE1
  4329                           indf2	equ	0xFDF
  4330                           postinc2	equ	0xFDE
  4331                           postdec2	equ	0xFDD
  4332                           fsr2h	equ	0xFDA
  4333                           fsr2l	equ	0xFD9
  4334                           status	equ	0xFD8
  4335                           
  4336 ;; *************** function _printf *****************
  4337 ;; Defined at:
  4338 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
  4339 ;; Parameters:    Size  Location     Type
  4340 ;;  f               2   30[COMRAM] PTR const unsigned char 
  4341 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
  4342 ;;		 -> STR_29(18), STR_28(13), STR_27(12), STR_26(5), 
  4343 ;;		 -> STR_25(4), STR_24(17), STR_23(14), STR_22(16), 
  4344 ;;		 -> STR_21(18), STR_20(17), STR_19(16), STR_18(16), 
  4345 ;;		 -> STR_17(14), STR_16(14), STR_15(16), STR_14(17), 
  4346 ;;		 -> STR_13(16), STR_12(16), STR_11(16), STR_10(16), 
  4347 ;;		 -> STR_9(17), STR_8(17), STR_7(14), STR_6(15), 
  4348 ;;		 -> STR_5(13), STR_4(14), 
  4349 ;; Auto vars:     Size  Location     Type
  4350 ;;  pb              4   40[COMRAM] struct __prbuf
  4351 ;;  ap              2   38[COMRAM] PTR void [1]
  4352 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4353 ;; Return value:  Size  Location     Type
  4354 ;;                  2   30[COMRAM] int 
  4355 ;; Registers used:
  4356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4357 ;; Tracked objects:
  4358 ;;		On entry : 0/0
  4359 ;;		On exit  : 0/0
  4360 ;;		Unchanged: 0/0
  4361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4362 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4363 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4365 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4366 ;;Total ram usage:       14 bytes
  4367 ;; Hardware stack levels used:    1
  4368 ;; Hardware stack levels required when called:    3
  4369 ;; This function calls:
  4370 ;;		__doprnt
  4371 ;; This function is called by:
  4372 ;;		_update_init_screen_state
  4373 ;;		_update_eeprom_screen_state
  4374 ;;		_update_past_run_screen_state
  4375 ;;		_operation
  4376 ;;		_activateServo
  4377 ;;		_lcdClear
  4378 ;; This function uses a non-reentrant model
  4379 ;;
  4380                           
  4381                           	psect	text22
  4382  00EC3A                     __ptext22:
  4383                           	opt stack 0
  4384  00EC3A                     _printf:
  4385                           	opt stack 26
  4386                           
  4387                           ;incstack = 0
  4388  00EC3A  0E00               	movlw	0
  4389  00EC3C  6E29               	movwf	printf@pb,c
  4390  00EC3E  0E00               	movlw	0
  4391  00EC40  6E2A               	movwf	printf@pb+1,c
  4392  00EC42  0E30               	movlw	low _putch
  4393  00EC44  6E2B               	movwf	printf@pb+2,c
  4394  00EC46  0EEB               	movlw	high _putch
  4395  00EC48  6E2C               	movwf	printf@pb+3,c
  4396  00EC4A  0E21               	movlw	low (?_printf+2)
  4397  00EC4C  6E27               	movwf	printf@ap,c
  4398  00EC4E  0E00               	movlw	high (?_printf+2)
  4399  00EC50  6E28               	movwf	printf@ap+1,c
  4400                           
  4401                           ;	Return value of _printf is never used
  4402  00EC52  0E29               	movlw	low printf@pb
  4403  00EC54  6E0D               	movwf	__doprnt@pb,c
  4404  00EC56  0E00               	movlw	high printf@pb
  4405  00EC58  6E0E               	movwf	__doprnt@pb+1,c
  4406  00EC5A  C01F  F00F         	movff	printf@f,__doprnt@f
  4407  00EC5E  C020  F010         	movff	printf@f+1,__doprnt@f+1
  4408  00EC62  0E27               	movlw	low printf@ap
  4409  00EC64  6E11               	movwf	__doprnt@ap,c
  4410  00EC66  0E00               	movlw	high printf@ap
  4411  00EC68  6E12               	movwf	__doprnt@ap+1,c
  4412  00EC6A  EC36  F07C         	call	__doprnt	;wreg free
  4413  00EC6E  0012               	return	
  4414  00EC70                     __end_of_printf:
  4415                           	opt stack 0
  4416                           tblptru	equ	0xFF8
  4417                           tblptrh	equ	0xFF7
  4418                           tblptrl	equ	0xFF6
  4419                           tablat	equ	0xFF5
  4420                           prodh	equ	0xFF4
  4421                           prodl	equ	0xFF3
  4422                           intcon	equ	0xFF2
  4423                           intcon2	equ	0xFF1
  4424                           postinc0	equ	0xFEE
  4425                           wreg	equ	0xFE8
  4426                           postdec1	equ	0xFE5
  4427                           fsr1l	equ	0xFE1
  4428                           indf2	equ	0xFDF
  4429                           postinc2	equ	0xFDE
  4430                           postdec2	equ	0xFDD
  4431                           fsr2h	equ	0xFDA
  4432                           fsr2l	equ	0xFD9
  4433                           status	equ	0xFD8
  4434                           
  4435 ;; *************** function __doprnt *****************
  4436 ;; Defined at:
  4437 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4438 ;; Parameters:    Size  Location     Type
  4439 ;;  pb              2   12[COMRAM] PTR struct __prbuf
  4440 ;;		 -> sprintf@pb(4), printf@pb(4), 
  4441 ;;  f               2   14[COMRAM] PTR const unsigned char 
  4442 ;;		 -> STR_33(17), STR_32(17), STR_31(17), STR_30(17), 
  4443 ;;		 -> STR_29(18), STR_28(13), STR_27(12), STR_26(5), 
  4444 ;;		 -> STR_25(4), STR_24(17), STR_23(14), STR_22(16), 
  4445 ;;		 -> STR_21(18), STR_20(17), STR_19(16), STR_18(16), 
  4446 ;;		 -> STR_17(14), STR_16(14), STR_15(16), STR_14(17), 
  4447 ;;		 -> STR_13(16), STR_12(16), STR_11(16), STR_10(16), 
  4448 ;;		 -> STR_9(17), STR_8(17), STR_7(14), STR_6(15), 
  4449 ;;		 -> STR_5(13), STR_4(14), STR_3(5), STR_2(5), 
  4450 ;;		 -> STR_1(5), 
  4451 ;;  ap              2   16[COMRAM] PTR PTR void 
  4452 ;;		 -> sprintf@ap(2), printf@ap(2), 
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;  idx             1   22[COMRAM] unsigned char 
  4455 ;;  tmpval          4    0        struct .
  4456 ;;  cp              3    0        PTR const unsigned char 
  4457 ;;  width           2   27[COMRAM] int 
  4458 ;;  val             2   24[COMRAM] unsigned int 
  4459 ;;  len             2    0        unsigned int 
  4460 ;;  c               1   29[COMRAM] char 
  4461 ;;  flag            1   26[COMRAM] unsigned char 
  4462 ;;  prec            1   23[COMRAM] char 
  4463 ;; Return value:  Size  Location     Type
  4464 ;;                  2   12[COMRAM] int 
  4465 ;; Registers used:
  4466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4467 ;; Tracked objects:
  4468 ;;		On entry : 0/0
  4469 ;;		On exit  : 0/0
  4470 ;;		Unchanged: 0/0
  4471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4472 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4473 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4474 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4475 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4476 ;;Total ram usage:       18 bytes
  4477 ;; Hardware stack levels used:    1
  4478 ;; Hardware stack levels required when called:    2
  4479 ;; This function calls:
  4480 ;;		Absolute function
  4481 ;;		___lwdiv
  4482 ;;		___lwmod
  4483 ;;		___wmul
  4484 ;;		_isdigit
  4485 ;;		_putch
  4486 ;; This function is called by:
  4487 ;;		_printf
  4488 ;;		_sprintf
  4489 ;; This function uses a non-reentrant model
  4490 ;;
  4491                           
  4492                           	psect	text23
  4493  00F86C                     __ptext23:
  4494                           	opt stack 0
  4495  00F86C                     __doprnt:
  4496                           	opt stack 26
  4497                           
  4498                           ;doprnt.c: 499: signed char c;
  4499                           ;doprnt.c: 501: int width;
  4500                           ;doprnt.c: 506: signed char prec;
  4501                           ;doprnt.c: 508: unsigned char flag;
  4502                           ;doprnt.c: 523: union {
  4503                           ;doprnt.c: 524: unsigned long vd;
  4504                           ;doprnt.c: 525: double integ;
  4505                           ;doprnt.c: 526: } tmpval;
  4506                           ;doprnt.c: 528: unsigned int val;
  4507                           ;doprnt.c: 529: unsigned len;
  4508                           ;doprnt.c: 530: const char * cp;
  4509                           ;doprnt.c: 536: while(c = *f++) {
  4510                           
  4511                           ;incstack = 0
  4512  00F86C  D2C4               	goto	l2030
  4513  00F86E                     l1872:
  4514                           
  4515                           ;doprnt.c: 538: if(c != '%')
  4516  00F86E  0E25               	movlw	37
  4517  00F870  181E               	xorwf	__doprnt@c,w,c
  4518  00F872  B4D8               	btfsc	status,2,c
  4519  00F874  D036               	goto	l1882
  4520                           
  4521                           ;doprnt.c: 540: {
  4522                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4523  00F876  EE20 F002          	lfsr	2,2
  4524  00F87A  500D               	movf	__doprnt@pb,w,c
  4525  00F87C  26D9               	addwf	fsr2l,f,c
  4526  00F87E  500E               	movf	__doprnt@pb+1,w,c
  4527  00F880  22DA               	addwfc	fsr2h,f,c
  4528  00F882  50DE               	movf	postinc2,w,c
  4529  00F884  10DE               	iorwf	postinc2,w,c
  4530  00F886  B4D8               	btfsc	status,2,c
  4531  00F888  D016               	goto	l1878
  4532  00F88A  EE20 F002          	lfsr	2,2
  4533  00F88E  500D               	movf	__doprnt@pb,w,c
  4534  00F890  26D9               	addwf	fsr2l,f,c
  4535  00F892  500E               	movf	__doprnt@pb+1,w,c
  4536  00F894  22DA               	addwfc	fsr2h,f,c
  4537  00F896  CFDE F013          	movff	postinc2,??__doprnt
  4538  00F89A  CFDD F014          	movff	postdec2,??__doprnt+1
  4539  00F89E  D801               	call	u1028
  4540  00F8A0  D2AA               	goto	l2030
  4541  00F8A2                     u1028:
  4542  00F8A2  0005               	push	
  4543  00F8A4  6EFA               	movwf	pclath,c
  4544  00F8A6  5013               	movf	??__doprnt,w,c
  4545  00F8A8  6EFD               	movwf	tosl,c
  4546  00F8AA  5014               	movf	??__doprnt+1,w,c
  4547  00F8AC  6EFE               	movwf	tosh,c
  4548  00F8AE  6AFF               	clrf	tosu,c
  4549  00F8B0  50FA               	movf	pclath,w,c
  4550  00F8B2  501E               	movf	__doprnt@c,w,c
  4551  00F8B4  0012               	return		;indir
  4552  00F8B6                     l1878:
  4553  00F8B6  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  4554  00F8BA  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  4555  00F8BE  CFDE F013          	movff	postinc2,??__doprnt
  4556  00F8C2  CFDD F014          	movff	postdec2,??__doprnt+1
  4557  00F8C6  C013  FFD9         	movff	??__doprnt,fsr2l
  4558  00F8CA  C014  FFDA         	movff	??__doprnt+1,fsr2h
  4559  00F8CE  C01E  FFDF         	movff	__doprnt@c,indf2
  4560  00F8D2  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  4561  00F8D6  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  4562  00F8DA  2ADE               	incf	postinc2,f,c
  4563  00F8DC  0E00               	movlw	0
  4564  00F8DE  22DD               	addwfc	postdec2,f,c
  4565                           
  4566                           ;doprnt.c: 542: continue;
  4567  00F8E0  D28A               	goto	l2030
  4568  00F8E2                     l1882:
  4569                           
  4570                           ;doprnt.c: 543: }
  4571                           ;doprnt.c: 546: width = 0;
  4572  00F8E2  0E00               	movlw	0
  4573  00F8E4  6E1D               	movwf	__doprnt@width+1,c
  4574  00F8E6  0E00               	movlw	0
  4575  00F8E8  6E1C               	movwf	__doprnt@width,c
  4576                           
  4577                           ;doprnt.c: 548: flag = 0;
  4578  00F8EA  0E00               	movlw	0
  4579  00F8EC  6E1B               	movwf	__doprnt@flag,c
  4580                           
  4581                           ;doprnt.c: 551: switch(*f) {
  4582                           
  4583                           ;doprnt.c: 550: for(;;) {
  4584  00F8EE  D003               	goto	l1888
  4585  00F8F0                     l1884:
  4586                           
  4587                           ;doprnt.c: 580: flag |= 0x04;
  4588  00F8F0  841B               	bsf	__doprnt@flag,2,c
  4589                           
  4590                           ;doprnt.c: 581: f++;
  4591  00F8F2  4A0F               	infsnz	__doprnt@f,f,c
  4592  00F8F4  2A10               	incf	__doprnt@f+1,f,c
  4593  00F8F6                     l1888:
  4594  00F8F6  C00F  FFF6         	movff	__doprnt@f,tblptrl
  4595  00F8FA  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  4596  00F8FE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4597  00F8FE  6AF8               	clrf	tblptru,c
  4598  00F900                     	endif
  4599  00F900                     	if	0	;tblptru may be non-zero
  4600  00F900                     	endif
  4601  00F900  0008               	tblrd		*
  4602  00F902  50F5               	movf	tablat,w,c
  4603                           
  4604                           ; Switch size 1, requested type "space"
  4605                           ; Number of cases is 1, Range of values is 48 to 48
  4606                           ; switch strategies available:
  4607                           ; Name         Instructions Cycles
  4608                           ; simple_byte            4     3 (average)
  4609                           ;	Chosen strategy is simple_byte
  4610  00F904  0A30               	xorlw	48	; case 48
  4611  00F906  B4D8               	btfsc	status,2,c
  4612  00F908  D7F3               	goto	l1884
  4613                           
  4614                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4615                           
  4616                           ;doprnt.c: 586: }
  4617                           
  4618                           ;doprnt.c: 585: break;
  4619  00F90A  C00F  FFF6         	movff	__doprnt@f,tblptrl
  4620  00F90E  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  4621  00F912                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4622  00F912  6AF8               	clrf	tblptru,c
  4623  00F914                     	endif
  4624  00F914                     	if	0	;tblptru may be non-zero
  4625  00F914                     	endif
  4626  00F914  0008               	tblrd		*
  4627  00F916  50F5               	movf	tablat,w,c
  4628  00F918  ECB9  F075         	call	_isdigit
  4629  00F91C  A0D8               	btfss	status,0,c
  4630  00F91E  D037               	goto	l1906
  4631                           
  4632                           ;doprnt.c: 598: width = 0;
  4633  00F920  0E00               	movlw	0
  4634  00F922  6E1D               	movwf	__doprnt@width+1,c
  4635  00F924  0E00               	movlw	0
  4636  00F926  6E1C               	movwf	__doprnt@width,c
  4637  00F928                     l1894:
  4638                           
  4639                           ;doprnt.c: 600: width *= 10;
  4640  00F928  C01C  F001         	movff	__doprnt@width,___wmul@multiplier
  4641  00F92C  C01D  F002         	movff	__doprnt@width+1,___wmul@multiplier+1
  4642  00F930  0E00               	movlw	0
  4643  00F932  6E04               	movwf	___wmul@multiplicand+1,c
  4644  00F934  0E0A               	movlw	10
  4645  00F936  6E03               	movwf	___wmul@multiplicand,c
  4646  00F938  ECC8  F075         	call	___wmul	;wreg free
  4647  00F93C  C001  F01C         	movff	?___wmul,__doprnt@width
  4648  00F940  C002  F01D         	movff	?___wmul+1,__doprnt@width+1
  4649                           
  4650                           ;doprnt.c: 601: width += *f++ - '0';
  4651  00F944  0ED0               	movlw	208
  4652  00F946  6E13               	movwf	??__doprnt& (0+255),c
  4653  00F948  0EFF               	movlw	255
  4654  00F94A  6E14               	movwf	(??__doprnt+1)& (0+255),c
  4655  00F94C  C00F  FFF6         	movff	__doprnt@f,tblptrl
  4656  00F950  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  4657  00F954                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4658  00F954  6AF8               	clrf	tblptru,c
  4659  00F956                     	endif
  4660  00F956                     	if	0	;tblptru may be non-zero
  4661  00F956                     	endif
  4662  00F956  0008               	tblrd		*
  4663  00F958  50F5               	movf	tablat,w,c
  4664  00F95A  6E15               	movwf	(??__doprnt+2)& (0+255),c
  4665  00F95C  6A16               	clrf	(??__doprnt+3)& (0+255),c
  4666  00F95E  5013               	movf	??__doprnt,w,c
  4667  00F960  2615               	addwf	??__doprnt+2,f,c
  4668  00F962  5014               	movf	??__doprnt+1,w,c
  4669  00F964  2216               	addwfc	??__doprnt+3,f,c
  4670  00F966  5015               	movf	??__doprnt+2,w,c
  4671  00F968  261C               	addwf	__doprnt@width,f,c
  4672  00F96A  5016               	movf	??__doprnt+3,w,c
  4673  00F96C  221D               	addwfc	__doprnt@width+1,f,c
  4674  00F96E  4A0F               	infsnz	__doprnt@f,f,c
  4675  00F970  2A10               	incf	__doprnt@f+1,f,c
  4676                           
  4677                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4678  00F972  C00F  FFF6         	movff	__doprnt@f,tblptrl
  4679  00F976  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  4680  00F97A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4681  00F97A  6AF8               	clrf	tblptru,c
  4682  00F97C                     	endif
  4683  00F97C                     	if	0	;tblptru may be non-zero
  4684  00F97C                     	endif
  4685  00F97C  0008               	tblrd		*
  4686  00F97E  50F5               	movf	tablat,w,c
  4687  00F980  ECB9  F075         	call	_isdigit
  4688  00F984  A0D8               	btfss	status,0,c
  4689  00F986  D003               	goto	l1906
  4690  00F988  D7CF               	goto	l1894
  4691  00F98A                     l1902:
  4692                           
  4693                           ;doprnt.c: 721: flag |= 0x80;
  4694  00F98A  8E1B               	bsf	__doprnt@flag,7,c
  4695                           
  4696                           ;doprnt.c: 723: break;
  4697  00F98C  D018               	goto	l339
  4698  00F98E                     l1906:
  4699  00F98E  C00F  FFF6         	movff	__doprnt@f,tblptrl
  4700  00F992  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  4701  00F996  4A0F               	infsnz	__doprnt@f,f,c
  4702  00F998  2A10               	incf	__doprnt@f+1,f,c
  4703  00F99A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4704  00F99A  6AF8               	clrf	tblptru,c
  4705  00F99C                     	endif
  4706  00F99C                     	if	0	;tblptru may be non-zero
  4707  00F99C                     	endif
  4708  00F99C  0008               	tblrd		*
  4709  00F99E  CFF5 F01E          	movff	tablat,__doprnt@c
  4710  00F9A2  501E               	movf	__doprnt@c,w,c
  4711                           
  4712                           ; Switch size 1, requested type "space"
  4713                           ; Number of cases is 4, Range of values is 0 to 120
  4714                           ; switch strategies available:
  4715                           ; Name         Instructions Cycles
  4716                           ; simple_byte           13     7 (average)
  4717                           ;	Chosen strategy is simple_byte
  4718  00F9A4  0A00               	xorlw	0	; case 0
  4719  00F9A6  B4D8               	btfsc	status,2,c
  4720  00F9A8  D233               	goto	l2032
  4721  00F9AA  0A64               	xorlw	100	; case 100
  4722  00F9AC  B4D8               	btfsc	status,2,c
  4723  00F9AE  D007               	goto	l339
  4724  00F9B0  0A0D               	xorlw	13	; case 105
  4725  00F9B2  B4D8               	btfsc	status,2,c
  4726  00F9B4  D004               	goto	l339
  4727  00F9B6  0A11               	xorlw	17	; case 120
  4728  00F9B8  B4D8               	btfsc	status,2,c
  4729  00F9BA  D7E7               	goto	l1902
  4730  00F9BC  D21C               	goto	l2030
  4731  00F9BE                     l339:
  4732                           
  4733                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4734  00F9BE  BE1B               	btfsc	__doprnt@flag,7,c
  4735  00F9C0  D01D               	goto	l1916
  4736                           
  4737                           ;doprnt.c: 1253: {
  4738                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4739  00F9C2  C011  FFD9         	movff	__doprnt@ap,fsr2l
  4740  00F9C6  C012  FFDA         	movff	__doprnt@ap+1,fsr2h
  4741  00F9CA  CFDF F013          	movff	indf2,??__doprnt
  4742  00F9CE  0E02               	movlw	2
  4743  00F9D0  26DE               	addwf	postinc2,f,c
  4744  00F9D2  CFDF F014          	movff	indf2,??__doprnt+1
  4745  00F9D6  0E00               	movlw	0
  4746  00F9D8  22DD               	addwfc	postdec2,f,c
  4747  00F9DA  C013  FFD9         	movff	??__doprnt,fsr2l
  4748  00F9DE  C014  FFDA         	movff	??__doprnt+1,fsr2h
  4749  00F9E2  CFDE F019          	movff	postinc2,__doprnt@val
  4750  00F9E6  CFDD F01A          	movff	postdec2,__doprnt@val+1
  4751                           
  4752                           ;doprnt.c: 1261: if((int)val < 0) {
  4753  00F9EA  AE1A               	btfss	__doprnt@val+1,7,c
  4754  00F9EC  D052               	goto	l1948
  4755                           
  4756                           ;doprnt.c: 1262: flag |= 0x03;
  4757  00F9EE  0E03               	movlw	3
  4758  00F9F0  121B               	iorwf	__doprnt@flag,f,c
  4759                           
  4760                           ;doprnt.c: 1263: val = -val;
  4761  00F9F2  6C19               	negf	__doprnt@val,c
  4762  00F9F4  1E1A               	comf	__doprnt@val+1,f,c
  4763  00F9F6  B0D8               	btfsc	status,0,c
  4764  00F9F8  2A1A               	incf	__doprnt@val+1,f,c
  4765                           
  4766                           ;doprnt.c: 1264: }
  4767                           ;doprnt.c: 1266: }
  4768  00F9FA  D04B               	goto	l1948
  4769  00F9FC                     l1916:
  4770                           
  4771                           ;doprnt.c: 1268: else
  4772                           ;doprnt.c: 1273: {
  4773                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4774  00F9FC  C011  FFD9         	movff	__doprnt@ap,fsr2l
  4775  00FA00  C012  FFDA         	movff	__doprnt@ap+1,fsr2h
  4776  00FA04  CFDF F013          	movff	indf2,??__doprnt
  4777  00FA08  0E02               	movlw	2
  4778  00FA0A  26DE               	addwf	postinc2,f,c
  4779  00FA0C  CFDF F014          	movff	indf2,??__doprnt+1
  4780  00FA10  0E00               	movlw	0
  4781  00FA12  22DD               	addwfc	postdec2,f,c
  4782  00FA14  C013  FFD9         	movff	??__doprnt,fsr2l
  4783  00FA18  C014  FFDA         	movff	??__doprnt+1,fsr2h
  4784  00FA1C  CFDE F019          	movff	postinc2,__doprnt@val
  4785  00FA20  CFDD F01A          	movff	postdec2,__doprnt@val+1
  4786                           
  4787                           ;doprnt.c: 1287: }
  4788                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  4789  00FA24  D036               	goto	l1948
  4790  00FA26                     l1918:
  4791                           
  4792                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4793  00FA26  0E01               	movlw	1
  4794  00FA28  6E1E               	movwf	__doprnt@c,c
  4795  00FA2A                     l1920:
  4796  00FA2A  0E05               	movlw	5
  4797  00FA2C  181E               	xorwf	__doprnt@c,w,c
  4798  00FA2E  B4D8               	btfsc	status,2,c
  4799  00FA30  D038               	goto	l1950
  4800                           
  4801                           ;doprnt.c: 1306: if(val < dpowers[c])
  4802  00FA32  501E               	movf	__doprnt@c,w,c
  4803  00FA34  0D02               	mullw	2
  4804  00FA36  0E2C               	movlw	low _dpowers
  4805  00FA38  24F3               	addwf	prodl,w,c
  4806  00FA3A  6EF6               	movwf	tblptrl,c
  4807  00FA3C  0EFE               	movlw	high _dpowers
  4808  00FA3E  20F4               	addwfc	prodh,w,c
  4809  00FA40  6EF7               	movwf	tblptrh,c
  4810  00FA42                     	if	1	;There are 3 active tblptr bytes
  4811  00FA42  6AF8               	clrf	tblptru,c
  4812  00FA44  0E00               	movlw	low (__mediumconst shr (0+16))
  4813  00FA46  22F8               	addwfc	tblptru,f,c
  4814  00FA48                     	endif
  4815  00FA48  0009               	tblrd		*+
  4816  00FA4A  50F5               	movf	tablat,w,c
  4817  00FA4C  5C19               	subwf	__doprnt@val,w,c
  4818  00FA4E  0009               	tblrd		*+
  4819  00FA50  50F5               	movf	tablat,w,c
  4820  00FA52  581A               	subwfb	__doprnt@val+1,w,c
  4821  00FA54  A0D8               	btfss	status,0,c
  4822  00FA56  D025               	goto	l1950
  4823                           
  4824                           ;doprnt.c: 1307: break;
  4825  00FA58  2A1E               	incf	__doprnt@c,f,c
  4826  00FA5A  D7E7               	goto	l1920
  4827  00FA5C                     l1932:
  4828                           
  4829                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4830  00FA5C  0E01               	movlw	1
  4831  00FA5E  6E1E               	movwf	__doprnt@c,c
  4832  00FA60                     l1934:
  4833  00FA60  0E04               	movlw	4
  4834  00FA62  181E               	xorwf	__doprnt@c,w,c
  4835  00FA64  B4D8               	btfsc	status,2,c
  4836  00FA66  D01D               	goto	l1950
  4837                           
  4838                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4839  00FA68  501E               	movf	__doprnt@c,w,c
  4840  00FA6A  0D02               	mullw	2
  4841  00FA6C  0E36               	movlw	low _hexpowers
  4842  00FA6E  24F3               	addwf	prodl,w,c
  4843  00FA70  6EF6               	movwf	tblptrl,c
  4844  00FA72  0EFE               	movlw	high _hexpowers
  4845  00FA74  20F4               	addwfc	prodh,w,c
  4846  00FA76  6EF7               	movwf	tblptrh,c
  4847  00FA78                     	if	1	;There are 3 active tblptr bytes
  4848  00FA78  6AF8               	clrf	tblptru,c
  4849  00FA7A  0E00               	movlw	low (__mediumconst shr (0+16))
  4850  00FA7C  22F8               	addwfc	tblptru,f,c
  4851  00FA7E                     	endif
  4852  00FA7E  0009               	tblrd		*+
  4853  00FA80  50F5               	movf	tablat,w,c
  4854  00FA82  5C19               	subwf	__doprnt@val,w,c
  4855  00FA84  0009               	tblrd		*+
  4856  00FA86  50F5               	movf	tablat,w,c
  4857  00FA88  581A               	subwfb	__doprnt@val+1,w,c
  4858  00FA8A  A0D8               	btfss	status,0,c
  4859  00FA8C  D00A               	goto	l1950
  4860                           
  4861                           ;doprnt.c: 1318: break;
  4862  00FA8E  2A1E               	incf	__doprnt@c,f,c
  4863  00FA90  D7E7               	goto	l1934
  4864  00FA92                     l1948:
  4865  00FA92  501B               	movf	__doprnt@flag,w,c
  4866  00FA94  0B80               	andlw	128
  4867                           
  4868                           ; Switch size 1, requested type "space"
  4869                           ; Number of cases is 2, Range of values is 0 to 128
  4870                           ; switch strategies available:
  4871                           ; Name         Instructions Cycles
  4872                           ; simple_byte            7     4 (average)
  4873                           ;	Chosen strategy is simple_byte
  4874  00FA96  0A00               	xorlw	0	; case 0
  4875  00FA98  B4D8               	btfsc	status,2,c
  4876  00FA9A  D7C5               	goto	l1918
  4877  00FA9C  0A80               	xorlw	128	; case 128
  4878  00FA9E  B4D8               	btfsc	status,2,c
  4879  00FAA0  D7DD               	goto	l1932
  4880  00FAA2                     l1950:
  4881                           
  4882                           ;doprnt.c: 1345: if(width && flag & 0x03)
  4883  00FAA2  501C               	movf	__doprnt@width,w,c
  4884  00FAA4  101D               	iorwf	__doprnt@width+1,w,c
  4885  00FAA6  B4D8               	btfsc	status,2,c
  4886  00FAA8  D009               	goto	l1956
  4887  00FAAA  C01B  F013         	movff	__doprnt@flag,??__doprnt
  4888  00FAAE  0E03               	movlw	3
  4889  00FAB0  1613               	andwf	??__doprnt,f,c
  4890  00FAB2  B4D8               	btfsc	status,2,c
  4891  00FAB4  D003               	goto	l1956
  4892                           
  4893                           ;doprnt.c: 1346: width--;
  4894  00FAB6  061C               	decf	__doprnt@width,f,c
  4895  00FAB8  A0D8               	btfss	status,0,c
  4896  00FABA  061D               	decf	__doprnt@width+1,f,c
  4897  00FABC                     l1956:
  4898                           
  4899                           ;doprnt.c: 1381: if(width > c)
  4900  00FABC  0E80               	movlw	128
  4901  00FABE  BE1E               	btfsc	__doprnt@c,7,c
  4902  00FAC0  0E7F               	movlw	127
  4903  00FAC2  6E13               	movwf	??__doprnt& (0+255),c
  4904  00FAC4  501C               	movf	__doprnt@width,w,c
  4905  00FAC6  5C1E               	subwf	__doprnt@c,w,c
  4906  00FAC8  501D               	movf	__doprnt@width+1,w,c
  4907  00FACA  0A80               	xorlw	128
  4908  00FACC  5813               	subwfb	??__doprnt& (0+255),w,c
  4909  00FACE  B0D8               	btfsc	status,0,c
  4910  00FAD0  D007               	goto	l1960
  4911                           
  4912                           ;doprnt.c: 1382: width -= c;
  4913  00FAD2  501E               	movf	__doprnt@c,w,c
  4914  00FAD4  5E1C               	subwf	__doprnt@width,f,c
  4915  00FAD6  0E00               	movlw	0
  4916  00FAD8  BE1E               	btfsc	__doprnt@c,7,c
  4917  00FADA  0EFF               	movlw	255
  4918  00FADC  5A1D               	subwfb	__doprnt@width+1,f,c
  4919  00FADE  D004               	goto	l1962
  4920  00FAE0                     l1960:
  4921                           
  4922                           ;doprnt.c: 1383: else
  4923                           ;doprnt.c: 1384: width = 0;
  4924  00FAE0  0E00               	movlw	0
  4925  00FAE2  6E1D               	movwf	__doprnt@width+1,c
  4926  00FAE4  0E00               	movlw	0
  4927  00FAE6  6E1C               	movwf	__doprnt@width,c
  4928  00FAE8                     l1962:
  4929                           
  4930                           ;doprnt.c: 1387: if(flag & 0x04) {
  4931  00FAE8  A41B               	btfss	__doprnt@flag,2,c
  4932  00FAEA  D078               	goto	l1986
  4933                           
  4934                           ;doprnt.c: 1392: if(flag & 0x03)
  4935  00FAEC  C01B  F013         	movff	__doprnt@flag,??__doprnt
  4936  00FAF0  0E03               	movlw	3
  4937  00FAF2  1613               	andwf	??__doprnt,f,c
  4938  00FAF4  B4D8               	btfsc	status,2,c
  4939  00FAF6  D035               	goto	l1974
  4940                           
  4941                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  4942  00FAF8  EE20 F002          	lfsr	2,2
  4943  00FAFC  500D               	movf	__doprnt@pb,w,c
  4944  00FAFE  26D9               	addwf	fsr2l,f,c
  4945  00FB00  500E               	movf	__doprnt@pb+1,w,c
  4946  00FB02  22DA               	addwfc	fsr2h,f,c
  4947  00FB04  50DE               	movf	postinc2,w,c
  4948  00FB06  10DE               	iorwf	postinc2,w,c
  4949  00FB08  B4D8               	btfsc	status,2,c
  4950  00FB0A  D016               	goto	l1970
  4951  00FB0C  EE20 F002          	lfsr	2,2
  4952  00FB10  500D               	movf	__doprnt@pb,w,c
  4953  00FB12  26D9               	addwf	fsr2l,f,c
  4954  00FB14  500E               	movf	__doprnt@pb+1,w,c
  4955  00FB16  22DA               	addwfc	fsr2h,f,c
  4956  00FB18  CFDE F013          	movff	postinc2,??__doprnt
  4957  00FB1C  CFDD F014          	movff	postdec2,??__doprnt+1
  4958  00FB20  D801               	call	u1198
  4959  00FB22  D01F               	goto	l1974
  4960  00FB24                     u1198:
  4961  00FB24  0005               	push	
  4962  00FB26  6EFA               	movwf	pclath,c
  4963  00FB28  5013               	movf	??__doprnt,w,c
  4964  00FB2A  6EFD               	movwf	tosl,c
  4965  00FB2C  5014               	movf	??__doprnt+1,w,c
  4966  00FB2E  6EFE               	movwf	tosh,c
  4967  00FB30  6AFF               	clrf	tosu,c
  4968  00FB32  50FA               	movf	pclath,w,c
  4969  00FB34  0E2D               	movlw	45
  4970  00FB36  0012               	return		;indir
  4971  00FB38                     l1970:
  4972  00FB38  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  4973  00FB3C  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  4974  00FB40  CFDE F013          	movff	postinc2,??__doprnt
  4975  00FB44  CFDD F014          	movff	postdec2,??__doprnt+1
  4976  00FB48  C013  FFD9         	movff	??__doprnt,fsr2l
  4977  00FB4C  C014  FFDA         	movff	??__doprnt+1,fsr2h
  4978  00FB50  0E2D               	movlw	45
  4979  00FB52  6EDF               	movwf	indf2,c
  4980  00FB54  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  4981  00FB58  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  4982  00FB5C  2ADE               	incf	postinc2,f,c
  4983  00FB5E  0E00               	movlw	0
  4984  00FB60  22DD               	addwfc	postdec2,f,c
  4985  00FB62                     l1974:
  4986                           
  4987                           ;doprnt.c: 1415: if(width)
  4988  00FB62  501C               	movf	__doprnt@width,w,c
  4989  00FB64  101D               	iorwf	__doprnt@width+1,w,c
  4990  00FB66  B4D8               	btfsc	status,2,c
  4991  00FB68  D0B4               	goto	l2008
  4992                           
  4993                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  4994                           
  4995                           ;doprnt.c: 1416: do
  4996  00FB6A  EE20 F002          	lfsr	2,2
  4997  00FB6E  500D               	movf	__doprnt@pb,w,c
  4998  00FB70  26D9               	addwf	fsr2l,f,c
  4999  00FB72  500E               	movf	__doprnt@pb+1,w,c
  5000  00FB74  22DA               	addwfc	fsr2h,f,c
  5001  00FB76  50DE               	movf	postinc2,w,c
  5002  00FB78  10DE               	iorwf	postinc2,w,c
  5003  00FB7A  B4D8               	btfsc	status,2,c
  5004  00FB7C  D016               	goto	l1980
  5005  00FB7E  EE20 F002          	lfsr	2,2
  5006  00FB82  500D               	movf	__doprnt@pb,w,c
  5007  00FB84  26D9               	addwf	fsr2l,f,c
  5008  00FB86  500E               	movf	__doprnt@pb+1,w,c
  5009  00FB88  22DA               	addwfc	fsr2h,f,c
  5010  00FB8A  CFDE F013          	movff	postinc2,??__doprnt
  5011  00FB8E  CFDD F014          	movff	postdec2,??__doprnt+1
  5012  00FB92  D801               	call	u1228
  5013  00FB94  D01F               	goto	l1984
  5014  00FB96                     u1228:
  5015  00FB96  0005               	push	
  5016  00FB98  6EFA               	movwf	pclath,c
  5017  00FB9A  5013               	movf	??__doprnt,w,c
  5018  00FB9C  6EFD               	movwf	tosl,c
  5019  00FB9E  5014               	movf	??__doprnt+1,w,c
  5020  00FBA0  6EFE               	movwf	tosh,c
  5021  00FBA2  6AFF               	clrf	tosu,c
  5022  00FBA4  50FA               	movf	pclath,w,c
  5023  00FBA6  0E30               	movlw	48
  5024  00FBA8  0012               	return		;indir
  5025  00FBAA                     l1980:
  5026  00FBAA  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  5027  00FBAE  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  5028  00FBB2  CFDE F013          	movff	postinc2,??__doprnt
  5029  00FBB6  CFDD F014          	movff	postdec2,??__doprnt+1
  5030  00FBBA  C013  FFD9         	movff	??__doprnt,fsr2l
  5031  00FBBE  C014  FFDA         	movff	??__doprnt+1,fsr2h
  5032  00FBC2  0E30               	movlw	48
  5033  00FBC4  6EDF               	movwf	indf2,c
  5034  00FBC6  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  5035  00FBCA  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  5036  00FBCE  2ADE               	incf	postinc2,f,c
  5037  00FBD0  0E00               	movlw	0
  5038  00FBD2  22DD               	addwfc	postdec2,f,c
  5039  00FBD4                     l1984:
  5040                           
  5041                           ;doprnt.c: 1418: while(--width);
  5042  00FBD4  061C               	decf	__doprnt@width,f,c
  5043  00FBD6  A0D8               	btfss	status,0,c
  5044  00FBD8  061D               	decf	__doprnt@width+1,f,c
  5045  00FBDA  D7C3               	goto	l1974
  5046  00FBDC                     l1986:
  5047                           
  5048                           ;doprnt.c: 1422: {
  5049                           ;doprnt.c: 1424: if(width
  5050                           ;doprnt.c: 1428: )
  5051  00FBDC  501C               	movf	__doprnt@width,w,c
  5052  00FBDE  101D               	iorwf	__doprnt@width+1,w,c
  5053  00FBE0  B4D8               	btfsc	status,2,c
  5054  00FBE2  D03C               	goto	l1998
  5055  00FBE4                     l1988:
  5056                           
  5057                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  5058  00FBE4  EE20 F002          	lfsr	2,2
  5059  00FBE8  500D               	movf	__doprnt@pb,w,c
  5060  00FBEA  26D9               	addwf	fsr2l,f,c
  5061  00FBEC  500E               	movf	__doprnt@pb+1,w,c
  5062  00FBEE  22DA               	addwfc	fsr2h,f,c
  5063  00FBF0  50DE               	movf	postinc2,w,c
  5064  00FBF2  10DE               	iorwf	postinc2,w,c
  5065  00FBF4  B4D8               	btfsc	status,2,c
  5066  00FBF6  D016               	goto	l1992
  5067  00FBF8  EE20 F002          	lfsr	2,2
  5068  00FBFC  500D               	movf	__doprnt@pb,w,c
  5069  00FBFE  26D9               	addwf	fsr2l,f,c
  5070  00FC00  500E               	movf	__doprnt@pb+1,w,c
  5071  00FC02  22DA               	addwfc	fsr2h,f,c
  5072  00FC04  CFDE F013          	movff	postinc2,??__doprnt
  5073  00FC08  CFDD F014          	movff	postdec2,??__doprnt+1
  5074  00FC0C  D801               	call	u1268
  5075  00FC0E  D01F               	goto	l1996
  5076  00FC10                     u1268:
  5077  00FC10  0005               	push	
  5078  00FC12  6EFA               	movwf	pclath,c
  5079  00FC14  5013               	movf	??__doprnt,w,c
  5080  00FC16  6EFD               	movwf	tosl,c
  5081  00FC18  5014               	movf	??__doprnt+1,w,c
  5082  00FC1A  6EFE               	movwf	tosh,c
  5083  00FC1C  6AFF               	clrf	tosu,c
  5084  00FC1E  50FA               	movf	pclath,w,c
  5085  00FC20  0E20               	movlw	32
  5086  00FC22  0012               	return		;indir
  5087  00FC24                     l1992:
  5088  00FC24  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  5089  00FC28  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  5090  00FC2C  CFDE F013          	movff	postinc2,??__doprnt
  5091  00FC30  CFDD F014          	movff	postdec2,??__doprnt+1
  5092  00FC34  C013  FFD9         	movff	??__doprnt,fsr2l
  5093  00FC38  C014  FFDA         	movff	??__doprnt+1,fsr2h
  5094  00FC3C  0E20               	movlw	32
  5095  00FC3E  6EDF               	movwf	indf2,c
  5096  00FC40  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  5097  00FC44  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  5098  00FC48  2ADE               	incf	postinc2,f,c
  5099  00FC4A  0E00               	movlw	0
  5100  00FC4C  22DD               	addwfc	postdec2,f,c
  5101  00FC4E                     l1996:
  5102                           
  5103                           ;doprnt.c: 1431: while(--width);
  5104  00FC4E  061C               	decf	__doprnt@width,f,c
  5105  00FC50  A0D8               	btfss	status,0,c
  5106  00FC52  061D               	decf	__doprnt@width+1,f,c
  5107  00FC54  501C               	movf	__doprnt@width,w,c
  5108  00FC56  101D               	iorwf	__doprnt@width+1,w,c
  5109  00FC58  A4D8               	btfss	status,2,c
  5110  00FC5A  D7C4               	goto	l1988
  5111  00FC5C                     l1998:
  5112                           
  5113                           ;doprnt.c: 1438: if(flag & 0x03)
  5114  00FC5C  C01B  F013         	movff	__doprnt@flag,??__doprnt
  5115  00FC60  0E03               	movlw	3
  5116  00FC62  1613               	andwf	??__doprnt,f,c
  5117  00FC64  B4D8               	btfsc	status,2,c
  5118  00FC66  D035               	goto	l2008
  5119                           
  5120                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  5121  00FC68  EE20 F002          	lfsr	2,2
  5122  00FC6C  500D               	movf	__doprnt@pb,w,c
  5123  00FC6E  26D9               	addwf	fsr2l,f,c
  5124  00FC70  500E               	movf	__doprnt@pb+1,w,c
  5125  00FC72  22DA               	addwfc	fsr2h,f,c
  5126  00FC74  50DE               	movf	postinc2,w,c
  5127  00FC76  10DE               	iorwf	postinc2,w,c
  5128  00FC78  B4D8               	btfsc	status,2,c
  5129  00FC7A  D016               	goto	l2004
  5130  00FC7C  EE20 F002          	lfsr	2,2
  5131  00FC80  500D               	movf	__doprnt@pb,w,c
  5132  00FC82  26D9               	addwf	fsr2l,f,c
  5133  00FC84  500E               	movf	__doprnt@pb+1,w,c
  5134  00FC86  22DA               	addwfc	fsr2h,f,c
  5135  00FC88  CFDE F013          	movff	postinc2,??__doprnt
  5136  00FC8C  CFDD F014          	movff	postdec2,??__doprnt+1
  5137  00FC90  D801               	call	u1308
  5138  00FC92  D01F               	goto	l2008
  5139  00FC94                     u1308:
  5140  00FC94  0005               	push	
  5141  00FC96  6EFA               	movwf	pclath,c
  5142  00FC98  5013               	movf	??__doprnt,w,c
  5143  00FC9A  6EFD               	movwf	tosl,c
  5144  00FC9C  5014               	movf	??__doprnt+1,w,c
  5145  00FC9E  6EFE               	movwf	tosh,c
  5146  00FCA0  6AFF               	clrf	tosu,c
  5147  00FCA2  50FA               	movf	pclath,w,c
  5148  00FCA4  0E2D               	movlw	45
  5149  00FCA6  0012               	return		;indir
  5150  00FCA8                     l2004:
  5151  00FCA8  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  5152  00FCAC  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  5153  00FCB0  CFDE F013          	movff	postinc2,??__doprnt
  5154  00FCB4  CFDD F014          	movff	postdec2,??__doprnt+1
  5155  00FCB8  C013  FFD9         	movff	??__doprnt,fsr2l
  5156  00FCBC  C014  FFDA         	movff	??__doprnt+1,fsr2h
  5157  00FCC0  0E2D               	movlw	45
  5158  00FCC2  6EDF               	movwf	indf2,c
  5159  00FCC4  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  5160  00FCC8  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  5161  00FCCC  2ADE               	incf	postinc2,f,c
  5162  00FCCE  0E00               	movlw	0
  5163  00FCD0  22DD               	addwfc	postdec2,f,c
  5164  00FCD2                     l2008:
  5165                           
  5166                           ;doprnt.c: 1469: }
  5167                           ;doprnt.c: 1472: prec = c;
  5168  00FCD2  C01E  F018         	movff	__doprnt@c,__doprnt@prec
  5169                           
  5170                           ;doprnt.c: 1474: while(prec--) {
  5171  00FCD6  D08B               	goto	l2028
  5172  00FCD8                     l2010:
  5173                           
  5174                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5175  00FCD8  5018               	movf	__doprnt@prec,w,c
  5176  00FCDA  0D02               	mullw	2
  5177  00FCDC  0E2C               	movlw	low _dpowers
  5178  00FCDE  24F3               	addwf	prodl,w,c
  5179  00FCE0  6EF6               	movwf	tblptrl,c
  5180  00FCE2  0EFE               	movlw	high _dpowers
  5181  00FCE4  20F4               	addwfc	prodh,w,c
  5182  00FCE6  6EF7               	movwf	tblptrh,c
  5183  00FCE8                     	if	1	;There are 3 active tblptr bytes
  5184  00FCE8  6AF8               	clrf	tblptru,c
  5185  00FCEA  0E00               	movlw	low (__mediumconst shr (0+16))
  5186  00FCEC  22F8               	addwfc	tblptru,f,c
  5187  00FCEE                     	endif
  5188  00FCEE  0009               	tblrd		*+
  5189  00FCF0  CFF5 F003          	movff	tablat,___lwdiv@divisor
  5190  00FCF4  000A               	tblrd		*-
  5191  00FCF6  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  5192  00FCFA  C019  F001         	movff	__doprnt@val,___lwdiv@dividend
  5193  00FCFE  C01A  F002         	movff	__doprnt@val+1,___lwdiv@dividend+1
  5194  00FD02  EC9D  F076         	call	___lwdiv
  5195  00FD06  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  5196  00FD0A  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  5197  00FD0E  0E00               	movlw	0
  5198  00FD10  6E0B               	movwf	___lwmod@divisor+1,c
  5199  00FD12  0E0A               	movlw	10
  5200  00FD14  6E0A               	movwf	___lwmod@divisor,c
  5201  00FD16  EC38  F076         	call	___lwmod	;wreg free
  5202  00FD1A  5008               	movf	?___lwmod,w,c
  5203  00FD1C  0F30               	addlw	48
  5204  00FD1E  6E1E               	movwf	__doprnt@c,c
  5205                           
  5206                           ;doprnt.c: 1491: break;
  5207  00FD20  D031               	goto	l2020
  5208  00FD22                     l2012:
  5209                           
  5210                           ;doprnt.c: 1499: {
  5211                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5212  00FD22  C019  F001         	movff	__doprnt@val,___lwdiv@dividend
  5213  00FD26  C01A  F002         	movff	__doprnt@val+1,___lwdiv@dividend+1
  5214  00FD2A  5018               	movf	__doprnt@prec,w,c
  5215  00FD2C  0D02               	mullw	2
  5216  00FD2E  0E36               	movlw	low _hexpowers
  5217  00FD30  24F3               	addwf	prodl,w,c
  5218  00FD32  6EF6               	movwf	tblptrl,c
  5219  00FD34  0EFE               	movlw	high _hexpowers
  5220  00FD36  20F4               	addwfc	prodh,w,c
  5221  00FD38  6EF7               	movwf	tblptrh,c
  5222  00FD3A                     	if	1	;There are 3 active tblptr bytes
  5223  00FD3A  6AF8               	clrf	tblptru,c
  5224  00FD3C  0E00               	movlw	low (__mediumconst shr (0+16))
  5225  00FD3E  22F8               	addwfc	tblptru,f,c
  5226  00FD40                     	endif
  5227  00FD40  0009               	tblrd		*+
  5228  00FD42  CFF5 F003          	movff	tablat,___lwdiv@divisor
  5229  00FD46  000A               	tblrd		*-
  5230  00FD48  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  5231  00FD4C  EC9D  F076         	call	___lwdiv	;wreg free
  5232  00FD50  5001               	movf	?___lwdiv,w,c
  5233  00FD52  0B0F               	andlw	15
  5234  00FD54  6E17               	movwf	__doprnt@idx,c
  5235                           
  5236                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5237  00FD56  5017               	movf	__doprnt@idx,w,c
  5238  00FD58  0D01               	mullw	1
  5239  00FD5A  0E62               	movlw	low STR_34
  5240  00FD5C  24F3               	addwf	prodl,w,c
  5241  00FD5E  6EF6               	movwf	tblptrl,c
  5242  00FD60  0EFE               	movlw	high STR_34
  5243  00FD62  20F4               	addwfc	prodh,w,c
  5244  00FD64  6EF7               	movwf	tblptrh,c
  5245  00FD66                     	if	1	;There are 3 active tblptr bytes
  5246  00FD66  6AF8               	clrf	tblptru,c
  5247  00FD68  0E00               	movlw	low (__mediumconst shr (0+16))
  5248  00FD6A  22F8               	addwfc	tblptru,f,c
  5249  00FD6C                     	endif
  5250  00FD6C  0008               	tblrd		*
  5251  00FD6E  CFF5 F01E          	movff	tablat,__doprnt@c
  5252                           
  5253                           ;doprnt.c: 1523: }
  5254                           
  5255                           ;doprnt.c: 1508: }
  5256                           ;doprnt.c: 1510: break;
  5257  00FD72  D008               	goto	l2020
  5258  00FD74                     l2018:
  5259  00FD74  501B               	movf	__doprnt@flag,w,c
  5260  00FD76  0B80               	andlw	128
  5261                           
  5262                           ; Switch size 1, requested type "space"
  5263                           ; Number of cases is 2, Range of values is 0 to 128
  5264                           ; switch strategies available:
  5265                           ; Name         Instructions Cycles
  5266                           ; simple_byte            7     4 (average)
  5267                           ;	Chosen strategy is simple_byte
  5268  00FD78  0A00               	xorlw	0	; case 0
  5269  00FD7A  B4D8               	btfsc	status,2,c
  5270  00FD7C  D7AD               	goto	l2010
  5271  00FD7E  0A80               	xorlw	128	; case 128
  5272  00FD80  B4D8               	btfsc	status,2,c
  5273  00FD82  D7CF               	goto	l2012
  5274  00FD84                     l2020:
  5275                           
  5276                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  5277  00FD84  EE20 F002          	lfsr	2,2
  5278  00FD88  500D               	movf	__doprnt@pb,w,c
  5279  00FD8A  26D9               	addwf	fsr2l,f,c
  5280  00FD8C  500E               	movf	__doprnt@pb+1,w,c
  5281  00FD8E  22DA               	addwfc	fsr2h,f,c
  5282  00FD90  50DE               	movf	postinc2,w,c
  5283  00FD92  10DE               	iorwf	postinc2,w,c
  5284  00FD94  B4D8               	btfsc	status,2,c
  5285  00FD96  D016               	goto	l2024
  5286  00FD98  EE20 F002          	lfsr	2,2
  5287  00FD9C  500D               	movf	__doprnt@pb,w,c
  5288  00FD9E  26D9               	addwf	fsr2l,f,c
  5289  00FDA0  500E               	movf	__doprnt@pb+1,w,c
  5290  00FDA2  22DA               	addwfc	fsr2h,f,c
  5291  00FDA4  CFDE F013          	movff	postinc2,??__doprnt
  5292  00FDA8  CFDD F014          	movff	postdec2,??__doprnt+1
  5293  00FDAC  D801               	call	u1328
  5294  00FDAE  D01F               	goto	l2028
  5295  00FDB0                     u1328:
  5296  00FDB0  0005               	push	
  5297  00FDB2  6EFA               	movwf	pclath,c
  5298  00FDB4  5013               	movf	??__doprnt,w,c
  5299  00FDB6  6EFD               	movwf	tosl,c
  5300  00FDB8  5014               	movf	??__doprnt+1,w,c
  5301  00FDBA  6EFE               	movwf	tosh,c
  5302  00FDBC  6AFF               	clrf	tosu,c
  5303  00FDBE  50FA               	movf	pclath,w,c
  5304  00FDC0  501E               	movf	__doprnt@c,w,c
  5305  00FDC2  0012               	return		;indir
  5306  00FDC4                     l2024:
  5307  00FDC4  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  5308  00FDC8  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  5309  00FDCC  CFDE F013          	movff	postinc2,??__doprnt
  5310  00FDD0  CFDD F014          	movff	postdec2,??__doprnt+1
  5311  00FDD4  C013  FFD9         	movff	??__doprnt,fsr2l
  5312  00FDD8  C014  FFDA         	movff	??__doprnt+1,fsr2h
  5313  00FDDC  C01E  FFDF         	movff	__doprnt@c,indf2
  5314  00FDE0  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  5315  00FDE4  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  5316  00FDE8  2ADE               	incf	postinc2,f,c
  5317  00FDEA  0E00               	movlw	0
  5318  00FDEC  22DD               	addwfc	postdec2,f,c
  5319  00FDEE                     l2028:
  5320  00FDEE  0618               	decf	__doprnt@prec,f,c
  5321  00FDF0  2818               	incf	__doprnt@prec,w,c
  5322  00FDF2  A4D8               	btfss	status,2,c
  5323  00FDF4  D7BF               	goto	l2018
  5324  00FDF6                     l2030:
  5325  00FDF6  C00F  FFF6         	movff	__doprnt@f,tblptrl
  5326  00FDFA  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  5327  00FDFE  4A0F               	infsnz	__doprnt@f,f,c
  5328  00FE00  2A10               	incf	__doprnt@f+1,f,c
  5329  00FE02                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  5330  00FE02  6AF8               	clrf	tblptru,c
  5331  00FE04                     	endif
  5332  00FE04                     	if	0	;tblptru may be non-zero
  5333  00FE04                     	endif
  5334  00FE04  0008               	tblrd		*
  5335  00FE06  CFF5 F01E          	movff	tablat,__doprnt@c
  5336  00FE0A  501E               	movf	__doprnt@c,w,c
  5337  00FE0C  A4D8               	btfss	status,2,c
  5338  00FE0E  D52F               	goto	l1872
  5339  00FE10                     l2032:
  5340                           
  5341                           ;doprnt.c: 1540: return 0;
  5342  00FE10  0E00               	movlw	0
  5343  00FE12  6E0E               	movwf	?__doprnt+1,c
  5344  00FE14  0E00               	movlw	0
  5345  00FE16  6E0D               	movwf	?__doprnt,c
  5346  00FE18  0012               	return	
  5347  00FE1A                     __end_of__doprnt:
  5348                           	opt stack 0
  5349                           tosu	equ	0xFFF
  5350                           tosh	equ	0xFFE
  5351                           tosl	equ	0xFFD
  5352                           pclath	equ	0xFFA
  5353                           tblptru	equ	0xFF8
  5354                           tblptrh	equ	0xFF7
  5355                           tblptrl	equ	0xFF6
  5356                           tablat	equ	0xFF5
  5357                           prodh	equ	0xFF4
  5358                           prodl	equ	0xFF3
  5359                           intcon	equ	0xFF2
  5360                           intcon2	equ	0xFF1
  5361                           postinc0	equ	0xFEE
  5362                           wreg	equ	0xFE8
  5363                           postdec1	equ	0xFE5
  5364                           fsr1l	equ	0xFE1
  5365                           indf2	equ	0xFDF
  5366                           postinc2	equ	0xFDE
  5367                           postdec2	equ	0xFDD
  5368                           fsr2h	equ	0xFDA
  5369                           fsr2l	equ	0xFD9
  5370                           status	equ	0xFD8
  5371                           
  5372 ;; *************** function _putch *****************
  5373 ;; Defined at:
  5374 ;;		line 30 in file "lcd.c"
  5375 ;; Parameters:    Size  Location     Type
  5376 ;;  data            1    wreg     unsigned char 
  5377 ;; Auto vars:     Size  Location     Type
  5378 ;;  data            1    2[COMRAM] unsigned char 
  5379 ;; Return value:  Size  Location     Type
  5380 ;;                  1    wreg      void 
  5381 ;; Registers used:
  5382 ;;		wreg, status,2, status,0, cstack
  5383 ;; Tracked objects:
  5384 ;;		On entry : 0/0
  5385 ;;		On exit  : 0/0
  5386 ;;		Unchanged: 0/0
  5387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5388 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5389 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5391 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5392 ;;Total ram usage:        1 bytes
  5393 ;; Hardware stack levels used:    1
  5394 ;; Hardware stack levels required when called:    1
  5395 ;; This function calls:
  5396 ;;		_lcdNibble
  5397 ;; This function is called by:
  5398 ;;		_printf
  5399 ;;		__doprnt
  5400 ;; This function uses a non-reentrant model
  5401 ;;
  5402                           
  5403                           	psect	text24
  5404  00EB30                     __ptext24:
  5405                           	opt stack 0
  5406  00EB30                     _putch:
  5407                           	opt stack 26
  5408                           
  5409                           ;incstack = 0
  5410                           ;putch@data stored from wreg
  5411  00EB30  6E03               	movwf	putch@data,c
  5412                           
  5413                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  5414  00EB32  848C               	bsf	3980,2,c	;volatile
  5415                           
  5416                           ;lcd.c: 32: lcdNibble(data);
  5417  00EB34  5003               	movf	putch@data,w,c
  5418  00EB36  ECC6  F076         	call	_lcdNibble
  5419  00EB3A  0012               	return		;funcret
  5420  00EB3C                     __end_of_putch:
  5421                           	opt stack 0
  5422                           tosu	equ	0xFFF
  5423                           tosh	equ	0xFFE
  5424                           tosl	equ	0xFFD
  5425                           pclath	equ	0xFFA
  5426                           tblptru	equ	0xFF8
  5427                           tblptrh	equ	0xFF7
  5428                           tblptrl	equ	0xFF6
  5429                           tablat	equ	0xFF5
  5430                           prodh	equ	0xFF4
  5431                           prodl	equ	0xFF3
  5432                           intcon	equ	0xFF2
  5433                           intcon2	equ	0xFF1
  5434                           postinc0	equ	0xFEE
  5435                           wreg	equ	0xFE8
  5436                           postdec1	equ	0xFE5
  5437                           fsr1l	equ	0xFE1
  5438                           indf2	equ	0xFDF
  5439                           postinc2	equ	0xFDE
  5440                           postdec2	equ	0xFDD
  5441                           fsr2h	equ	0xFDA
  5442                           fsr2l	equ	0xFD9
  5443                           status	equ	0xFD8
  5444                           
  5445 ;; *************** function _isdigit *****************
  5446 ;; Defined at:
  5447 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  5448 ;; Parameters:    Size  Location     Type
  5449 ;;  c               1    wreg     unsigned char 
  5450 ;; Auto vars:     Size  Location     Type
  5451 ;;  c               1    2[COMRAM] unsigned char 
  5452 ;; Return value:  Size  Location     Type
  5453 ;;		None               void
  5454 ;; Registers used:
  5455 ;;		wreg, status,2, status,0
  5456 ;; Tracked objects:
  5457 ;;		On entry : 0/0
  5458 ;;		On exit  : 0/0
  5459 ;;		Unchanged: 0/0
  5460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5462 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5463 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5464 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5465 ;;Total ram usage:        3 bytes
  5466 ;; Hardware stack levels used:    1
  5467 ;; This function calls:
  5468 ;;		Nothing
  5469 ;; This function is called by:
  5470 ;;		__doprnt
  5471 ;;		_atoi
  5472 ;; This function uses a non-reentrant model
  5473 ;;
  5474                           
  5475                           	psect	text25
  5476  00EB72                     __ptext25:
  5477                           	opt stack 0
  5478  00EB72                     _isdigit:
  5479                           	opt stack 27
  5480                           
  5481                           ;incstack = 0
  5482                           ;isdigit@c stored from wreg
  5483  00EB72  6E03               	movwf	isdigit@c,c
  5484  00EB74  0E00               	movlw	0
  5485  00EB76  6E02               	movwf	_isdigit$852,c
  5486  00EB78  0E3A               	movlw	58
  5487  00EB7A  6003               	cpfslt	isdigit@c,c
  5488  00EB7C  D005               	goto	l1822
  5489  00EB7E  0E2F               	movlw	47
  5490  00EB80  6403               	cpfsgt	isdigit@c,c
  5491  00EB82  D002               	goto	l1822
  5492  00EB84  0E01               	movlw	1
  5493  00EB86  6E02               	movwf	_isdigit$852,c
  5494  00EB88                     l1822:
  5495  00EB88  C002  F001         	movff	_isdigit$852,??_isdigit
  5496  00EB8C  3001               	rrcf	??_isdigit,w,c
  5497  00EB8E  0012               	return	
  5498  00EB90                     __end_of_isdigit:
  5499                           	opt stack 0
  5500                           tosu	equ	0xFFF
  5501                           tosh	equ	0xFFE
  5502                           tosl	equ	0xFFD
  5503                           pclath	equ	0xFFA
  5504                           tblptru	equ	0xFF8
  5505                           tblptrh	equ	0xFF7
  5506                           tblptrl	equ	0xFF6
  5507                           tablat	equ	0xFF5
  5508                           prodh	equ	0xFF4
  5509                           prodl	equ	0xFF3
  5510                           intcon	equ	0xFF2
  5511                           intcon2	equ	0xFF1
  5512                           postinc0	equ	0xFEE
  5513                           wreg	equ	0xFE8
  5514                           postdec1	equ	0xFE5
  5515                           fsr1l	equ	0xFE1
  5516                           indf2	equ	0xFDF
  5517                           postinc2	equ	0xFDE
  5518                           postdec2	equ	0xFDD
  5519                           fsr2h	equ	0xFDA
  5520                           fsr2l	equ	0xFD9
  5521                           status	equ	0xFD8
  5522                           
  5523 ;; *************** function ___wmul *****************
  5524 ;; Defined at:
  5525 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  5526 ;; Parameters:    Size  Location     Type
  5527 ;;  multiplier      2    0[COMRAM] unsigned int 
  5528 ;;  multiplicand    2    2[COMRAM] unsigned int 
  5529 ;; Auto vars:     Size  Location     Type
  5530 ;;  product         2    4[COMRAM] unsigned int 
  5531 ;; Return value:  Size  Location     Type
  5532 ;;                  2    0[COMRAM] unsigned int 
  5533 ;; Registers used:
  5534 ;;		wreg, status,2, status,0, prodl, prodh
  5535 ;; Tracked objects:
  5536 ;;		On entry : 0/0
  5537 ;;		On exit  : 0/0
  5538 ;;		Unchanged: 0/0
  5539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5540 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5541 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5542 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5543 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5544 ;;Total ram usage:        6 bytes
  5545 ;; Hardware stack levels used:    1
  5546 ;; This function calls:
  5547 ;;		Nothing
  5548 ;; This function is called by:
  5549 ;;		_getCurrentTime
  5550 ;;		__doprnt
  5551 ;;		_atoi
  5552 ;; This function uses a non-reentrant model
  5553 ;;
  5554                           
  5555                           	psect	text26
  5556  00EB90                     __ptext26:
  5557                           	opt stack 0
  5558  00EB90                     ___wmul:
  5559                           	opt stack 27
  5560                           
  5561                           ;incstack = 0
  5562  00EB90  5001               	movf	___wmul@multiplier,w,c
  5563  00EB92  0203               	mulwf	___wmul@multiplicand,c
  5564  00EB94  CFF3 F005          	movff	prodl,___wmul@product
  5565  00EB98  CFF4 F006          	movff	prodh,___wmul@product+1
  5566  00EB9C  5001               	movf	___wmul@multiplier,w,c
  5567  00EB9E  0204               	mulwf	___wmul@multiplicand+1,c
  5568  00EBA0  50F3               	movf	prodl,w,c
  5569  00EBA2  2606               	addwf	___wmul@product+1,f,c
  5570  00EBA4  5002               	movf	___wmul@multiplier+1,w,c
  5571  00EBA6  0203               	mulwf	___wmul@multiplicand,c
  5572  00EBA8  50F3               	movf	prodl,w,c
  5573  00EBAA  2606               	addwf	___wmul@product+1,f,c
  5574  00EBAC  C005  F001         	movff	___wmul@product,?___wmul
  5575  00EBB0  C006  F002         	movff	___wmul@product+1,?___wmul+1
  5576  00EBB4  0012               	return	
  5577  00EBB6                     __end_of___wmul:
  5578                           	opt stack 0
  5579                           tosu	equ	0xFFF
  5580                           tosh	equ	0xFFE
  5581                           tosl	equ	0xFFD
  5582                           pclath	equ	0xFFA
  5583                           tblptru	equ	0xFF8
  5584                           tblptrh	equ	0xFF7
  5585                           tblptrl	equ	0xFF6
  5586                           tablat	equ	0xFF5
  5587                           prodh	equ	0xFF4
  5588                           prodl	equ	0xFF3
  5589                           intcon	equ	0xFF2
  5590                           intcon2	equ	0xFF1
  5591                           postinc0	equ	0xFEE
  5592                           wreg	equ	0xFE8
  5593                           postdec1	equ	0xFE5
  5594                           fsr1l	equ	0xFE1
  5595                           indf2	equ	0xFDF
  5596                           postinc2	equ	0xFDE
  5597                           postdec2	equ	0xFDD
  5598                           fsr2h	equ	0xFDA
  5599                           fsr2l	equ	0xFD9
  5600                           status	equ	0xFD8
  5601                           
  5602 ;; *************** function ___lwmod *****************
  5603 ;; Defined at:
  5604 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  5605 ;; Parameters:    Size  Location     Type
  5606 ;;  dividend        2    7[COMRAM] unsigned int 
  5607 ;;  divisor         2    9[COMRAM] unsigned int 
  5608 ;; Auto vars:     Size  Location     Type
  5609 ;;  counter         1   11[COMRAM] unsigned char 
  5610 ;; Return value:  Size  Location     Type
  5611 ;;                  2    7[COMRAM] unsigned int 
  5612 ;; Registers used:
  5613 ;;		wreg, status,2, status,0
  5614 ;; Tracked objects:
  5615 ;;		On entry : 0/0
  5616 ;;		On exit  : 0/0
  5617 ;;		Unchanged: 0/0
  5618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5619 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5620 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5621 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5622 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5623 ;;Total ram usage:        5 bytes
  5624 ;; Hardware stack levels used:    1
  5625 ;; This function calls:
  5626 ;;		Nothing
  5627 ;; This function is called by:
  5628 ;;		__doprnt
  5629 ;; This function uses a non-reentrant model
  5630 ;;
  5631                           
  5632                           	psect	text27
  5633  00EC70                     __ptext27:
  5634                           	opt stack 0
  5635  00EC70                     ___lwmod:
  5636                           	opt stack 27
  5637                           
  5638                           ;incstack = 0
  5639  00EC70  500A               	movf	___lwmod@divisor,w,c
  5640  00EC72  100B               	iorwf	___lwmod@divisor+1,w,c
  5641  00EC74  B4D8               	btfsc	status,2,c
  5642  00EC76  D018               	goto	l819
  5643  00EC78  0E01               	movlw	1
  5644  00EC7A  6E0C               	movwf	___lwmod@counter,c
  5645  00EC7C  D004               	goto	l1860
  5646  00EC7E                     l1858:
  5647  00EC7E  90D8               	bcf	status,0,c
  5648  00EC80  360A               	rlcf	___lwmod@divisor,f,c
  5649  00EC82  360B               	rlcf	___lwmod@divisor+1,f,c
  5650  00EC84  2A0C               	incf	___lwmod@counter,f,c
  5651  00EC86                     l1860:
  5652  00EC86  AE0B               	btfss	___lwmod@divisor+1,7,c
  5653  00EC88  D7FA               	goto	l1858
  5654  00EC8A                     l1862:
  5655  00EC8A  500A               	movf	___lwmod@divisor,w,c
  5656  00EC8C  5C08               	subwf	___lwmod@dividend,w,c
  5657  00EC8E  500B               	movf	___lwmod@divisor+1,w,c
  5658  00EC90  5809               	subwfb	___lwmod@dividend+1,w,c
  5659  00EC92  A0D8               	btfss	status,0,c
  5660  00EC94  D004               	goto	l1866
  5661  00EC96  500A               	movf	___lwmod@divisor,w,c
  5662  00EC98  5E08               	subwf	___lwmod@dividend,f,c
  5663  00EC9A  500B               	movf	___lwmod@divisor+1,w,c
  5664  00EC9C  5A09               	subwfb	___lwmod@dividend+1,f,c
  5665  00EC9E                     l1866:
  5666  00EC9E  90D8               	bcf	status,0,c
  5667  00ECA0  320B               	rrcf	___lwmod@divisor+1,f,c
  5668  00ECA2  320A               	rrcf	___lwmod@divisor,f,c
  5669  00ECA4  2E0C               	decfsz	___lwmod@counter,f,c
  5670  00ECA6  D7F1               	goto	l1862
  5671  00ECA8                     l819:
  5672  00ECA8  C008  F008         	movff	___lwmod@dividend,?___lwmod
  5673  00ECAC  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  5674  00ECB0  0012               	return		;funcret
  5675  00ECB2                     __end_of___lwmod:
  5676                           	opt stack 0
  5677                           tosu	equ	0xFFF
  5678                           tosh	equ	0xFFE
  5679                           tosl	equ	0xFFD
  5680                           pclath	equ	0xFFA
  5681                           tblptru	equ	0xFF8
  5682                           tblptrh	equ	0xFF7
  5683                           tblptrl	equ	0xFF6
  5684                           tablat	equ	0xFF5
  5685                           prodh	equ	0xFF4
  5686                           prodl	equ	0xFF3
  5687                           intcon	equ	0xFF2
  5688                           intcon2	equ	0xFF1
  5689                           postinc0	equ	0xFEE
  5690                           wreg	equ	0xFE8
  5691                           postdec1	equ	0xFE5
  5692                           fsr1l	equ	0xFE1
  5693                           indf2	equ	0xFDF
  5694                           postinc2	equ	0xFDE
  5695                           postdec2	equ	0xFDD
  5696                           fsr2h	equ	0xFDA
  5697                           fsr2l	equ	0xFD9
  5698                           status	equ	0xFD8
  5699                           
  5700 ;; *************** function ___lwdiv *****************
  5701 ;; Defined at:
  5702 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  5703 ;; Parameters:    Size  Location     Type
  5704 ;;  dividend        2    0[COMRAM] unsigned int 
  5705 ;;  divisor         2    2[COMRAM] unsigned int 
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;  quotient        2    4[COMRAM] unsigned int 
  5708 ;;  counter         1    6[COMRAM] unsigned char 
  5709 ;; Return value:  Size  Location     Type
  5710 ;;                  2    0[COMRAM] unsigned int 
  5711 ;; Registers used:
  5712 ;;		wreg, status,2, status,0
  5713 ;; Tracked objects:
  5714 ;;		On entry : 0/0
  5715 ;;		On exit  : 0/0
  5716 ;;		Unchanged: 0/0
  5717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5718 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5719 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5721 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5722 ;;Total ram usage:        7 bytes
  5723 ;; Hardware stack levels used:    1
  5724 ;; This function calls:
  5725 ;;		Nothing
  5726 ;; This function is called by:
  5727 ;;		__doprnt
  5728 ;; This function uses a non-reentrant model
  5729 ;;
  5730                           
  5731                           	psect	text28
  5732  00ED3A                     __ptext28:
  5733                           	opt stack 0
  5734  00ED3A                     ___lwdiv:
  5735                           	opt stack 27
  5736                           
  5737                           ;incstack = 0
  5738  00ED3A  0E00               	movlw	0
  5739  00ED3C  6E06               	movwf	___lwdiv@quotient+1,c
  5740  00ED3E  0E00               	movlw	0
  5741  00ED40  6E05               	movwf	___lwdiv@quotient,c
  5742  00ED42  5003               	movf	___lwdiv@divisor,w,c
  5743  00ED44  1004               	iorwf	___lwdiv@divisor+1,w,c
  5744  00ED46  B4D8               	btfsc	status,2,c
  5745  00ED48  D01C               	goto	l809
  5746  00ED4A  0E01               	movlw	1
  5747  00ED4C  6E07               	movwf	___lwdiv@counter,c
  5748  00ED4E  D004               	goto	l1840
  5749  00ED50                     l1838:
  5750  00ED50  90D8               	bcf	status,0,c
  5751  00ED52  3603               	rlcf	___lwdiv@divisor,f,c
  5752  00ED54  3604               	rlcf	___lwdiv@divisor+1,f,c
  5753  00ED56  2A07               	incf	___lwdiv@counter,f,c
  5754  00ED58                     l1840:
  5755  00ED58  AE04               	btfss	___lwdiv@divisor+1,7,c
  5756  00ED5A  D7FA               	goto	l1838
  5757  00ED5C                     l1842:
  5758  00ED5C  90D8               	bcf	status,0,c
  5759  00ED5E  3605               	rlcf	___lwdiv@quotient,f,c
  5760  00ED60  3606               	rlcf	___lwdiv@quotient+1,f,c
  5761  00ED62  5003               	movf	___lwdiv@divisor,w,c
  5762  00ED64  5C01               	subwf	___lwdiv@dividend,w,c
  5763  00ED66  5004               	movf	___lwdiv@divisor+1,w,c
  5764  00ED68  5802               	subwfb	___lwdiv@dividend+1,w,c
  5765  00ED6A  A0D8               	btfss	status,0,c
  5766  00ED6C  D005               	goto	l1850
  5767  00ED6E  5003               	movf	___lwdiv@divisor,w,c
  5768  00ED70  5E01               	subwf	___lwdiv@dividend,f,c
  5769  00ED72  5004               	movf	___lwdiv@divisor+1,w,c
  5770  00ED74  5A02               	subwfb	___lwdiv@dividend+1,f,c
  5771  00ED76  8005               	bsf	___lwdiv@quotient,0,c
  5772  00ED78                     l1850:
  5773  00ED78  90D8               	bcf	status,0,c
  5774  00ED7A  3204               	rrcf	___lwdiv@divisor+1,f,c
  5775  00ED7C  3203               	rrcf	___lwdiv@divisor,f,c
  5776  00ED7E  2E07               	decfsz	___lwdiv@counter,f,c
  5777  00ED80  D7ED               	goto	l1842
  5778  00ED82                     l809:
  5779  00ED82  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  5780  00ED86  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5781  00ED8A  0012               	return		;funcret
  5782  00ED8C                     __end_of___lwdiv:
  5783                           	opt stack 0
  5784                           tosu	equ	0xFFF
  5785                           tosh	equ	0xFFE
  5786                           tosl	equ	0xFFD
  5787                           pclath	equ	0xFFA
  5788                           tblptru	equ	0xFF8
  5789                           tblptrh	equ	0xFF7
  5790                           tblptrl	equ	0xFF6
  5791                           tablat	equ	0xFF5
  5792                           prodh	equ	0xFF4
  5793                           prodl	equ	0xFF3
  5794                           intcon	equ	0xFF2
  5795                           intcon2	equ	0xFF1
  5796                           postinc0	equ	0xFEE
  5797                           wreg	equ	0xFE8
  5798                           postdec1	equ	0xFE5
  5799                           fsr1l	equ	0xFE1
  5800                           indf2	equ	0xFDF
  5801                           postinc2	equ	0xFDE
  5802                           postdec2	equ	0xFDD
  5803                           fsr2h	equ	0xFDA
  5804                           fsr2l	equ	0xFD9
  5805                           status	equ	0xFD8
  5806                           
  5807 ;; *************** function _lcdInst *****************
  5808 ;; Defined at:
  5809 ;;		line 25 in file "lcd.c"
  5810 ;; Parameters:    Size  Location     Type
  5811 ;;  data            1    wreg     unsigned char 
  5812 ;; Auto vars:     Size  Location     Type
  5813 ;;  data            1    2[COMRAM] unsigned char 
  5814 ;; Return value:  Size  Location     Type
  5815 ;;                  1    wreg      void 
  5816 ;; Registers used:
  5817 ;;		wreg, status,2, status,0, cstack
  5818 ;; Tracked objects:
  5819 ;;		On entry : 0/0
  5820 ;;		On exit  : 0/0
  5821 ;;		Unchanged: 0/0
  5822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5823 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5824 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5825 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5826 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5827 ;;Total ram usage:        1 bytes
  5828 ;; Hardware stack levels used:    1
  5829 ;; Hardware stack levels required when called:    1
  5830 ;; This function calls:
  5831 ;;		_lcdNibble
  5832 ;; This function is called by:
  5833 ;;		_update_init_screen_state
  5834 ;;		_update_eeprom_screen_state
  5835 ;;		_update_past_run_screen_state
  5836 ;;		_operation
  5837 ;;		_initLCD
  5838 ;;		_lcdClear
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842                           	psect	text29
  5843  00EB24                     __ptext29:
  5844                           	opt stack 0
  5845  00EB24                     _lcdInst:
  5846                           	opt stack 28
  5847                           
  5848                           ;incstack = 0
  5849                           ;lcdInst@data stored from wreg
  5850  00EB24  6E03               	movwf	lcdInst@data,c
  5851                           
  5852                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  5853  00EB26  948C               	bcf	3980,2,c	;volatile
  5854                           
  5855                           ;lcd.c: 27: lcdNibble(data);
  5856  00EB28  5003               	movf	lcdInst@data,w,c
  5857  00EB2A  ECC6  F076         	call	_lcdNibble
  5858  00EB2E  0012               	return		;funcret
  5859  00EB30                     __end_of_lcdInst:
  5860                           	opt stack 0
  5861                           tosu	equ	0xFFF
  5862                           tosh	equ	0xFFE
  5863                           tosl	equ	0xFFD
  5864                           pclath	equ	0xFFA
  5865                           tblptru	equ	0xFF8
  5866                           tblptrh	equ	0xFF7
  5867                           tblptrl	equ	0xFF6
  5868                           tablat	equ	0xFF5
  5869                           prodh	equ	0xFF4
  5870                           prodl	equ	0xFF3
  5871                           intcon	equ	0xFF2
  5872                           intcon2	equ	0xFF1
  5873                           postinc0	equ	0xFEE
  5874                           wreg	equ	0xFE8
  5875                           postdec1	equ	0xFE5
  5876                           fsr1l	equ	0xFE1
  5877                           indf2	equ	0xFDF
  5878                           postinc2	equ	0xFDE
  5879                           postdec2	equ	0xFDD
  5880                           fsr2h	equ	0xFDA
  5881                           fsr2l	equ	0xFD9
  5882                           status	equ	0xFD8
  5883                           
  5884 ;; *************** function _lcdNibble *****************
  5885 ;; Defined at:
  5886 ;;		line 43 in file "lcd.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;  data            1    wreg     unsigned char 
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;  data            1    1[COMRAM] unsigned char 
  5891 ;;  temp            1    0[COMRAM] unsigned char 
  5892 ;; Return value:  Size  Location     Type
  5893 ;;                  1    wreg      void 
  5894 ;; Registers used:
  5895 ;;		wreg, status,2, status,0
  5896 ;; Tracked objects:
  5897 ;;		On entry : 0/0
  5898 ;;		On exit  : 0/0
  5899 ;;		Unchanged: 0/0
  5900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5902 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5904 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5905 ;;Total ram usage:        2 bytes
  5906 ;; Hardware stack levels used:    1
  5907 ;; This function calls:
  5908 ;;		Nothing
  5909 ;; This function is called by:
  5910 ;;		_lcdInst
  5911 ;;		_putch
  5912 ;; This function uses a non-reentrant model
  5913 ;;
  5914                           
  5915                           	psect	text30
  5916  00ED8C                     __ptext30:
  5917                           	opt stack 0
  5918  00ED8C                     _lcdNibble:
  5919                           	opt stack 26
  5920                           
  5921                           ;incstack = 0
  5922                           ;lcdNibble@data stored from wreg
  5923  00ED8C  6E02               	movwf	lcdNibble@data,c
  5924                           
  5925                           ;lcd.c: 45: char temp = data & 0xF0;
  5926  00ED8E  5002               	movf	lcdNibble@data,w,c
  5927  00ED90  0BF0               	andlw	240
  5928  00ED92  6E01               	movwf	lcdNibble@temp,c
  5929                           
  5930                           ;lcd.c: 46: LATD = LATD & 0x0F;
  5931  00ED94  508C               	movf	3980,w,c	;volatile
  5932  00ED96  0B0F               	andlw	15
  5933  00ED98  6E8C               	movwf	3980,c	;volatile
  5934                           
  5935                           ;lcd.c: 47: LATD = temp | LATD;
  5936  00ED9A  5001               	movf	lcdNibble@temp,w,c
  5937  00ED9C  108C               	iorwf	3980,w,c	;volatile
  5938  00ED9E  6E8C               	movwf	3980,c	;volatile
  5939                           
  5940                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  5941  00EDA0  968C               	bcf	3980,3,c	;volatile
  5942                           
  5943                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5944  00EDA2  0E10               	movlw	16
  5945  00EDA4                     u1827:
  5946  00EDA4  2EE8               	decfsz	wreg,f,c
  5947  00EDA6  D7FE               	bra	u1827
  5948  00EDA8  D000               	nop2	
  5949                           
  5950                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  5951  00EDAA  868C               	bsf	3980,3,c	;volatile
  5952                           
  5953                           ;lcd.c: 52: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5954  00EDAC  0E10               	movlw	16
  5955  00EDAE                     u1837:
  5956  00EDAE  2EE8               	decfsz	wreg,f,c
  5957  00EDB0  D7FE               	bra	u1837
  5958  00EDB2  D000               	nop2	
  5959                           
  5960                           ;lcd.c: 54: data = data << 4;
  5961  00EDB4  3802               	swapf	lcdNibble@data,w,c
  5962  00EDB6  0BF0               	andlw	240
  5963  00EDB8  6E02               	movwf	lcdNibble@data,c
  5964                           
  5965                           ;lcd.c: 56: temp = data & 0xF0;
  5966  00EDBA  5002               	movf	lcdNibble@data,w,c
  5967  00EDBC  0BF0               	andlw	240
  5968  00EDBE  6E01               	movwf	lcdNibble@temp,c
  5969                           
  5970                           ;lcd.c: 57: LATD = LATD & 0x0F;
  5971  00EDC0  508C               	movf	3980,w,c	;volatile
  5972  00EDC2  0B0F               	andlw	15
  5973  00EDC4  6E8C               	movwf	3980,c	;volatile
  5974                           
  5975                           ;lcd.c: 58: LATD = temp | LATD;
  5976  00EDC6  5001               	movf	lcdNibble@temp,w,c
  5977  00EDC8  108C               	iorwf	3980,w,c	;volatile
  5978  00EDCA  6E8C               	movwf	3980,c	;volatile
  5979                           
  5980                           ;lcd.c: 60: LATDbits.LATD3 = 0;
  5981  00EDCC  968C               	bcf	3980,3,c	;volatile
  5982                           
  5983                           ;lcd.c: 61: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5984  00EDCE  0E10               	movlw	16
  5985  00EDD0                     u1847:
  5986  00EDD0  2EE8               	decfsz	wreg,f,c
  5987  00EDD2  D7FE               	bra	u1847
  5988  00EDD4  D000               	nop2	
  5989                           
  5990                           ;lcd.c: 62: LATDbits.LATD3 = 1;
  5991  00EDD6  868C               	bsf	3980,3,c	;volatile
  5992                           
  5993                           ;lcd.c: 63: _delay((unsigned long)((25)*(8000000/4000000.0)));
  5994  00EDD8  0E10               	movlw	16
  5995  00EDDA                     u1857:
  5996  00EDDA  2EE8               	decfsz	wreg,f,c
  5997  00EDDC  D7FE               	bra	u1857
  5998  00EDDE  D000               	nop2	
  5999  00EDE0  0012               	return		;funcret
  6000  00EDE2                     __end_of_lcdNibble:
  6001                           	opt stack 0
  6002                           tosu	equ	0xFFF
  6003                           tosh	equ	0xFFE
  6004                           tosl	equ	0xFFD
  6005                           pclath	equ	0xFFA
  6006                           tblptru	equ	0xFF8
  6007                           tblptrh	equ	0xFF7
  6008                           tblptrl	equ	0xFF6
  6009                           tablat	equ	0xFF5
  6010                           prodh	equ	0xFF4
  6011                           prodl	equ	0xFF3
  6012                           intcon	equ	0xFF2
  6013                           intcon2	equ	0xFF1
  6014                           postinc0	equ	0xFEE
  6015                           wreg	equ	0xFE8
  6016                           postdec1	equ	0xFE5
  6017                           fsr1l	equ	0xFE1
  6018                           indf2	equ	0xFDF
  6019                           postinc2	equ	0xFDE
  6020                           postdec2	equ	0xFDD
  6021                           fsr2h	equ	0xFDA
  6022                           fsr2l	equ	0xFD9
  6023                           status	equ	0xFD8
  6024                           tosu	equ	0xFFF
  6025                           tosh	equ	0xFFE
  6026                           tosl	equ	0xFFD
  6027                           pclath	equ	0xFFA
  6028                           tblptru	equ	0xFF8
  6029                           tblptrh	equ	0xFF7
  6030                           tblptrl	equ	0xFF6
  6031                           tablat	equ	0xFF5
  6032                           prodh	equ	0xFF4
  6033                           prodl	equ	0xFF3
  6034                           intcon	equ	0xFF2
  6035                           intcon2	equ	0xFF1
  6036                           postinc0	equ	0xFEE
  6037                           wreg	equ	0xFE8
  6038                           postdec1	equ	0xFE5
  6039                           fsr1l	equ	0xFE1
  6040                           indf2	equ	0xFDF
  6041                           postinc2	equ	0xFDE
  6042                           postdec2	equ	0xFDD
  6043                           fsr2h	equ	0xFDA
  6044                           fsr2l	equ	0xFD9
  6045                           status	equ	0xFD8
  6046                           
  6047                           	psect	text31
  6048  000000                     __ptext31:
  6049                           	opt stack 0
  6050                           tosu	equ	0xFFF
  6051                           tosh	equ	0xFFE
  6052                           tosl	equ	0xFFD
  6053                           pclath	equ	0xFFA
  6054                           tblptru	equ	0xFF8
  6055                           tblptrh	equ	0xFF7
  6056                           tblptrl	equ	0xFF6
  6057                           tablat	equ	0xFF5
  6058                           prodh	equ	0xFF4
  6059                           prodl	equ	0xFF3
  6060                           intcon	equ	0xFF2
  6061                           intcon2	equ	0xFF1
  6062                           postinc0	equ	0xFEE
  6063                           wreg	equ	0xFE8
  6064                           postdec1	equ	0xFE5
  6065                           fsr1l	equ	0xFE1
  6066                           indf2	equ	0xFDF
  6067                           postinc2	equ	0xFDE
  6068                           postdec2	equ	0xFDD
  6069                           fsr2h	equ	0xFDA
  6070                           fsr2l	equ	0xFD9
  6071                           status	equ	0xFD8
  6072                           
  6073                           	psect	rparam
  6074  0000                     tosu	equ	0xFFF
  6075                           tosh	equ	0xFFE
  6076                           tosl	equ	0xFFD
  6077                           pclath	equ	0xFFA
  6078                           tblptru	equ	0xFF8
  6079                           tblptrh	equ	0xFF7
  6080                           tblptrl	equ	0xFF6
  6081                           tablat	equ	0xFF5
  6082                           prodh	equ	0xFF4
  6083                           prodl	equ	0xFF3
  6084                           intcon	equ	0xFF2
  6085                           intcon2	equ	0xFF1
  6086                           postinc0	equ	0xFEE
  6087                           wreg	equ	0xFE8
  6088                           postdec1	equ	0xFE5
  6089                           fsr1l	equ	0xFE1
  6090                           indf2	equ	0xFDF
  6091                           postinc2	equ	0xFDE
  6092                           postdec2	equ	0xFDD
  6093                           fsr2h	equ	0xFDA
  6094                           fsr2l	equ	0xFD9
  6095                           status	equ	0xFD8


Data Sizes:
    Strings     449
    Constant    35
    Data        12
    BSS         7
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     72      91
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 2
		 -> getCurrentTime@str(COMRAM[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTime@str(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[18]), STR_28(CODE[13]), STR_27(CODE[12]), STR_26(CODE[5]), 
		 -> STR_25(CODE[4]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[16]), 
		 -> STR_21(CODE[18]), STR_20(CODE[17]), STR_19(CODE[16]), STR_18(CODE[16]), 
		 -> STR_17(CODE[14]), STR_16(CODE[14]), STR_15(CODE[16]), STR_14(CODE[17]), 
		 -> STR_13(CODE[16]), STR_12(CODE[16]), STR_11(CODE[16]), STR_10(CODE[16]), 
		 -> STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[14]), STR_6(CODE[15]), 
		 -> STR_5(CODE[13]), STR_4(CODE[14]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTime@str(COMRAM[2]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 2
		 -> getCurrentTime@str(COMRAM[2]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), printf@ap(COMRAM[2]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[17]), STR_30(CODE[17]), 
		 -> STR_29(CODE[18]), STR_28(CODE[13]), STR_27(CODE[12]), STR_26(CODE[5]), 
		 -> STR_25(CODE[4]), STR_24(CODE[17]), STR_23(CODE[14]), STR_22(CODE[16]), 
		 -> STR_21(CODE[18]), STR_20(CODE[17]), STR_19(CODE[16]), STR_18(CODE[16]), 
		 -> STR_17(CODE[14]), STR_16(CODE[14]), STR_15(CODE[16]), STR_14(CODE[17]), 
		 -> STR_13(CODE[16]), STR_12(CODE[16]), STR_11(CODE[16]), STR_10(CODE[16]), 
		 -> STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[14]), STR_6(CODE[15]), 
		 -> STR_5(CODE[13]), STR_4(CODE[14]), STR_3(CODE[5]), STR_2(CODE[5]), 
		 -> STR_1(CODE[5]), 

    S589__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S589__prbuf$ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTime@str(COMRAM[2]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTime@str(COMRAM[2]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(COMRAM[4]), printf@pb(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_operation
    _update_init_screen_state->_printf
    _operation->_getCurrentTime
    _updateCurrentTime->_I2C_Master_Read
    _updateCurrentTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _getCurrentTime->_sprintf
    _sprintf->__doprnt
    _atoi->___wmul
    _initLCD->_lcdInst
    _activateServo->_printf
    _I2C_Master_Init->___lldiv
    _EEPROM->_past_run_access
    _update_eeprom_screen_state->_printf
    _past_run_access->_update_past_run_screen_state
    _update_past_run_screen_state->_printf
    _lcdClear->_printf
    _printf->__doprnt
    __doprnt->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   77909
                                             67 COMRAM     5     5      0
                             _EEPROM
                    _I2C_Master_Init
                      _activateServo
                            _initLCD
                          _operation
                    _past_run_access
           _update_init_screen_state
                         _user_input
 ---------------------------------------------------------------------------------
 (1) _update_init_screen_state                             4     2      2   12074
                                             44 COMRAM     4     2      2
                           _lcdClear
                            _lcdInst
                             _printf
                  _updateCurrentTime
 ---------------------------------------------------------------------------------
 (1) _operation                                           17    17      0   18153
                                             50 COMRAM    17    17      0
                     _getCurrentTime
                           _lcdClear
                            _lcdInst
                             _printf
                  _updateCurrentTime
                         _user_input
 ---------------------------------------------------------------------------------
 (2) _updateCurrentTime                                    1     1      0     312
                                              3 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     214
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getCurrentTime                                      10     8      2    6195
                                             42 COMRAM     8     6      2
                             ___wmul
                               _atoi
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             12     6      6    4095
                                             30 COMRAM    12     6      6
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) _atoi                                                 7     5      2    1159
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _activateServo                                        1     1      0   11285
                                             44 COMRAM     1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (1) _EEPROM                                               4     4      0   23770
                                             52 COMRAM     4     4      0
                    _past_run_access
         _update_eeprom_screen_state
                         _user_input
 ---------------------------------------------------------------------------------
 (2) _update_eeprom_screen_state                           4     2      2   11698
                                             44 COMRAM     4     2      2
                           _lcdClear
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _past_run_access                                      4     4      0   11831
                                             48 COMRAM     4     4      0
       _update_past_run_screen_state
                         _user_input
 ---------------------------------------------------------------------------------
 (1) _user_input                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _update_past_run_screen_state                         4     2      2   11634
                                             44 COMRAM     4     2      2
                           _lcdClear
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _lcdClear                                             0     0      0    5710
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              14     6      8    5575
                                             30 COMRAM    14     6      8
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             27    21      6    3529
                                             12 COMRAM    18    12      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     671
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     418
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (4) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EEPROM
     _past_run_access
       _update_past_run_screen_state
         _lcdClear
           _lcdInst
             _lcdNibble
           _printf
             __doprnt
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               ___wmul *
               _isdigit *
               _putch *
                 _lcdNibble
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
       _user_input
     _update_eeprom_screen_state
       _lcdClear
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
     _user_input
   _I2C_Master_Init
     ___lldiv
   _activateServo
     _lcdClear
       _lcdInst
         _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     _getCurrentTime
       ___wmul
       _atoi
         ___wmul
         _isdigit
       _sprintf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
     _lcdClear
       _lcdInst
         _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
     _updateCurrentTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _user_input
   _past_run_access
     _update_past_run_screen_state
       _lcdClear
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
     _user_input
   _update_init_screen_state
     _lcdClear
       _lcdInst
         _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
     _lcdInst
       _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
     _updateCurrentTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _user_input

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     48      5B       1       71.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      5B      34        0.0%
DATA                 0      0      5B       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Feb 07 16:50:03 2017

                 operation@bottle_type 003E   __end_of_update_past_run_screen_state F4FC  
__size_of_update_past_run_screen_state 00EC           _update_past_run_screen_state F410  
                  ___wmul@multiplicand 0003                            __CFG_BORV$3 000000  
           __size_of_updateCurrentTime 0066                           __CFG_CP0$OFF 000000  
                         __CFG_CP1$OFF 000000                           __CFG_CP2$OFF 000000  
                         __CFG_CP3$OFF 000000                            __CFG_OSC$HS 000000  
                                  l113 EB5A                                    l116 EB66  
                                  l204 EE88                                    l163 F6E8  
                                  l339 F9BE                                    l285 EB48  
                                  l199 EE62                                    l559 F24E  
                                  l809 ED82                                    l819 ECA8  
                                  l756 EF74                           __CFG_CPB$OFF 000000  
                                  _PR2 000FCB                                    _PEN 007E2A  
                         __CFG_CPD$OFF 000000                                    u480 EBD4  
                                  _SEN 007E28                    operation@currentBin 0035  
                                  prod 000FF3                                    tosl 000FFD  
                                  wreg 000FE8                           __CFG_LVP$OFF 000000  
                         __CFG_WDT$OFF 000000                                   l2010 FCD8  
                                 l2012 FD22                                   l2020 FD84  
                                 l2004 FCA8                                   l2100 F44A  
                                 l2030 FDF6                                   l2102 F464  
                                 l2110 F4B2                                   l2024 FDC4  
                                 l2008 FCD2                                   l2032 FE10  
                                 l2104 F47E                                   l2112 F4E8  
                                 l2018 FD74                                   l2106 F498  
                                 l2202 EFD4                                   l1330 EBD6  
                                 l2028 FDEE                                   l2140 F142  
                                 l2124 F0E0                                   l2204 EFFE  
                                 l2220 EF32                                   l2150 F17C  
                                 l2142 F150                                   l2230 EF66  
                                 l2222 EF36                                   l2070 F190  
                                 l2080 F1D0                                   l2160 EEDA  
                                 l2304 F6D6                                   l2138 F13C  
                                 l2410 F3C2                                   l2218 EF26  
                                 l2322 F736                                   l2148 F178  
                                 l2420 F3FE                                   l2412 F3C8  
                                 l2084 F1E2                                   l2068 F18C  
                                 l2156 EED2                                   l2332 F758  
                                 l2260 F02A                                   l2422 F402  
                                 l2414 F3D6                                   l2086 F218  
                                 l2166 EEF6                                   l2270 F07C  
                                 l2096 F416                                   l2192 EF8C  
                                 l2088 F21C                                   l2336 F76C  
                                 l2440 F552                                   l2098 F430  
                                 l2194 EF9E                                   l2362 F834  
                                 l2258 F018                                   l2274 F08E  
                                 l2450 F596                                   l2196 EFB0  
                                 l2348 F7D4                                   l2292 F694  
                                 l2268 F06A                                   l2276 F0B8  
                                 l2452 F59C                                   l2460 F5DA  
                                 l1822 EB88                                   l1902 F98A  
                                 l2198 EFC2                                   l2470 F614  
                                 l2446 F58A                                   l1840 ED58  
                                 l1920 FA2A                                   l2392 F340  
                                 l2384 EE84                                   l2288 F684  
                                 l2480 F64C                                   l2448 F590  
                                 l2456 F5A2                                   l1850 ED78  
                                 l1842 ED5C                                   l1906 F98E  
                                 l2298 F6B4                                   l2466 F600  
                                 l2458 F5CC                                   l1860 EC86  
                                 l1932 FA5C                                   l1916 F9FC  
                                 l2476 F63C                                   l2468 F606  
                                 l1838 ED50                                   l1862 EC8A  
                                 l1934 FA60                                   l1950 FAA2  
                                 l1918 FA26                                   l2398 F388  
                                 l2478 F640                                   l1960 FAE0  
                                 l1872 F86E                                   l1866 EC9E  
                                 l1858 EC7E                                   l1970 FB38  
                                 l1962 FAE8                                   l1882 F8E2  
                                 l1980 FBAA                                   l1956 FABC  
                                 l1948 FA92                                   l1884 F8F0  
                                 l1974 FB62                                   l1894 F928  
                                 l1878 F8B6                                   l1992 FC24  
                                 l1984 FBD4                                   l1888 F8F6  
                                 l1986 FBDC                                   l1996 FC4E  
                                 l1988 FBE4                                   l1998 FC5C  
                                 STR_1 FF85                                   STR_2 FF85  
                                 STR_3 FF85                                   STR_4 FFA6  
                                 STR_5 FFDD                                   STR_6 FF7B  
                                 STR_7 FF98                                   STR_8 FEA6  
                                 STR_9 FEC8                                   u1028 F8A2  
                                 u1308 FC94                                   u1228 FB96  
                                 _LATB 000F8A                                   _LATC 000F8B  
                                 u1328 FDB0                                   _LATD 000F8C  
                                 _LATE 000F8D                                   u1515 EE10  
                                 u1268 FC10                                   u1198 FB24  
                                 u1590 F7E4                                   u1807 EE70  
                                 u1817 EE92                                   u1827 EDA4  
                                 u1837 EDAE                                   u1847 EDD0  
                                 u1767 F70C                                   u1857 EDDA  
                                 u1777 F7C8                                   u1787 ECFA  
                                 u1797 ED2E                                   _RCEN 007E2B  
                                 _RSEN 007E29                                   _atoi F18A  
                                 _main F4FC                                   _keys FE1B  
   __end_of_update_eeprom_screen_state F012             _update_eeprom_screen_state EF86  
                                 _time 0055                                   fsr2h 000FDA  
                                 indf2 000FDF                                   fsr1l 000FE1  
                                 fsr2l 000FD9                                   prodh 000FF4  
                                 prodl 000FF3                                   start 0000  
                        __CFG_IESO$OFF 000000                          __CFG_MCLRE$ON 000000  
                         ___param_bank 000000             ??_update_init_screen_state 002F  
                  past_run_access@temp 0032                       ?_I2C_Master_Init 000E  
                     ?_I2C_Master_Read 0001                       ?_I2C_Master_Wait 0001  
                     ?_I2C_Master_Stop 0001          ?_update_past_run_screen_state 002D  
                                ?_atoi 0007                                  ?_main 0001  
                                _ACKEN 007E2C                                  _ACKDT 007E2D  
                                STR_10 FEFB                                  STR_11 FF0B  
                                STR_12 FF1B                                  STR_20 FEEA  
                                STR_13 FF2B                                  STR_21 FE50  
                                STR_22 FF3B                                  STR_14 FED9  
                                STR_30 FE84                                  STR_23 FF8A  
                                STR_15 FF6B                                  STR_31 FEB7  
                                STR_16 FFC2                                  STR_24 FE95  
                                STR_32 FE73                                  STR_33 FE73  
                                STR_25 FFFB                                  STR_17 FFB4  
                                STR_26 FFF6                                  STR_18 FF5B  
                                STR_34 FE62                                  STR_27 FFEA  
                                STR_19 FF4B                                  STR_28 FFD0  
                                STR_29 FE3E                        __end_of___lldiv EF86  
                                _T2CON 000FCA                        __end_of___lwdiv ED8C  
                      __end_of___lwmod ECB2                                  _PORTB 000F81  
                      __end_of__doprnt FE1A                                  _TRISA 000F92  
                                _TRISB 000F93                                  _TRISC 000F94  
                                _TRISD 000F95                                  _TRISE 000F96  
                        __CFG_PWRT$OFF 000000                          __CFG_WRT0$OFF 000000  
                        __CFG_WRT1$OFF 000000                  __end_of_activateServo EE9E  
                        __CFG_WRT2$OFF 000000                          __CFG_WRT3$OFF 000000  
                      __end_of_lcdInst EB30                         __CFG_EBTR0$OFF 000000  
                       __CFG_FCMEN$OFF 000000                         __CFG_EBTR1$OFF 000000  
                       __CFG_EBTR2$OFF 000000                         __CFG_EBTR3$OFF 000000  
                                _nRBPU 007F8F                          __CFG_WRTB$OFF 000000  
                        __CFG_WRTC$OFF 000000                          __CFG_WRTD$OFF 000000  
                      __end_of_initLCD ED3A                         __CFG_EBTRB$OFF 000000  
                      __end_of_dpowers FE36                        __end_of_isdigit EB90  
                                atoi@a 000C                                  atoi@s 0007  
                                _putch EB30                                  pclath 000FFA  
                                tablat 000FF5                                  status 000FD8  
                      __end_of_sprintf ECF4                         __CFG_PBADEN$ON 000000  
                      __initialization EC08                           __end_of_atoi F258  
                         __end_of_main F662                           __end_of_keys FE2C  
                      _past_run_access F0CC                                 ??_atoi 0009  
                               ??_main 0044                          __activetblptr 000003  
                   EEPROM@screen_state 0037                      ?_I2C_Master_Start 0001  
                    ?_I2C_Master_Write 0002                     ??_I2C_Master_Start 0002  
                               _ADCON0 000FC2                                 _ADCON1 000FC1  
                   ??_I2C_Master_Write 0004                                 _CCPR1L 000FBE  
                               ?_putch 0001                                 _EEPROM F32C  
                               _OSCCON 000FD3                                 _SSPADD 000FC8  
                               _TRISC3 007CA3                                 _TRISC4 007CA4  
                               _SSPBUF 000FC9                       __end_of_lcdClear EC08  
                       __CFG_XINST$OFF 000000                                 ___wmul EB90  
                       __CFG_STVREN$ON 000000                              ??___lldiv 0009  
                            ??___lwdiv 0005                              ??___lwmod 000C  
                            ??__doprnt 0013                                 clear_0 EC2E  
                         __doprnt@flag 001B                              ??_lcdInst 0003  
                               _printf EC3A                           __doprnt@prec 0018  
                            ??_initLCD 0004                           __pdataCOMRAM 0049  
                            ??_isdigit 0001                           __mediumconst FE1A  
       ??_update_past_run_screen_state 002F                                 tblptrh 000FF7  
                               tblptrl 000FF6                                 tblptru 000FF8  
                   user_input@keypress 0001                              ??_sprintf 0025  
                           __accesstop 0080                __end_of__initialization EC34  
                        ___rparam_used 000001       __end_of_update_init_screen_state F0CC  
              __end_of_past_run_access F18A                         __pcstackCOMRAM 0001  
                        __end_of_putch EB3C                     __size_of_lcdNibble 0056  
                           __doprnt@ap 0011                             __doprnt@pb 000D  
                              ??_putch 0003                                ?_EEPROM 0001  
              __size_of_getCurrentTime 00D4            ?_update_eeprom_screen_state 002D  
                              ?___wmul 0001                                _CCP1CON 000FBD  
                              ?_printf 001F                     __size_of_operation 020A  
                            ?_lcdClear 0001                                _SSPCON1 000FC6  
                              _SSPCON2 000FC5                                _SSPSTAT 000FC7  
                      __size_of_EEPROM 00E4                    _getCurrentTime$1224 002F  
                    __end_of_lcdNibble EDE2                                __Hparam 0000  
                              __Lparam 0000                       ?_past_run_access 0001  
                              ___lldiv EF04                        __size_of___wmul 0026  
                              ___lwdiv ED3A                                ___lwmod EC70  
                              __doprnt F86C                                __pcinit EC08  
                              __ramtop 1000                                _lcdInst EB24  
                              __ptext0 F4FC                                __ptext1 F012  
                              __ptext2 F662                                __ptext3 EE9E  
                              __ptext4 EB1A                                __ptext5 EB12  
                              __ptext6 EB0A                                __ptext7 EBB6  
                              __ptext8 EB48                                __ptext9 F258  
                      __size_of_printf 0036                                _initLCD ECF4  
                    __end_of_hexpowers FE3E                                _dpowers FE2C  
                              _isdigit EB72               __size_of_I2C_Master_Init 005A  
             __size_of_I2C_Master_Read 0026                             ??_lcdClear 002D  
    __size_of_update_init_screen_state 00BA               __size_of_I2C_Master_Wait 0012  
                           EEPROM@temp 0036               __size_of_I2C_Master_Stop 0008  
      update_past_run_screen_state@num 002D              ?_update_init_screen_state 002D  
                              _runInfo 0049                                _sprintf ECB2  
                        __doprnt@width 001C                   end_of_initialization EC34  
                    __end_of_operation F86C              __size_of_I2C_Master_Start 0008  
            __size_of_I2C_Master_Write 000A                        ___lldiv@divisor 0005  
                      ___lldiv@counter 000D                 __size_of_activateServo 0062  
                              printf@f 001F                       I2C_Master_Init@c 000E  
                     I2C_Master_Read@a 0002                                postdec1 000FE5  
                              postdec2 000FDD                                postinc0 000FEE  
                              postinc2 000FDE          update_eeprom_screen_state@num 002D  
                            _PORTAbits 000F80                              _PORTBbits 000F81  
                            _PORTCbits 000F82                         _getCurrentTime F258  
          past_run_access@screen_state 0033                  operation@startingTime 0037  
                       __end_of_EEPROM F410                      getCurrentTime@str 0031  
                           _user_input EB5A                         __end_of___wmul EBB6  
                        __pidataCOMRAM EB3C                         __end_of_printf EC70  
                  start_initialization EC08                          _activateServo EE3C  
               __end_of_getCurrentTime F32C                               ??_EEPROM 0035  
                    ??_I2C_Master_Init 0012                      ??_I2C_Master_Read 0002  
                    ??_I2C_Master_Wait 0001                      ??_I2C_Master_Stop 0002  
                             ??___wmul 0005                            __doprnt@idx 0017  
                          __doprnt@val 0019                       __CFG_LPT1OSC$OFF 000000  
                             ??_printf 0027                            __pbssCOMRAM 0055  
                       ?_activateServo 0001                        ?_getCurrentTime 002B  
                    __size_of_lcdClear 002C                              __doprnt@c 001E  
                            __doprnt@f 000F                       _I2C_Master_Start EB0A  
                          ?_user_input 0001                       _I2C_Master_Write EB1A  
                     ___lwdiv@dividend 0001                      __CFG_CCP2MX$PORTC 000000  
                        __pmediumconst FE1A                              _lcdNibble ED8C  
                             ?___lldiv 0001                               ?___lwdiv 0001  
                             ?___lwmod 0008                               ?__doprnt 000D  
                             ?_lcdInst 0001                               ?_initLCD 0001  
                             ?_isdigit 0001                       main@screen_state 0047  
                            _hexpowers FE36                       ___lwdiv@quotient 0005  
                             ?_sprintf 001F                         __size_of_putch 000C  
                           operation@i 0042            update_init_screen_state@num 002D  
                       ___wmul@product 0005                          operation@temp 003D  
                             _LATDbits 000F8C                              _operation F662  
                     __CFG_WDTPS$32768 000000                             ?_lcdNibble 0001  
                    ___wmul@multiplier 0001               __size_of_past_run_access 00BE  
                        lcdNibble@data 0002                        ??_activateServo 002D  
                        lcdNibble@temp 0001                    __size_of_user_input 0018  
                  I2C_Master_Read@temp 0003                              copy_data0 EC1C  
                             __Hrparam 0000                             ?_operation 0001  
                             __Lrparam 0000                     __CFG_BOREN$SBORDIS 000000  
                     __size_of___lldiv 0082                       __size_of___lwdiv 0052  
                     __size_of___lwmod 0042                       __size_of__doprnt 05AE  
                          _isdigit$852 0002                       __size_of_lcdInst 000C  
             _update_init_screen_state F012                      _updateCurrentTime EE9E  
                      _I2C_Master_Init EDE2                        _I2C_Master_Read EBB6  
                     __size_of_initLCD 0046                        _I2C_Master_Wait EB48  
                      _I2C_Master_Stop EB12                       __size_of_isdigit 001E  
                   ?_updateCurrentTime 0001                               _lcdClear EBDC  
                      ___lwdiv@divisor 0003                        ___lwdiv@counter 0007  
                             __ptext10 ECB2                               __ptext11 F18A  
                             __ptext20 F410                               __ptext12 ECF4  
                             __ptext21 EBDC                               __ptext13 EE3C  
                             __ptext30 ED8C                               __ptext22 EC3A  
                             __ptext14 EDE2                               __ptext31 0000  
                             __ptext23 F86C                               __ptext15 EF04  
                             __ptext24 EB30                               __ptext16 F32C  
                             __ptext25 EB72                               __ptext17 EF86  
                             __ptext26 EB90                               __ptext18 F0CC  
                             __ptext27 EC70                               __ptext19 EB5A  
                             __ptext28 ED3A                               __ptext29 EB24  
                     __size_of_sprintf 0042                    ??_updateCurrentTime 0004  
                        __size_of_atoi 00CE                          __size_of_main 0166  
         ??_update_eeprom_screen_state 002F                            ??_lcdNibble 0001  
                             atoi@sign 000B                        operation@bottle 0039  
                             main@temp 0046              __end_of_updateCurrentTime EF04  
                     ??_getCurrentTime 002D                              putch@data 0003  
             __end_of_I2C_Master_Start EB12               __end_of_I2C_Master_Write EB24  
                           _INTCONbits 000FF2              getCurrentTime@currentTime 002D  
                             isdigit@c 0003                      ??_past_run_access 0031  
  __size_of_update_eeprom_screen_state 008C                              sprintf@ap 0025  
                            sprintf@pb 0027                              sprintf@wh 001F  
                     ___lwmod@dividend 0008                       ___lldiv@dividend 0001  
                         ??_user_input 0001                            ??_operation 0033  
                   updateCurrentTime@i 0004                               printf@ap 0027  
                             printf@pb 0029                __end_of_I2C_Master_Init EE3C  
              __end_of_I2C_Master_Read EBDC                __end_of_I2C_Master_Wait EB5A  
              __end_of_I2C_Master_Stop EB1A                            lcdInst@data 0003  
                             sprintf@f 0021                       ___lldiv@quotient 0009  
                    I2C_Master_Write@d 0002                        ___lwmod@divisor 000A  
                      ___lwmod@counter 000C                     __end_of_user_input EB72  
                  operation@endingTime 003B                    operation@bottle_cap 0040  
