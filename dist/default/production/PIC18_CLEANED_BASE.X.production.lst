

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Feb 28 15:59:19 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,delta=1
    53                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    54                           	psect	text42,global,reloc=2,class=CODE,delta=1
    55                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    56  0000                     
    57                           ; Version 1.40
    58                           ; Generated 01/12/2016 GMT
    59                           ; 
    60                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    61                           ; All rights reserved.
    62                           ; 
    63                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    64                           ; 
    65                           ; Redistribution and use in source and binary forms, with or without modification, are
    66                           ; permitted provided that the following conditions are met:
    67                           ; 
    68                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    69                           ;        conditions and the following disclaimer.
    70                           ; 
    71                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    72                           ;        of conditions and the following disclaimer in the documentation and/or other
    73                           ;        materials provided with the distribution.
    74                           ; 
    75                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    76                           ;        software without specific prior written permission.
    77                           ; 
    78                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    79                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    80                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    81                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    82                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    83                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    84                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    85                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    86                           ; 
    87                           ; 
    88                           ; Code-generator required, PIC18F4620 Definitions
    89                           ; 
    90                           ; SFR Addresses
    91  0000                     
    92                           	psect	idataCOMRAM
    93  00E476                     __pidataCOMRAM:
    94                           	opt stack 0
    95                           
    96                           ;initializer for _runInfo
    97  00E476  0028               	dw	40
    98  00E478  000A               	dw	10
    99  00E47A  0002               	dw	2
   100  00E47C  0003               	dw	3
   101  00E47E  0003               	dw	3
   102  00E480  0002               	dw	2
   103                           
   104                           	psect	mediumconst
   105  00FE28                     __pmediumconst:
   106                           	opt stack 0
   107  00FE28  00                 	db	0
   108  00FE29                     _keys:
   109                           	opt stack 0
   110  00FE29  31                 	db	49
   111  00FE2A  32                 	db	50
   112  00FE2B  33                 	db	51
   113  00FE2C  41                 	db	65
   114  00FE2D  34                 	db	52
   115  00FE2E  35                 	db	53
   116  00FE2F  36                 	db	54
   117  00FE30  42                 	db	66
   118  00FE31  37                 	db	55
   119  00FE32  38                 	db	56
   120  00FE33  39                 	db	57
   121  00FE34  43                 	db	67
   122  00FE35  2A                 	db	42
   123  00FE36  30                 	db	48
   124  00FE37  23                 	db	35
   125  00FE38  44                 	db	68
   126  00FE39  00                 	db	0
   127  00FE3A                     __end_of_keys:
   128                           	opt stack 0
   129  00FE3A                     _dpowers:
   130                           	opt stack 0
   131  00FE3A  0001               	dw	1
   132  00FE3C  000A               	dw	10
   133  00FE3E  0064               	dw	100
   134  00FE40  03E8               	dw	1000
   135  00FE42  2710               	dw	10000
   136  00FE44                     __end_of_dpowers:
   137                           	opt stack 0
   138  00FE44                     _hexpowers:
   139                           	opt stack 0
   140  00FE44  0001               	dw	1
   141  00FE46  0010               	dw	16
   142  00FE48  0100               	dw	256
   143  00FE4A  1000               	dw	4096
   144  00FE4C                     __end_of_hexpowers:
   145                           	opt stack 0
   146  00FE4C                     _BACK:
   147                           	opt stack 0
   148  00FE4C  000F               	dw	15
   149  00FE4E                     __end_of_BACK:
   150                           	opt stack 0
   151  00FE4E                     _ENTER:
   152                           	opt stack 0
   153  00FE4E  0003               	dw	3
   154  00FE50                     __end_of_ENTER:
   155                           	opt stack 0
   156  00FE50                     _LEFT:
   157                           	opt stack 0
   158  00FE50  0004               	dw	4
   159  00FE52                     __end_of_LEFT:
   160                           	opt stack 0
   161  00FE52                     _RIGHT:
   162                           	opt stack 0
   163  00FE52  0006               	dw	6
   164  00FE54                     __end_of_RIGHT:
   165                           	opt stack 0
   166  0000                     _ADCON0	set	4034
   167  0000                     _ADCON1	set	4033
   168  0000                     _EEADR	set	4009
   169  0000                     _EEADRH	set	4010
   170  0000                     _EECON1bits	set	4006
   171  0000                     _EECON2	set	4007
   172  0000                     _EEDATA	set	4008
   173  0000                     _INTCONbits	set	4082
   174  0000                     _LATB	set	3978
   175  0000                     _LATC	set	3979
   176  0000                     _LATD	set	3980
   177  0000                     _LATDbits	set	3980
   178  0000                     _LATE	set	3981
   179  0000                     _PIR2bits	set	4001
   180  0000                     _PORTAbits	set	3968
   181  0000                     _PORTB	set	3969
   182  0000                     _PORTBbits	set	3969
   183  0000                     _PORTCbits	set	3970
   184  0000                     _SSPADD	set	4040
   185  0000                     _SSPBUF	set	4041
   186  0000                     _SSPCON1	set	4038
   187  0000                     _SSPCON2	set	4037
   188  0000                     _SSPSTAT	set	4039
   189  0000                     _TRISA	set	3986
   190  0000                     _TRISB	set	3987
   191  0000                     _TRISC	set	3988
   192  0000                     _TRISD	set	3989
   193  0000                     _TRISE	set	3990
   194  0000                     _ACKDT	set	32301
   195  0000                     _ACKEN	set	32300
   196  0000                     _PEN	set	32298
   197  0000                     _RCEN	set	32299
   198  0000                     _RSEN	set	32297
   199  0000                     _SEN	set	32296
   200  0000                     _TRISC3	set	31907
   201  0000                     _TRISC4	set	31908
   202  0000                     _nRBPU	set	32655
   203  00FE54                     STR_33:
   204  00FE54  43                 	db	67	;'C'
   205  00FE55  4F                 	db	79	;'O'
   206  00FE56  4D                 	db	77	;'M'
   207  00FE57  50                 	db	80	;'P'
   208  00FE58  4C                 	db	76	;'L'
   209  00FE59  45                 	db	69	;'E'
   210  00FE5A  54                 	db	84	;'T'
   211  00FE5B  45                 	db	69	;'E'
   212  00FE5C  44                 	db	68	;'D'
   213  00FE5D  21                 	db	33
   214  00FE5E  21                 	db	33
   215  00FE5F  21                 	db	33
   216  00FE60  20                 	db	32
   217  00FE61  20                 	db	32
   218  00FE62  20                 	db	32
   219  00FE63  20                 	db	32
   220  00FE64  20                 	db	32
   221  00FE65  00                 	db	0
   222  00FE66                     STR_25:
   223  00FE66  3C                 	db	60	;'<'
   224  00FE67  34                 	db	52	;'4'
   225  00FE68  20                 	db	32
   226  00FE69  20                 	db	32
   227  00FE6A  42                 	db	66	;'B'
   228  00FE6B  61                 	db	97	;'a'
   229  00FE6C  63                 	db	99	;'c'
   230  00FE6D  6B                 	db	107	;'k'
   231  00FE6E  3A                 	db	58	;':'
   232  00FE6F  20                 	db	32
   233  00FE70  20                 	db	32
   234  00FE71  44                 	db	68	;'D'
   235  00FE72  20                 	db	32
   236  00FE73  20                 	db	32
   237  00FE74  36                 	db	54	;'6'
   238  00FE75  3E                 	db	62	;'>'
   239  00FE76  20                 	db	32
   240  00FE77  00                 	db	0
   241  00FE78                     STR_37:
   242  00FE78  30                 	db	48	;'0'
   243  00FE79  31                 	db	49	;'1'
   244  00FE7A  32                 	db	50	;'2'
   245  00FE7B  33                 	db	51	;'3'
   246  00FE7C  34                 	db	52	;'4'
   247  00FE7D  35                 	db	53	;'5'
   248  00FE7E  36                 	db	54	;'6'
   249  00FE7F  37                 	db	55	;'7'
   250  00FE80  38                 	db	56	;'8'
   251  00FE81  39                 	db	57	;'9'
   252  00FE82  61                 	db	97	;'a'
   253  00FE83  62                 	db	98	;'b'
   254  00FE84  63                 	db	99	;'c'
   255  00FE85  64                 	db	100	;'d'
   256  00FE86  65                 	db	101	;'e'
   257  00FE87  66                 	db	102	;'f'
   258  00FE88  00                 	db	0
   259  00FE89                     STR_35:
   260  00FE89  20                 	db	32
   261  00FE8A  20                 	db	32
   262  00FE8B  20                 	db	32
   263  00FE8C  20                 	db	32
   264  00FE8D  20                 	db	32
   265  00FE8E  20                 	db	32
   266  00FE8F  20                 	db	32
   267  00FE90  20                 	db	32
   268  00FE91  20                 	db	32
   269  00FE92  20                 	db	32
   270  00FE93  20                 	db	32
   271  00FE94  20                 	db	32
   272  00FE95  20                 	db	32
   273  00FE96  20                 	db	32
   274  00FE97  20                 	db	32
   275  00FE98  20                 	db	32
   276  00FE99  00                 	db	0
   277  00FE9A                     STR_34:
   278  00FE9A  41                 	db	65	;'A'
   279  00FE9B  20                 	db	32
   280  00FE9C  74                 	db	116	;'t'
   281  00FE9D  6F                 	db	111	;'o'
   282  00FE9E  20                 	db	32
   283  00FE9F  62                 	db	98	;'b'
   284  00FEA0  61                 	db	97	;'a'
   285  00FEA1  63                 	db	99	;'c'
   286  00FEA2  6B                 	db	107	;'k'
   287  00FEA3  20                 	db	32
   288  00FEA4  20                 	db	32
   289  00FEA5  20                 	db	32
   290  00FEA6  20                 	db	32
   291  00FEA7  20                 	db	32
   292  00FEA8  20                 	db	32
   293  00FEA9  20                 	db	32
   294  00FEAA  00                 	db	0
   295  00FEAB                     STR_28:
   296  00FEAB  42                 	db	66	;'B'
   297  00FEAC  4F                 	db	79	;'O'
   298  00FEAD  54                 	db	84	;'T'
   299  00FEAE  54                 	db	84	;'T'
   300  00FEAF  4C                 	db	76	;'L'
   301  00FEB0  45                 	db	69	;'E'
   302  00FEB1  20                 	db	32
   303  00FEB2  49                 	db	73	;'I'
   304  00FEB3  4E                 	db	78	;'N'
   305  00FEB4  53                 	db	83	;'S'
   306  00FEB5  49                 	db	73	;'I'
   307  00FEB6  44                 	db	68	;'D'
   308  00FEB7  45                 	db	69	;'E'
   309  00FEB8  20                 	db	32
   310  00FEB9  20                 	db	32
   311  00FEBA  20                 	db	32
   312  00FEBB  00                 	db	0
   313  00FEBC                     STR_10:
   314  00FEBC  41                 	db	65	;'A'
   315  00FEBD  63                 	db	99	;'c'
   316  00FEBE  63                 	db	99	;'c'
   317  00FEBF  65                 	db	101	;'e'
   318  00FEC0  73                 	db	115	;'s'
   319  00FEC1  73                 	db	115	;'s'
   320  00FEC2  20                 	db	32
   321  00FEC3  4C                 	db	76	;'L'
   322  00FEC4  61                 	db	97	;'a'
   323  00FEC5  73                 	db	115	;'s'
   324  00FEC6  74                 	db	116	;'t'
   325  00FEC7  20                 	db	32
   326  00FEC8  52                 	db	82	;'R'
   327  00FEC9  75                 	db	117	;'u'
   328  00FECA  6E                 	db	110	;'n'
   329  00FECB  20                 	db	32
   330  00FECC  00                 	db	0
   331  00FECD                     STR_11:
   332  00FECD  3C                 	db	60	;'<'
   333  00FECE  34                 	db	52	;'4'
   334  00FECF  20                 	db	32
   335  00FED0  20                 	db	32
   336  00FED1  53                 	db	83	;'S'
   337  00FED2  74                 	db	116	;'t'
   338  00FED3  61                 	db	97	;'a'
   339  00FED4  72                 	db	114	;'r'
   340  00FED5  74                 	db	116	;'t'
   341  00FED6  3A                 	db	58	;':'
   342  00FED7  20                 	db	32
   343  00FED8  41                 	db	65	;'A'
   344  00FED9  20                 	db	32
   345  00FEDA  20                 	db	32
   346  00FEDB  36                 	db	54	;'6'
   347  00FEDC  3E                 	db	62	;'>'
   348  00FEDD  00                 	db	0
   349  00FEDE                     STR_16:
   350  00FEDE  3C                 	db	60	;'<'
   351  00FEDF  34                 	db	52	;'4'
   352  00FEE0  20                 	db	32
   353  00FEE1  20                 	db	32
   354  00FEE2  4E                 	db	78	;'N'
   355  00FEE3  61                 	db	97	;'a'
   356  00FEE4  76                 	db	118	;'v'
   357  00FEE5  3A                 	db	58	;':'
   358  00FEE6  20                 	db	32
   359  00FEE7  41                 	db	65	;'A'
   360  00FEE8  2F                 	db	47
   361  00FEE9  44                 	db	68	;'D'
   362  00FEEA  20                 	db	32
   363  00FEEB  20                 	db	32
   364  00FEEC  36                 	db	54	;'6'
   365  00FEED  3E                 	db	62	;'>'
   366  00FEEE  00                 	db	0
   367  00FEEF                     STR_22:
   368  00FEEF  45                 	db	69	;'E'
   369  00FEF0  73                 	db	115	;'s'
   370  00FEF1  6B                 	db	107	;'k'
   371  00FEF2  61                 	db	97	;'a'
   372  00FEF3  20                 	db	32
   373  00FEF4  77                 	db	119	;'w'
   374  00FEF5  2F                 	db	47
   375  00FEF6  6F                 	db	111	;'o'
   376  00FEF7  20                 	db	32
   377  00FEF8  43                 	db	67	;'C'
   378  00FEF9  61                 	db	97	;'a'
   379  00FEFA  70                 	db	112	;'p'
   380  00FEFB  3A                 	db	58	;':'
   381  00FEFC  20                 	db	32
   382  00FEFD  25                 	db	37
   383  00FEFE  69                 	db	105	;'i'
   384  00FEFF  00                 	db	0
   385  00FF00                     STR_13:
   386  00FF00  20                 	db	32
   387  00FF01  20                 	db	32
   388  00FF02  20                 	db	32
   389  00FF03  50                 	db	80	;'P'
   390  00FF04  61                 	db	97	;'a'
   391  00FF05  73                 	db	115	;'s'
   392  00FF06  74                 	db	116	;'t'
   393  00FF07  20                 	db	32
   394  00FF08  52                 	db	82	;'R'
   395  00FF09  75                 	db	117	;'u'
   396  00FF0A  6E                 	db	110	;'n'
   397  00FF0B  20                 	db	32
   398  00FF0C  32                 	db	50	;'2'
   399  00FF0D  20                 	db	32
   400  00FF0E  20                 	db	32
   401  00FF0F  00                 	db	0
   402  00FF10                     STR_14:
   403  00FF10  20                 	db	32
   404  00FF11  20                 	db	32
   405  00FF12  20                 	db	32
   406  00FF13  50                 	db	80	;'P'
   407  00FF14  61                 	db	97	;'a'
   408  00FF15  73                 	db	115	;'s'
   409  00FF16  74                 	db	116	;'t'
   410  00FF17  20                 	db	32
   411  00FF18  52                 	db	82	;'R'
   412  00FF19  75                 	db	117	;'u'
   413  00FF1A  6E                 	db	110	;'n'
   414  00FF1B  20                 	db	32
   415  00FF1C  33                 	db	51	;'3'
   416  00FF1D  20                 	db	32
   417  00FF1E  20                 	db	32
   418  00FF1F  00                 	db	0
   419  00FF20                     STR_15:
   420  00FF20  20                 	db	32
   421  00FF21  20                 	db	32
   422  00FF22  20                 	db	32
   423  00FF23  50                 	db	80	;'P'
   424  00FF24  61                 	db	97	;'a'
   425  00FF25  73                 	db	115	;'s'
   426  00FF26  74                 	db	116	;'t'
   427  00FF27  20                 	db	32
   428  00FF28  52                 	db	82	;'R'
   429  00FF29  75                 	db	117	;'u'
   430  00FF2A  6E                 	db	110	;'n'
   431  00FF2B  20                 	db	32
   432  00FF2C  34                 	db	52	;'4'
   433  00FF2D  20                 	db	32
   434  00FF2E  20                 	db	32
   435  00FF2F  00                 	db	0
   436  00FF30                     STR_26:
   437  00FF30  2E                 	db	46
   438  00FF31  2E                 	db	46
   439  00FF32  2E                 	db	46
   440  00FF33  4F                 	db	79	;'O'
   441  00FF34  70                 	db	112	;'p'
   442  00FF35  65                 	db	101	;'e'
   443  00FF36  72                 	db	114	;'r'
   444  00FF37  61                 	db	97	;'a'
   445  00FF38  74                 	db	116	;'t'
   446  00FF39  69                 	db	105	;'i'
   447  00FF3A  6E                 	db	110	;'n'
   448  00FF3B  67                 	db	103	;'g'
   449  00FF3C  2E                 	db	46
   450  00FF3D  2E                 	db	46
   451  00FF3E  2E                 	db	46
   452  00FF3F  00                 	db	0
   453  00FF40                     STR_21:
   454  00FF40  45                 	db	69	;'E'
   455  00FF41  73                 	db	115	;'s'
   456  00FF42  6B                 	db	107	;'k'
   457  00FF43  61                 	db	97	;'a'
   458  00FF44  20                 	db	32
   459  00FF45  77                 	db	119	;'w'
   460  00FF46  2F                 	db	47
   461  00FF47  20                 	db	32
   462  00FF48  43                 	db	67	;'C'
   463  00FF49  61                 	db	97	;'a'
   464  00FF4A  70                 	db	112	;'p'
   465  00FF4B  3A                 	db	58	;':'
   466  00FF4C  20                 	db	32
   467  00FF4D  25                 	db	37
   468  00FF4E  69                 	db	105	;'i'
   469  00FF4F  00                 	db	0
   470  00FF50                     STR_20:
   471  00FF50  59                 	db	89	;'Y'
   472  00FF51  6F                 	db	111	;'o'
   473  00FF52  70                 	db	112	;'p'
   474  00FF53  20                 	db	32
   475  00FF54  77                 	db	119	;'w'
   476  00FF55  2F                 	db	47
   477  00FF56  6F                 	db	111	;'o'
   478  00FF57  20                 	db	32
   479  00FF58  43                 	db	67	;'C'
   480  00FF59  61                 	db	97	;'a'
   481  00FF5A  70                 	db	112	;'p'
   482  00FF5B  3A                 	db	58	;':'
   483  00FF5C  20                 	db	32
   484  00FF5D  25                 	db	37
   485  00FF5E  69                 	db	105	;'i'
   486  00FF5F  00                 	db	0
   487  00FF60                     STR_17:
   488  00FF60  54                 	db	84	;'T'
   489  00FF61  69                 	db	105	;'i'
   490  00FF62  6D                 	db	109	;'m'
   491  00FF63  65                 	db	101	;'e'
   492  00FF64  20                 	db	32
   493  00FF65  74                 	db	116	;'t'
   494  00FF66  61                 	db	97	;'a'
   495  00FF67  6B                 	db	107	;'k'
   496  00FF68  65                 	db	101	;'e'
   497  00FF69  6E                 	db	110	;'n'
   498  00FF6A  3A                 	db	58	;':'
   499  00FF6B  20                 	db	32
   500  00FF6C  25                 	db	37
   501  00FF6D  69                 	db	105	;'i'
   502  00FF6E  73                 	db	115	;'s'
   503  00FF6F  00                 	db	0
   504  00FF70                     STR_2:
   505  00FF70  25                 	db	37
   506  00FF71  30                 	db	48	;'0'
   507  00FF72  32                 	db	50	;'2'
   508  00FF73  78                 	db	120	;'x'
   509  00FF74  3A                 	db	58	;':'
   510  00FF75  25                 	db	37
   511  00FF76  30                 	db	48	;'0'
   512  00FF77  32                 	db	50	;'2'
   513  00FF78  78                 	db	120	;'x'
   514  00FF79  3A                 	db	58	;':'
   515  00FF7A  25                 	db	37
   516  00FF7B  30                 	db	48	;'0'
   517  00FF7C  32                 	db	50	;'2'
   518  00FF7D  78                 	db	120	;'x'
   519  00FF7E  00                 	db	0
   520  00FF7F                     STR_27:
   521  00FF7F  4E                 	db	78	;'N'
   522  00FF80  4F                 	db	79	;'O'
   523  00FF81  20                 	db	32
   524  00FF82  42                 	db	66	;'B'
   525  00FF83  4F                 	db	79	;'O'
   526  00FF84  54                 	db	84	;'T'
   527  00FF85  54                 	db	84	;'T'
   528  00FF86  4C                 	db	76	;'L'
   529  00FF87  45                 	db	69	;'E'
   530  00FF88  20                 	db	32
   531  00FF89  20                 	db	32
   532  00FF8A  20                 	db	32
   533  00FF8B  20                 	db	32
   534  00FF8C  00                 	db	0
   535  00FF8D                     STR_9:
   536  00FF8D  41                 	db	65	;'A'
   537  00FF8E  63                 	db	99	;'c'
   538  00FF8F  63                 	db	99	;'c'
   539  00FF90  65                 	db	101	;'e'
   540  00FF91  73                 	db	115	;'s'
   541  00FF92  73                 	db	115	;'s'
   542  00FF93  20                 	db	32
   543  00FF94  45                 	db	69	;'E'
   544  00FF95  45                 	db	69	;'E'
   545  00FF96  50                 	db	80	;'P'
   546  00FF97  52                 	db	82	;'R'
   547  00FF98  4F                 	db	79	;'O'
   548  00FF99  4D                 	db	77	;'M'
   549  00FF9A  00                 	db	0
   550  00FF9B                     STR_6:
   551  00FF9B  42                 	db	66	;'B'
   552  00FF9C  65                 	db	101	;'e'
   553  00FF9D  67                 	db	103	;'g'
   554  00FF9E  69                 	db	105	;'i'
   555  00FF9F  6E                 	db	110	;'n'
   556  00FFA0  20                 	db	32
   557  00FFA1  53                 	db	83	;'S'
   558  00FFA2  6F                 	db	111	;'o'
   559  00FFA3  72                 	db	114	;'r'
   560  00FFA4  74                 	db	116	;'t'
   561  00FFA5  69                 	db	105	;'i'
   562  00FFA6  6E                 	db	110	;'n'
   563  00FFA7  67                 	db	103	;'g'
   564  00FFA8  00                 	db	0
   565  00FFA9                     STR_19:
   566  00FFA9  59                 	db	89	;'Y'
   567  00FFAA  6F                 	db	111	;'o'
   568  00FFAB  70                 	db	112	;'p'
   569  00FFAC  20                 	db	32
   570  00FFAD  77                 	db	119	;'w'
   571  00FFAE  2F                 	db	47
   572  00FFAF  43                 	db	67	;'C'
   573  00FFB0  61                 	db	97	;'a'
   574  00FFB1  70                 	db	112	;'p'
   575  00FFB2  3A                 	db	58	;':'
   576  00FFB3  20                 	db	32
   577  00FFB4  25                 	db	37
   578  00FFB5  69                 	db	105	;'i'
   579  00FFB6  00                 	db	0
   580  00FFB7                     STR_18:
   581  00FFB7  23                 	db	35
   582  00FFB8  20                 	db	32
   583  00FFB9  42                 	db	66	;'B'
   584  00FFBA  6F                 	db	111	;'o'
   585  00FFBB  74                 	db	116	;'t'
   586  00FFBC  74                 	db	116	;'t'
   587  00FFBD  6C                 	db	108	;'l'
   588  00FFBE  65                 	db	101	;'e'
   589  00FFBF  73                 	db	115	;'s'
   590  00FFC0  3A                 	db	58	;':'
   591  00FFC1  20                 	db	32
   592  00FFC2  25                 	db	37
   593  00FFC3  69                 	db	105	;'i'
   594  00FFC4  00                 	db	0
   595  00FFC5                     STR_32:
   596  00FFC5  20                 	db	32
   597  00FFC6  77                 	db	119	;'w'
   598  00FFC7  2F                 	db	47
   599  00FFC8  6F                 	db	111	;'o'
   600  00FFC9  20                 	db	32
   601  00FFCA  43                 	db	67	;'C'
   602  00FFCB  61                 	db	97	;'a'
   603  00FFCC  70                 	db	112	;'p'
   604  00FFCD  20                 	db	32
   605  00FFCE  20                 	db	32
   606  00FFCF  20                 	db	32
   607  00FFD0  20                 	db	32
   608  00FFD1  00                 	db	0
   609  00FFD2                     STR_1:
   610  00FFD2  25                 	db	37
   611  00FFD3  30                 	db	48	;'0'
   612  00FFD4  32                 	db	50	;'2'
   613  00FFD5  78                 	db	120	;'x'
   614  00FFD6  2F                 	db	47
   615  00FFD7  25                 	db	37
   616  00FFD8  30                 	db	48	;'0'
   617  00FFD9  32                 	db	50	;'2'
   618  00FFDA  78                 	db	120	;'x'
   619  00FFDB  20                 	db	32
   620  00FFDC  20                 	db	32
   621  00FFDD  20                 	db	32
   622  00FFDE  00                 	db	0
   623  00FFDF                     STR_31:
   624  00FFDF  20                 	db	32
   625  00FFE0  77                 	db	119	;'w'
   626  00FFE1  2F                 	db	47
   627  00FFE2  20                 	db	32
   628  00FFE3  43                 	db	67	;'C'
   629  00FFE4  61                 	db	97	;'a'
   630  00FFE5  70                 	db	112	;'p'
   631  00FFE6  20                 	db	32
   632  00FFE7  20                 	db	32
   633  00FFE8  20                 	db	32
   634  00FFE9  20                 	db	32
   635  00FFEA  00                 	db	0
   636  00FFEB                     STR_12:
   637  00FFEB  52                 	db	82	;'R'
   638  00FFEC  65                 	db	101	;'e'
   639  00FFED  63                 	db	99	;'c'
   640  00FFEE  65                 	db	101	;'e'
   641  00FFEF  6E                 	db	110	;'n'
   642  00FFF0  74                 	db	116	;'t'
   643  00FFF1  20                 	db	32
   644  00FFF2  52                 	db	82	;'R'
   645  00FFF3  75                 	db	117	;'u'
   646  00FFF4  6E                 	db	110	;'n'
   647  00FFF5  00                 	db	0
   648  00FFF6                     STR_30:
   649  00FFF6  45                 	db	69	;'E'
   650  00FFF7  53                 	db	83	;'S'
   651  00FFF8  4B                 	db	75	;'K'
   652  00FFF9  41                 	db	65	;'A'
   653  00FFFA  00                 	db	0
   654  00FFFB                     STR_29:
   655  00FFFB  59                 	db	89	;'Y'
   656  00FFFC  4F                 	db	79	;'O'
   657  00FFFD  50                 	db	80	;'P'
   658  00FFFE  00                 	db	0
   659  0000                     
   660                           ; #config settings
   661  00FFFF  00                 	db	0	; dummy byte at the end
   662  0000                     
   663                           	psect	cinit
   664  00E60E                     __pcinit:
   665                           	opt stack 0
   666  00E60E                     start_initialization:
   667                           	opt stack 0
   668  00E60E                     __initialization:
   669                           	opt stack 0
   670                           
   671                           ; Initialize objects allocated to COMRAM (12 bytes)
   672                           ; load TBLPTR registers with __pidataCOMRAM
   673  00E60E  0E76               	movlw	low __pidataCOMRAM
   674  00E610  6EF6               	movwf	tblptrl,c
   675  00E612  0EE4               	movlw	high __pidataCOMRAM
   676  00E614  6EF7               	movwf	tblptrh,c
   677  00E616  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   678  00E618  6EF8               	movwf	tblptru,c
   679  00E61A  EE00  F06A         	lfsr	0,__pdataCOMRAM
   680  00E61E  EE10 F00C          	lfsr	1,12
   681  00E622                     copy_data0:
   682  00E622  0009               	tblrd		*+
   683  00E624  CFF5 FFEE          	movff	tablat,postinc0
   684  00E628  50E5               	movf	postdec1,w,c
   685  00E62A  50E1               	movf	fsr1l,w,c
   686  00E62C  E1FA               	bnz	copy_data0
   687                           
   688                           ; Clear objects allocated to COMRAM (16 bytes)
   689  00E62E  EE00  F05A         	lfsr	0,__pbssCOMRAM
   690  00E632  0E10               	movlw	16
   691  00E634                     clear_0:
   692  00E634  6AEE               	clrf	postinc0,c
   693  00E636  06E8               	decf	wreg,f,c
   694  00E638  E1FD               	bnz	clear_0
   695  00E63A                     end_of_initialization:
   696                           	opt stack 0
   697  00E63A                     __end_of__initialization:
   698                           	opt stack 0
   699  00E63A  0100               	movlb	0
   700  00E63C  EFF2  F075         	goto	_main	;jump to C main() function
   701                           tblptru	equ	0xFF8
   702                           tblptrh	equ	0xFF7
   703                           tblptrl	equ	0xFF6
   704                           tablat	equ	0xFF5
   705                           postinc0	equ	0xFEE
   706                           wreg	equ	0xFE8
   707                           postdec1	equ	0xFE5
   708                           fsr1l	equ	0xFE1
   709                           
   710                           	psect	bssCOMRAM
   711  00005A                     __pbssCOMRAM:
   712                           	opt stack 0
   713  00005A                     _lastRunTime:
   714                           	opt stack 0
   715  00005A                     	ds	7
   716  000061                     _time:
   717                           	opt stack 0
   718  000061                     	ds	7
   719  000068                     _initScreenState:
   720                           	opt stack 0
   721  000068                     	ds	2
   722                           tblptru	equ	0xFF8
   723                           tblptrh	equ	0xFF7
   724                           tblptrl	equ	0xFF6
   725                           tablat	equ	0xFF5
   726                           postinc0	equ	0xFEE
   727                           wreg	equ	0xFE8
   728                           postdec1	equ	0xFE5
   729                           fsr1l	equ	0xFE1
   730                           
   731                           	psect	dataCOMRAM
   732  00006A                     __pdataCOMRAM:
   733                           	opt stack 0
   734  00006A                     _runInfo:
   735                           	opt stack 0
   736  00006A                     	ds	12
   737                           tblptru	equ	0xFF8
   738                           tblptrh	equ	0xFF7
   739                           tblptrl	equ	0xFF6
   740                           tablat	equ	0xFF5
   741                           postinc0	equ	0xFEE
   742                           wreg	equ	0xFE8
   743                           postdec1	equ	0xFE5
   744                           fsr1l	equ	0xFE1
   745                           
   746                           	psect	cstackCOMRAM
   747  000001                     __pcstackCOMRAM:
   748                           	opt stack 0
   749  000001                     ??_pushBottle:
   750  000001                     ??_isdigit:
   751  000001                     ??_I2C_Master_Wait:
   752  000001                     ?___wmul:
   753                           	opt stack 0
   754  000001                     ?___lwdiv:
   755                           	opt stack 0
   756  000001                     ?___lldiv:
   757                           	opt stack 0
   758  000001                     lcdNibble@temp:
   759                           	opt stack 0
   760  000001                     moveBinServo@num:
   761                           	opt stack 0
   762  000001                     ___wmul@multiplier:
   763                           	opt stack 0
   764  000001                     ___lwdiv@dividend:
   765                           	opt stack 0
   766  000001                     ___lldiv@dividend:
   767                           	opt stack 0
   768                           
   769                           ; 4 bytes @ 0x0
   770  000001                     	ds	1
   771  000002                     lcdNibble@data:
   772                           	opt stack 0
   773  000002                     I2C_Master_Read@a:
   774                           	opt stack 0
   775  000002                     _isdigit$1006:
   776                           	opt stack 0
   777  000002                     I2C_Master_Write@d:
   778                           	opt stack 0
   779                           
   780                           ; 2 bytes @ 0x1
   781  000002                     	ds	1
   782  000003                     ??_moveBinServo:
   783  000003                     lcdInst@data:
   784                           	opt stack 0
   785  000003                     putch@data:
   786                           	opt stack 0
   787  000003                     I2C_Master_Read@temp:
   788                           	opt stack 0
   789  000003                     isdigit@c:
   790                           	opt stack 0
   791  000003                     pushBottle@i:
   792                           	opt stack 0
   793  000003                     ___wmul@multiplicand:
   794                           	opt stack 0
   795  000003                     ___lwdiv@divisor:
   796                           	opt stack 0
   797                           
   798                           ; 2 bytes @ 0x2
   799  000003                     	ds	1
   800  000004                     ??_initializeLcdSettings:
   801  000004                     updateCurrentTime@i:
   802                           	opt stack 0
   803                           
   804                           ; 1 bytes @ 0x3
   805  000004                     	ds	1
   806  000005                     moveBinServo@i:
   807                           	opt stack 0
   808  000005                     ___wmul@product:
   809                           	opt stack 0
   810  000005                     ___lwdiv@quotient:
   811                           	opt stack 0
   812  000005                     ___lldiv@divisor:
   813                           	opt stack 0
   814                           
   815                           ; 4 bytes @ 0x4
   816  000005                     	ds	2
   817  000007                     ?_atoi:
   818                           	opt stack 0
   819  000007                     ___lwdiv@counter:
   820                           	opt stack 0
   821  000007                     Eeprom_ReadByte@address:
   822                           	opt stack 0
   823  000007                     Eeprom_WriteByte@address:
   824                           	opt stack 0
   825  000007                     atoi@s:
   826                           	opt stack 0
   827                           
   828                           ; 2 bytes @ 0x6
   829  000007                     	ds	1
   830  000008                     ?___lwmod:
   831                           	opt stack 0
   832  000008                     ___lwmod@dividend:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x7
   836  000008                     	ds	1
   837  000009                     ??_atoi:
   838  000009                     Eeprom_WriteByte@data:
   839                           	opt stack 0
   840  000009                     getEEPROM@num:
   841                           	opt stack 0
   842  000009                     ___lldiv@quotient:
   843                           	opt stack 0
   844                           
   845                           ; 4 bytes @ 0x8
   846  000009                     	ds	1
   847  00000A                     ??_saveEEPROM:
   848  00000A                     ___lwmod@divisor:
   849                           	opt stack 0
   850                           
   851                           ; 2 bytes @ 0x9
   852  00000A                     	ds	1
   853  00000B                     ??_getEEPROM:
   854  00000B                     atoi@sign:
   855                           	opt stack 0
   856  00000B                     saveEEPROM@temp:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0xA
   860  00000B                     	ds	1
   861  00000C                     ___lwmod@counter:
   862                           	opt stack 0
   863  00000C                     atoi@a:
   864                           	opt stack 0
   865                           
   866                           ; 2 bytes @ 0xB
   867  00000C                     	ds	1
   868  00000D                     ?__doprnt:
   869                           	opt stack 0
   870  00000D                     ___lldiv@counter:
   871                           	opt stack 0
   872  00000D                     saveEEPROM@i:
   873                           	opt stack 0
   874  00000D                     __doprnt@pb:
   875                           	opt stack 0
   876                           
   877                           ; 2 bytes @ 0xC
   878  00000D                     	ds	1
   879  00000E                     initializeRTC@c:
   880                           	opt stack 0
   881                           
   882                           ; 4 bytes @ 0xD
   883  00000E                     	ds	1
   884  00000F                     getEEPROM@i:
   885                           	opt stack 0
   886  00000F                     __doprnt@f:
   887                           	opt stack 0
   888                           
   889                           ; 2 bytes @ 0xE
   890  00000F                     	ds	2
   891  000011                     __doprnt@ap:
   892                           	opt stack 0
   893                           
   894                           ; 2 bytes @ 0x10
   895  000011                     	ds	1
   896  000012                     ??_initializeRTC:
   897                           
   898                           ; 1 bytes @ 0x11
   899  000012                     	ds	1
   900  000013                     ??__doprnt:
   901                           
   902                           ; 1 bytes @ 0x12
   903  000013                     	ds	4
   904  000017                     __doprnt@idx:
   905                           	opt stack 0
   906                           
   907                           ; 1 bytes @ 0x16
   908  000017                     	ds	1
   909  000018                     __doprnt@prec:
   910                           	opt stack 0
   911                           
   912                           ; 1 bytes @ 0x17
   913  000018                     	ds	1
   914  000019                     __doprnt@val:
   915                           	opt stack 0
   916                           
   917                           ; 2 bytes @ 0x18
   918  000019                     	ds	2
   919  00001B                     __doprnt@flag:
   920                           	opt stack 0
   921                           
   922                           ; 1 bytes @ 0x1A
   923  00001B                     	ds	1
   924  00001C                     __doprnt@width:
   925                           	opt stack 0
   926                           
   927                           ; 2 bytes @ 0x1B
   928  00001C                     	ds	2
   929  00001E                     __doprnt@c:
   930                           	opt stack 0
   931                           
   932                           ; 1 bytes @ 0x1D
   933  00001E                     	ds	1
   934  00001F                     ?_printf:
   935                           	opt stack 0
   936  00001F                     ?_sprintf:
   937                           	opt stack 0
   938  00001F                     printf@f:
   939                           	opt stack 0
   940  00001F                     sprintf@wh:
   941                           	opt stack 0
   942                           
   943                           ; 2 bytes @ 0x1E
   944  00001F                     	ds	2
   945  000021                     sprintf@f:
   946                           	opt stack 0
   947                           
   948                           ; 2 bytes @ 0x20
   949  000021                     	ds	4
   950  000025                     sprintf@ap:
   951                           	opt stack 0
   952                           
   953                           ; 2 bytes @ 0x24
   954  000025                     	ds	2
   955  000027                     printf@ap:
   956                           	opt stack 0
   957  000027                     sprintf@pb:
   958                           	opt stack 0
   959                           
   960                           ; 4 bytes @ 0x26
   961  000027                     	ds	2
   962  000029                     printf@pb:
   963                           	opt stack 0
   964                           
   965                           ; 4 bytes @ 0x28
   966  000029                     	ds	2
   967  00002B                     ?_getCurrentTime:
   968                           	opt stack 0
   969                           
   970                           ; 2 bytes @ 0x2A
   971  00002B                     	ds	2
   972  00002D                     ??_getPressedKeypadKey:
   973  00002D                     getCurrentTime@currentTime:
   974                           	opt stack 0
   975  00002D                     displayMainProgramLcdScreen@num:
   976                           	opt stack 0
   977  00002D                     update_eeprom_screen_state@num:
   978                           	opt stack 0
   979  00002D                     update_past_run_screen_state@num:
   980                           	opt stack 0
   981                           
   982                           ; 2 bytes @ 0x2C
   983  00002D                     	ds	2
   984  00002F                     ??_displayMainProgramLcdScreen:
   985  00002F                     ??_update_eeprom_screen_state:
   986  00002F                     ??_update_past_run_screen_state:
   987  00002F                     getPressedKeypadKey@keypress:
   988                           	opt stack 0
   989  00002F                     _getCurrentTime$1376:
   990                           	opt stack 0
   991                           
   992                           ; 2 bytes @ 0x2E
   993  00002F                     	ds	2
   994  000031                     past_run_access@temp:
   995                           	opt stack 0
   996  000031                     getCurrentTime@str:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x30
  1000  000031                     	ds	1
  1001  000032                     past_run_access@screen_state:
  1002                           	opt stack 0
  1003                           
  1004                           ; 2 bytes @ 0x31
  1005  000032                     	ds	1
  1006  000033                     ??_operation:
  1007                           
  1008                           ; 1 bytes @ 0x32
  1009  000033                     	ds	1
  1010  000034                     ??_EEPROM:
  1011                           
  1012                           ; 1 bytes @ 0x33
  1013  000034                     	ds	1
  1014  000035                     operation@startingTime:
  1015                           	opt stack 0
  1016                           
  1017                           ; 2 bytes @ 0x34
  1018  000035                     	ds	1
  1019  000036                     EEPROM@timeStorage:
  1020                           	opt stack 0
  1021                           
  1022                           ; 14 bytes @ 0x35
  1023  000036                     	ds	1
  1024  000037                     operation@endingTime:
  1025                           	opt stack 0
  1026                           
  1027                           ; 2 bytes @ 0x36
  1028  000037                     	ds	2
  1029  000039                     operation@temp:
  1030                           	opt stack 0
  1031                           
  1032                           ; 1 bytes @ 0x38
  1033  000039                     	ds	1
  1034  00003A                     operation@bottle_type:
  1035                           	opt stack 0
  1036                           
  1037                           ; 2 bytes @ 0x39
  1038  00003A                     	ds	2
  1039  00003C                     operation@bottle_cap:
  1040                           	opt stack 0
  1041                           
  1042                           ; 2 bytes @ 0x3B
  1043  00003C                     	ds	2
  1044  00003E                     operation@bottle:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0x3D
  1048  00003E                     	ds	2
  1049  000040                     operation@i:
  1050                           	opt stack 0
  1051                           
  1052                           ; 2 bytes @ 0x3F
  1053  000040                     	ds	4
  1054  000044                     EEPROM@storage:
  1055                           	opt stack 0
  1056                           
  1057                           ; 12 bytes @ 0x43
  1058  000044                     	ds	12
  1059  000050                     EEPROM@temp:
  1060                           	opt stack 0
  1061                           
  1062                           ; 1 bytes @ 0x4F
  1063  000050                     	ds	1
  1064  000051                     EEPROM@screen_state:
  1065                           	opt stack 0
  1066                           
  1067                           ; 2 bytes @ 0x50
  1068  000051                     	ds	2
  1069  000053                     EEPROM@i:
  1070                           	opt stack 0
  1071                           
  1072                           ; 2 bytes @ 0x52
  1073  000053                     	ds	2
  1074  000055                     ??_enterSelectedSubProgramFromMainProgram:
  1075                           
  1076                           ; 1 bytes @ 0x54
  1077  000055                     	ds	2
  1078  000057                     ??_main:
  1079                           
  1080                           ; 1 bytes @ 0x56
  1081  000057                     	ds	2
  1082  000059                     main@temp:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x58
  1086  000059                     	ds	1
  1087                           tblptru	equ	0xFF8
  1088                           tblptrh	equ	0xFF7
  1089                           tblptrl	equ	0xFF6
  1090                           tablat	equ	0xFF5
  1091                           postinc0	equ	0xFEE
  1092                           wreg	equ	0xFE8
  1093                           postdec1	equ	0xFE5
  1094                           fsr1l	equ	0xFE1
  1095                           
  1096 ;;
  1097 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1098 ;;
  1099 ;; *************** function _main *****************
  1100 ;; Defined at:
  1101 ;;		line 28 in file "main.c"
  1102 ;; Parameters:    Size  Location     Type
  1103 ;;		None
  1104 ;; Auto vars:     Size  Location     Type
  1105 ;;  temp            1   88[COMRAM] unsigned char 
  1106 ;; Return value:  Size  Location     Type
  1107 ;;                  1    wreg      void 
  1108 ;; Registers used:
  1109 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1110 ;; Tracked objects:
  1111 ;;		On entry : 0/0
  1112 ;;		On exit  : 0/0
  1113 ;;		Unchanged: 0/0
  1114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1116 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1117 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1118 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1119 ;;Total ram usage:        3 bytes
  1120 ;; Hardware stack levels required when called:    9
  1121 ;; This function calls:
  1122 ;;		_cycleMainProgramScreenLeft
  1123 ;;		_cycleMainProgramScreenRight
  1124 ;;		_enterSelectedSubProgramFromMainProgram
  1125 ;;		_getPressedKeypadKey
  1126 ;;		_initializePicSettings
  1127 ;; This function is called by:
  1128 ;;		Startup code after reset
  1129 ;; This function uses a non-reentrant model
  1130 ;;
  1131                           
  1132                           	psect	text0
  1133  00EBE4                     __ptext0:
  1134                           	opt stack 0
  1135  00EBE4                     _main:
  1136                           	opt stack 22
  1137                           
  1138                           ;main.c: 29: unsigned char temp;
  1139                           ;main.c: 31: initializePicSettings();
  1140                           
  1141                           ;incstack = 0
  1142  00EBE4  EC6D  F072         	call	_initializePicSettings	;wreg free
  1143  00EBE8                     l129:
  1144                           
  1145                           ;main.c: 34: temp = getPressedKeypadKey();
  1146  00EBE8  EC04  F075         	call	_getPressedKeypadKey	;wreg free
  1147  00EBEC  6E59               	movwf	main@temp,c
  1148                           
  1149                           ;main.c: 35: if (temp == keys[ENTER]){
  1150  00EBEE  0E4E               	movlw	low _ENTER
  1151  00EBF0  6EF6               	movwf	tblptrl,c
  1152  00EBF2                     	if	1	;There is more than 1 active tblptr byte
  1153  00EBF2  0EFE               	movlw	high _ENTER
  1154  00EBF4  6EF7               	movwf	tblptrh,c
  1155  00EBF6                     	endif
  1156  00EBF6                     	if	1	;There are 3 active tblptr bytes
  1157  00EBF6  0E00               	movlw	low (_ENTER shr (0+16))
  1158  00EBF8  6EF8               	movwf	tblptru,c
  1159  00EBFA                     	endif
  1160  00EBFA  0009               	tblrd		*+
  1161  00EBFC  CFF5 F057          	movff	tablat,??_main
  1162  00EC00  0009               	tblrd		*+
  1163  00EC02  CFF5 F058          	movff	tablat,??_main+1
  1164  00EC06  0E29               	movlw	low _keys
  1165  00EC08  2457               	addwf	??_main,w,c
  1166  00EC0A  6EF6               	movwf	tblptrl,c
  1167  00EC0C  0EFE               	movlw	high _keys
  1168  00EC0E  2058               	addwfc	??_main+1,w,c
  1169  00EC10  6EF7               	movwf	tblptrh,c
  1170  00EC12                     	if	1	;There are 3 active tblptr bytes
  1171  00EC12  6AF8               	clrf	tblptru,c
  1172  00EC14  0E00               	movlw	low (__mediumconst shr (0+16))
  1173  00EC16  22F8               	addwfc	tblptru,f,c
  1174  00EC18                     	endif
  1175  00EC18  0008               	tblrd		*
  1176  00EC1A  50F5               	movf	tablat,w,c
  1177  00EC1C  1859               	xorwf	main@temp,w,c
  1178  00EC1E  A4D8               	btfss	status,2,c
  1179  00EC20  D003               	goto	l3102
  1180                           
  1181                           ;main.c: 36: enterSelectedSubProgramFromMainProgram();
  1182  00EC22  ECC9  F073         	call	_enterSelectedSubProgramFromMainProgram	;wreg free
  1183                           
  1184                           ;main.c: 37: }else if (temp == keys[LEFT]){
  1185  00EC26  D7E0               	goto	l129
  1186  00EC28                     l3102:
  1187  00EC28  0E50               	movlw	low _LEFT
  1188  00EC2A  6EF6               	movwf	tblptrl,c
  1189  00EC2C                     	if	1	;There is more than 1 active tblptr byte
  1190  00EC2C  0EFE               	movlw	high _LEFT
  1191  00EC2E  6EF7               	movwf	tblptrh,c
  1192  00EC30                     	endif
  1193  00EC30                     	if	1	;There are 3 active tblptr bytes
  1194  00EC30  0E00               	movlw	low (_LEFT shr (0+16))
  1195  00EC32  6EF8               	movwf	tblptru,c
  1196  00EC34                     	endif
  1197  00EC34  0009               	tblrd		*+
  1198  00EC36  CFF5 F057          	movff	tablat,??_main
  1199  00EC3A  0009               	tblrd		*+
  1200  00EC3C  CFF5 F058          	movff	tablat,??_main+1
  1201  00EC40  0E29               	movlw	low _keys
  1202  00EC42  2457               	addwf	??_main,w,c
  1203  00EC44  6EF6               	movwf	tblptrl,c
  1204  00EC46  0EFE               	movlw	high _keys
  1205  00EC48  2058               	addwfc	??_main+1,w,c
  1206  00EC4A  6EF7               	movwf	tblptrh,c
  1207  00EC4C                     	if	1	;There are 3 active tblptr bytes
  1208  00EC4C  6AF8               	clrf	tblptru,c
  1209  00EC4E  0E00               	movlw	low (__mediumconst shr (0+16))
  1210  00EC50  22F8               	addwfc	tblptru,f,c
  1211  00EC52                     	endif
  1212  00EC52  0008               	tblrd		*
  1213  00EC54  50F5               	movf	tablat,w,c
  1214  00EC56  1859               	xorwf	main@temp,w,c
  1215  00EC58  A4D8               	btfss	status,2,c
  1216  00EC5A  D003               	goto	l3106
  1217                           
  1218                           ;main.c: 38: cycleMainProgramScreenLeft();
  1219  00EC5C  ECA3  F072         	call	_cycleMainProgramScreenLeft	;wreg free
  1220                           
  1221                           ;main.c: 39: }else if (temp == keys[RIGHT]){
  1222  00EC60  D7C3               	goto	l129
  1223  00EC62                     l3106:
  1224  00EC62  0E52               	movlw	low _RIGHT
  1225  00EC64  6EF6               	movwf	tblptrl,c
  1226  00EC66                     	if	1	;There is more than 1 active tblptr byte
  1227  00EC66  0EFE               	movlw	high _RIGHT
  1228  00EC68  6EF7               	movwf	tblptrh,c
  1229  00EC6A                     	endif
  1230  00EC6A                     	if	1	;There are 3 active tblptr bytes
  1231  00EC6A  0E00               	movlw	low (_RIGHT shr (0+16))
  1232  00EC6C  6EF8               	movwf	tblptru,c
  1233  00EC6E                     	endif
  1234  00EC6E  0009               	tblrd		*+
  1235  00EC70  CFF5 F057          	movff	tablat,??_main
  1236  00EC74  0009               	tblrd		*+
  1237  00EC76  CFF5 F058          	movff	tablat,??_main+1
  1238  00EC7A  0E29               	movlw	low _keys
  1239  00EC7C  2457               	addwf	??_main,w,c
  1240  00EC7E  6EF6               	movwf	tblptrl,c
  1241  00EC80  0EFE               	movlw	high _keys
  1242  00EC82  2058               	addwfc	??_main+1,w,c
  1243  00EC84  6EF7               	movwf	tblptrh,c
  1244  00EC86                     	if	1	;There are 3 active tblptr bytes
  1245  00EC86  6AF8               	clrf	tblptru,c
  1246  00EC88  0E00               	movlw	low (__mediumconst shr (0+16))
  1247  00EC8A  22F8               	addwfc	tblptru,f,c
  1248  00EC8C                     	endif
  1249  00EC8C  0008               	tblrd		*
  1250  00EC8E  50F5               	movf	tablat,w,c
  1251  00EC90  1859               	xorwf	main@temp,w,c
  1252  00EC92  A4D8               	btfss	status,2,c
  1253  00EC94  D7A9               	goto	l129
  1254                           
  1255                           ;main.c: 40: cycleMainProgramScreenRight();
  1256  00EC96  ECB6  F072         	call	_cycleMainProgramScreenRight	;wreg free
  1257  00EC9A  D7A6               	goto	l129
  1258  00EC9C                     __end_of_main:
  1259                           	opt stack 0
  1260                           tblptru	equ	0xFF8
  1261                           tblptrh	equ	0xFF7
  1262                           tblptrl	equ	0xFF6
  1263                           tablat	equ	0xFF5
  1264                           postinc0	equ	0xFEE
  1265                           wreg	equ	0xFE8
  1266                           postdec1	equ	0xFE5
  1267                           fsr1l	equ	0xFE1
  1268                           status	equ	0xFD8
  1269                           
  1270 ;; *************** function _initializePicSettings *****************
  1271 ;; Defined at:
  1272 ;;		line 45 in file "main.c"
  1273 ;; Parameters:    Size  Location     Type
  1274 ;;		None
  1275 ;; Auto vars:     Size  Location     Type
  1276 ;;		None
  1277 ;; Return value:  Size  Location     Type
  1278 ;;                  1    wreg      void 
  1279 ;; Registers used:
  1280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1281 ;; Tracked objects:
  1282 ;;		On entry : 0/0
  1283 ;;		On exit  : 0/0
  1284 ;;		Unchanged: 0/0
  1285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1290 ;;Total ram usage:        0 bytes
  1291 ;; Hardware stack levels used:    1
  1292 ;; Hardware stack levels required when called:    7
  1293 ;; This function calls:
  1294 ;;		_initializeLcdScreen
  1295 ;;		_initializePicPins
  1296 ;;		_initializeRTC
  1297 ;; This function is called by:
  1298 ;;		_main
  1299 ;; This function uses a non-reentrant model
  1300 ;;
  1301                           
  1302                           	psect	text1
  1303  00E4DA                     __ptext1:
  1304                           	opt stack 0
  1305  00E4DA                     _initializePicSettings:
  1306                           	opt stack 23
  1307                           
  1308                           ;main.c: 46: initializePicPins();
  1309                           
  1310                           ;incstack = 0
  1311  00E4DA  ECDC  F072         	call	_initializePicPins	;wreg free
  1312                           
  1313                           ;main.c: 47: initializeRTC(10000);
  1314  00E4DE  0E10               	movlw	16
  1315  00E4E0  6E0E               	movwf	initializeRTC@c,c
  1316  00E4E2  0E27               	movlw	39
  1317  00E4E4  6E0F               	movwf	initializeRTC@c+1,c
  1318  00E4E6  0E00               	movlw	0
  1319  00E4E8  6E10               	movwf	initializeRTC@c+2,c
  1320  00E4EA  0E00               	movlw	0
  1321  00E4EC  6E11               	movwf	initializeRTC@c+3,c
  1322  00E4EE  EC1D  F074         	call	_initializeRTC	;wreg free
  1323                           
  1324                           ;main.c: 48: (INTCONbits.GIE = 0);
  1325  00E4F2  9EF2               	bcf	intcon,7,c	;volatile
  1326                           
  1327                           ;main.c: 49: initializeLcdScreen();
  1328  00E4F4  EC4A  F072         	call	_initializeLcdScreen	;wreg free
  1329  00E4F8  0012               	return		;funcret
  1330  00E4FA                     __end_of_initializePicSettings:
  1331                           	opt stack 0
  1332                           tblptru	equ	0xFF8
  1333                           tblptrh	equ	0xFF7
  1334                           tblptrl	equ	0xFF6
  1335                           tablat	equ	0xFF5
  1336                           intcon	equ	0xFF2
  1337                           postinc0	equ	0xFEE
  1338                           wreg	equ	0xFE8
  1339                           postdec1	equ	0xFE5
  1340                           fsr1l	equ	0xFE1
  1341                           status	equ	0xFD8
  1342                           
  1343 ;; *************** function _initializeRTC *****************
  1344 ;; Defined at:
  1345 ;;		line 13 in file "I2C.c"
  1346 ;; Parameters:    Size  Location     Type
  1347 ;;  c               4   13[COMRAM] const unsigned long 
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;		None
  1350 ;; Return value:  Size  Location     Type
  1351 ;;                  1    wreg      void 
  1352 ;; Registers used:
  1353 ;;		wreg, status,2, status,0, cstack
  1354 ;; Tracked objects:
  1355 ;;		On entry : 0/0
  1356 ;;		On exit  : 0/0
  1357 ;;		Unchanged: 0/0
  1358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1359 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1360 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1361 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1362 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1363 ;;Total ram usage:        8 bytes
  1364 ;; Hardware stack levels used:    1
  1365 ;; Hardware stack levels required when called:    1
  1366 ;; This function calls:
  1367 ;;		___lldiv
  1368 ;; This function is called by:
  1369 ;;		_initializePicSettings
  1370 ;; This function uses a non-reentrant model
  1371 ;;
  1372                           
  1373                           	psect	text2
  1374  00E83A                     __ptext2:
  1375                           	opt stack 0
  1376  00E83A                     _initializeRTC:
  1377                           	opt stack 28
  1378                           
  1379                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  1380                           
  1381                           ;incstack = 0
  1382  00E83A  0E00               	movlw	0
  1383  00E83C  6EC7               	movwf	4039,c	;volatile
  1384                           
  1385                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  1386  00E83E  0E28               	movlw	40
  1387  00E840  6EC6               	movwf	4038,c	;volatile
  1388                           
  1389                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  1390  00E842  0E00               	movlw	0
  1391  00E844  6EC5               	movwf	4037,c	;volatile
  1392                           
  1393                           ;I2C.c: 19: SSPADD = (8000000/(4*c))-1;
  1394  00E846  0E00               	movlw	0
  1395  00E848  6E01               	movwf	___lldiv@dividend,c
  1396  00E84A  0E12               	movlw	18
  1397  00E84C  6E02               	movwf	___lldiv@dividend+1,c
  1398  00E84E  0E7A               	movlw	122
  1399  00E850  6E03               	movwf	___lldiv@dividend+2,c
  1400  00E852  0E00               	movlw	0
  1401  00E854  6E04               	movwf	___lldiv@dividend+3,c
  1402  00E856  C00E  F012         	movff	initializeRTC@c,??_initializeRTC
  1403  00E85A  C00F  F013         	movff	initializeRTC@c+1,??_initializeRTC+1
  1404  00E85E  C010  F014         	movff	initializeRTC@c+2,??_initializeRTC+2
  1405  00E862  C011  F015         	movff	initializeRTC@c+3,??_initializeRTC+3
  1406  00E866  0E02               	movlw	2
  1407  00E868                     u2215:
  1408  00E868  90D8               	bcf	status,0,c
  1409  00E86A  3612               	rlcf	??_initializeRTC,f,c
  1410  00E86C  3613               	rlcf	??_initializeRTC+1,f,c
  1411  00E86E  3614               	rlcf	??_initializeRTC+2,f,c
  1412  00E870  3615               	rlcf	??_initializeRTC+3,f,c
  1413  00E872  2EE8               	decfsz	wreg,f,c
  1414  00E874  D7F9               	goto	u2215
  1415  00E876  C012  F005         	movff	??_initializeRTC,___lldiv@divisor
  1416  00E87A  C013  F006         	movff	??_initializeRTC+1,___lldiv@divisor+1
  1417  00E87E  C014  F007         	movff	??_initializeRTC+2,___lldiv@divisor+2
  1418  00E882  C015  F008         	movff	??_initializeRTC+3,___lldiv@divisor+3
  1419  00E886  EC7D  F074         	call	___lldiv	;wreg free
  1420  00E88A  0401               	decf	?___lldiv,w,c
  1421  00E88C  6EC8               	movwf	4040,c	;volatile
  1422                           
  1423                           ;I2C.c: 20: TRISC3 = 1;
  1424  00E88E  8694               	bsf	3988,3,c	;volatile
  1425                           
  1426                           ;I2C.c: 21: TRISC4 = 1;
  1427  00E890  8894               	bsf	3988,4,c	;volatile
  1428  00E892  0012               	return		;funcret
  1429  00E894                     __end_of_initializeRTC:
  1430                           	opt stack 0
  1431                           tblptru	equ	0xFF8
  1432                           tblptrh	equ	0xFF7
  1433                           tblptrl	equ	0xFF6
  1434                           tablat	equ	0xFF5
  1435                           intcon	equ	0xFF2
  1436                           postinc0	equ	0xFEE
  1437                           wreg	equ	0xFE8
  1438                           postdec1	equ	0xFE5
  1439                           fsr1l	equ	0xFE1
  1440                           status	equ	0xFD8
  1441                           
  1442 ;; *************** function ___lldiv *****************
  1443 ;; Defined at:
  1444 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  1445 ;; Parameters:    Size  Location     Type
  1446 ;;  dividend        4    0[COMRAM] unsigned long 
  1447 ;;  divisor         4    4[COMRAM] unsigned long 
  1448 ;; Auto vars:     Size  Location     Type
  1449 ;;  quotient        4    8[COMRAM] unsigned long 
  1450 ;;  counter         1   12[COMRAM] unsigned char 
  1451 ;; Return value:  Size  Location     Type
  1452 ;;                  4    0[COMRAM] unsigned long 
  1453 ;; Registers used:
  1454 ;;		wreg, status,2, status,0
  1455 ;; Tracked objects:
  1456 ;;		On entry : 0/0
  1457 ;;		On exit  : 0/0
  1458 ;;		Unchanged: 0/0
  1459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1460 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1461 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1463 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1464 ;;Total ram usage:       13 bytes
  1465 ;; Hardware stack levels used:    1
  1466 ;; This function calls:
  1467 ;;		Nothing
  1468 ;; This function is called by:
  1469 ;;		_initializeRTC
  1470 ;; This function uses a non-reentrant model
  1471 ;;
  1472                           
  1473                           	psect	text3
  1474  00E8FA                     __ptext3:
  1475                           	opt stack 0
  1476  00E8FA                     ___lldiv:
  1477                           	opt stack 28
  1478                           
  1479                           ;incstack = 0
  1480  00E8FA  0E00               	movlw	0
  1481  00E8FC  6E09               	movwf	___lldiv@quotient,c
  1482  00E8FE  0E00               	movlw	0
  1483  00E900  6E0A               	movwf	___lldiv@quotient+1,c
  1484  00E902  0E00               	movlw	0
  1485  00E904  6E0B               	movwf	___lldiv@quotient+2,c
  1486  00E906  0E00               	movlw	0
  1487  00E908  6E0C               	movwf	___lldiv@quotient+3,c
  1488  00E90A  5005               	movf	___lldiv@divisor,w,c
  1489  00E90C  1006               	iorwf	___lldiv@divisor+1,w,c
  1490  00E90E  1007               	iorwf	___lldiv@divisor+2,w,c
  1491  00E910  1008               	iorwf	___lldiv@divisor+3,w,c
  1492  00E912  B4D8               	btfsc	status,2,c
  1493  00E914  D02A               	goto	l866
  1494  00E916  0E01               	movlw	1
  1495  00E918  6E0D               	movwf	___lldiv@counter,c
  1496  00E91A  D006               	goto	l2836
  1497  00E91C                     l2834:
  1498  00E91C  90D8               	bcf	status,0,c
  1499  00E91E  3605               	rlcf	___lldiv@divisor,f,c
  1500  00E920  3606               	rlcf	___lldiv@divisor+1,f,c
  1501  00E922  3607               	rlcf	___lldiv@divisor+2,f,c
  1502  00E924  3608               	rlcf	___lldiv@divisor+3,f,c
  1503  00E926  2A0D               	incf	___lldiv@counter,f,c
  1504  00E928                     l2836:
  1505  00E928  AE08               	btfss	___lldiv@divisor+3,7,c
  1506  00E92A  D7F8               	goto	l2834
  1507  00E92C                     l2838:
  1508  00E92C  90D8               	bcf	status,0,c
  1509  00E92E  3609               	rlcf	___lldiv@quotient,f,c
  1510  00E930  360A               	rlcf	___lldiv@quotient+1,f,c
  1511  00E932  360B               	rlcf	___lldiv@quotient+2,f,c
  1512  00E934  360C               	rlcf	___lldiv@quotient+3,f,c
  1513  00E936  5005               	movf	___lldiv@divisor,w,c
  1514  00E938  5C01               	subwf	___lldiv@dividend,w,c
  1515  00E93A  5006               	movf	___lldiv@divisor+1,w,c
  1516  00E93C  5802               	subwfb	___lldiv@dividend+1,w,c
  1517  00E93E  5007               	movf	___lldiv@divisor+2,w,c
  1518  00E940  5803               	subwfb	___lldiv@dividend+2,w,c
  1519  00E942  5008               	movf	___lldiv@divisor+3,w,c
  1520  00E944  5804               	subwfb	___lldiv@dividend+3,w,c
  1521  00E946  A0D8               	btfss	status,0,c
  1522  00E948  D009               	goto	l2846
  1523  00E94A  5005               	movf	___lldiv@divisor,w,c
  1524  00E94C  5E01               	subwf	___lldiv@dividend,f,c
  1525  00E94E  5006               	movf	___lldiv@divisor+1,w,c
  1526  00E950  5A02               	subwfb	___lldiv@dividend+1,f,c
  1527  00E952  5007               	movf	___lldiv@divisor+2,w,c
  1528  00E954  5A03               	subwfb	___lldiv@dividend+2,f,c
  1529  00E956  5008               	movf	___lldiv@divisor+3,w,c
  1530  00E958  5A04               	subwfb	___lldiv@dividend+3,f,c
  1531  00E95A  8009               	bsf	___lldiv@quotient,0,c
  1532  00E95C                     l2846:
  1533  00E95C  90D8               	bcf	status,0,c
  1534  00E95E  3208               	rrcf	___lldiv@divisor+3,f,c
  1535  00E960  3207               	rrcf	___lldiv@divisor+2,f,c
  1536  00E962  3206               	rrcf	___lldiv@divisor+1,f,c
  1537  00E964  3205               	rrcf	___lldiv@divisor,f,c
  1538  00E966  2E0D               	decfsz	___lldiv@counter,f,c
  1539  00E968  D7E1               	goto	l2838
  1540  00E96A                     l866:
  1541  00E96A  C009  F001         	movff	___lldiv@quotient,?___lldiv
  1542  00E96E  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  1543  00E972  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  1544  00E976  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  1545  00E97A  0012               	return		;funcret
  1546  00E97C                     __end_of___lldiv:
  1547                           	opt stack 0
  1548                           tblptru	equ	0xFF8
  1549                           tblptrh	equ	0xFF7
  1550                           tblptrl	equ	0xFF6
  1551                           tablat	equ	0xFF5
  1552                           intcon	equ	0xFF2
  1553                           postinc0	equ	0xFEE
  1554                           wreg	equ	0xFE8
  1555                           postdec1	equ	0xFE5
  1556                           fsr1l	equ	0xFE1
  1557                           status	equ	0xFD8
  1558                           
  1559 ;; *************** function _initializePicPins *****************
  1560 ;; Defined at:
  1561 ;;		line 52 in file "main.c"
  1562 ;; Parameters:    Size  Location     Type
  1563 ;;		None
  1564 ;; Auto vars:     Size  Location     Type
  1565 ;;		None
  1566 ;; Return value:  Size  Location     Type
  1567 ;;                  1    wreg      void 
  1568 ;; Registers used:
  1569 ;;		wreg, status,2
  1570 ;; Tracked objects:
  1571 ;;		On entry : 0/0
  1572 ;;		On exit  : 0/0
  1573 ;;		Unchanged: 0/0
  1574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1579 ;;Total ram usage:        0 bytes
  1580 ;; Hardware stack levels used:    1
  1581 ;; This function calls:
  1582 ;;		Nothing
  1583 ;; This function is called by:
  1584 ;;		_initializePicSettings
  1585 ;; This function uses a non-reentrant model
  1586 ;;
  1587                           
  1588                           	psect	text4
  1589  00E5B8                     __ptext4:
  1590                           	opt stack 0
  1591  00E5B8                     _initializePicPins:
  1592                           	opt stack 29
  1593                           
  1594                           ;main.c: 54: TRISA = 0xFF;
  1595                           
  1596                           ;incstack = 0
  1597  00E5B8  6892               	setf	3986,c	;volatile
  1598                           
  1599                           ;main.c: 55: TRISB = 0xFF;
  1600  00E5BA  6893               	setf	3987,c	;volatile
  1601                           
  1602                           ;main.c: 58: TRISC = 0x00;
  1603  00E5BC  0E00               	movlw	0
  1604  00E5BE  6E94               	movwf	3988,c	;volatile
  1605                           
  1606                           ;main.c: 59: TRISD = 0x00;
  1607  00E5C0  0E00               	movlw	0
  1608  00E5C2  6E95               	movwf	3989,c	;volatile
  1609                           
  1610                           ;main.c: 60: TRISE = 0x00;
  1611  00E5C4  0E00               	movlw	0
  1612  00E5C6  6E96               	movwf	3990,c	;volatile
  1613                           
  1614                           ;main.c: 63: LATB = 0x00;
  1615  00E5C8  0E00               	movlw	0
  1616  00E5CA  6E8A               	movwf	3978,c	;volatile
  1617                           
  1618                           ;main.c: 64: LATC = 0x00;
  1619  00E5CC  0E00               	movlw	0
  1620  00E5CE  6E8B               	movwf	3979,c	;volatile
  1621                           
  1622                           ;main.c: 65: LATD = 0x00;
  1623  00E5D0  0E00               	movlw	0
  1624  00E5D2  6E8C               	movwf	3980,c	;volatile
  1625                           
  1626                           ;main.c: 66: LATE = 0x00;
  1627  00E5D4  0E00               	movlw	0
  1628  00E5D6  6E8D               	movwf	3981,c	;volatile
  1629                           
  1630                           ;main.c: 69: ADCON0 = 0x00;
  1631  00E5D8  0E00               	movlw	0
  1632  00E5DA  6EC2               	movwf	4034,c	;volatile
  1633                           
  1634                           ;main.c: 71: ADCON1 = 0xFF;
  1635  00E5DC  68C1               	setf	4033,c	;volatile
  1636                           
  1637                           ;main.c: 72: nRBPU = 0;
  1638  00E5DE  9EF1               	bcf	intcon2,7,c	;volatile
  1639  00E5E0  0012               	return		;funcret
  1640  00E5E2                     __end_of_initializePicPins:
  1641                           	opt stack 0
  1642                           tblptru	equ	0xFF8
  1643                           tblptrh	equ	0xFF7
  1644                           tblptrl	equ	0xFF6
  1645                           tablat	equ	0xFF5
  1646                           intcon	equ	0xFF2
  1647                           intcon2	equ	0xFF1
  1648                           postinc0	equ	0xFEE
  1649                           wreg	equ	0xFE8
  1650                           postdec1	equ	0xFE5
  1651                           fsr1l	equ	0xFE1
  1652                           status	equ	0xFD8
  1653                           
  1654 ;; *************** function _initializeLcdScreen *****************
  1655 ;; Defined at:
  1656 ;;		line 75 in file "main.c"
  1657 ;; Parameters:    Size  Location     Type
  1658 ;;		None
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;		None
  1661 ;; Return value:  Size  Location     Type
  1662 ;;                  1    wreg      void 
  1663 ;; Registers used:
  1664 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1665 ;; Tracked objects:
  1666 ;;		On entry : 0/0
  1667 ;;		On exit  : 0/0
  1668 ;;		Unchanged: 0/0
  1669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1674 ;;Total ram usage:        0 bytes
  1675 ;; Hardware stack levels used:    1
  1676 ;; Hardware stack levels required when called:    6
  1677 ;; This function calls:
  1678 ;;		_displayMainProgramLcdScreen
  1679 ;;		_initializeLcdSettings
  1680 ;; This function is called by:
  1681 ;;		_initializePicSettings
  1682 ;; This function uses a non-reentrant model
  1683 ;;
  1684                           
  1685                           	psect	text5
  1686  00E494                     __ptext5:
  1687                           	opt stack 0
  1688  00E494                     _initializeLcdScreen:
  1689                           	opt stack 23
  1690                           
  1691                           ;main.c: 76: initializeLcdSettings();
  1692                           
  1693                           ;incstack = 0
  1694  00E494  EC7D  F073         	call	_initializeLcdSettings	;wreg free
  1695                           
  1696                           ;main.c: 77: displayMainProgramLcdScreen(0);
  1697  00E498  0E00               	movlw	0
  1698  00E49A  6E2E               	movwf	displayMainProgramLcdScreen@num+1,c
  1699  00E49C  0E00               	movlw	0
  1700  00E49E  6E2D               	movwf	displayMainProgramLcdScreen@num,c
  1701  00E4A0  EC4E  F076         	call	_displayMainProgramLcdScreen	;wreg free
  1702  00E4A4  0012               	return		;funcret
  1703  00E4A6                     __end_of_initializeLcdScreen:
  1704                           	opt stack 0
  1705                           tblptru	equ	0xFF8
  1706                           tblptrh	equ	0xFF7
  1707                           tblptrl	equ	0xFF6
  1708                           tablat	equ	0xFF5
  1709                           intcon	equ	0xFF2
  1710                           intcon2	equ	0xFF1
  1711                           postinc0	equ	0xFEE
  1712                           wreg	equ	0xFE8
  1713                           postdec1	equ	0xFE5
  1714                           fsr1l	equ	0xFE1
  1715                           status	equ	0xFD8
  1716                           
  1717 ;; *************** function _initializeLcdSettings *****************
  1718 ;; Defined at:
  1719 ;;		line 14 in file "lcd.c"
  1720 ;; Parameters:    Size  Location     Type
  1721 ;;		None
  1722 ;; Auto vars:     Size  Location     Type
  1723 ;;		None
  1724 ;; Return value:  Size  Location     Type
  1725 ;;                  1    wreg      void 
  1726 ;; Registers used:
  1727 ;;		wreg, status,2, status,0, cstack
  1728 ;; Tracked objects:
  1729 ;;		On entry : 0/0
  1730 ;;		On exit  : 0/0
  1731 ;;		Unchanged: 0/0
  1732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1733 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1734 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1735 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1736 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1737 ;;Total ram usage:        1 bytes
  1738 ;; Hardware stack levels used:    1
  1739 ;; Hardware stack levels required when called:    2
  1740 ;; This function calls:
  1741 ;;		_lcdInst
  1742 ;; This function is called by:
  1743 ;;		_initializeLcdScreen
  1744 ;; This function uses a non-reentrant model
  1745 ;;
  1746                           
  1747                           	psect	text6
  1748  00E6FA                     __ptext6:
  1749                           	opt stack 0
  1750  00E6FA                     _initializeLcdSettings:
  1751                           	opt stack 26
  1752                           
  1753                           ;lcd.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  1754                           
  1755                           ;incstack = 0
  1756  00E6FA  0E27               	movlw	39
  1757  00E6FC  6E04               	movwf	??_initializeLcdSettings& (0+255),c
  1758  00E6FE  0EF5               	movlw	245
  1759  00E700                     u2527:
  1760  00E700  2EE8               	decfsz	wreg,f,c
  1761  00E702  D7FE               	bra	u2527
  1762  00E704  2E04               	decfsz	??_initializeLcdSettings& (0+255),f,c
  1763  00E706  D7FC               	bra	u2527
  1764  00E708  F000               	nop	
  1765                           
  1766                           ;lcd.c: 16: lcdInst(0b00110011);
  1767  00E70A  0E33               	movlw	51
  1768  00E70C  EC2F  F072         	call	_lcdInst
  1769                           
  1770                           ;lcd.c: 17: lcdInst(0b00110010);
  1771  00E710  0E32               	movlw	50
  1772  00E712  EC2F  F072         	call	_lcdInst
  1773                           
  1774                           ;lcd.c: 18: lcdInst(0b00101000);
  1775  00E716  0E28               	movlw	40
  1776  00E718  EC2F  F072         	call	_lcdInst
  1777                           
  1778                           ;lcd.c: 19: lcdInst(0b00001111);
  1779  00E71C  0E0F               	movlw	15
  1780  00E71E  EC2F  F072         	call	_lcdInst
  1781                           
  1782                           ;lcd.c: 20: lcdInst(0b00000110);
  1783  00E722  0E06               	movlw	6
  1784  00E724  EC2F  F072         	call	_lcdInst
  1785                           
  1786                           ;lcd.c: 21: lcdInst(0b00000001);
  1787  00E728  0E01               	movlw	1
  1788  00E72A  EC2F  F072         	call	_lcdInst
  1789                           
  1790                           ;lcd.c: 22: _delay((unsigned long)((15)*(8000000/4000.0)));
  1791  00E72E  0E27               	movlw	39
  1792  00E730  6E04               	movwf	??_initializeLcdSettings& (0+255),c
  1793  00E732  0EF5               	movlw	245
  1794  00E734                     u2537:
  1795  00E734  2EE8               	decfsz	wreg,f,c
  1796  00E736  D7FE               	bra	u2537
  1797  00E738  2E04               	decfsz	??_initializeLcdSettings& (0+255),f,c
  1798  00E73A  D7FC               	bra	u2537
  1799  00E73C  F000               	nop	
  1800  00E73E  0012               	return		;funcret
  1801  00E740                     __end_of_initializeLcdSettings:
  1802                           	opt stack 0
  1803                           tblptru	equ	0xFF8
  1804                           tblptrh	equ	0xFF7
  1805                           tblptrl	equ	0xFF6
  1806                           tablat	equ	0xFF5
  1807                           intcon	equ	0xFF2
  1808                           intcon2	equ	0xFF1
  1809                           postinc0	equ	0xFEE
  1810                           wreg	equ	0xFE8
  1811                           postdec1	equ	0xFE5
  1812                           fsr1l	equ	0xFE1
  1813                           status	equ	0xFD8
  1814                           
  1815 ;; *************** function _enterSelectedSubProgramFromMainProgram *****************
  1816 ;; Defined at:
  1817 ;;		line 98 in file "main.c"
  1818 ;; Parameters:    Size  Location     Type
  1819 ;;		None
  1820 ;; Auto vars:     Size  Location     Type
  1821 ;;		None
  1822 ;; Return value:  Size  Location     Type
  1823 ;;                  1    wreg      void 
  1824 ;; Registers used:
  1825 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1826 ;; Tracked objects:
  1827 ;;		On entry : 0/0
  1828 ;;		On exit  : 0/0
  1829 ;;		Unchanged: 0/0
  1830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1833 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1834 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1835 ;;Total ram usage:        2 bytes
  1836 ;; Hardware stack levels used:    1
  1837 ;; Hardware stack levels required when called:    8
  1838 ;; This function calls:
  1839 ;;		_EEPROM
  1840 ;;		_displayMainProgramLcdScreen
  1841 ;;		_operation
  1842 ;;		_past_run_access
  1843 ;;		_pushBottle
  1844 ;; This function is called by:
  1845 ;;		_main
  1846 ;; This function uses a non-reentrant model
  1847 ;;
  1848                           
  1849                           	psect	text7
  1850  00E792                     __ptext7:
  1851                           	opt stack 0
  1852  00E792                     _enterSelectedSubProgramFromMainProgram:
  1853                           	opt stack 22
  1854                           
  1855                           ;main.c: 99: switch(initScreenState){
  1856                           
  1857                           ;incstack = 0
  1858  00E792  D00C               	goto	l3072
  1859  00E794                     l3062:
  1860  00E794  EC21  F07B         	call	_operation	;wreg free
  1861                           
  1862                           ;main.c: 101: break;
  1863  00E798  D01E               	goto	l3074
  1864  00E79A                     l3064:
  1865  00E79A  EC9E  F075         	call	_pushBottle	;wreg free
  1866                           
  1867                           ;main.c: 103: break;
  1868  00E79E  D01B               	goto	l3074
  1869  00E7A0                     l3066:
  1870  00E7A0  EC22  F07A         	call	_EEPROM	;wreg free
  1871                           
  1872                           ;main.c: 105: break;
  1873  00E7A4  D018               	goto	l3074
  1874  00E7A6                     l3068:
  1875  00E7A6  EC4D  F075         	call	_past_run_access	;wreg free
  1876                           
  1877                           ;main.c: 108: }
  1878                           
  1879                           ;main.c: 107: break;
  1880  00E7AA  D015               	goto	l3074
  1881  00E7AC                     l3072:
  1882  00E7AC  C068  F055         	movff	_initScreenState,??_enterSelectedSubProgramFromMainProgram
  1883  00E7B0  C069  F056         	movff	_initScreenState+1,??_enterSelectedSubProgramFromMainProgram+1
  1884                           
  1885                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1886                           ; Switch size 1, requested type "space"
  1887                           ; Number of cases is 1, Range of values is 0 to 0
  1888                           ; switch strategies available:
  1889                           ; Name         Instructions Cycles
  1890                           ; simple_byte            4     3 (average)
  1891                           ;	Chosen strategy is simple_byte
  1892  00E7B4  5056               	movf	??_enterSelectedSubProgramFromMainProgram+1,w,c
  1893  00E7B6  0A00               	xorlw	0	; case 0
  1894  00E7B8  A4D8               	btfss	status,2,c
  1895  00E7BA  D00D               	goto	l3074
  1896                           
  1897                           ; Switch size 1, requested type "space"
  1898                           ; Number of cases is 4, Range of values is 0 to 3
  1899                           ; switch strategies available:
  1900                           ; Name         Instructions Cycles
  1901                           ; simple_byte           13     7 (average)
  1902                           ;	Chosen strategy is simple_byte
  1903  00E7BC  5055               	movf	??_enterSelectedSubProgramFromMainProgram,w,c
  1904  00E7BE  0A00               	xorlw	0	; case 0
  1905  00E7C0  B4D8               	btfsc	status,2,c
  1906  00E7C2  D7E8               	goto	l3062
  1907  00E7C4  0A01               	xorlw	1	; case 1
  1908  00E7C6  B4D8               	btfsc	status,2,c
  1909  00E7C8  D7E8               	goto	l3064
  1910  00E7CA  0A03               	xorlw	3	; case 2
  1911  00E7CC  B4D8               	btfsc	status,2,c
  1912  00E7CE  D7E8               	goto	l3066
  1913  00E7D0  0A01               	xorlw	1	; case 3
  1914  00E7D2  B4D8               	btfsc	status,2,c
  1915  00E7D4  D7E8               	goto	l3068
  1916  00E7D6                     l3074:
  1917                           
  1918                           ;main.c: 109: displayMainProgramLcdScreen(initScreenState);
  1919  00E7D6  C068  F02D         	movff	_initScreenState,displayMainProgramLcdScreen@num
  1920  00E7DA  C069  F02E         	movff	_initScreenState+1,displayMainProgramLcdScreen@num+1
  1921  00E7DE  EC4E  F076         	call	_displayMainProgramLcdScreen	;wreg free
  1922  00E7E2  0012               	return		;funcret
  1923  00E7E4                     __end_of_enterSelectedSubProgramFromMainProgram:
  1924                           	opt stack 0
  1925                           tblptru	equ	0xFF8
  1926                           tblptrh	equ	0xFF7
  1927                           tblptrl	equ	0xFF6
  1928                           tablat	equ	0xFF5
  1929                           intcon	equ	0xFF2
  1930                           intcon2	equ	0xFF1
  1931                           postinc0	equ	0xFEE
  1932                           wreg	equ	0xFE8
  1933                           postdec1	equ	0xFE5
  1934                           fsr1l	equ	0xFE1
  1935                           status	equ	0xFD8
  1936                           
  1937 ;; *************** function _operation *****************
  1938 ;; Defined at:
  1939 ;;		line 252 in file "main.c"
  1940 ;; Parameters:    Size  Location     Type
  1941 ;;		None
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;  bottle          2   61[COMRAM] int 
  1944 ;;  temp            1   56[COMRAM] unsigned char 
  1945 ;;  i               2   63[COMRAM] int 
  1946 ;;  bottle_cap      2   59[COMRAM] int 
  1947 ;;  bottle_type     2   57[COMRAM] int 
  1948 ;;  endingTime      2   54[COMRAM] int 
  1949 ;;  startingTime    2   52[COMRAM] int 
  1950 ;; Return value:  Size  Location     Type
  1951 ;;                  1    wreg      void 
  1952 ;; Registers used:
  1953 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1954 ;; Tracked objects:
  1955 ;;		On entry : 0/0
  1956 ;;		On exit  : 0/0
  1957 ;;		Unchanged: 0/0
  1958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1960 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1961 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1962 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1963 ;;Total ram usage:       15 bytes
  1964 ;; Hardware stack levels used:    1
  1965 ;; Hardware stack levels required when called:    5
  1966 ;; This function calls:
  1967 ;;		_getCurrentTime
  1968 ;;		_getPressedKeypadKey
  1969 ;;		_lcdClear
  1970 ;;		_lcdInst
  1971 ;;		_moveBinServo
  1972 ;;		_printf
  1973 ;;		_pushBottle
  1974 ;;		_saveEEPROM
  1975 ;;		_updateCurrentTime
  1976 ;; This function is called by:
  1977 ;;		_enterSelectedSubProgramFromMainProgram
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           	psect	text8
  1982  00F642                     __ptext8:
  1983                           	opt stack 0
  1984  00F642                     _operation:
  1985                           	opt stack 24
  1986                           
  1987                           ;main.c: 253: PORTCbits.RC0 = 1;
  1988                           
  1989                           ;incstack = 0
  1990  00F642  8082               	bsf	3970,0,c	;volatile
  1991                           
  1992                           ;main.c: 254: int bottle_type = 0;
  1993  00F644  0E00               	movlw	0
  1994  00F646  6E3B               	movwf	operation@bottle_type+1,c
  1995  00F648  0E00               	movlw	0
  1996  00F64A  6E3A               	movwf	operation@bottle_type,c
  1997                           
  1998                           ;main.c: 255: int bottle_cap = 0;
  1999  00F64C  0E00               	movlw	0
  2000  00F64E  6E3D               	movwf	operation@bottle_cap+1,c
  2001  00F650  0E00               	movlw	0
  2002  00F652  6E3C               	movwf	operation@bottle_cap,c
  2003                           
  2004                           ;main.c: 256: int i;
  2005                           ;main.c: 257: for (i=0;i<6;i++){
  2006  00F654  0E00               	movlw	0
  2007  00F656  6E41               	movwf	operation@i+1,c
  2008  00F658  0E00               	movlw	0
  2009  00F65A  6E40               	movwf	operation@i,c
  2010  00F65C                     l2866:
  2011  00F65C  BE41               	btfsc	operation@i+1,7,c
  2012  00F65E  D006               	goto	l2870
  2013  00F660  5041               	movf	operation@i+1,w,c
  2014  00F662  E114               	bnz	l2876
  2015  00F664  0E06               	movlw	6
  2016  00F666  5C40               	subwf	operation@i,w,c
  2017  00F668  B0D8               	btfsc	status,0,c
  2018  00F66A  D010               	goto	l2876
  2019  00F66C                     l2870:
  2020                           
  2021                           ;main.c: 258: runInfo[i] = 0;
  2022  00F66C  90D8               	bcf	status,0,c
  2023  00F66E  3440               	rlcf	operation@i,w,c
  2024  00F670  6ED9               	movwf	fsr2l,c
  2025  00F672  3441               	rlcf	operation@i+1,w,c
  2026  00F674  6EDA               	movwf	fsr2h,c
  2027  00F676  0E6A               	movlw	low _runInfo
  2028  00F678  26D9               	addwf	fsr2l,f,c
  2029  00F67A  0E00               	movlw	high _runInfo
  2030  00F67C  22DA               	addwfc	fsr2h,f,c
  2031  00F67E  0E00               	movlw	0
  2032  00F680  6EDE               	movwf	postinc2,c
  2033  00F682  0E00               	movlw	0
  2034  00F684  6EDD               	movwf	postdec2,c
  2035  00F686  4A40               	infsnz	operation@i,f,c
  2036  00F688  2A41               	incf	operation@i+1,f,c
  2037  00F68A  D7E8               	goto	l2866
  2038  00F68C                     l2876:
  2039                           
  2040                           ;main.c: 259: }
  2041                           ;main.c: 260: lcdClear();
  2042  00F68C  ECF1  F072         	call	_lcdClear	;wreg free
  2043                           
  2044                           ;main.c: 261: printf("...Operating...");
  2045  00F690  0E30               	movlw	low STR_26
  2046  00F692  6E1F               	movwf	printf@f,c
  2047  00F694  0EFF               	movlw	high STR_26
  2048  00F696  6E20               	movwf	printf@f+1,c
  2049  00F698  EC20  F073         	call	_printf	;wreg free
  2050                           
  2051                           ;main.c: 262: updateCurrentTime();
  2052  00F69C  EC4A  F074         	call	_updateCurrentTime	;wreg free
  2053                           
  2054                           ;main.c: 263: int startingTime = getCurrentTime();
  2055  00F6A0  EC12  F077         	call	_getCurrentTime	;wreg free
  2056  00F6A4  C02B  F035         	movff	?_getCurrentTime,operation@startingTime
  2057  00F6A8  C02C  F036         	movff	?_getCurrentTime+1,operation@startingTime+1
  2058                           
  2059                           ;main.c: 265: while (runInfo[1] < 10){
  2060  00F6AC  D089               	goto	l2930
  2061  00F6AE                     l2882:
  2062                           
  2063                           ;main.c: 266: lcdInst(0b11000000);;
  2064  00F6AE  0EC0               	movlw	192
  2065  00F6B0  EC2F  F072         	call	_lcdInst
  2066                           
  2067                           ;main.c: 267: printf("NO BOTTLE    ");
  2068  00F6B4  0E7F               	movlw	low STR_27
  2069  00F6B6  6E1F               	movwf	printf@f,c
  2070  00F6B8  0EFF               	movlw	high STR_27
  2071  00F6BA  6E20               	movwf	printf@f+1,c
  2072  00F6BC  EC20  F073         	call	_printf	;wreg free
  2073  00F6C0                     l220:
  2074  00F6C0  B080               	btfsc	3968,0,c	;volatile
  2075  00F6C2  D7FE               	goto	l220
  2076                           
  2077                           ;main.c: 269: if (PORTAbits.RA0){
  2078  00F6C4  A080               	btfss	3968,0,c	;volatile
  2079  00F6C6  D07C               	goto	l2930
  2080                           
  2081                           ;main.c: 270: lcdInst(0b11000000);;
  2082  00F6C8  0EC0               	movlw	192
  2083  00F6CA  EC2F  F072         	call	_lcdInst
  2084                           
  2085                           ;main.c: 271: printf("BOTTLE INSIDE   ");
  2086  00F6CE  0EAB               	movlw	low STR_28
  2087  00F6D0  6E1F               	movwf	printf@f,c
  2088  00F6D2  0EFE               	movlw	high STR_28
  2089  00F6D4  6E20               	movwf	printf@f+1,c
  2090  00F6D6  EC20  F073         	call	_printf	;wreg free
  2091                           
  2092                           ;main.c: 272: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2093  00F6DA  0E0B               	movlw	11
  2094  00F6DC  6E34               	movwf	(??_operation+1)& (0+255),c
  2095  00F6DE  0E26               	movlw	38
  2096  00F6E0  6E33               	movwf	??_operation& (0+255),c
  2097  00F6E2  0E5E               	movlw	94
  2098  00F6E4                     u2547:
  2099  00F6E4  2EE8               	decfsz	wreg,f,c
  2100  00F6E6  D7FE               	bra	u2547
  2101  00F6E8  2E33               	decfsz	??_operation& (0+255),f,c
  2102  00F6EA  D7FC               	bra	u2547
  2103  00F6EC  2E34               	decfsz	(??_operation+1)& (0+255),f,c
  2104  00F6EE  D7FA               	bra	u2547
  2105                           
  2106                           ;main.c: 273: if (PORTAbits.RA1 == 0){
  2107  00F6F0  B280               	btfsc	3968,1,c	;volatile
  2108  00F6F2  D00D               	goto	l2900
  2109                           
  2110                           ;main.c: 274: lcdInst(0b11000000);;
  2111  00F6F4  0EC0               	movlw	192
  2112  00F6F6  EC2F  F072         	call	_lcdInst
  2113                           
  2114                           ;main.c: 275: printf("YOP");
  2115  00F6FA  0EFB               	movlw	low STR_29
  2116  00F6FC  6E1F               	movwf	printf@f,c
  2117  00F6FE  0EFF               	movlw	high STR_29
  2118  00F700  6E20               	movwf	printf@f+1,c
  2119  00F702  EC20  F073         	call	_printf	;wreg free
  2120                           
  2121                           ;main.c: 276: bottle_type = 0;
  2122  00F706  0E00               	movlw	0
  2123  00F708  6E3B               	movwf	operation@bottle_type+1,c
  2124  00F70A  0E00               	movlw	0
  2125  00F70C  D00C               	goto	L1
  2126  00F70E                     l2900:
  2127                           
  2128                           ;main.c: 278: lcdInst(0b11000000);;
  2129  00F70E  0EC0               	movlw	192
  2130  00F710  EC2F  F072         	call	_lcdInst
  2131                           
  2132                           ;main.c: 279: printf("ESKA");
  2133  00F714  0EF6               	movlw	low STR_30
  2134  00F716  6E1F               	movwf	printf@f,c
  2135  00F718  0EFF               	movlw	high STR_30
  2136  00F71A  6E20               	movwf	printf@f+1,c
  2137  00F71C  EC20  F073         	call	_printf	;wreg free
  2138                           
  2139                           ;main.c: 280: bottle_type = 1;
  2140  00F720  0E00               	movlw	0
  2141  00F722  6E3B               	movwf	operation@bottle_type+1,c
  2142  00F724  0E01               	movlw	1
  2143  00F726                     L1:
  2144  00F726  6E3A               	movwf	operation@bottle_type,c
  2145                           
  2146                           ;main.c: 281: }
  2147                           ;main.c: 282: if (PORTAbits.RA2 == 0||PORTAbits.RA3 == 0){
  2148  00F728  B480               	btfsc	3968,2,c	;volatile
  2149  00F72A  A680               	btfss	3968,3,c	;volatile
  2150  00F72C  D001               	goto	l2910
  2151  00F72E  D00A               	goto	l2914
  2152  00F730                     l2910:
  2153                           
  2154                           ;main.c: 283: printf(" w/ Cap    ");
  2155  00F730  0EDF               	movlw	low STR_31
  2156  00F732  6E1F               	movwf	printf@f,c
  2157  00F734  0EFF               	movlw	high STR_31
  2158  00F736  6E20               	movwf	printf@f+1,c
  2159  00F738  EC20  F073         	call	_printf	;wreg free
  2160                           
  2161                           ;main.c: 284: bottle_cap = 0;
  2162  00F73C  0E00               	movlw	0
  2163  00F73E  6E3D               	movwf	operation@bottle_cap+1,c
  2164  00F740  0E00               	movlw	0
  2165  00F742  D009               	goto	L2
  2166  00F744                     l2914:
  2167                           
  2168                           ;main.c: 286: printf(" w/o Cap    ");
  2169  00F744  0EC5               	movlw	low STR_32
  2170  00F746  6E1F               	movwf	printf@f,c
  2171  00F748  0EFF               	movlw	high STR_32
  2172  00F74A  6E20               	movwf	printf@f+1,c
  2173  00F74C  EC20  F073         	call	_printf	;wreg free
  2174                           
  2175                           ;main.c: 287: bottle_cap = 1;
  2176  00F750  0E00               	movlw	0
  2177  00F752  6E3D               	movwf	operation@bottle_cap+1,c
  2178  00F754  0E01               	movlw	1
  2179  00F756                     L2:
  2180  00F756  6E3C               	movwf	operation@bottle_cap,c
  2181                           
  2182                           ;main.c: 288: }
  2183                           ;main.c: 289: runInfo[1] += 1;
  2184  00F758  4A6C               	infsnz	_runInfo+2,f,c
  2185  00F75A  2A6D               	incf	_runInfo+3,f,c
  2186                           
  2187                           ;main.c: 290: int bottle = bottle_type*2 + bottle_cap + 2;
  2188  00F75C  C03A  F033         	movff	operation@bottle_type,??_operation
  2189  00F760  C03B  F034         	movff	operation@bottle_type+1,??_operation+1
  2190  00F764  90D8               	bcf	status,0,c
  2191  00F766  3633               	rlcf	??_operation,f,c
  2192  00F768  3634               	rlcf	??_operation+1,f,c
  2193  00F76A  503C               	movf	operation@bottle_cap,w,c
  2194  00F76C  2633               	addwf	??_operation,f,c
  2195  00F76E  503D               	movf	operation@bottle_cap+1,w,c
  2196  00F770  2234               	addwfc	??_operation+1,f,c
  2197  00F772  0E02               	movlw	2
  2198  00F774  2433               	addwf	??_operation,w,c
  2199  00F776  6E3E               	movwf	operation@bottle,c
  2200  00F778  0E00               	movlw	0
  2201  00F77A  2034               	addwfc	??_operation+1,w,c
  2202  00F77C  6E3F               	movwf	operation@bottle+1,c
  2203                           
  2204                           ;main.c: 291: runInfo[bottle] += 1;
  2205  00F77E  90D8               	bcf	status,0,c
  2206  00F780  343E               	rlcf	operation@bottle,w,c
  2207  00F782  6ED9               	movwf	fsr2l,c
  2208  00F784  343F               	rlcf	operation@bottle+1,w,c
  2209  00F786  6EDA               	movwf	fsr2h,c
  2210  00F788  0E6A               	movlw	low _runInfo
  2211  00F78A  26D9               	addwf	fsr2l,f,c
  2212  00F78C  0E00               	movlw	high _runInfo
  2213  00F78E  22DA               	addwfc	fsr2h,f,c
  2214  00F790  2ADE               	incf	postinc2,f,c
  2215  00F792  0E00               	movlw	0
  2216  00F794  22DD               	addwfc	postdec2,f,c
  2217                           
  2218                           ;main.c: 293: _delay((unsigned long)((1000)*(8000000/4000.0)));
  2219  00F796  0E0B               	movlw	11
  2220  00F798  6E34               	movwf	(??_operation+1)& (0+255),c
  2221  00F79A  0E26               	movlw	38
  2222  00F79C  6E33               	movwf	??_operation& (0+255),c
  2223  00F79E  0E5E               	movlw	94
  2224  00F7A0                     u2557:
  2225  00F7A0  2EE8               	decfsz	wreg,f,c
  2226  00F7A2  D7FE               	bra	u2557
  2227  00F7A4  2E33               	decfsz	??_operation& (0+255),f,c
  2228  00F7A6  D7FC               	bra	u2557
  2229  00F7A8  2E34               	decfsz	(??_operation+1)& (0+255),f,c
  2230  00F7AA  D7FA               	bra	u2557
  2231                           
  2232                           ;main.c: 294: moveBinServo(bottle - 2);
  2233  00F7AC  0EFE               	movlw	254
  2234  00F7AE  243E               	addwf	operation@bottle,w,c
  2235  00F7B0  6E01               	movwf	moveBinServo@num,c
  2236  00F7B2  0EFF               	movlw	255
  2237  00F7B4  203F               	addwfc	operation@bottle+1,w,c
  2238  00F7B6  6E02               	movwf	moveBinServo@num+1,c
  2239  00F7B8  EC8A  F078         	call	_moveBinServo	;wreg free
  2240                           
  2241                           ;main.c: 295: pushBottle();
  2242  00F7BC  EC9E  F075         	call	_pushBottle	;wreg free
  2243  00F7C0                     l2930:
  2244  00F7C0  BE6D               	btfsc	_runInfo+3,7,c
  2245  00F7C2  D775               	goto	l2882
  2246  00F7C4  506D               	movf	_runInfo+3,w,c
  2247  00F7C6  E104               	bnz	u2290
  2248  00F7C8  0E0A               	movlw	10
  2249  00F7CA  5C6C               	subwf	_runInfo+2,w,c
  2250  00F7CC  A0D8               	btfss	status,0,c
  2251  00F7CE  D76F               	goto	l2882
  2252  00F7D0                     u2290:
  2253                           
  2254                           ;main.c: 296: }
  2255                           ;main.c: 297: }
  2256                           ;main.c: 298: PORTCbits.RC0 = 0;
  2257  00F7D0  9082               	bcf	3970,0,c	;volatile
  2258                           
  2259                           ;main.c: 299: lcdClear();
  2260  00F7D2  ECF1  F072         	call	_lcdClear	;wreg free
  2261                           
  2262                           ;main.c: 300: printf("COMPLETED!!!     ");
  2263  00F7D6  0E54               	movlw	low STR_33
  2264  00F7D8  6E1F               	movwf	printf@f,c
  2265  00F7DA  0EFE               	movlw	high STR_33
  2266  00F7DC  6E20               	movwf	printf@f+1,c
  2267  00F7DE  EC20  F073         	call	_printf	;wreg free
  2268                           
  2269                           ;main.c: 301: lcdInst(0b11000000);;
  2270  00F7E2  0EC0               	movlw	192
  2271  00F7E4  EC2F  F072         	call	_lcdInst
  2272                           
  2273                           ;main.c: 302: printf("A to back       ");
  2274  00F7E8  0E9A               	movlw	low STR_34
  2275  00F7EA  6E1F               	movwf	printf@f,c
  2276  00F7EC  0EFE               	movlw	high STR_34
  2277  00F7EE  6E20               	movwf	printf@f+1,c
  2278  00F7F0  EC20  F073         	call	_printf	;wreg free
  2279                           
  2280                           ;main.c: 303: updateCurrentTime();
  2281  00F7F4  EC4A  F074         	call	_updateCurrentTime	;wreg free
  2282                           
  2283                           ;main.c: 304: int endingTime = getCurrentTime();
  2284  00F7F8  EC12  F077         	call	_getCurrentTime	;wreg free
  2285  00F7FC  C02B  F037         	movff	?_getCurrentTime,operation@endingTime
  2286  00F800  C02C  F038         	movff	?_getCurrentTime+1,operation@endingTime+1
  2287                           
  2288                           ;main.c: 305: runInfo[0] = endingTime - startingTime;
  2289  00F804  C035  F033         	movff	operation@startingTime,??_operation
  2290  00F808  C036  F034         	movff	operation@startingTime+1,??_operation+1
  2291  00F80C  1E33               	comf	??_operation,f,c
  2292  00F80E  1E34               	comf	??_operation+1,f,c
  2293  00F810  4A33               	infsnz	??_operation,f,c
  2294  00F812  2A34               	incf	??_operation+1,f,c
  2295  00F814  5037               	movf	operation@endingTime,w,c
  2296  00F816  2433               	addwf	??_operation,w,c
  2297  00F818  6E6A               	movwf	_runInfo,c
  2298  00F81A  5038               	movf	operation@endingTime+1,w,c
  2299  00F81C  2034               	addwfc	??_operation+1,w,c
  2300  00F81E  6E6B               	movwf	_runInfo+1,c
  2301                           
  2302                           ;main.c: 306: for (i = 0; i<7;i++){
  2303  00F820  0E00               	movlw	0
  2304  00F822  6E41               	movwf	operation@i+1,c
  2305  00F824  0E00               	movlw	0
  2306  00F826  6E40               	movwf	operation@i,c
  2307  00F828                     l2946:
  2308  00F828  BE41               	btfsc	operation@i+1,7,c
  2309  00F82A  D006               	goto	l2950
  2310  00F82C  5041               	movf	operation@i+1,w,c
  2311  00F82E  E115               	bnz	l2956
  2312  00F830  0E07               	movlw	7
  2313  00F832  5C40               	subwf	operation@i,w,c
  2314  00F834  B0D8               	btfsc	status,0,c
  2315  00F836  D011               	goto	l2956
  2316  00F838                     l2950:
  2317                           
  2318                           ;main.c: 307: lastRunTime[i] = time[i];
  2319  00F838  0E61               	movlw	low _time
  2320  00F83A  2440               	addwf	operation@i,w,c
  2321  00F83C  6ED9               	movwf	fsr2l,c
  2322  00F83E  0E00               	movlw	high _time
  2323  00F840  2041               	addwfc	operation@i+1,w,c
  2324  00F842  6EDA               	movwf	fsr2h,c
  2325  00F844  0E5A               	movlw	low _lastRunTime
  2326  00F846  2440               	addwf	operation@i,w,c
  2327  00F848  6EE1               	movwf	fsr1l,c
  2328  00F84A  0E00               	movlw	high _lastRunTime
  2329  00F84C  2041               	addwfc	operation@i+1,w,c
  2330  00F84E  6EE2               	movwf	fsr1h,c
  2331  00F850  CFDF FFE7          	movff	indf2,indf1
  2332  00F854  4A40               	infsnz	operation@i,f,c
  2333  00F856  2A41               	incf	operation@i+1,f,c
  2334  00F858  D7E7               	goto	l2946
  2335  00F85A                     l2956:
  2336                           
  2337                           ;main.c: 308: }
  2338                           ;main.c: 309: saveEEPROM();
  2339  00F85A  EC25  F079         	call	_saveEEPROM	;wreg free
  2340  00F85E                     l2958:
  2341                           
  2342                           ;main.c: 311: unsigned char temp = getPressedKeypadKey();
  2343  00F85E  EC04  F075         	call	_getPressedKeypadKey	;wreg free
  2344  00F862  6E39               	movwf	operation@temp,c
  2345                           
  2346                           ;main.c: 312: if (temp == keys[3]){
  2347  00F864  0E2C               	movlw	low (_keys+3)
  2348  00F866  6EF6               	movwf	tblptrl,c
  2349  00F868  0EFE               	movlw	high (_keys+3)
  2350  00F86A  6EF7               	movwf	tblptrh,c
  2351  00F86C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  2352  00F86C  6AF8               	clrf	tblptru,c
  2353  00F86E                     	endif
  2354  00F86E                     	if	0	;tblptru may be non-zero
  2355  00F86E                     	endif
  2356  00F86E  0008               	tblrd		*
  2357  00F870  50F5               	movf	tablat,w,c
  2358  00F872  1839               	xorwf	operation@temp,w,c
  2359  00F874  B4D8               	btfsc	status,2,c
  2360  00F876  0012               	return	
  2361  00F878  D7F2               	goto	l2958
  2362  00F87A                     __end_of_operation:
  2363                           	opt stack 0
  2364                           tblptru	equ	0xFF8
  2365                           tblptrh	equ	0xFF7
  2366                           tblptrl	equ	0xFF6
  2367                           tablat	equ	0xFF5
  2368                           intcon	equ	0xFF2
  2369                           intcon2	equ	0xFF1
  2370                           postinc0	equ	0xFEE
  2371                           wreg	equ	0xFE8
  2372                           indf1	equ	0xFE7
  2373                           postdec1	equ	0xFE5
  2374                           fsr1h	equ	0xFE2
  2375                           fsr1l	equ	0xFE1
  2376                           indf2	equ	0xFDF
  2377                           postinc2	equ	0xFDE
  2378                           postdec2	equ	0xFDD
  2379                           fsr2h	equ	0xFDA
  2380                           fsr2l	equ	0xFD9
  2381                           status	equ	0xFD8
  2382                           
  2383 ;; *************** function _saveEEPROM *****************
  2384 ;; Defined at:
  2385 ;;		line 432 in file "main.c"
  2386 ;; Parameters:    Size  Location     Type
  2387 ;;		None
  2388 ;; Auto vars:     Size  Location     Type
  2389 ;;  i               2   12[COMRAM] int 
  2390 ;;  temp            2   10[COMRAM] int 
  2391 ;; Return value:  Size  Location     Type
  2392 ;;                  1    wreg      void 
  2393 ;; Registers used:
  2394 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2395 ;; Tracked objects:
  2396 ;;		On entry : 0/0
  2397 ;;		On exit  : 0/0
  2398 ;;		Unchanged: 0/0
  2399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2401 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2402 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2403 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2404 ;;Total ram usage:        5 bytes
  2405 ;; Hardware stack levels used:    1
  2406 ;; Hardware stack levels required when called:    1
  2407 ;; This function calls:
  2408 ;;		_Eeprom_ReadByte
  2409 ;;		_Eeprom_WriteByte
  2410 ;;		___wmul
  2411 ;; This function is called by:
  2412 ;;		_operation
  2413 ;; This function uses a non-reentrant model
  2414 ;;
  2415                           
  2416                           	psect	text9
  2417  00F24A                     __ptext9:
  2418                           	opt stack 0
  2419  00F24A                     _saveEEPROM:
  2420                           	opt stack 27
  2421                           
  2422                           ;main.c: 433: int i;
  2423                           ;main.c: 434: int temp;
  2424                           ;main.c: 435: for (i = 0; i<13; i++){
  2425                           
  2426                           ;incstack = 0
  2427  00F24A  0E00               	movlw	0
  2428  00F24C  6E0E               	movwf	saveEEPROM@i+1,c
  2429  00F24E  0E00               	movlw	0
  2430  00F250  6E0D               	movwf	saveEEPROM@i,c
  2431  00F252                     l2746:
  2432  00F252  BE0E               	btfsc	saveEEPROM@i+1,7,c
  2433  00F254  D006               	goto	l2750
  2434  00F256  500E               	movf	saveEEPROM@i+1,w,c
  2435  00F258  E131               	bnz	l2756
  2436  00F25A  0E0D               	movlw	13
  2437  00F25C  5C0D               	subwf	saveEEPROM@i,w,c
  2438  00F25E  B0D8               	btfsc	status,0,c
  2439  00F260  D02D               	goto	l2756
  2440  00F262                     l2750:
  2441                           
  2442                           ;main.c: 436: temp = Eeprom_ReadByte(12*i+2*200);
  2443  00F262  C00D  F001         	movff	saveEEPROM@i,___wmul@multiplier
  2444  00F266  C00E  F002         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  2445  00F26A  0E00               	movlw	0
  2446  00F26C  6E04               	movwf	___wmul@multiplicand+1,c
  2447  00F26E  0E0C               	movlw	12
  2448  00F270  6E03               	movwf	___wmul@multiplicand,c
  2449  00F272  EC7D  F072         	call	___wmul	;wreg free
  2450  00F276  0E90               	movlw	144
  2451  00F278  2401               	addwf	?___wmul,w,c
  2452  00F27A  6E07               	movwf	Eeprom_ReadByte@address,c
  2453  00F27C  0E01               	movlw	1
  2454  00F27E  2002               	addwfc	?___wmul+1,w,c
  2455  00F280  6E08               	movwf	Eeprom_ReadByte@address+1,c
  2456  00F282  EC53  F072         	call	_Eeprom_ReadByte	;wreg free
  2457  00F286  6E0A               	movwf	??_saveEEPROM& (0+255),c
  2458  00F288  500A               	movf	??_saveEEPROM,w,c
  2459  00F28A  6E0B               	movwf	saveEEPROM@temp,c
  2460  00F28C  6A0C               	clrf	saveEEPROM@temp+1,c
  2461                           
  2462                           ;main.c: 437: Eeprom_WriteByte(12*i+3*200,temp);
  2463  00F28E  C00D  F001         	movff	saveEEPROM@i,___wmul@multiplier
  2464  00F292  C00E  F002         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  2465  00F296  0E00               	movlw	0
  2466  00F298  6E04               	movwf	___wmul@multiplicand+1,c
  2467  00F29A  0E0C               	movlw	12
  2468  00F29C  6E03               	movwf	___wmul@multiplicand,c
  2469  00F29E  EC7D  F072         	call	___wmul	;wreg free
  2470  00F2A2  0E58               	movlw	88
  2471  00F2A4  2401               	addwf	?___wmul,w,c
  2472  00F2A6  6E07               	movwf	Eeprom_WriteByte@address,c
  2473  00F2A8  0E02               	movlw	2
  2474  00F2AA  2002               	addwfc	?___wmul+1,w,c
  2475  00F2AC  6E08               	movwf	Eeprom_WriteByte@address+1,c
  2476  00F2AE  C00B  F009         	movff	saveEEPROM@temp,Eeprom_WriteByte@data
  2477  00F2B2  ECC9  F072         	call	_Eeprom_WriteByte	;wreg free
  2478  00F2B6  4A0D               	infsnz	saveEEPROM@i,f,c
  2479  00F2B8  2A0E               	incf	saveEEPROM@i+1,f,c
  2480  00F2BA  D7CB               	goto	l2746
  2481  00F2BC                     l2756:
  2482                           
  2483                           ;main.c: 438: }
  2484                           ;main.c: 439: for (i = 0; i<13; i++){
  2485  00F2BC  0E00               	movlw	0
  2486  00F2BE  6E0E               	movwf	saveEEPROM@i+1,c
  2487  00F2C0  0E00               	movlw	0
  2488  00F2C2  6E0D               	movwf	saveEEPROM@i,c
  2489  00F2C4                     l2758:
  2490  00F2C4  BE0E               	btfsc	saveEEPROM@i+1,7,c
  2491  00F2C6  D006               	goto	l2762
  2492  00F2C8  500E               	movf	saveEEPROM@i+1,w,c
  2493  00F2CA  E131               	bnz	l2768
  2494  00F2CC  0E0D               	movlw	13
  2495  00F2CE  5C0D               	subwf	saveEEPROM@i,w,c
  2496  00F2D0  B0D8               	btfsc	status,0,c
  2497  00F2D2  D02D               	goto	l2768
  2498  00F2D4                     l2762:
  2499                           
  2500                           ;main.c: 440: temp = Eeprom_ReadByte(12*i+1*200);
  2501  00F2D4  C00D  F001         	movff	saveEEPROM@i,___wmul@multiplier
  2502  00F2D8  C00E  F002         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  2503  00F2DC  0E00               	movlw	0
  2504  00F2DE  6E04               	movwf	___wmul@multiplicand+1,c
  2505  00F2E0  0E0C               	movlw	12
  2506  00F2E2  6E03               	movwf	___wmul@multiplicand,c
  2507  00F2E4  EC7D  F072         	call	___wmul	;wreg free
  2508  00F2E8  0EC8               	movlw	200
  2509  00F2EA  2401               	addwf	?___wmul,w,c
  2510  00F2EC  6E07               	movwf	Eeprom_ReadByte@address,c
  2511  00F2EE  0E00               	movlw	0
  2512  00F2F0  2002               	addwfc	?___wmul+1,w,c
  2513  00F2F2  6E08               	movwf	Eeprom_ReadByte@address+1,c
  2514  00F2F4  EC53  F072         	call	_Eeprom_ReadByte	;wreg free
  2515  00F2F8  6E0A               	movwf	??_saveEEPROM& (0+255),c
  2516  00F2FA  500A               	movf	??_saveEEPROM,w,c
  2517  00F2FC  6E0B               	movwf	saveEEPROM@temp,c
  2518  00F2FE  6A0C               	clrf	saveEEPROM@temp+1,c
  2519                           
  2520                           ;main.c: 441: Eeprom_WriteByte(12*i+2*200,temp);
  2521  00F300  C00D  F001         	movff	saveEEPROM@i,___wmul@multiplier
  2522  00F304  C00E  F002         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  2523  00F308  0E00               	movlw	0
  2524  00F30A  6E04               	movwf	___wmul@multiplicand+1,c
  2525  00F30C  0E0C               	movlw	12
  2526  00F30E  6E03               	movwf	___wmul@multiplicand,c
  2527  00F310  EC7D  F072         	call	___wmul	;wreg free
  2528  00F314  0E90               	movlw	144
  2529  00F316  2401               	addwf	?___wmul,w,c
  2530  00F318  6E07               	movwf	Eeprom_WriteByte@address,c
  2531  00F31A  0E01               	movlw	1
  2532  00F31C  2002               	addwfc	?___wmul+1,w,c
  2533  00F31E  6E08               	movwf	Eeprom_WriteByte@address+1,c
  2534  00F320  C00B  F009         	movff	saveEEPROM@temp,Eeprom_WriteByte@data
  2535  00F324  ECC9  F072         	call	_Eeprom_WriteByte	;wreg free
  2536  00F328  4A0D               	infsnz	saveEEPROM@i,f,c
  2537  00F32A  2A0E               	incf	saveEEPROM@i+1,f,c
  2538  00F32C  D7CB               	goto	l2758
  2539  00F32E                     l2768:
  2540                           
  2541                           ;main.c: 442: }
  2542                           ;main.c: 443: for (i = 0; i<13; i++){
  2543  00F32E  0E00               	movlw	0
  2544  00F330  6E0E               	movwf	saveEEPROM@i+1,c
  2545  00F332  0E00               	movlw	0
  2546  00F334  6E0D               	movwf	saveEEPROM@i,c
  2547  00F336                     l2770:
  2548  00F336  BE0E               	btfsc	saveEEPROM@i+1,7,c
  2549  00F338  D006               	goto	l2774
  2550  00F33A  500E               	movf	saveEEPROM@i+1,w,c
  2551  00F33C  E12F               	bnz	l2780
  2552  00F33E  0E0D               	movlw	13
  2553  00F340  5C0D               	subwf	saveEEPROM@i,w,c
  2554  00F342  B0D8               	btfsc	status,0,c
  2555  00F344  D02B               	goto	l2780
  2556  00F346                     l2774:
  2557                           
  2558                           ;main.c: 444: temp = Eeprom_ReadByte(12*i+0*200);
  2559  00F346  C00D  F001         	movff	saveEEPROM@i,___wmul@multiplier
  2560  00F34A  C00E  F002         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  2561  00F34E  0E00               	movlw	0
  2562  00F350  6E04               	movwf	___wmul@multiplicand+1,c
  2563  00F352  0E0C               	movlw	12
  2564  00F354  6E03               	movwf	___wmul@multiplicand,c
  2565  00F356  EC7D  F072         	call	___wmul	;wreg free
  2566  00F35A  C001  F007         	movff	?___wmul,Eeprom_ReadByte@address
  2567  00F35E  C002  F008         	movff	?___wmul+1,Eeprom_ReadByte@address+1
  2568  00F362  EC53  F072         	call	_Eeprom_ReadByte	;wreg free
  2569  00F366  6E0A               	movwf	??_saveEEPROM& (0+255),c
  2570  00F368  500A               	movf	??_saveEEPROM,w,c
  2571  00F36A  6E0B               	movwf	saveEEPROM@temp,c
  2572  00F36C  6A0C               	clrf	saveEEPROM@temp+1,c
  2573                           
  2574                           ;main.c: 445: Eeprom_WriteByte(12*i+1*200,temp);
  2575  00F36E  C00D  F001         	movff	saveEEPROM@i,___wmul@multiplier
  2576  00F372  C00E  F002         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  2577  00F376  0E00               	movlw	0
  2578  00F378  6E04               	movwf	___wmul@multiplicand+1,c
  2579  00F37A  0E0C               	movlw	12
  2580  00F37C  6E03               	movwf	___wmul@multiplicand,c
  2581  00F37E  EC7D  F072         	call	___wmul	;wreg free
  2582  00F382  0EC8               	movlw	200
  2583  00F384  2401               	addwf	?___wmul,w,c
  2584  00F386  6E07               	movwf	Eeprom_WriteByte@address,c
  2585  00F388  0E00               	movlw	0
  2586  00F38A  2002               	addwfc	?___wmul+1,w,c
  2587  00F38C  6E08               	movwf	Eeprom_WriteByte@address+1,c
  2588  00F38E  C00B  F009         	movff	saveEEPROM@temp,Eeprom_WriteByte@data
  2589  00F392  ECC9  F072         	call	_Eeprom_WriteByte	;wreg free
  2590  00F396  4A0D               	infsnz	saveEEPROM@i,f,c
  2591  00F398  2A0E               	incf	saveEEPROM@i+1,f,c
  2592  00F39A  D7CD               	goto	l2770
  2593  00F39C                     l2780:
  2594                           
  2595                           ;main.c: 446: }
  2596                           ;main.c: 447: for (i = 0; i<6; i++){
  2597  00F39C  0E00               	movlw	0
  2598  00F39E  6E0E               	movwf	saveEEPROM@i+1,c
  2599  00F3A0  0E00               	movlw	0
  2600  00F3A2  6E0D               	movwf	saveEEPROM@i,c
  2601  00F3A4                     l2782:
  2602  00F3A4  BE0E               	btfsc	saveEEPROM@i+1,7,c
  2603  00F3A6  D006               	goto	l2786
  2604  00F3A8  500E               	movf	saveEEPROM@i+1,w,c
  2605  00F3AA  E122               	bnz	l2792
  2606  00F3AC  0E06               	movlw	6
  2607  00F3AE  5C0D               	subwf	saveEEPROM@i,w,c
  2608  00F3B0  B0D8               	btfsc	status,0,c
  2609  00F3B2  D01E               	goto	l2792
  2610  00F3B4                     l2786:
  2611                           
  2612                           ;main.c: 448: Eeprom_WriteByte(12*i,runInfo[i]);
  2613  00F3B4  C00D  F001         	movff	saveEEPROM@i,___wmul@multiplier
  2614  00F3B8  C00E  F002         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  2615  00F3BC  0E00               	movlw	0
  2616  00F3BE  6E04               	movwf	___wmul@multiplicand+1,c
  2617  00F3C0  0E0C               	movlw	12
  2618  00F3C2  6E03               	movwf	___wmul@multiplicand,c
  2619  00F3C4  EC7D  F072         	call	___wmul	;wreg free
  2620  00F3C8  C001  F007         	movff	?___wmul,Eeprom_WriteByte@address
  2621  00F3CC  C002  F008         	movff	?___wmul+1,Eeprom_WriteByte@address+1
  2622  00F3D0  90D8               	bcf	status,0,c
  2623  00F3D2  340D               	rlcf	saveEEPROM@i,w,c
  2624  00F3D4  6ED9               	movwf	fsr2l,c
  2625  00F3D6  340E               	rlcf	saveEEPROM@i+1,w,c
  2626  00F3D8  6EDA               	movwf	fsr2h,c
  2627  00F3DA  0E6A               	movlw	low _runInfo
  2628  00F3DC  26D9               	addwf	fsr2l,f,c
  2629  00F3DE  0E00               	movlw	high _runInfo
  2630  00F3E0  22DA               	addwfc	fsr2h,f,c
  2631  00F3E2  50DF               	movf	indf2,w,c
  2632  00F3E4  6E09               	movwf	Eeprom_WriteByte@data,c
  2633  00F3E6  ECC9  F072         	call	_Eeprom_WriteByte	;wreg free
  2634  00F3EA  4A0D               	infsnz	saveEEPROM@i,f,c
  2635  00F3EC  2A0E               	incf	saveEEPROM@i+1,f,c
  2636  00F3EE  D7DA               	goto	l2782
  2637  00F3F0                     l2792:
  2638                           
  2639                           ;main.c: 449: }
  2640                           ;main.c: 450: for (i = 0; i<7; i++){
  2641  00F3F0  0E00               	movlw	0
  2642  00F3F2  6E0E               	movwf	saveEEPROM@i+1,c
  2643  00F3F4  0E00               	movlw	0
  2644  00F3F6  6E0D               	movwf	saveEEPROM@i,c
  2645  00F3F8                     l2794:
  2646  00F3F8  BE0E               	btfsc	saveEEPROM@i+1,7,c
  2647  00F3FA  D006               	goto	l2798
  2648  00F3FC  500E               	movf	saveEEPROM@i+1,w,c
  2649  00F3FE  E121               	bnz	l300
  2650  00F400  0E07               	movlw	7
  2651  00F402  5C0D               	subwf	saveEEPROM@i,w,c
  2652  00F404  B0D8               	btfsc	status,0,c
  2653  00F406  0012               	return	
  2654  00F408                     l2798:
  2655                           
  2656                           ;main.c: 451: Eeprom_WriteByte(12*(6+i),lastRunTime[i]);
  2657  00F408  0E06               	movlw	6
  2658  00F40A  240D               	addwf	saveEEPROM@i,w,c
  2659  00F40C  6E01               	movwf	___wmul@multiplier,c
  2660  00F40E  0E00               	movlw	0
  2661  00F410  200E               	addwfc	saveEEPROM@i+1,w,c
  2662  00F412  6E02               	movwf	___wmul@multiplier+1,c
  2663  00F414  0E00               	movlw	0
  2664  00F416  6E04               	movwf	___wmul@multiplicand+1,c
  2665  00F418  0E0C               	movlw	12
  2666  00F41A  6E03               	movwf	___wmul@multiplicand,c
  2667  00F41C  EC7D  F072         	call	___wmul	;wreg free
  2668  00F420  C001  F007         	movff	?___wmul,Eeprom_WriteByte@address
  2669  00F424  C002  F008         	movff	?___wmul+1,Eeprom_WriteByte@address+1
  2670  00F428  0E5A               	movlw	low _lastRunTime
  2671  00F42A  240D               	addwf	saveEEPROM@i,w,c
  2672  00F42C  6ED9               	movwf	fsr2l,c
  2673  00F42E  0E00               	movlw	high _lastRunTime
  2674  00F430  200E               	addwfc	saveEEPROM@i+1,w,c
  2675  00F432  6EDA               	movwf	fsr2h,c
  2676  00F434  50DF               	movf	indf2,w,c
  2677  00F436  6E09               	movwf	Eeprom_WriteByte@data,c
  2678  00F438  ECC9  F072         	call	_Eeprom_WriteByte	;wreg free
  2679  00F43C  4A0D               	infsnz	saveEEPROM@i,f,c
  2680  00F43E  2A0E               	incf	saveEEPROM@i+1,f,c
  2681  00F440  D7DB               	goto	l2794
  2682  00F442                     l300:
  2683  00F442  0012               	return		;funcret
  2684  00F444                     __end_of_saveEEPROM:
  2685                           	opt stack 0
  2686                           tblptru	equ	0xFF8
  2687                           tblptrh	equ	0xFF7
  2688                           tblptrl	equ	0xFF6
  2689                           tablat	equ	0xFF5
  2690                           intcon	equ	0xFF2
  2691                           intcon2	equ	0xFF1
  2692                           postinc0	equ	0xFEE
  2693                           wreg	equ	0xFE8
  2694                           indf1	equ	0xFE7
  2695                           postdec1	equ	0xFE5
  2696                           fsr1h	equ	0xFE2
  2697                           fsr1l	equ	0xFE1
  2698                           indf2	equ	0xFDF
  2699                           postinc2	equ	0xFDE
  2700                           postdec2	equ	0xFDD
  2701                           fsr2h	equ	0xFDA
  2702                           fsr2l	equ	0xFD9
  2703                           status	equ	0xFD8
  2704                           
  2705 ;; *************** function _Eeprom_WriteByte *****************
  2706 ;; Defined at:
  2707 ;;		line 521 in file "main.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;  address         2    6[COMRAM] unsigned int 
  2710 ;;  data            1    8[COMRAM] unsigned char 
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;		None
  2713 ;; Return value:  Size  Location     Type
  2714 ;;                  1    wreg      void 
  2715 ;; Registers used:
  2716 ;;		wreg, status,2
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 0/0
  2720 ;;		Unchanged: 0/0
  2721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2722 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2724 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2725 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2726 ;;Total ram usage:        3 bytes
  2727 ;; Hardware stack levels used:    1
  2728 ;; This function calls:
  2729 ;;		Nothing
  2730 ;; This function is called by:
  2731 ;;		_saveEEPROM
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           	psect	text10
  2736  00E592                     __ptext10:
  2737                           	opt stack 0
  2738  00E592                     _Eeprom_WriteByte:
  2739                           	opt stack 27
  2740                           
  2741                           ;main.c: 524: EEADRH = (uint8_t)(address >> 8);
  2742                           
  2743                           ;incstack = 0
  2744  00E592  5008               	movf	Eeprom_WriteByte@address+1,w,c
  2745  00E594  6EAA               	movwf	4010,c	;volatile
  2746                           
  2747                           ;main.c: 525: EEADR = (uint8_t)address;
  2748  00E596  C007  FFA9         	movff	Eeprom_WriteByte@address,4009	;volatile
  2749                           
  2750                           ;main.c: 527: EEDATA = data;
  2751  00E59A  C009  FFA8         	movff	Eeprom_WriteByte@data,4008	;volatile
  2752                           
  2753                           ;main.c: 528: EECON1bits.EEPGD = 0;
  2754  00E59E  9EA6               	bcf	4006,7,c	;volatile
  2755                           
  2756                           ;main.c: 529: EECON1bits.CFGS = 0;
  2757  00E5A0  9CA6               	bcf	4006,6,c	;volatile
  2758                           
  2759                           ;main.c: 530: EECON1bits.WREN = 1;
  2760  00E5A2  84A6               	bsf	4006,2,c	;volatile
  2761                           
  2762                           ;main.c: 534: EECON2 = 0x55;
  2763  00E5A4  0E55               	movlw	85
  2764  00E5A6  6EA7               	movwf	4007,c	;volatile
  2765                           
  2766                           ;main.c: 535: EECON2 = 0xAA;
  2767  00E5A8  0EAA               	movlw	170
  2768  00E5AA  6EA7               	movwf	4007,c	;volatile
  2769                           
  2770                           ;main.c: 536: EECON1bits.WR = 1;
  2771  00E5AC  82A6               	bsf	4006,1,c	;volatile
  2772  00E5AE                     l331:
  2773  00E5AE  A8A1               	btfss	4001,4,c	;volatile
  2774  00E5B0  D7FE               	goto	l331
  2775                           
  2776                           ;main.c: 542: }
  2777                           ;main.c: 544: PIR2bits.EEIF = 0;
  2778  00E5B2  98A1               	bcf	4001,4,c	;volatile
  2779                           
  2780                           ;main.c: 545: EECON1bits.WREN = 0;
  2781  00E5B4  94A6               	bcf	4006,2,c	;volatile
  2782  00E5B6  0012               	return		;funcret
  2783  00E5B8                     __end_of_Eeprom_WriteByte:
  2784                           	opt stack 0
  2785                           tblptru	equ	0xFF8
  2786                           tblptrh	equ	0xFF7
  2787                           tblptrl	equ	0xFF6
  2788                           tablat	equ	0xFF5
  2789                           intcon	equ	0xFF2
  2790                           intcon2	equ	0xFF1
  2791                           postinc0	equ	0xFEE
  2792                           wreg	equ	0xFE8
  2793                           indf1	equ	0xFE7
  2794                           postdec1	equ	0xFE5
  2795                           fsr1h	equ	0xFE2
  2796                           fsr1l	equ	0xFE1
  2797                           indf2	equ	0xFDF
  2798                           postinc2	equ	0xFDE
  2799                           postdec2	equ	0xFDD
  2800                           fsr2h	equ	0xFDA
  2801                           fsr2l	equ	0xFD9
  2802                           status	equ	0xFD8
  2803                           
  2804 ;; *************** function _pushBottle *****************
  2805 ;; Defined at:
  2806 ;;		line 405 in file "main.c"
  2807 ;; Parameters:    Size  Location     Type
  2808 ;;		None
  2809 ;; Auto vars:     Size  Location     Type
  2810 ;;  i               2    2[COMRAM] unsigned int 
  2811 ;; Return value:  Size  Location     Type
  2812 ;;                  1    wreg      void 
  2813 ;; Registers used:
  2814 ;;		wreg, status,2, status,0
  2815 ;; Tracked objects:
  2816 ;;		On entry : 0/0
  2817 ;;		On exit  : 0/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2823 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2824 ;;Total ram usage:        4 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; This function calls:
  2827 ;;		Nothing
  2828 ;; This function is called by:
  2829 ;;		_enterSelectedSubProgramFromMainProgram
  2830 ;;		_operation
  2831 ;; This function uses a non-reentrant model
  2832 ;;
  2833                           
  2834                           	psect	text11
  2835  00EB3C                     __ptext11:
  2836                           	opt stack 0
  2837  00EB3C                     _pushBottle:
  2838                           	opt stack 29
  2839                           
  2840                           ;main.c: 406: unsigned int i;
  2841                           ;main.c: 409: for(i=0;i<50;i++)
  2842                           
  2843                           ;incstack = 0
  2844  00EB3C  0E00               	movlw	0
  2845  00EB3E  6E04               	movwf	pushBottle@i+1,c
  2846  00EB40  0E00               	movlw	0
  2847  00EB42  6E03               	movwf	pushBottle@i,c
  2848  00EB44                     l1612:
  2849  00EB44  5004               	movf	pushBottle@i+1,w,c
  2850  00EB46  E117               	bnz	l1622
  2851  00EB48  0E32               	movlw	50
  2852  00EB4A  5C03               	subwf	pushBottle@i,w,c
  2853  00EB4C  B0D8               	btfsc	status,0,c
  2854  00EB4E  D013               	goto	l1622
  2855                           
  2856                           ;main.c: 410: {
  2857                           ;main.c: 411: PORTCbits.RC1 = 1;
  2858  00EB50  8282               	bsf	3970,1,c	;volatile
  2859                           
  2860                           ;main.c: 412: _delay((unsigned long)((800)*(8000000/4000000.0)));
  2861  00EB52  0EE4               	movlw	228
  2862  00EB54                     u2567:
  2863  00EB54  D000               	nop2	
  2864  00EB56  D000               	nop2	
  2865  00EB58  2EE8               	decfsz	wreg,f,c
  2866  00EB5A  D7FC               	bra	u2567
  2867  00EB5C  D000               	nop2	
  2868  00EB5E  D000               	nop2	
  2869                           
  2870                           ;main.c: 413: PORTCbits.RC1 = 0;
  2871  00EB60  9282               	bcf	3970,1,c	;volatile
  2872                           
  2873                           ;main.c: 414: _delay((unsigned long)((19200)*(8000000/4000000.0)));
  2874  00EB62  0E32               	movlw	50
  2875  00EB64  6E01               	movwf	??_pushBottle& (0+255),c
  2876  00EB66  0EDE               	movlw	222
  2877  00EB68                     u2577:
  2878  00EB68  2EE8               	decfsz	wreg,f,c
  2879  00EB6A  D7FE               	bra	u2577
  2880  00EB6C  2E01               	decfsz	??_pushBottle& (0+255),f,c
  2881  00EB6E  D7FC               	bra	u2577
  2882  00EB70  4A03               	infsnz	pushBottle@i,f,c
  2883  00EB72  2A04               	incf	pushBottle@i+1,f,c
  2884  00EB74  D7E7               	goto	l1612
  2885  00EB76                     l1622:
  2886                           
  2887                           ;main.c: 415: }
  2888                           ;main.c: 417: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2889  00EB76  0E15               	movlw	21
  2890  00EB78  6E02               	movwf	(??_pushBottle+1)& (0+255),c
  2891  00EB7A  0E4B               	movlw	75
  2892  00EB7C  6E01               	movwf	??_pushBottle& (0+255),c
  2893  00EB7E  0EBE               	movlw	190
  2894  00EB80                     u2587:
  2895  00EB80  2EE8               	decfsz	wreg,f,c
  2896  00EB82  D7FE               	bra	u2587
  2897  00EB84  2E01               	decfsz	??_pushBottle& (0+255),f,c
  2898  00EB86  D7FC               	bra	u2587
  2899  00EB88  2E02               	decfsz	(??_pushBottle+1)& (0+255),f,c
  2900  00EB8A  D7FA               	bra	u2587
  2901  00EB8C  D000               	nop2	
  2902                           
  2903                           ;main.c: 420: for(i=0;i<50;i++)
  2904  00EB8E  0E00               	movlw	0
  2905  00EB90  6E04               	movwf	pushBottle@i+1,c
  2906  00EB92  0E00               	movlw	0
  2907  00EB94  6E03               	movwf	pushBottle@i,c
  2908  00EB96                     l1626:
  2909  00EB96  5004               	movf	pushBottle@i+1,w,c
  2910  00EB98  E118               	bnz	l1636
  2911  00EB9A  0E32               	movlw	50
  2912  00EB9C  5C03               	subwf	pushBottle@i,w,c
  2913  00EB9E  B0D8               	btfsc	status,0,c
  2914  00EBA0  D014               	goto	l1636
  2915                           
  2916                           ;main.c: 421: {
  2917                           ;main.c: 422: PORTCbits.RC1 = 1;
  2918  00EBA2  8282               	bsf	3970,1,c	;volatile
  2919                           
  2920                           ;main.c: 423: _delay((unsigned long)((3600)*(8000000/4000000.0)));
  2921  00EBA4  0E0A               	movlw	10
  2922  00EBA6  6E01               	movwf	??_pushBottle& (0+255),c
  2923  00EBA8  0E58               	movlw	88
  2924  00EBAA                     u2597:
  2925  00EBAA  2EE8               	decfsz	wreg,f,c
  2926  00EBAC  D7FE               	bra	u2597
  2927  00EBAE  2E01               	decfsz	??_pushBottle& (0+255),f,c
  2928  00EBB0  D7FC               	bra	u2597
  2929  00EBB2  D000               	nop2	
  2930                           
  2931                           ;main.c: 424: PORTCbits.RC1 = 0;
  2932  00EBB4  9282               	bcf	3970,1,c	;volatile
  2933                           
  2934                           ;main.c: 425: _delay((unsigned long)((16400)*(8000000/4000000.0)));
  2935  00EBB6  0E2B               	movlw	43
  2936  00EBB8  6E01               	movwf	??_pushBottle& (0+255),c
  2937  00EBBA  0E98               	movlw	152
  2938  00EBBC                     u2607:
  2939  00EBBC  2EE8               	decfsz	wreg,f,c
  2940  00EBBE  D7FE               	bra	u2607
  2941  00EBC0  2E01               	decfsz	??_pushBottle& (0+255),f,c
  2942  00EBC2  D7FC               	bra	u2607
  2943  00EBC4  4A03               	infsnz	pushBottle@i,f,c
  2944  00EBC6  2A04               	incf	pushBottle@i+1,f,c
  2945  00EBC8  D7E6               	goto	l1626
  2946  00EBCA                     l1636:
  2947                           
  2948                           ;main.c: 426: }
  2949                           ;main.c: 428: _delay((unsigned long)((2000)*(8000000/4000.0)));
  2950  00EBCA  0E15               	movlw	21
  2951  00EBCC  6E02               	movwf	(??_pushBottle+1)& (0+255),c
  2952  00EBCE  0E4B               	movlw	75
  2953  00EBD0  6E01               	movwf	??_pushBottle& (0+255),c
  2954  00EBD2  0EBE               	movlw	190
  2955  00EBD4                     u2617:
  2956  00EBD4  2EE8               	decfsz	wreg,f,c
  2957  00EBD6  D7FE               	bra	u2617
  2958  00EBD8  2E01               	decfsz	??_pushBottle& (0+255),f,c
  2959  00EBDA  D7FC               	bra	u2617
  2960  00EBDC  2E02               	decfsz	(??_pushBottle+1)& (0+255),f,c
  2961  00EBDE  D7FA               	bra	u2617
  2962  00EBE0  D000               	nop2	
  2963  00EBE2  0012               	return		;funcret
  2964  00EBE4                     __end_of_pushBottle:
  2965                           	opt stack 0
  2966                           tblptru	equ	0xFF8
  2967                           tblptrh	equ	0xFF7
  2968                           tblptrl	equ	0xFF6
  2969                           tablat	equ	0xFF5
  2970                           intcon	equ	0xFF2
  2971                           intcon2	equ	0xFF1
  2972                           postinc0	equ	0xFEE
  2973                           wreg	equ	0xFE8
  2974                           indf1	equ	0xFE7
  2975                           postdec1	equ	0xFE5
  2976                           fsr1h	equ	0xFE2
  2977                           fsr1l	equ	0xFE1
  2978                           indf2	equ	0xFDF
  2979                           postinc2	equ	0xFDE
  2980                           postdec2	equ	0xFDD
  2981                           fsr2h	equ	0xFDA
  2982                           fsr2l	equ	0xFD9
  2983                           status	equ	0xFD8
  2984                           
  2985 ;; *************** function _moveBinServo *****************
  2986 ;; Defined at:
  2987 ;;		line 362 in file "main.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;  num             2    0[COMRAM] int 
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;  i               2    4[COMRAM] unsigned int 
  2992 ;; Return value:  Size  Location     Type
  2993 ;;                  1    wreg      void 
  2994 ;; Registers used:
  2995 ;;		wreg, status,2, status,0
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3001 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3002 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3003 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;Total ram usage:        6 bytes
  3006 ;; Hardware stack levels used:    1
  3007 ;; This function calls:
  3008 ;;		Nothing
  3009 ;; This function is called by:
  3010 ;;		_operation
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           	psect	text12
  3015  00F114                     __ptext12:
  3016                           	opt stack 0
  3017  00F114                     _moveBinServo:
  3018                           	opt stack 28
  3019                           
  3020                           ;main.c: 363: unsigned int i;
  3021                           ;main.c: 364: if (num == 0){
  3022                           
  3023                           ;incstack = 0
  3024  00F114  5001               	movf	moveBinServo@num,w,c
  3025  00F116  1002               	iorwf	moveBinServo@num+1,w,c
  3026  00F118  A4D8               	btfss	status,2,c
  3027  00F11A  D021               	goto	l2700
  3028                           
  3029                           ;main.c: 366: for(i=0;i<50;i++)
  3030  00F11C  0E00               	movlw	0
  3031  00F11E  6E06               	movwf	moveBinServo@i+1,c
  3032  00F120  0E00               	movlw	0
  3033  00F122  6E05               	movwf	moveBinServo@i,c
  3034  00F124  5006               	movf	moveBinServo@i+1,w,c
  3035  00F126  E105               	bnz	u1930
  3036  00F128  0E32               	movlw	50
  3037  00F12A  5C05               	subwf	moveBinServo@i,w,c
  3038  00F12C  B0D8               	btfsc	status,0,c
  3039  00F12E  D080               	goto	l2742
  3040  00F130  D001               	goto	l266
  3041  00F132                     u1930:
  3042  00F132  D07E               	goto	l2742
  3043  00F134                     l266:
  3044                           
  3045                           ;main.c: 367: {
  3046                           ;main.c: 368: PORTCbits.RC2 = 1;
  3047  00F134  8482               	bsf	3970,2,c	;volatile
  3048                           
  3049                           ;main.c: 369: _delay((unsigned long)((800)*(8000000/4000000.0)));
  3050  00F136  0EE4               	movlw	228
  3051  00F138                     u2627:
  3052  00F138  D000               	nop2	
  3053  00F13A  D000               	nop2	
  3054  00F13C  2EE8               	decfsz	wreg,f,c
  3055  00F13E  D7FC               	bra	u2627
  3056  00F140  D000               	nop2	
  3057  00F142  D000               	nop2	
  3058                           
  3059                           ;main.c: 370: PORTCbits.RC2 = 0;
  3060  00F144  9482               	bcf	3970,2,c	;volatile
  3061                           
  3062                           ;main.c: 371: _delay((unsigned long)((19200)*(8000000/4000000.0)));
  3063  00F146  0E32               	movlw	50
  3064  00F148  6E03               	movwf	??_moveBinServo& (0+255),c
  3065  00F14A  0EDE               	movlw	222
  3066  00F14C                     u2637:
  3067  00F14C  2EE8               	decfsz	wreg,f,c
  3068  00F14E  D7FE               	bra	u2637
  3069  00F150  2E03               	decfsz	??_moveBinServo& (0+255),f,c
  3070  00F152  D7FC               	bra	u2637
  3071  00F154  4A05               	infsnz	moveBinServo@i,f,c
  3072  00F156  2A06               	incf	moveBinServo@i+1,f,c
  3073  00F158  5006               	movf	moveBinServo@i+1,w,c
  3074  00F15A  E16A               	bnz	l2742
  3075  00F15C  D7E5               	goto	L3
  3076  00F15E                     l2700:
  3077  00F15E  0401               	decf	moveBinServo@num,w,c
  3078  00F160  1002               	iorwf	moveBinServo@num+1,w,c
  3079  00F162  A4D8               	btfss	status,2,c
  3080  00F164  D01E               	goto	l2714
  3081                           
  3082                           ;main.c: 375: for(i=0;i<50;i++)
  3083  00F166  0E00               	movlw	0
  3084  00F168  6E06               	movwf	moveBinServo@i+1,c
  3085  00F16A  0E00               	movlw	0
  3086  00F16C  6E05               	movwf	moveBinServo@i,c
  3087  00F16E                     l2704:
  3088  00F16E  5006               	movf	moveBinServo@i+1,w,c
  3089  00F170  E15F               	bnz	l2742
  3090  00F172  0E32               	movlw	50
  3091  00F174  5C05               	subwf	moveBinServo@i,w,c
  3092  00F176  B0D8               	btfsc	status,0,c
  3093  00F178  D05B               	goto	l2742
  3094                           
  3095                           ;main.c: 376: {
  3096                           ;main.c: 377: PORTCbits.RC2 = 1;
  3097  00F17A  8482               	bsf	3970,2,c	;volatile
  3098                           
  3099                           ;main.c: 378: _delay((unsigned long)((1500)*(8000000/4000000.0)));
  3100  00F17C  0E04               	movlw	4
  3101  00F17E  6E03               	movwf	??_moveBinServo& (0+255),c
  3102  00F180  0EE4               	movlw	228
  3103  00F182                     u2647:
  3104  00F182  2EE8               	decfsz	wreg,f,c
  3105  00F184  D7FE               	bra	u2647
  3106  00F186  2E03               	decfsz	??_moveBinServo& (0+255),f,c
  3107  00F188  D7FC               	bra	u2647
  3108  00F18A  D000               	nop2	
  3109                           
  3110                           ;main.c: 379: PORTCbits.RC2 = 0;
  3111  00F18C  9482               	bcf	3970,2,c	;volatile
  3112                           
  3113                           ;main.c: 380: _delay((unsigned long)((18500)*(8000000/4000000.0)));
  3114  00F18E  0E31               	movlw	49
  3115  00F190  6E03               	movwf	??_moveBinServo& (0+255),c
  3116  00F192  0E0C               	movlw	12
  3117  00F194                     u2657:
  3118  00F194  2EE8               	decfsz	wreg,f,c
  3119  00F196  D7FE               	bra	u2657
  3120  00F198  2E03               	decfsz	??_moveBinServo& (0+255),f,c
  3121  00F19A  D7FC               	bra	u2657
  3122  00F19C  4A05               	infsnz	moveBinServo@i,f,c
  3123  00F19E  2A06               	incf	moveBinServo@i+1,f,c
  3124  00F1A0  D7E6               	goto	l2704
  3125  00F1A2                     l2714:
  3126  00F1A2  0E02               	movlw	2
  3127  00F1A4  1801               	xorwf	moveBinServo@num,w,c
  3128  00F1A6  1002               	iorwf	moveBinServo@num+1,w,c
  3129  00F1A8  A4D8               	btfss	status,2,c
  3130  00F1AA  D01E               	goto	l2728
  3131                           
  3132                           ;main.c: 384: for(i=0;i<50;i++)
  3133  00F1AC  0E00               	movlw	0
  3134  00F1AE  6E06               	movwf	moveBinServo@i+1,c
  3135  00F1B0  0E00               	movlw	0
  3136  00F1B2  6E05               	movwf	moveBinServo@i,c
  3137  00F1B4                     l2718:
  3138  00F1B4  5006               	movf	moveBinServo@i+1,w,c
  3139  00F1B6  E13C               	bnz	l2742
  3140  00F1B8  0E32               	movlw	50
  3141  00F1BA  5C05               	subwf	moveBinServo@i,w,c
  3142  00F1BC  B0D8               	btfsc	status,0,c
  3143  00F1BE  D038               	goto	l2742
  3144                           
  3145                           ;main.c: 385: {
  3146                           ;main.c: 386: PORTCbits.RC2 = 1;
  3147  00F1C0  8482               	bsf	3970,2,c	;volatile
  3148                           
  3149                           ;main.c: 387: _delay((unsigned long)((2200)*(8000000/4000000.0)));
  3150  00F1C2  0E06               	movlw	6
  3151  00F1C4  6E03               	movwf	??_moveBinServo& (0+255),c
  3152  00F1C6  0EB6               	movlw	182
  3153  00F1C8                     u2667:
  3154  00F1C8  2EE8               	decfsz	wreg,f,c
  3155  00F1CA  D7FE               	bra	u2667
  3156  00F1CC  2E03               	decfsz	??_moveBinServo& (0+255),f,c
  3157  00F1CE  D7FC               	bra	u2667
  3158                           
  3159                           ;main.c: 388: PORTCbits.RC2 = 0;
  3160  00F1D0  9482               	bcf	3970,2,c	;volatile
  3161                           
  3162                           ;main.c: 389: _delay((unsigned long)((17800)*(8000000/4000000.0)));
  3163  00F1D2  0E2F               	movlw	47
  3164  00F1D4  6E03               	movwf	??_moveBinServo& (0+255),c
  3165  00F1D6  0E3A               	movlw	58
  3166  00F1D8                     u2677:
  3167  00F1D8  2EE8               	decfsz	wreg,f,c
  3168  00F1DA  D7FE               	bra	u2677
  3169  00F1DC  2E03               	decfsz	??_moveBinServo& (0+255),f,c
  3170  00F1DE  D7FC               	bra	u2677
  3171  00F1E0  D000               	nop2	
  3172  00F1E2  4A05               	infsnz	moveBinServo@i,f,c
  3173  00F1E4  2A06               	incf	moveBinServo@i+1,f,c
  3174  00F1E6  D7E6               	goto	l2718
  3175  00F1E8                     l2728:
  3176  00F1E8  0E03               	movlw	3
  3177  00F1EA  1801               	xorwf	moveBinServo@num,w,c
  3178  00F1EC  1002               	iorwf	moveBinServo@num+1,w,c
  3179  00F1EE  A4D8               	btfss	status,2,c
  3180  00F1F0  D01F               	goto	l2742
  3181                           
  3182                           ;main.c: 393: for(i=0;i<50;i++)
  3183  00F1F2  0E00               	movlw	0
  3184  00F1F4  6E06               	movwf	moveBinServo@i+1,c
  3185  00F1F6  0E00               	movlw	0
  3186  00F1F8  6E05               	movwf	moveBinServo@i,c
  3187  00F1FA                     l2732:
  3188  00F1FA  5006               	movf	moveBinServo@i+1,w,c
  3189  00F1FC  E119               	bnz	l2742
  3190  00F1FE  0E32               	movlw	50
  3191  00F200  5C05               	subwf	moveBinServo@i,w,c
  3192  00F202  B0D8               	btfsc	status,0,c
  3193  00F204  D015               	goto	l2742
  3194                           
  3195                           ;main.c: 394: {
  3196                           ;main.c: 395: PORTCbits.RC2 = 1;
  3197  00F206  8482               	bsf	3970,2,c	;volatile
  3198                           
  3199                           ;main.c: 396: _delay((unsigned long)((2900)*(8000000/4000000.0)));
  3200  00F208  0E08               	movlw	8
  3201  00F20A  6E03               	movwf	??_moveBinServo& (0+255),c
  3202  00F20C  0E87               	movlw	135
  3203  00F20E                     u2687:
  3204  00F20E  2EE8               	decfsz	wreg,f,c
  3205  00F210  D7FE               	bra	u2687
  3206  00F212  2E03               	decfsz	??_moveBinServo& (0+255),f,c
  3207  00F214  D7FC               	bra	u2687
  3208  00F216  F000               	nop	
  3209                           
  3210                           ;main.c: 397: PORTCbits.RC2 = 0;
  3211  00F218  9482               	bcf	3970,2,c	;volatile
  3212                           
  3213                           ;main.c: 398: _delay((unsigned long)((17100)*(8000000/4000000.0)));
  3214  00F21A  0E2D               	movlw	45
  3215  00F21C  6E03               	movwf	??_moveBinServo& (0+255),c
  3216  00F21E  0E69               	movlw	105
  3217  00F220                     u2697:
  3218  00F220  2EE8               	decfsz	wreg,f,c
  3219  00F222  D7FE               	bra	u2697
  3220  00F224  2E03               	decfsz	??_moveBinServo& (0+255),f,c
  3221  00F226  D7FC               	bra	u2697
  3222  00F228  F000               	nop	
  3223  00F22A  4A05               	infsnz	moveBinServo@i,f,c
  3224  00F22C  2A06               	incf	moveBinServo@i+1,f,c
  3225  00F22E  D7E5               	goto	l2732
  3226  00F230                     l2742:
  3227                           
  3228                           ;main.c: 399: }
  3229                           ;main.c: 400: }
  3230                           ;main.c: 401: _delay((unsigned long)((2000)*(8000000/4000.0)));
  3231  00F230  0E15               	movlw	21
  3232  00F232  6E04               	movwf	(??_moveBinServo+1)& (0+255),c
  3233  00F234  0E4B               	movlw	75
  3234  00F236  6E03               	movwf	??_moveBinServo& (0+255),c
  3235  00F238  0EBE               	movlw	190
  3236  00F23A                     u2707:
  3237  00F23A  2EE8               	decfsz	wreg,f,c
  3238  00F23C  D7FE               	bra	u2707
  3239  00F23E  2E03               	decfsz	??_moveBinServo& (0+255),f,c
  3240  00F240  D7FC               	bra	u2707
  3241  00F242  2E04               	decfsz	(??_moveBinServo+1)& (0+255),f,c
  3242  00F244  D7FA               	bra	u2707
  3243  00F246  D000               	nop2	
  3244  00F248  0012               	return		;funcret
  3245  00F24A                     __end_of_moveBinServo:
  3246                           	opt stack 0
  3247                           tblptru	equ	0xFF8
  3248                           tblptrh	equ	0xFF7
  3249                           tblptrl	equ	0xFF6
  3250                           tablat	equ	0xFF5
  3251                           intcon	equ	0xFF2
  3252                           intcon2	equ	0xFF1
  3253                           postinc0	equ	0xFEE
  3254                           wreg	equ	0xFE8
  3255                           indf1	equ	0xFE7
  3256                           postdec1	equ	0xFE5
  3257                           fsr1h	equ	0xFE2
  3258                           fsr1l	equ	0xFE1
  3259                           indf2	equ	0xFDF
  3260                           postinc2	equ	0xFDE
  3261                           postdec2	equ	0xFDD
  3262                           fsr2h	equ	0xFDA
  3263                           fsr2l	equ	0xFD9
  3264                           status	equ	0xFD8
  3265                           
  3266 ;; *************** function _getCurrentTime *****************
  3267 ;; Defined at:
  3268 ;;		line 149 in file "main.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;		None
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;  str             2   48[COMRAM] unsigned char [2]
  3273 ;;  currentTime     2   44[COMRAM] int 
  3274 ;; Return value:  Size  Location     Type
  3275 ;;                  2   42[COMRAM] int 
  3276 ;; Registers used:
  3277 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3278 ;; Tracked objects:
  3279 ;;		On entry : 0/0
  3280 ;;		On exit  : 0/0
  3281 ;;		Unchanged: 0/0
  3282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3283 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3284 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3286 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3287 ;;Total ram usage:        8 bytes
  3288 ;; Hardware stack levels used:    1
  3289 ;; Hardware stack levels required when called:    4
  3290 ;; This function calls:
  3291 ;;		___wmul
  3292 ;;		_atoi
  3293 ;;		_sprintf
  3294 ;; This function is called by:
  3295 ;;		_operation
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           	psect	text13
  3300  00EE24                     __ptext13:
  3301                           	opt stack 0
  3302  00EE24                     _getCurrentTime:
  3303                           	opt stack 24
  3304                           
  3305                           ;main.c: 150: int currentTime = 0;
  3306                           
  3307                           ;incstack = 0
  3308  00EE24  0E00               	movlw	0
  3309  00EE26  6E2E               	movwf	getCurrentTime@currentTime+1,c
  3310  00EE28  0E00               	movlw	0
  3311  00EE2A  6E2D               	movwf	getCurrentTime@currentTime,c
  3312                           
  3313                           ;main.c: 151: char str[2];
  3314                           ;main.c: 152: sprintf(str, "%02x",time[0]);
  3315  00EE2C  0E31               	movlw	low getCurrentTime@str
  3316  00EE2E  6E1F               	movwf	sprintf@wh,c
  3317  00EE30  0E00               	movlw	high getCurrentTime@str
  3318  00EE32  6E20               	movwf	sprintf@wh+1,c
  3319  00EE34  0E7A               	movlw	low (STR_2+10)
  3320  00EE36  6E21               	movwf	sprintf@f,c
  3321  00EE38  0EFF               	movlw	high (STR_2+10)
  3322  00EE3A  6E22               	movwf	sprintf@f+1,c
  3323  00EE3C  C061  F023         	movff	_time,?_sprintf+4
  3324  00EE40  6A24               	clrf	?_sprintf+5,c
  3325  00EE42  EC5C  F073         	call	_sprintf	;wreg free
  3326                           
  3327                           ;main.c: 153: currentTime += atoi(str);
  3328  00EE46  0E31               	movlw	low getCurrentTime@str
  3329  00EE48  6E07               	movwf	atoi@s,c
  3330  00EE4A  0E00               	movlw	high getCurrentTime@str
  3331  00EE4C  6E08               	movwf	atoi@s+1,c
  3332  00EE4E  ECAB  F076         	call	_atoi	;wreg free
  3333  00EE52  5007               	movf	?_atoi,w,c
  3334  00EE54  262D               	addwf	getCurrentTime@currentTime,f,c
  3335  00EE56  5008               	movf	?_atoi+1,w,c
  3336  00EE58  222E               	addwfc	getCurrentTime@currentTime+1,f,c
  3337                           
  3338                           ;main.c: 154: sprintf(str, "%02x",time[1]);
  3339  00EE5A  0E31               	movlw	low getCurrentTime@str
  3340  00EE5C  6E1F               	movwf	sprintf@wh,c
  3341  00EE5E  0E00               	movlw	high getCurrentTime@str
  3342  00EE60  6E20               	movwf	sprintf@wh+1,c
  3343  00EE62  0E7A               	movlw	low (STR_2+10)
  3344  00EE64  6E21               	movwf	sprintf@f,c
  3345  00EE66  0EFF               	movlw	high (STR_2+10)
  3346  00EE68  6E22               	movwf	sprintf@f+1,c
  3347  00EE6A  C062  F023         	movff	_time+1,?_sprintf+4
  3348  00EE6E  6A24               	clrf	?_sprintf+5,c
  3349  00EE70  EC5C  F073         	call	_sprintf	;wreg free
  3350                           
  3351                           ;main.c: 155: currentTime += atoi(str)*60;
  3352  00EE74  0E31               	movlw	low getCurrentTime@str
  3353  00EE76  6E07               	movwf	atoi@s,c
  3354  00EE78  0E00               	movlw	high getCurrentTime@str
  3355  00EE7A  6E08               	movwf	atoi@s+1,c
  3356  00EE7C  ECAB  F076         	call	_atoi	;wreg free
  3357  00EE80  C007  F02F         	movff	?_atoi,_getCurrentTime$1376
  3358  00EE84  C008  F030         	movff	?_atoi+1,_getCurrentTime$1376+1
  3359                           
  3360                           ;main.c: 155: currentTime += atoi(str)*60;
  3361  00EE88  C02F  F001         	movff	_getCurrentTime$1376,___wmul@multiplier
  3362  00EE8C  C030  F002         	movff	_getCurrentTime$1376+1,___wmul@multiplier+1
  3363  00EE90  0E00               	movlw	0
  3364  00EE92  6E04               	movwf	___wmul@multiplicand+1,c
  3365  00EE94  0E3C               	movlw	60
  3366  00EE96  6E03               	movwf	___wmul@multiplicand,c
  3367  00EE98  EC7D  F072         	call	___wmul	;wreg free
  3368  00EE9C  5001               	movf	?___wmul,w,c
  3369  00EE9E  262D               	addwf	getCurrentTime@currentTime,f,c
  3370  00EEA0  5002               	movf	?___wmul+1,w,c
  3371  00EEA2  222E               	addwfc	getCurrentTime@currentTime+1,f,c
  3372                           
  3373                           ;main.c: 156: sprintf(str, "%02x",time[2]);
  3374  00EEA4  0E31               	movlw	low getCurrentTime@str
  3375  00EEA6  6E1F               	movwf	sprintf@wh,c
  3376  00EEA8  0E00               	movlw	high getCurrentTime@str
  3377  00EEAA  6E20               	movwf	sprintf@wh+1,c
  3378  00EEAC  0E7A               	movlw	low (STR_2+10)
  3379  00EEAE  6E21               	movwf	sprintf@f,c
  3380  00EEB0  0EFF               	movlw	high (STR_2+10)
  3381  00EEB2  6E22               	movwf	sprintf@f+1,c
  3382  00EEB4  C063  F023         	movff	_time+2,?_sprintf+4
  3383  00EEB8  6A24               	clrf	?_sprintf+5,c
  3384  00EEBA  EC5C  F073         	call	_sprintf	;wreg free
  3385                           
  3386                           ;main.c: 157: currentTime += atoi(str)*3600;
  3387  00EEBE  0E31               	movlw	low getCurrentTime@str
  3388  00EEC0  6E07               	movwf	atoi@s,c
  3389  00EEC2  0E00               	movlw	high getCurrentTime@str
  3390  00EEC4  6E08               	movwf	atoi@s+1,c
  3391  00EEC6  ECAB  F076         	call	_atoi	;wreg free
  3392  00EECA  C007  F02F         	movff	?_atoi,_getCurrentTime$1376
  3393  00EECE  C008  F030         	movff	?_atoi+1,_getCurrentTime$1376+1
  3394                           
  3395                           ;main.c: 157: currentTime += atoi(str)*3600;
  3396  00EED2  C02F  F001         	movff	_getCurrentTime$1376,___wmul@multiplier
  3397  00EED6  C030  F002         	movff	_getCurrentTime$1376+1,___wmul@multiplier+1
  3398  00EEDA  0E0E               	movlw	14
  3399  00EEDC  6E04               	movwf	___wmul@multiplicand+1,c
  3400  00EEDE  0E10               	movlw	16
  3401  00EEE0  6E03               	movwf	___wmul@multiplicand,c
  3402  00EEE2  EC7D  F072         	call	___wmul	;wreg free
  3403  00EEE6  5001               	movf	?___wmul,w,c
  3404  00EEE8  262D               	addwf	getCurrentTime@currentTime,f,c
  3405  00EEEA  5002               	movf	?___wmul+1,w,c
  3406  00EEEC  222E               	addwfc	getCurrentTime@currentTime+1,f,c
  3407                           
  3408                           ;main.c: 158: return currentTime;
  3409  00EEEE  C02D  F02B         	movff	getCurrentTime@currentTime,?_getCurrentTime
  3410  00EEF2  C02E  F02C         	movff	getCurrentTime@currentTime+1,?_getCurrentTime+1
  3411  00EEF6  0012               	return	
  3412  00EEF8                     __end_of_getCurrentTime:
  3413                           	opt stack 0
  3414                           tblptru	equ	0xFF8
  3415                           tblptrh	equ	0xFF7
  3416                           tblptrl	equ	0xFF6
  3417                           tablat	equ	0xFF5
  3418                           intcon	equ	0xFF2
  3419                           intcon2	equ	0xFF1
  3420                           postinc0	equ	0xFEE
  3421                           wreg	equ	0xFE8
  3422                           indf1	equ	0xFE7
  3423                           postdec1	equ	0xFE5
  3424                           fsr1h	equ	0xFE2
  3425                           fsr1l	equ	0xFE1
  3426                           indf2	equ	0xFDF
  3427                           postinc2	equ	0xFDE
  3428                           postdec2	equ	0xFDD
  3429                           fsr2h	equ	0xFDA
  3430                           fsr2l	equ	0xFD9
  3431                           status	equ	0xFD8
  3432                           
  3433 ;; *************** function _sprintf *****************
  3434 ;; Defined at:
  3435 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprintf.c"
  3436 ;; Parameters:    Size  Location     Type
  3437 ;;  wh              2   30[COMRAM] PTR unsigned char 
  3438 ;;		 -> getCurrentTime@str(2), 
  3439 ;;  f               2   32[COMRAM] PTR const unsigned char 
  3440 ;;		 -> STR_5(5), STR_4(5), STR_3(5), 
  3441 ;; Auto vars:     Size  Location     Type
  3442 ;;  pb              4   38[COMRAM] struct __prbuf
  3443 ;;  ap              2   36[COMRAM] PTR void [1]
  3444 ;;		 -> ?_sprintf(2), ?_printf(2), 
  3445 ;; Return value:  Size  Location     Type
  3446 ;;                  2   30[COMRAM] int 
  3447 ;; Registers used:
  3448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3449 ;; Tracked objects:
  3450 ;;		On entry : 0/0
  3451 ;;		On exit  : 0/0
  3452 ;;		Unchanged: 0/0
  3453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3454 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3455 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3457 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3458 ;;Total ram usage:       12 bytes
  3459 ;; Hardware stack levels used:    1
  3460 ;; Hardware stack levels required when called:    3
  3461 ;; This function calls:
  3462 ;;		__doprnt
  3463 ;; This function is called by:
  3464 ;;		_getCurrentTime
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           	psect	text14
  3469  00E6B8                     __ptext14:
  3470                           	opt stack 0
  3471  00E6B8                     _sprintf:
  3472                           	opt stack 24
  3473                           
  3474                           ;incstack = 0
  3475  00E6B8  C01F  F027         	movff	sprintf@wh,sprintf@pb
  3476  00E6BC  C020  F028         	movff	sprintf@wh+1,sprintf@pb+1
  3477  00E6C0  0E00               	movlw	0
  3478  00E6C2  6E29               	movwf	sprintf@pb+2,c
  3479  00E6C4  0E00               	movlw	0
  3480  00E6C6  6E2A               	movwf	sprintf@pb+3,c
  3481  00E6C8  0E23               	movlw	low (?_sprintf+4)
  3482  00E6CA  6E25               	movwf	sprintf@ap,c
  3483  00E6CC  0E00               	movlw	high (?_sprintf+4)
  3484  00E6CE  6E26               	movwf	sprintf@ap+1,c
  3485  00E6D0  0E27               	movlw	low sprintf@pb
  3486  00E6D2  6E0D               	movwf	__doprnt@pb,c
  3487  00E6D4  0E00               	movlw	high sprintf@pb
  3488  00E6D6  6E0E               	movwf	__doprnt@pb+1,c
  3489  00E6D8  C021  F00F         	movff	sprintf@f,__doprnt@f
  3490  00E6DC  C022  F010         	movff	sprintf@f+1,__doprnt@f+1
  3491  00E6E0  0E25               	movlw	low sprintf@ap
  3492  00E6E2  6E11               	movwf	__doprnt@ap,c
  3493  00E6E4  0E00               	movlw	high sprintf@ap
  3494  00E6E6  6E12               	movwf	__doprnt@ap+1,c
  3495  00E6E8  EC3D  F07C         	call	__doprnt	;wreg free
  3496  00E6EC  C027  FFD9         	movff	sprintf@pb,fsr2l
  3497  00E6F0  C028  FFDA         	movff	sprintf@pb+1,fsr2h
  3498  00E6F4  0E00               	movlw	0
  3499  00E6F6  6EDF               	movwf	indf2,c
  3500  00E6F8  0012               	return	
  3501  00E6FA                     __end_of_sprintf:
  3502                           	opt stack 0
  3503                           tblptru	equ	0xFF8
  3504                           tblptrh	equ	0xFF7
  3505                           tblptrl	equ	0xFF6
  3506                           tablat	equ	0xFF5
  3507                           intcon	equ	0xFF2
  3508                           intcon2	equ	0xFF1
  3509                           postinc0	equ	0xFEE
  3510                           wreg	equ	0xFE8
  3511                           indf1	equ	0xFE7
  3512                           postdec1	equ	0xFE5
  3513                           fsr1h	equ	0xFE2
  3514                           fsr1l	equ	0xFE1
  3515                           indf2	equ	0xFDF
  3516                           postinc2	equ	0xFDE
  3517                           postdec2	equ	0xFDD
  3518                           fsr2h	equ	0xFDA
  3519                           fsr2l	equ	0xFD9
  3520                           status	equ	0xFD8
  3521                           
  3522 ;; *************** function _atoi *****************
  3523 ;; Defined at:
  3524 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\atoi.c"
  3525 ;; Parameters:    Size  Location     Type
  3526 ;;  s               2    6[COMRAM] PTR const unsigned char 
  3527 ;;		 -> getCurrentTime@str(2), 
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;  a               2   11[COMRAM] int 
  3530 ;;  sign            1   10[COMRAM] unsigned char 
  3531 ;; Return value:  Size  Location     Type
  3532 ;;                  2    6[COMRAM] int 
  3533 ;; Registers used:
  3534 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3535 ;; Tracked objects:
  3536 ;;		On entry : 0/0
  3537 ;;		On exit  : 0/0
  3538 ;;		Unchanged: 0/0
  3539 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3540 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3543 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;Total ram usage:        7 bytes
  3545 ;; Hardware stack levels used:    1
  3546 ;; Hardware stack levels required when called:    1
  3547 ;; This function calls:
  3548 ;;		___wmul
  3549 ;;		_isdigit
  3550 ;; This function is called by:
  3551 ;;		_getCurrentTime
  3552 ;; This function uses a non-reentrant model
  3553 ;;
  3554                           
  3555                           	psect	text15
  3556  00ED56                     __ptext15:
  3557                           	opt stack 0
  3558  00ED56                     _atoi:
  3559                           	opt stack 26
  3560                           
  3561                           ;incstack = 0
  3562  00ED56  D002               	goto	l2488
  3563  00ED58                     l2486:
  3564  00ED58  4A07               	infsnz	atoi@s,f,c
  3565  00ED5A  2A08               	incf	atoi@s+1,f,c
  3566  00ED5C                     l2488:
  3567  00ED5C  C007  FFD9         	movff	atoi@s,fsr2l
  3568  00ED60  C008  FFDA         	movff	atoi@s+1,fsr2h
  3569  00ED64  0E20               	movlw	32
  3570  00ED66  18DE               	xorwf	postinc2,w,c
  3571  00ED68  B4D8               	btfsc	status,2,c
  3572  00ED6A  D7F6               	goto	l2486
  3573  00ED6C  C007  FFD9         	movff	atoi@s,fsr2l
  3574  00ED70  C008  FFDA         	movff	atoi@s+1,fsr2h
  3575  00ED74  0E09               	movlw	9
  3576  00ED76  18DE               	xorwf	postinc2,w,c
  3577  00ED78  B4D8               	btfsc	status,2,c
  3578  00ED7A  D7EE               	goto	l2486
  3579  00ED7C  0E00               	movlw	0
  3580  00ED7E  6E0D               	movwf	atoi@a+1,c
  3581  00ED80  0E00               	movlw	0
  3582  00ED82  6E0C               	movwf	atoi@a,c
  3583  00ED84  0E00               	movlw	0
  3584  00ED86  6E0B               	movwf	atoi@sign,c
  3585  00ED88  C007  FFD9         	movff	atoi@s,fsr2l
  3586  00ED8C  C008  FFDA         	movff	atoi@s+1,fsr2h
  3587  00ED90  0E2D               	movlw	45
  3588  00ED92  18DE               	xorwf	postinc2,w,c
  3589  00ED94  A4D8               	btfss	status,2,c
  3590  00ED96  D002               	goto	l2498
  3591  00ED98  2A0B               	incf	atoi@sign,f,c
  3592  00ED9A  D024               	goto	l2504
  3593  00ED9C                     l2498:
  3594  00ED9C  C007  FFD9         	movff	atoi@s,fsr2l
  3595  00EDA0  C008  FFDA         	movff	atoi@s+1,fsr2h
  3596  00EDA4  0E2B               	movlw	43
  3597  00EDA6  18DE               	xorwf	postinc2,w,c
  3598  00EDA8  A4D8               	btfss	status,2,c
  3599  00EDAA  D01E               	goto	l2506
  3600  00EDAC  D01B               	goto	l2504
  3601  00EDAE                     l2502:
  3602  00EDAE  C00C  F001         	movff	atoi@a,___wmul@multiplier
  3603  00EDB2  C00D  F002         	movff	atoi@a+1,___wmul@multiplier+1
  3604  00EDB6  0E00               	movlw	0
  3605  00EDB8  6E04               	movwf	___wmul@multiplicand+1,c
  3606  00EDBA  0E0A               	movlw	10
  3607  00EDBC  6E03               	movwf	___wmul@multiplicand,c
  3608  00EDBE  EC7D  F072         	call	___wmul	;wreg free
  3609  00EDC2  C007  FFD9         	movff	atoi@s,fsr2l
  3610  00EDC6  C008  FFDA         	movff	atoi@s+1,fsr2h
  3611  00EDCA  50DF               	movf	indf2,w,c
  3612  00EDCC  6E09               	movwf	??_atoi& (0+255),c
  3613  00EDCE  6A0A               	clrf	(??_atoi+1)& (0+255),c
  3614  00EDD0  5001               	movf	?___wmul,w,c
  3615  00EDD2  2609               	addwf	??_atoi,f,c
  3616  00EDD4  5002               	movf	?___wmul+1,w,c
  3617  00EDD6  220A               	addwfc	??_atoi+1,f,c
  3618  00EDD8  0ED0               	movlw	208
  3619  00EDDA  2409               	addwf	??_atoi,w,c
  3620  00EDDC  6E0C               	movwf	atoi@a,c
  3621  00EDDE  0EFF               	movlw	255
  3622  00EDE0  200A               	addwfc	??_atoi+1,w,c
  3623  00EDE2  6E0D               	movwf	atoi@a+1,c
  3624  00EDE4                     l2504:
  3625  00EDE4  4A07               	infsnz	atoi@s,f,c
  3626  00EDE6  2A08               	incf	atoi@s+1,f,c
  3627  00EDE8                     l2506:
  3628  00EDE8  C007  FFD9         	movff	atoi@s,fsr2l
  3629  00EDEC  C008  FFDA         	movff	atoi@s+1,fsr2h
  3630  00EDF0  50DF               	movf	indf2,w,c
  3631  00EDF2  EC5E  F072         	call	_isdigit
  3632  00EDF6  B0D8               	btfsc	status,0,c
  3633  00EDF8  D7DA               	goto	l2502
  3634  00EDFA  500B               	movf	atoi@sign,w,c
  3635  00EDFC  B4D8               	btfsc	status,2,c
  3636  00EDFE  D00D               	goto	l669
  3637  00EE00  C00C  F009         	movff	atoi@a,??_atoi
  3638  00EE04  C00D  F00A         	movff	atoi@a+1,??_atoi+1
  3639  00EE08  1E09               	comf	??_atoi,f,c
  3640  00EE0A  1E0A               	comf	??_atoi+1,f,c
  3641  00EE0C  4A09               	infsnz	??_atoi,f,c
  3642  00EE0E  2A0A               	incf	??_atoi+1,f,c
  3643  00EE10  C009  F007         	movff	??_atoi,?_atoi
  3644  00EE14  C00A  F008         	movff	??_atoi+1,?_atoi+1
  3645  00EE18  0012               	return	
  3646  00EE1A                     l669:
  3647  00EE1A  C00C  F007         	movff	atoi@a,?_atoi
  3648  00EE1E  C00D  F008         	movff	atoi@a+1,?_atoi+1
  3649  00EE22  0012               	return		;funcret
  3650  00EE24                     __end_of_atoi:
  3651                           	opt stack 0
  3652                           tblptru	equ	0xFF8
  3653                           tblptrh	equ	0xFF7
  3654                           tblptrl	equ	0xFF6
  3655                           tablat	equ	0xFF5
  3656                           intcon	equ	0xFF2
  3657                           intcon2	equ	0xFF1
  3658                           postinc0	equ	0xFEE
  3659                           wreg	equ	0xFE8
  3660                           indf1	equ	0xFE7
  3661                           postdec1	equ	0xFE5
  3662                           fsr1h	equ	0xFE2
  3663                           fsr1l	equ	0xFE1
  3664                           indf2	equ	0xFDF
  3665                           postinc2	equ	0xFDE
  3666                           postdec2	equ	0xFDD
  3667                           fsr2h	equ	0xFDA
  3668                           fsr2l	equ	0xFD9
  3669                           status	equ	0xFD8
  3670                           
  3671 ;; *************** function _EEPROM *****************
  3672 ;; Defined at:
  3673 ;;		line 319 in file "main.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;		None
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;  timeStorage    14   53[COMRAM] int [7]
  3678 ;;  storage        12   67[COMRAM] int [6]
  3679 ;;  i               2   82[COMRAM] int 
  3680 ;;  temp            1   79[COMRAM] unsigned char 
  3681 ;;  screen_state    2   80[COMRAM] int 
  3682 ;; Return value:  Size  Location     Type
  3683 ;;                  1    wreg      void 
  3684 ;; Registers used:
  3685 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3686 ;; Tracked objects:
  3687 ;;		On entry : 0/0
  3688 ;;		On exit  : 0/0
  3689 ;;		Unchanged: 0/0
  3690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3692 ;;      Locals:        31       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3693 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3694 ;;      Totals:        33       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3695 ;;Total ram usage:       33 bytes
  3696 ;; Hardware stack levels used:    1
  3697 ;; Hardware stack levels required when called:    7
  3698 ;; This function calls:
  3699 ;;		_getEEPROM
  3700 ;;		_getPressedKeypadKey
  3701 ;;		_past_run_access
  3702 ;;		_update_eeprom_screen_state
  3703 ;; This function is called by:
  3704 ;;		_enterSelectedSubProgramFromMainProgram
  3705 ;; This function uses a non-reentrant model
  3706 ;;
  3707                           
  3708                           	psect	text16
  3709  00F444                     __ptext16:
  3710                           	opt stack 0
  3711  00F444                     _EEPROM:
  3712                           	opt stack 22
  3713                           
  3714                           ;main.c: 320: int screen_state = 0;
  3715                           
  3716                           ;incstack = 0
  3717  00F444  0E00               	movlw	0
  3718  00F446  6E52               	movwf	EEPROM@screen_state+1,c
  3719  00F448  0E00               	movlw	0
  3720  00F44A  6E51               	movwf	EEPROM@screen_state,c
  3721                           
  3722                           ;main.c: 321: update_eeprom_screen_state(screen_state);
  3723  00F44C  C051  F02D         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  3724  00F450  C052  F02E         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  3725  00F454  ECBE  F074         	call	_update_eeprom_screen_state	;wreg free
  3726  00F458                     l2968:
  3727                           
  3728                           ;main.c: 323: unsigned char temp = getPressedKeypadKey();
  3729  00F458  EC04  F075         	call	_getPressedKeypadKey	;wreg free
  3730  00F45C  6E50               	movwf	EEPROM@temp,c
  3731                           
  3732                           ;main.c: 324: if (temp == keys[3]){
  3733  00F45E  0E2C               	movlw	low (_keys+3)
  3734  00F460  6EF6               	movwf	tblptrl,c
  3735  00F462  0EFE               	movlw	high (_keys+3)
  3736  00F464  6EF7               	movwf	tblptrh,c
  3737  00F466                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3738  00F466  6AF8               	clrf	tblptru,c
  3739  00F468                     	endif
  3740  00F468                     	if	0	;tblptru may be non-zero
  3741  00F468                     	endif
  3742  00F468  0008               	tblrd		*
  3743  00F46A  50F5               	movf	tablat,w,c
  3744  00F46C  1850               	xorwf	EEPROM@temp,w,c
  3745  00F46E  A4D8               	btfss	status,2,c
  3746  00F470  D0A4               	goto	l3026
  3747                           
  3748                           ;main.c: 325: int storage[6], timeStorage[7], i;
  3749                           ;main.c: 326: for (i = 0; i <6; i++){
  3750  00F472  0E00               	movlw	0
  3751  00F474  6E54               	movwf	EEPROM@i+1,c
  3752  00F476  0E00               	movlw	0
  3753  00F478  6E53               	movwf	EEPROM@i,c
  3754  00F47A                     l2974:
  3755  00F47A  BE54               	btfsc	EEPROM@i+1,7,c
  3756  00F47C  D006               	goto	l2978
  3757  00F47E  5054               	movf	EEPROM@i+1,w,c
  3758  00F480  E11D               	bnz	l2984
  3759  00F482  0E06               	movlw	6
  3760  00F484  5C53               	subwf	EEPROM@i,w,c
  3761  00F486  B0D8               	btfsc	status,0,c
  3762  00F488  D019               	goto	l2984
  3763  00F48A                     l2978:
  3764                           
  3765                           ;main.c: 327: storage[i] = runInfo[i];
  3766  00F48A  90D8               	bcf	status,0,c
  3767  00F48C  3453               	rlcf	EEPROM@i,w,c
  3768  00F48E  6ED9               	movwf	fsr2l,c
  3769  00F490  3454               	rlcf	EEPROM@i+1,w,c
  3770  00F492  6EDA               	movwf	fsr2h,c
  3771  00F494  0E6A               	movlw	low _runInfo
  3772  00F496  26D9               	addwf	fsr2l,f,c
  3773  00F498  0E00               	movlw	high _runInfo
  3774  00F49A  22DA               	addwfc	fsr2h,f,c
  3775  00F49C  90D8               	bcf	status,0,c
  3776  00F49E  3453               	rlcf	EEPROM@i,w,c
  3777  00F4A0  6EE1               	movwf	fsr1l,c
  3778  00F4A2  3454               	rlcf	EEPROM@i+1,w,c
  3779  00F4A4  6EE2               	movwf	fsr1h,c
  3780  00F4A6  0E44               	movlw	low EEPROM@storage
  3781  00F4A8  26E1               	addwf	fsr1l,f,c
  3782  00F4AA  0E00               	movlw	high EEPROM@storage
  3783  00F4AC  22E2               	addwfc	fsr1h,f,c
  3784  00F4AE  CFDE FFE6          	movff	postinc2,postinc1
  3785  00F4B2  CFDD FFE5          	movff	postdec2,postdec1
  3786  00F4B6  4A53               	infsnz	EEPROM@i,f,c
  3787  00F4B8  2A54               	incf	EEPROM@i+1,f,c
  3788  00F4BA  D7DF               	goto	l2974
  3789  00F4BC                     l2984:
  3790                           
  3791                           ;main.c: 328: }
  3792                           ;main.c: 329: for (i = 0; i<7; i++){
  3793  00F4BC  0E00               	movlw	0
  3794  00F4BE  6E54               	movwf	EEPROM@i+1,c
  3795  00F4C0  0E00               	movlw	0
  3796  00F4C2  6E53               	movwf	EEPROM@i,c
  3797  00F4C4                     l2986:
  3798  00F4C4  BE54               	btfsc	EEPROM@i+1,7,c
  3799  00F4C6  D006               	goto	l2990
  3800  00F4C8  5054               	movf	EEPROM@i+1,w,c
  3801  00F4CA  E11D               	bnz	l2996
  3802  00F4CC  0E07               	movlw	7
  3803  00F4CE  5C53               	subwf	EEPROM@i,w,c
  3804  00F4D0  B0D8               	btfsc	status,0,c
  3805  00F4D2  D019               	goto	l2996
  3806  00F4D4                     l2990:
  3807                           
  3808                           ;main.c: 330: timeStorage[i] = lastRunTime[i];
  3809  00F4D4  0E5A               	movlw	low _lastRunTime
  3810  00F4D6  2453               	addwf	EEPROM@i,w,c
  3811  00F4D8  6ED9               	movwf	fsr2l,c
  3812  00F4DA  0E00               	movlw	high _lastRunTime
  3813  00F4DC  2054               	addwfc	EEPROM@i+1,w,c
  3814  00F4DE  6EDA               	movwf	fsr2h,c
  3815  00F4E0  50DF               	movf	indf2,w,c
  3816  00F4E2  6E34               	movwf	??_EEPROM& (0+255),c
  3817  00F4E4  6A35               	clrf	(??_EEPROM+1)& (0+255),c
  3818  00F4E6  90D8               	bcf	status,0,c
  3819  00F4E8  3453               	rlcf	EEPROM@i,w,c
  3820  00F4EA  6ED9               	movwf	fsr2l,c
  3821  00F4EC  3454               	rlcf	EEPROM@i+1,w,c
  3822  00F4EE  6EDA               	movwf	fsr2h,c
  3823  00F4F0  0E36               	movlw	low EEPROM@timeStorage
  3824  00F4F2  26D9               	addwf	fsr2l,f,c
  3825  00F4F4  0E00               	movlw	high EEPROM@timeStorage
  3826  00F4F6  22DA               	addwfc	fsr2h,f,c
  3827  00F4F8  C034  FFDE         	movff	??_EEPROM,postinc2
  3828  00F4FC  C035  FFDD         	movff	??_EEPROM+1,postdec2
  3829  00F500  4A53               	infsnz	EEPROM@i,f,c
  3830  00F502  2A54               	incf	EEPROM@i+1,f,c
  3831  00F504  D7DF               	goto	l2986
  3832  00F506                     l2996:
  3833                           
  3834                           ;main.c: 331: }
  3835                           ;main.c: 332: getEEPROM(screen_state);
  3836  00F506  C051  F009         	movff	EEPROM@screen_state,getEEPROM@num
  3837  00F50A  C052  F00A         	movff	EEPROM@screen_state+1,getEEPROM@num+1
  3838  00F50E  EC7C  F077         	call	_getEEPROM	;wreg free
  3839                           
  3840                           ;main.c: 333: past_run_access();
  3841  00F512  EC4D  F075         	call	_past_run_access	;wreg free
  3842                           
  3843                           ;main.c: 334: update_eeprom_screen_state(screen_state);
  3844  00F516  C051  F02D         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  3845  00F51A  C052  F02E         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  3846  00F51E  ECBE  F074         	call	_update_eeprom_screen_state	;wreg free
  3847                           
  3848                           ;main.c: 335: for (i = 0; i <6; i++){
  3849  00F522  0E00               	movlw	0
  3850  00F524  6E54               	movwf	EEPROM@i+1,c
  3851  00F526  0E00               	movlw	0
  3852  00F528  6E53               	movwf	EEPROM@i,c
  3853  00F52A                     l3004:
  3854  00F52A  BE54               	btfsc	EEPROM@i+1,7,c
  3855  00F52C  D006               	goto	l3008
  3856  00F52E  5054               	movf	EEPROM@i+1,w,c
  3857  00F530  E11D               	bnz	l3014
  3858  00F532  0E06               	movlw	6
  3859  00F534  5C53               	subwf	EEPROM@i,w,c
  3860  00F536  B0D8               	btfsc	status,0,c
  3861  00F538  D019               	goto	l3014
  3862  00F53A                     l3008:
  3863                           
  3864                           ;main.c: 336: runInfo[i] = storage[i];
  3865  00F53A  90D8               	bcf	status,0,c
  3866  00F53C  3453               	rlcf	EEPROM@i,w,c
  3867  00F53E  6ED9               	movwf	fsr2l,c
  3868  00F540  3454               	rlcf	EEPROM@i+1,w,c
  3869  00F542  6EDA               	movwf	fsr2h,c
  3870  00F544  0E44               	movlw	low EEPROM@storage
  3871  00F546  26D9               	addwf	fsr2l,f,c
  3872  00F548  0E00               	movlw	high EEPROM@storage
  3873  00F54A  22DA               	addwfc	fsr2h,f,c
  3874  00F54C  90D8               	bcf	status,0,c
  3875  00F54E  3453               	rlcf	EEPROM@i,w,c
  3876  00F550  6EE1               	movwf	fsr1l,c
  3877  00F552  3454               	rlcf	EEPROM@i+1,w,c
  3878  00F554  6EE2               	movwf	fsr1h,c
  3879  00F556  0E6A               	movlw	low _runInfo
  3880  00F558  26E1               	addwf	fsr1l,f,c
  3881  00F55A  0E00               	movlw	high _runInfo
  3882  00F55C  22E2               	addwfc	fsr1h,f,c
  3883  00F55E  CFDE FFE6          	movff	postinc2,postinc1
  3884  00F562  CFDD FFE5          	movff	postdec2,postdec1
  3885  00F566  4A53               	infsnz	EEPROM@i,f,c
  3886  00F568  2A54               	incf	EEPROM@i+1,f,c
  3887  00F56A  D7DF               	goto	l3004
  3888  00F56C                     l3014:
  3889                           
  3890                           ;main.c: 337: }
  3891                           ;main.c: 338: for (i = 0; i<7; i++){
  3892  00F56C  0E00               	movlw	0
  3893  00F56E  6E54               	movwf	EEPROM@i+1,c
  3894  00F570  0E00               	movlw	0
  3895  00F572  6E53               	movwf	EEPROM@i,c
  3896  00F574  BE54               	btfsc	EEPROM@i+1,7,c
  3897  00F576  D008               	goto	l3020
  3898  00F578  5054               	movf	EEPROM@i+1,w,c
  3899  00F57A  E105               	bnz	u2400
  3900  00F57C  0E07               	movlw	7
  3901  00F57E  5C53               	subwf	EEPROM@i,w,c
  3902  00F580  B0D8               	btfsc	status,0,c
  3903  00F582  D76A               	goto	l2968
  3904  00F584  D001               	goto	l3020
  3905  00F586                     u2400:
  3906  00F586  D768               	goto	l2968
  3907  00F588                     l3020:
  3908                           
  3909                           ;main.c: 339: lastRunTime[i] = timeStorage[i];
  3910  00F588  90D8               	bcf	status,0,c
  3911  00F58A  3453               	rlcf	EEPROM@i,w,c
  3912  00F58C  6ED9               	movwf	fsr2l,c
  3913  00F58E  3454               	rlcf	EEPROM@i+1,w,c
  3914  00F590  6EDA               	movwf	fsr2h,c
  3915  00F592  0E36               	movlw	low EEPROM@timeStorage
  3916  00F594  26D9               	addwf	fsr2l,f,c
  3917  00F596  0E00               	movlw	high EEPROM@timeStorage
  3918  00F598  22DA               	addwfc	fsr2h,f,c
  3919  00F59A  0E5A               	movlw	low _lastRunTime
  3920  00F59C  2453               	addwf	EEPROM@i,w,c
  3921  00F59E  6EE1               	movwf	fsr1l,c
  3922  00F5A0  0E00               	movlw	high _lastRunTime
  3923  00F5A2  2054               	addwfc	EEPROM@i+1,w,c
  3924  00F5A4  6EE2               	movwf	fsr1h,c
  3925  00F5A6  CFDF FFE7          	movff	indf2,indf1
  3926  00F5AA  4A53               	infsnz	EEPROM@i,f,c
  3927  00F5AC  2A54               	incf	EEPROM@i+1,f,c
  3928  00F5AE  BE54               	btfsc	EEPROM@i+1,7,c
  3929  00F5B0  D7EB               	goto	l3020
  3930  00F5B2  5054               	movf	EEPROM@i+1,w,c
  3931  00F5B4  E101               	bnz	u2410
  3932  00F5B6  D7E2               	goto	L5
  3933  00F5B8                     u2410:
  3934                           
  3935                           ;main.c: 340: }
  3936                           ;main.c: 341: }else if (temp == keys[15]){
  3937  00F5B8  D74F               	goto	l2968
  3938  00F5BA                     l3026:
  3939  00F5BA  0E38               	movlw	low (_keys+15)
  3940  00F5BC  6EF6               	movwf	tblptrl,c
  3941  00F5BE  0EFE               	movlw	high (_keys+15)
  3942  00F5C0  6EF7               	movwf	tblptrh,c
  3943  00F5C2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3944  00F5C2  6AF8               	clrf	tblptru,c
  3945  00F5C4                     	endif
  3946  00F5C4                     	if	0	;tblptru may be non-zero
  3947  00F5C4                     	endif
  3948  00F5C4  0008               	tblrd		*
  3949  00F5C6  50F5               	movf	tablat,w,c
  3950  00F5C8  1850               	xorwf	EEPROM@temp,w,c
  3951  00F5CA  B4D8               	btfsc	status,2,c
  3952  00F5CC  0012               	return	
  3953                           
  3954                           ;main.c: 343: }else if (temp == keys[4]){
  3955                           
  3956                           ;main.c: 342: break;
  3957  00F5CE  0E2D               	movlw	low (_keys+4)
  3958  00F5D0  6EF6               	movwf	tblptrl,c
  3959  00F5D2  0EFE               	movlw	high (_keys+4)
  3960  00F5D4  6EF7               	movwf	tblptrh,c
  3961  00F5D6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  3962  00F5D6  6AF8               	clrf	tblptru,c
  3963  00F5D8                     	endif
  3964  00F5D8                     	if	0	;tblptru may be non-zero
  3965  00F5D8                     	endif
  3966  00F5D8  0008               	tblrd		*
  3967  00F5DA  50F5               	movf	tablat,w,c
  3968  00F5DC  1850               	xorwf	EEPROM@temp,w,c
  3969  00F5DE  A4D8               	btfss	status,2,c
  3970  00F5E0  D013               	goto	l3042
  3971                           
  3972                           ;main.c: 344: if (screen_state == 0){
  3973  00F5E2  5051               	movf	EEPROM@screen_state,w,c
  3974  00F5E4  1052               	iorwf	EEPROM@screen_state+1,w,c
  3975  00F5E6  A4D8               	btfss	status,2,c
  3976  00F5E8  D005               	goto	l3038
  3977                           
  3978                           ;main.c: 345: screen_state = 3;
  3979  00F5EA  0E00               	movlw	0
  3980  00F5EC  6E52               	movwf	EEPROM@screen_state+1,c
  3981  00F5EE  0E03               	movlw	3
  3982  00F5F0  6E51               	movwf	EEPROM@screen_state,c
  3983                           
  3984                           ;main.c: 346: }else{
  3985  00F5F2  D003               	goto	l3040
  3986  00F5F4                     l3038:
  3987                           
  3988                           ;main.c: 347: screen_state -= 1;
  3989  00F5F4  0651               	decf	EEPROM@screen_state,f,c
  3990  00F5F6  A0D8               	btfss	status,0,c
  3991  00F5F8  0652               	decf	EEPROM@screen_state+1,f,c
  3992  00F5FA                     l3040:
  3993                           
  3994                           ;main.c: 348: }
  3995                           ;main.c: 349: update_eeprom_screen_state(screen_state);
  3996  00F5FA  C051  F02D         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  3997  00F5FE  C052  F02E         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  3998  00F602  ECBE  F074         	call	_update_eeprom_screen_state	;wreg free
  3999                           
  4000                           ;main.c: 350: }else if (temp == keys[6]){
  4001  00F606  D728               	goto	l2968
  4002  00F608                     l3042:
  4003  00F608  0E2F               	movlw	low (_keys+6)
  4004  00F60A  6EF6               	movwf	tblptrl,c
  4005  00F60C  0EFE               	movlw	high (_keys+6)
  4006  00F60E  6EF7               	movwf	tblptrh,c
  4007  00F610                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4008  00F610  6AF8               	clrf	tblptru,c
  4009  00F612                     	endif
  4010  00F612                     	if	0	;tblptru may be non-zero
  4011  00F612                     	endif
  4012  00F612  0008               	tblrd		*
  4013  00F614  50F5               	movf	tablat,w,c
  4014  00F616  1850               	xorwf	EEPROM@temp,w,c
  4015  00F618  A4D8               	btfss	status,2,c
  4016  00F61A  D71E               	goto	l2968
  4017                           
  4018                           ;main.c: 351: if (screen_state == 3){
  4019  00F61C  0E03               	movlw	3
  4020  00F61E  1851               	xorwf	EEPROM@screen_state,w,c
  4021  00F620  1052               	iorwf	EEPROM@screen_state+1,w,c
  4022  00F622  A4D8               	btfss	status,2,c
  4023  00F624  D005               	goto	l3048
  4024                           
  4025                           ;main.c: 352: screen_state = 0;
  4026  00F626  0E00               	movlw	0
  4027  00F628  6E52               	movwf	EEPROM@screen_state+1,c
  4028  00F62A  0E00               	movlw	0
  4029  00F62C  6E51               	movwf	EEPROM@screen_state,c
  4030                           
  4031                           ;main.c: 353: }else{
  4032  00F62E  D002               	goto	l3050
  4033  00F630                     l3048:
  4034                           
  4035                           ;main.c: 354: screen_state += 1;
  4036  00F630  4A51               	infsnz	EEPROM@screen_state,f,c
  4037  00F632  2A52               	incf	EEPROM@screen_state+1,f,c
  4038  00F634                     l3050:
  4039                           
  4040                           ;main.c: 355: }
  4041                           ;main.c: 356: update_eeprom_screen_state(screen_state);
  4042  00F634  C051  F02D         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  4043  00F638  C052  F02E         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  4044  00F63C  ECBE  F074         	call	_update_eeprom_screen_state	;wreg free
  4045  00F640  D70B               	goto	l2968
  4046  00F642                     __end_of_EEPROM:
  4047                           	opt stack 0
  4048                           tblptru	equ	0xFF8
  4049                           tblptrh	equ	0xFF7
  4050                           tblptrl	equ	0xFF6
  4051                           tablat	equ	0xFF5
  4052                           intcon	equ	0xFF2
  4053                           intcon2	equ	0xFF1
  4054                           postinc0	equ	0xFEE
  4055                           wreg	equ	0xFE8
  4056                           indf1	equ	0xFE7
  4057                           postinc1	equ	0xFE6
  4058                           postdec1	equ	0xFE5
  4059                           fsr1h	equ	0xFE2
  4060                           fsr1l	equ	0xFE1
  4061                           indf2	equ	0xFDF
  4062                           postinc2	equ	0xFDE
  4063                           postdec2	equ	0xFDD
  4064                           fsr2h	equ	0xFDA
  4065                           fsr2l	equ	0xFD9
  4066                           status	equ	0xFD8
  4067                           
  4068 ;; *************** function _update_eeprom_screen_state *****************
  4069 ;; Defined at:
  4070 ;;		line 189 in file "main.c"
  4071 ;; Parameters:    Size  Location     Type
  4072 ;;  num             2   44[COMRAM] int 
  4073 ;; Auto vars:     Size  Location     Type
  4074 ;;		None
  4075 ;; Return value:  Size  Location     Type
  4076 ;;                  1    wreg      void 
  4077 ;; Registers used:
  4078 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4079 ;; Tracked objects:
  4080 ;;		On entry : 0/0
  4081 ;;		On exit  : 0/0
  4082 ;;		Unchanged: 0/0
  4083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4084 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4086 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4087 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4088 ;;Total ram usage:        4 bytes
  4089 ;; Hardware stack levels used:    1
  4090 ;; Hardware stack levels required when called:    5
  4091 ;; This function calls:
  4092 ;;		_lcdClear
  4093 ;;		_lcdInst
  4094 ;;		_printf
  4095 ;; This function is called by:
  4096 ;;		_EEPROM
  4097 ;; This function uses a non-reentrant model
  4098 ;;
  4099                           
  4100                           	psect	text17
  4101  00E97C                     __ptext17:
  4102                           	opt stack 0
  4103  00E97C                     _update_eeprom_screen_state:
  4104                           	opt stack 23
  4105                           
  4106                           ;main.c: 190: lcdClear();
  4107                           
  4108                           ;incstack = 0
  4109  00E97C  ECF1  F072         	call	_lcdClear	;wreg free
  4110                           
  4111                           ;main.c: 191: switch(num){
  4112  00E980  D024               	goto	l2676
  4113  00E982                     l2666:
  4114                           
  4115                           ;main.c: 193: lcdClear();
  4116  00E982  ECF1  F072         	call	_lcdClear	;wreg free
  4117                           
  4118                           ;main.c: 194: printf("Recent Run");
  4119  00E986  0EEB               	movlw	low STR_12
  4120  00E988  6E1F               	movwf	printf@f,c
  4121  00E98A  0EFF               	movlw	high STR_12
  4122  00E98C  6E20               	movwf	printf@f+1,c
  4123  00E98E  EC20  F073         	call	_printf	;wreg free
  4124                           
  4125                           ;main.c: 195: break;
  4126  00E992  D030               	goto	l2678
  4127  00E994                     l2668:
  4128                           
  4129                           ;main.c: 197: lcdClear();
  4130  00E994  ECF1  F072         	call	_lcdClear	;wreg free
  4131                           
  4132                           ;main.c: 198: printf("   Past Run 2  ");
  4133  00E998  0E00               	movlw	low STR_13
  4134  00E99A  6E1F               	movwf	printf@f,c
  4135  00E99C  0EFF               	movlw	high STR_13
  4136  00E99E  6E20               	movwf	printf@f+1,c
  4137  00E9A0  EC20  F073         	call	_printf	;wreg free
  4138                           
  4139                           ;main.c: 199: break;
  4140  00E9A4  D027               	goto	l2678
  4141  00E9A6                     l2670:
  4142                           
  4143                           ;main.c: 201: lcdClear();
  4144  00E9A6  ECF1  F072         	call	_lcdClear	;wreg free
  4145                           
  4146                           ;main.c: 202: printf("   Past Run 3  ");
  4147  00E9AA  0E10               	movlw	low STR_14
  4148  00E9AC  6E1F               	movwf	printf@f,c
  4149  00E9AE  0EFF               	movlw	high STR_14
  4150  00E9B0  6E20               	movwf	printf@f+1,c
  4151  00E9B2  EC20  F073         	call	_printf	;wreg free
  4152                           
  4153                           ;main.c: 203: break;
  4154  00E9B6  D01E               	goto	l2678
  4155  00E9B8                     l2672:
  4156                           
  4157                           ;main.c: 205: lcdClear();
  4158  00E9B8  ECF1  F072         	call	_lcdClear	;wreg free
  4159                           
  4160                           ;main.c: 206: printf("   Past Run 4  ");
  4161  00E9BC  0E20               	movlw	low STR_15
  4162  00E9BE  6E1F               	movwf	printf@f,c
  4163  00E9C0  0EFF               	movlw	high STR_15
  4164  00E9C2  6E20               	movwf	printf@f+1,c
  4165  00E9C4  EC20  F073         	call	_printf	;wreg free
  4166                           
  4167                           ;main.c: 208: }
  4168                           
  4169                           ;main.c: 207: break;
  4170  00E9C8  D015               	goto	l2678
  4171  00E9CA                     l2676:
  4172  00E9CA  C02D  F02F         	movff	update_eeprom_screen_state@num,??_update_eeprom_screen_state
  4173  00E9CE  C02E  F030         	movff	update_eeprom_screen_state@num+1,??_update_eeprom_screen_state+1
  4174                           
  4175                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4176                           ; Switch size 1, requested type "space"
  4177                           ; Number of cases is 1, Range of values is 0 to 0
  4178                           ; switch strategies available:
  4179                           ; Name         Instructions Cycles
  4180                           ; simple_byte            4     3 (average)
  4181                           ;	Chosen strategy is simple_byte
  4182  00E9D2  5030               	movf	??_update_eeprom_screen_state+1,w,c
  4183  00E9D4  0A00               	xorlw	0	; case 0
  4184  00E9D6  A4D8               	btfss	status,2,c
  4185  00E9D8  D00D               	goto	l2678
  4186                           
  4187                           ; Switch size 1, requested type "space"
  4188                           ; Number of cases is 4, Range of values is 0 to 3
  4189                           ; switch strategies available:
  4190                           ; Name         Instructions Cycles
  4191                           ; simple_byte           13     7 (average)
  4192                           ;	Chosen strategy is simple_byte
  4193  00E9DA  502F               	movf	??_update_eeprom_screen_state,w,c
  4194  00E9DC  0A00               	xorlw	0	; case 0
  4195  00E9DE  B4D8               	btfsc	status,2,c
  4196  00E9E0  D7D0               	goto	l2666
  4197  00E9E2  0A01               	xorlw	1	; case 1
  4198  00E9E4  B4D8               	btfsc	status,2,c
  4199  00E9E6  D7D6               	goto	l2668
  4200  00E9E8  0A03               	xorlw	3	; case 2
  4201  00E9EA  B4D8               	btfsc	status,2,c
  4202  00E9EC  D7DC               	goto	l2670
  4203  00E9EE  0A01               	xorlw	1	; case 3
  4204  00E9F0  B4D8               	btfsc	status,2,c
  4205  00E9F2  D7E2               	goto	l2672
  4206  00E9F4                     l2678:
  4207                           
  4208                           ;main.c: 209: lcdInst(0b11000000);;
  4209  00E9F4  0EC0               	movlw	192
  4210  00E9F6  EC2F  F072         	call	_lcdInst
  4211                           
  4212                           ;main.c: 210: printf("<4  Nav: A/D  6>");
  4213  00E9FA  0EDE               	movlw	low STR_16
  4214  00E9FC  6E1F               	movwf	printf@f,c
  4215  00E9FE  0EFE               	movlw	high STR_16
  4216  00EA00  6E20               	movwf	printf@f+1,c
  4217  00EA02  EC20  F073         	call	_printf	;wreg free
  4218  00EA06  0012               	return		;funcret
  4219  00EA08                     __end_of_update_eeprom_screen_state:
  4220                           	opt stack 0
  4221                           tblptru	equ	0xFF8
  4222                           tblptrh	equ	0xFF7
  4223                           tblptrl	equ	0xFF6
  4224                           tablat	equ	0xFF5
  4225                           intcon	equ	0xFF2
  4226                           intcon2	equ	0xFF1
  4227                           postinc0	equ	0xFEE
  4228                           wreg	equ	0xFE8
  4229                           indf1	equ	0xFE7
  4230                           postinc1	equ	0xFE6
  4231                           postdec1	equ	0xFE5
  4232                           fsr1h	equ	0xFE2
  4233                           fsr1l	equ	0xFE1
  4234                           indf2	equ	0xFDF
  4235                           postinc2	equ	0xFDE
  4236                           postdec2	equ	0xFDD
  4237                           fsr2h	equ	0xFDA
  4238                           fsr2l	equ	0xFD9
  4239                           status	equ	0xFD8
  4240                           
  4241 ;; *************** function _past_run_access *****************
  4242 ;; Defined at:
  4243 ;;		line 467 in file "main.c"
  4244 ;; Parameters:    Size  Location     Type
  4245 ;;		None
  4246 ;; Auto vars:     Size  Location     Type
  4247 ;;  temp            1   48[COMRAM] unsigned char 
  4248 ;;  screen_state    2   49[COMRAM] int 
  4249 ;; Return value:  Size  Location     Type
  4250 ;;                  1    wreg      void 
  4251 ;; Registers used:
  4252 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4253 ;; Tracked objects:
  4254 ;;		On entry : 0/0
  4255 ;;		On exit  : 0/0
  4256 ;;		Unchanged: 0/0
  4257 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4259 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4261 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4262 ;;Total ram usage:        3 bytes
  4263 ;; Hardware stack levels used:    1
  4264 ;; Hardware stack levels required when called:    6
  4265 ;; This function calls:
  4266 ;;		_getPressedKeypadKey
  4267 ;;		_update_past_run_screen_state
  4268 ;; This function is called by:
  4269 ;;		_enterSelectedSubProgramFromMainProgram
  4270 ;;		_EEPROM
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274                           	psect	text18
  4275  00EA9A                     __ptext18:
  4276                           	opt stack 0
  4277  00EA9A                     _past_run_access:
  4278                           	opt stack 23
  4279                           
  4280                           ;main.c: 468: int screen_state = 6;
  4281                           
  4282                           ;incstack = 0
  4283  00EA9A  0E00               	movlw	0
  4284  00EA9C  6E33               	movwf	past_run_access@screen_state+1,c
  4285  00EA9E  0E06               	movlw	6
  4286  00EAA0  6E32               	movwf	past_run_access@screen_state,c
  4287                           
  4288                           ;main.c: 469: update_past_run_screen_state(screen_state);
  4289  00EAA2  C032  F02D         	movff	past_run_access@screen_state,update_past_run_screen_state@num
  4290  00EAA6  C033  F02E         	movff	past_run_access@screen_state+1,update_past_run_screen_state@num+1
  4291  00EAAA  ECF3  F077         	call	_update_past_run_screen_state	;wreg free
  4292  00EAAE                     l2614:
  4293                           
  4294                           ;main.c: 471: unsigned char temp = getPressedKeypadKey();
  4295  00EAAE  EC04  F075         	call	_getPressedKeypadKey	;wreg free
  4296  00EAB2  6E31               	movwf	past_run_access@temp,c
  4297                           
  4298                           ;main.c: 472: if (temp == keys[15]){
  4299  00EAB4  0E38               	movlw	low (_keys+15)
  4300  00EAB6  6EF6               	movwf	tblptrl,c
  4301  00EAB8  0EFE               	movlw	high (_keys+15)
  4302  00EABA  6EF7               	movwf	tblptrh,c
  4303  00EABC                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4304  00EABC  6AF8               	clrf	tblptru,c
  4305  00EABE                     	endif
  4306  00EABE                     	if	0	;tblptru may be non-zero
  4307  00EABE                     	endif
  4308  00EABE  0008               	tblrd		*
  4309  00EAC0  50F5               	movf	tablat,w,c
  4310  00EAC2  1831               	xorwf	past_run_access@temp,w,c
  4311  00EAC4  B4D8               	btfsc	status,2,c
  4312  00EAC6  0012               	return	
  4313                           
  4314                           ;main.c: 474: }else if (temp == keys[4]){
  4315                           
  4316                           ;main.c: 473: break;
  4317  00EAC8  0E2D               	movlw	low (_keys+4)
  4318  00EACA  6EF6               	movwf	tblptrl,c
  4319  00EACC  0EFE               	movlw	high (_keys+4)
  4320  00EACE  6EF7               	movwf	tblptrh,c
  4321  00EAD0                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4322  00EAD0  6AF8               	clrf	tblptru,c
  4323  00EAD2                     	endif
  4324  00EAD2                     	if	0	;tblptru may be non-zero
  4325  00EAD2                     	endif
  4326  00EAD2  0008               	tblrd		*
  4327  00EAD4  50F5               	movf	tablat,w,c
  4328  00EAD6  1831               	xorwf	past_run_access@temp,w,c
  4329  00EAD8  A4D8               	btfss	status,2,c
  4330  00EADA  D013               	goto	l2632
  4331                           
  4332                           ;main.c: 475: if (screen_state == 0){
  4333  00EADC  5032               	movf	past_run_access@screen_state,w,c
  4334  00EADE  1033               	iorwf	past_run_access@screen_state+1,w,c
  4335  00EAE0  A4D8               	btfss	status,2,c
  4336  00EAE2  D005               	goto	l2628
  4337                           
  4338                           ;main.c: 476: screen_state = 6;
  4339  00EAE4  0E00               	movlw	0
  4340  00EAE6  6E33               	movwf	past_run_access@screen_state+1,c
  4341  00EAE8  0E06               	movlw	6
  4342  00EAEA  6E32               	movwf	past_run_access@screen_state,c
  4343                           
  4344                           ;main.c: 477: }else{
  4345  00EAEC  D003               	goto	l2630
  4346  00EAEE                     l2628:
  4347                           
  4348                           ;main.c: 478: screen_state -= 1;
  4349  00EAEE  0632               	decf	past_run_access@screen_state,f,c
  4350  00EAF0  A0D8               	btfss	status,0,c
  4351  00EAF2  0633               	decf	past_run_access@screen_state+1,f,c
  4352  00EAF4                     l2630:
  4353                           
  4354                           ;main.c: 479: }
  4355                           ;main.c: 480: update_past_run_screen_state(screen_state);
  4356  00EAF4  C032  F02D         	movff	past_run_access@screen_state,update_past_run_screen_state@num
  4357  00EAF8  C033  F02E         	movff	past_run_access@screen_state+1,update_past_run_screen_state@num+1
  4358  00EAFC  ECF3  F077         	call	_update_past_run_screen_state	;wreg free
  4359                           
  4360                           ;main.c: 481: }else if (temp == keys[6]){
  4361  00EB00  D7D6               	goto	l2614
  4362  00EB02                     l2632:
  4363  00EB02  0E2F               	movlw	low (_keys+6)
  4364  00EB04  6EF6               	movwf	tblptrl,c
  4365  00EB06  0EFE               	movlw	high (_keys+6)
  4366  00EB08  6EF7               	movwf	tblptrh,c
  4367  00EB0A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4368  00EB0A  6AF8               	clrf	tblptru,c
  4369  00EB0C                     	endif
  4370  00EB0C                     	if	0	;tblptru may be non-zero
  4371  00EB0C                     	endif
  4372  00EB0C  0008               	tblrd		*
  4373  00EB0E  50F5               	movf	tablat,w,c
  4374  00EB10  1831               	xorwf	past_run_access@temp,w,c
  4375  00EB12  A4D8               	btfss	status,2,c
  4376  00EB14  D7CC               	goto	l2614
  4377                           
  4378                           ;main.c: 482: if (screen_state == 6){
  4379  00EB16  0E06               	movlw	6
  4380  00EB18  1832               	xorwf	past_run_access@screen_state,w,c
  4381  00EB1A  1033               	iorwf	past_run_access@screen_state+1,w,c
  4382  00EB1C  A4D8               	btfss	status,2,c
  4383  00EB1E  D005               	goto	l2638
  4384                           
  4385                           ;main.c: 483: screen_state = 0;
  4386  00EB20  0E00               	movlw	0
  4387  00EB22  6E33               	movwf	past_run_access@screen_state+1,c
  4388  00EB24  0E00               	movlw	0
  4389  00EB26  6E32               	movwf	past_run_access@screen_state,c
  4390                           
  4391                           ;main.c: 484: }else{
  4392  00EB28  D002               	goto	l2640
  4393  00EB2A                     l2638:
  4394                           
  4395                           ;main.c: 485: screen_state += 1;
  4396  00EB2A  4A32               	infsnz	past_run_access@screen_state,f,c
  4397  00EB2C  2A33               	incf	past_run_access@screen_state+1,f,c
  4398  00EB2E                     l2640:
  4399                           
  4400                           ;main.c: 486: }
  4401                           ;main.c: 487: update_past_run_screen_state(screen_state);
  4402  00EB2E  C032  F02D         	movff	past_run_access@screen_state,update_past_run_screen_state@num
  4403  00EB32  C033  F02E         	movff	past_run_access@screen_state+1,update_past_run_screen_state@num+1
  4404  00EB36  ECF3  F077         	call	_update_past_run_screen_state	;wreg free
  4405  00EB3A  D7B9               	goto	l2614
  4406  00EB3C                     __end_of_past_run_access:
  4407                           	opt stack 0
  4408                           tblptru	equ	0xFF8
  4409                           tblptrh	equ	0xFF7
  4410                           tblptrl	equ	0xFF6
  4411                           tablat	equ	0xFF5
  4412                           intcon	equ	0xFF2
  4413                           intcon2	equ	0xFF1
  4414                           postinc0	equ	0xFEE
  4415                           wreg	equ	0xFE8
  4416                           indf1	equ	0xFE7
  4417                           postinc1	equ	0xFE6
  4418                           postdec1	equ	0xFE5
  4419                           fsr1h	equ	0xFE2
  4420                           fsr1l	equ	0xFE1
  4421                           indf2	equ	0xFDF
  4422                           postinc2	equ	0xFDE
  4423                           postdec2	equ	0xFDD
  4424                           fsr2h	equ	0xFDA
  4425                           fsr2l	equ	0xFD9
  4426                           status	equ	0xFD8
  4427                           
  4428 ;; *************** function _update_past_run_screen_state *****************
  4429 ;; Defined at:
  4430 ;;		line 214 in file "main.c"
  4431 ;; Parameters:    Size  Location     Type
  4432 ;;  num             2   44[COMRAM] int 
  4433 ;; Auto vars:     Size  Location     Type
  4434 ;;		None
  4435 ;; Return value:  Size  Location     Type
  4436 ;;                  1    wreg      void 
  4437 ;; Registers used:
  4438 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4439 ;; Tracked objects:
  4440 ;;		On entry : 0/0
  4441 ;;		On exit  : 0/0
  4442 ;;		Unchanged: 0/0
  4443 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4444 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4445 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4446 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4447 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4448 ;;Total ram usage:        4 bytes
  4449 ;; Hardware stack levels used:    1
  4450 ;; Hardware stack levels required when called:    5
  4451 ;; This function calls:
  4452 ;;		_lcdClear
  4453 ;;		_lcdInst
  4454 ;;		_printf
  4455 ;; This function is called by:
  4456 ;;		_past_run_access
  4457 ;; This function uses a non-reentrant model
  4458 ;;
  4459                           
  4460                           	psect	text19
  4461  00EFE6                     __ptext19:
  4462                           	opt stack 0
  4463  00EFE6                     _update_past_run_screen_state:
  4464                           	opt stack 23
  4465                           
  4466                           ;main.c: 215: lcdClear();
  4467                           
  4468                           ;incstack = 0
  4469  00EFE6  ECF1  F072         	call	_lcdClear	;wreg free
  4470                           
  4471                           ;main.c: 216: switch(num){
  4472  00EFEA  D06C               	goto	l2530
  4473  00EFEC                     l2514:
  4474                           
  4475                           ;main.c: 218: lcdClear();
  4476  00EFEC  ECF1  F072         	call	_lcdClear	;wreg free
  4477                           
  4478                           ;main.c: 219: printf("Time taken: %is", runInfo[0]);
  4479  00EFF0  0E60               	movlw	low STR_17
  4480  00EFF2  6E1F               	movwf	printf@f,c
  4481  00EFF4  0EFF               	movlw	high STR_17
  4482  00EFF6  6E20               	movwf	printf@f+1,c
  4483  00EFF8  C06A  F021         	movff	_runInfo,?_printf+2
  4484  00EFFC  C06B  F022         	movff	_runInfo+1,?_printf+3
  4485  00F000  EC20  F073         	call	_printf	;wreg free
  4486                           
  4487                           ;main.c: 220: break;
  4488  00F004  D07D               	goto	l2532
  4489  00F006                     l2516:
  4490                           
  4491                           ;main.c: 222: lcdClear();
  4492  00F006  ECF1  F072         	call	_lcdClear	;wreg free
  4493                           
  4494                           ;main.c: 223: printf("# Bottles: %i", runInfo[1]);
  4495  00F00A  0EB7               	movlw	low STR_18
  4496  00F00C  6E1F               	movwf	printf@f,c
  4497  00F00E  0EFF               	movlw	high STR_18
  4498  00F010  6E20               	movwf	printf@f+1,c
  4499  00F012  C06C  F021         	movff	_runInfo+2,?_printf+2
  4500  00F016  C06D  F022         	movff	_runInfo+3,?_printf+3
  4501  00F01A  EC20  F073         	call	_printf	;wreg free
  4502                           
  4503                           ;main.c: 224: break;
  4504  00F01E  D070               	goto	l2532
  4505  00F020                     l2518:
  4506                           
  4507                           ;main.c: 226: lcdClear();
  4508  00F020  ECF1  F072         	call	_lcdClear	;wreg free
  4509                           
  4510                           ;main.c: 227: printf("Yop w/Cap: %i", runInfo[2]);
  4511  00F024  0EA9               	movlw	low STR_19
  4512  00F026  6E1F               	movwf	printf@f,c
  4513  00F028  0EFF               	movlw	high STR_19
  4514  00F02A  6E20               	movwf	printf@f+1,c
  4515  00F02C  C06E  F021         	movff	_runInfo+4,?_printf+2
  4516  00F030  C06F  F022         	movff	_runInfo+5,?_printf+3
  4517  00F034  EC20  F073         	call	_printf	;wreg free
  4518                           
  4519                           ;main.c: 228: break;
  4520  00F038  D063               	goto	l2532
  4521  00F03A                     l2520:
  4522                           
  4523                           ;main.c: 230: lcdClear();
  4524  00F03A  ECF1  F072         	call	_lcdClear	;wreg free
  4525                           
  4526                           ;main.c: 231: printf("Yop w/o Cap: %i", runInfo[3]);
  4527  00F03E  0E50               	movlw	low STR_20
  4528  00F040  6E1F               	movwf	printf@f,c
  4529  00F042  0EFF               	movlw	high STR_20
  4530  00F044  6E20               	movwf	printf@f+1,c
  4531  00F046  C070  F021         	movff	_runInfo+6,?_printf+2
  4532  00F04A  C071  F022         	movff	_runInfo+7,?_printf+3
  4533  00F04E  EC20  F073         	call	_printf	;wreg free
  4534                           
  4535                           ;main.c: 232: break;
  4536  00F052  D056               	goto	l2532
  4537  00F054                     l2522:
  4538                           
  4539                           ;main.c: 234: lcdClear();
  4540  00F054  ECF1  F072         	call	_lcdClear	;wreg free
  4541                           
  4542                           ;main.c: 235: printf("Eska w/ Cap: %i", runInfo[4]);
  4543  00F058  0E40               	movlw	low STR_21
  4544  00F05A  6E1F               	movwf	printf@f,c
  4545  00F05C  0EFF               	movlw	high STR_21
  4546  00F05E  6E20               	movwf	printf@f+1,c
  4547  00F060  C072  F021         	movff	_runInfo+8,?_printf+2
  4548  00F064  C073  F022         	movff	_runInfo+9,?_printf+3
  4549  00F068  EC20  F073         	call	_printf	;wreg free
  4550                           
  4551                           ;main.c: 236: break;
  4552  00F06C  D049               	goto	l2532
  4553  00F06E                     l2524:
  4554                           
  4555                           ;main.c: 238: lcdClear();
  4556  00F06E  ECF1  F072         	call	_lcdClear	;wreg free
  4557                           
  4558                           ;main.c: 239: printf("Eska w/o Cap: %i", runInfo[5]);
  4559  00F072  0EEF               	movlw	low STR_22
  4560  00F074  6E1F               	movwf	printf@f,c
  4561  00F076  0EFE               	movlw	high STR_22
  4562  00F078  6E20               	movwf	printf@f+1,c
  4563  00F07A  C074  F021         	movff	_runInfo+10,?_printf+2
  4564  00F07E  C075  F022         	movff	_runInfo+11,?_printf+3
  4565  00F082  EC20  F073         	call	_printf	;wreg free
  4566                           
  4567                           ;main.c: 240: break;
  4568  00F086  D03C               	goto	l2532
  4569  00F088                     l2526:
  4570                           
  4571                           ;main.c: 242: lcdClear();
  4572  00F088  ECF1  F072         	call	_lcdClear	;wreg free
  4573                           
  4574                           ;main.c: 243: printf("%02x/%02x   ", lastRunTime[5], lastRunTime[4]);
  4575  00F08C  0ED2               	movlw	low STR_1
  4576  00F08E  6E1F               	movwf	printf@f,c
  4577  00F090  0EFF               	movlw	high STR_1
  4578  00F092  6E20               	movwf	printf@f+1,c
  4579  00F094  C05F  F021         	movff	_lastRunTime+5,?_printf+2
  4580  00F098  6A22               	clrf	?_printf+3,c
  4581  00F09A  C05E  F023         	movff	_lastRunTime+4,?_printf+4
  4582  00F09E  6A24               	clrf	?_printf+5,c
  4583  00F0A0  EC20  F073         	call	_printf	;wreg free
  4584                           
  4585                           ;main.c: 244: printf("%02x:%02x:%02x", lastRunTime[2], lastRunTime[1], lastRunTime[0]);
  4586  00F0A4  0E70               	movlw	low STR_2
  4587  00F0A6  6E1F               	movwf	printf@f,c
  4588  00F0A8  0EFF               	movlw	high STR_2
  4589  00F0AA  6E20               	movwf	printf@f+1,c
  4590  00F0AC  C05C  F021         	movff	_lastRunTime+2,?_printf+2
  4591  00F0B0  6A22               	clrf	?_printf+3,c
  4592  00F0B2  C05B  F023         	movff	_lastRunTime+1,?_printf+4
  4593  00F0B6  6A24               	clrf	?_printf+5,c
  4594  00F0B8  C05A  F025         	movff	_lastRunTime,?_printf+6
  4595  00F0BC  6A26               	clrf	?_printf+7,c
  4596  00F0BE  EC20  F073         	call	_printf	;wreg free
  4597                           
  4598                           ;main.c: 246: }
  4599                           
  4600                           ;main.c: 245: break;
  4601  00F0C2  D01E               	goto	l2532
  4602  00F0C4                     l2530:
  4603  00F0C4  C02D  F02F         	movff	update_past_run_screen_state@num,??_update_past_run_screen_state
  4604  00F0C8  C02E  F030         	movff	update_past_run_screen_state@num+1,??_update_past_run_screen_state+1
  4605                           
  4606                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4607                           ; Switch size 1, requested type "space"
  4608                           ; Number of cases is 1, Range of values is 0 to 0
  4609                           ; switch strategies available:
  4610                           ; Name         Instructions Cycles
  4611                           ; simple_byte            4     3 (average)
  4612                           ;	Chosen strategy is simple_byte
  4613  00F0CC  5030               	movf	??_update_past_run_screen_state+1,w,c
  4614  00F0CE  0A00               	xorlw	0	; case 0
  4615  00F0D0  A4D8               	btfss	status,2,c
  4616  00F0D2  D016               	goto	l2532
  4617                           
  4618                           ; Switch size 1, requested type "space"
  4619                           ; Number of cases is 7, Range of values is 0 to 6
  4620                           ; switch strategies available:
  4621                           ; Name         Instructions Cycles
  4622                           ; simple_byte           22    12 (average)
  4623                           ;	Chosen strategy is simple_byte
  4624  00F0D4  502F               	movf	??_update_past_run_screen_state,w,c
  4625  00F0D6  0A00               	xorlw	0	; case 0
  4626  00F0D8  B4D8               	btfsc	status,2,c
  4627  00F0DA  D788               	goto	l2514
  4628  00F0DC  0A01               	xorlw	1	; case 1
  4629  00F0DE  B4D8               	btfsc	status,2,c
  4630  00F0E0  D792               	goto	l2516
  4631  00F0E2  0A03               	xorlw	3	; case 2
  4632  00F0E4  B4D8               	btfsc	status,2,c
  4633  00F0E6  D79C               	goto	l2518
  4634  00F0E8  0A01               	xorlw	1	; case 3
  4635  00F0EA  B4D8               	btfsc	status,2,c
  4636  00F0EC  D7A6               	goto	l2520
  4637  00F0EE  0A07               	xorlw	7	; case 4
  4638  00F0F0  B4D8               	btfsc	status,2,c
  4639  00F0F2  D7B0               	goto	l2522
  4640  00F0F4  0A01               	xorlw	1	; case 5
  4641  00F0F6  B4D8               	btfsc	status,2,c
  4642  00F0F8  D7BA               	goto	l2524
  4643  00F0FA  0A03               	xorlw	3	; case 6
  4644  00F0FC  B4D8               	btfsc	status,2,c
  4645  00F0FE  D7C4               	goto	l2526
  4646  00F100                     l2532:
  4647                           
  4648                           ;main.c: 247: lcdInst(0b11000000);;
  4649  00F100  0EC0               	movlw	192
  4650  00F102  EC2F  F072         	call	_lcdInst
  4651                           
  4652                           ;main.c: 248: printf("<4  Back:  D  6> ");
  4653  00F106  0E66               	movlw	low STR_25
  4654  00F108  6E1F               	movwf	printf@f,c
  4655  00F10A  0EFE               	movlw	high STR_25
  4656  00F10C  6E20               	movwf	printf@f+1,c
  4657  00F10E  EC20  F073         	call	_printf	;wreg free
  4658  00F112  0012               	return		;funcret
  4659  00F114                     __end_of_update_past_run_screen_state:
  4660                           	opt stack 0
  4661                           tblptru	equ	0xFF8
  4662                           tblptrh	equ	0xFF7
  4663                           tblptrl	equ	0xFF6
  4664                           tablat	equ	0xFF5
  4665                           intcon	equ	0xFF2
  4666                           intcon2	equ	0xFF1
  4667                           postinc0	equ	0xFEE
  4668                           wreg	equ	0xFE8
  4669                           indf1	equ	0xFE7
  4670                           postinc1	equ	0xFE6
  4671                           postdec1	equ	0xFE5
  4672                           fsr1h	equ	0xFE2
  4673                           fsr1l	equ	0xFE1
  4674                           indf2	equ	0xFDF
  4675                           postinc2	equ	0xFDE
  4676                           postdec2	equ	0xFDD
  4677                           fsr2h	equ	0xFDA
  4678                           fsr2l	equ	0xFD9
  4679                           status	equ	0xFD8
  4680                           
  4681 ;; *************** function _getPressedKeypadKey *****************
  4682 ;; Defined at:
  4683 ;;		line 80 in file "main.c"
  4684 ;; Parameters:    Size  Location     Type
  4685 ;;		None
  4686 ;; Auto vars:     Size  Location     Type
  4687 ;;  keypress        1   46[COMRAM] unsigned char 
  4688 ;; Return value:  Size  Location     Type
  4689 ;;                  1    wreg      unsigned char 
  4690 ;; Registers used:
  4691 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4692 ;; Tracked objects:
  4693 ;;		On entry : 0/0
  4694 ;;		On exit  : 0/0
  4695 ;;		Unchanged: 0/0
  4696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4698 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4699 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4700 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4701 ;;Total ram usage:        3 bytes
  4702 ;; Hardware stack levels used:    1
  4703 ;; Hardware stack levels required when called:    4
  4704 ;; This function calls:
  4705 ;;		_lcdInst
  4706 ;;		_printf
  4707 ;;		_updateCurrentTime
  4708 ;; This function is called by:
  4709 ;;		_main
  4710 ;;		_operation
  4711 ;;		_EEPROM
  4712 ;;		_past_run_access
  4713 ;; This function uses a non-reentrant model
  4714 ;;
  4715                           
  4716                           	psect	text20
  4717  00EA08                     __ptext20:
  4718                           	opt stack 0
  4719  00EA08                     _getPressedKeypadKey:
  4720                           	opt stack 26
  4721                           
  4722                           ;main.c: 81: while(PORTBbits.RB1 == 0){
  4723                           
  4724                           ;incstack = 0
  4725  00EA08  D030               	goto	l2468
  4726  00EA0A                     l2456:
  4727                           
  4728                           ;main.c: 82: if (initScreenState == 1){
  4729  00EA0A  0468               	decf	_initScreenState,w,c
  4730  00EA0C  1069               	iorwf	_initScreenState+1,w,c
  4731  00EA0E  A4D8               	btfss	status,2,c
  4732  00EA10  D02C               	goto	l2468
  4733                           
  4734                           ;main.c: 83: updateCurrentTime();
  4735  00EA12  EC4A  F074         	call	_updateCurrentTime	;wreg free
  4736                           
  4737                           ;main.c: 84: lcdInst(0b10000000);
  4738  00EA16  0E80               	movlw	128
  4739  00EA18  EC2F  F072         	call	_lcdInst
  4740                           
  4741                           ;main.c: 85: printf("%02x/%02x   ", time[5],time[4]);
  4742  00EA1C  0ED2               	movlw	low STR_1
  4743  00EA1E  6E1F               	movwf	printf@f,c
  4744  00EA20  0EFF               	movlw	high STR_1
  4745  00EA22  6E20               	movwf	printf@f+1,c
  4746  00EA24  C066  F021         	movff	_time+5,?_printf+2
  4747  00EA28  6A22               	clrf	?_printf+3,c
  4748  00EA2A  C065  F023         	movff	_time+4,?_printf+4
  4749  00EA2E  6A24               	clrf	?_printf+5,c
  4750  00EA30  EC20  F073         	call	_printf	;wreg free
  4751                           
  4752                           ;main.c: 86: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  4753  00EA34  0E70               	movlw	low STR_2
  4754  00EA36  6E1F               	movwf	printf@f,c
  4755  00EA38  0EFF               	movlw	high STR_2
  4756  00EA3A  6E20               	movwf	printf@f+1,c
  4757  00EA3C  C063  F021         	movff	_time+2,?_printf+2
  4758  00EA40  6A22               	clrf	?_printf+3,c
  4759  00EA42  C062  F023         	movff	_time+1,?_printf+4
  4760  00EA46  6A24               	clrf	?_printf+5,c
  4761  00EA48  C061  F025         	movff	_time,?_printf+6
  4762  00EA4C  6A26               	clrf	?_printf+7,c
  4763  00EA4E  EC20  F073         	call	_printf	;wreg free
  4764                           
  4765                           ;main.c: 87: _delay((unsigned long)((150)*(8000000/4000.0)));
  4766  00EA52  0E02               	movlw	2
  4767  00EA54  6E2E               	movwf	(??_getPressedKeypadKey+1)& (0+255),c
  4768  00EA56  0E86               	movlw	134
  4769  00EA58  6E2D               	movwf	??_getPressedKeypadKey& (0+255),c
  4770  00EA5A  0E99               	movlw	153
  4771  00EA5C                     u2717:
  4772  00EA5C  2EE8               	decfsz	wreg,f,c
  4773  00EA5E  D7FE               	bra	u2717
  4774  00EA60  2E2D               	decfsz	??_getPressedKeypadKey& (0+255),f,c
  4775  00EA62  D7FC               	bra	u2717
  4776  00EA64  2E2E               	decfsz	(??_getPressedKeypadKey+1)& (0+255),f,c
  4777  00EA66  D7FA               	bra	u2717
  4778  00EA68  F000               	nop	
  4779  00EA6A                     l2468:
  4780  00EA6A  A281               	btfss	3969,1,c	;volatile
  4781  00EA6C  D7CE               	goto	l2456
  4782                           
  4783                           ;main.c: 88: }
  4784                           ;main.c: 89: }
  4785                           ;main.c: 90: unsigned char keypress = (PORTB & 0xF0)>>4;
  4786  00EA6E  3881               	swapf	3969,w,c	;volatile
  4787  00EA70  0B0F               	andlw	15
  4788  00EA72  0B0F               	andlw	15
  4789  00EA74  6E2F               	movwf	getPressedKeypadKey@keypress,c
  4790  00EA76                     l153:
  4791  00EA76  B281               	btfsc	3969,1,c	;volatile
  4792  00EA78  D7FE               	goto	l153
  4793                           
  4794                           ;main.c: 92: }
  4795                           ;main.c: 93: __nop();
  4796  00EA7A  F000               	nop	
  4797                           
  4798                           ;main.c: 94: __nop();
  4799  00EA7C  F000               	nop	
  4800                           
  4801                           ;main.c: 95: return keys[keypress];
  4802  00EA7E  502F               	movf	getPressedKeypadKey@keypress,w,c
  4803  00EA80  0D01               	mullw	1
  4804  00EA82  0E29               	movlw	low _keys
  4805  00EA84  24F3               	addwf	prodl,w,c
  4806  00EA86  6EF6               	movwf	tblptrl,c
  4807  00EA88  0EFE               	movlw	high _keys
  4808  00EA8A  20F4               	addwfc	prodh,w,c
  4809  00EA8C  6EF7               	movwf	tblptrh,c
  4810  00EA8E                     	if	1	;There are 3 active tblptr bytes
  4811  00EA8E  6AF8               	clrf	tblptru,c
  4812  00EA90  0E00               	movlw	low (__mediumconst shr (0+16))
  4813  00EA92  22F8               	addwfc	tblptru,f,c
  4814  00EA94                     	endif
  4815  00EA94  0008               	tblrd		*
  4816  00EA96  50F5               	movf	tablat,w,c
  4817  00EA98  0012               	return	
  4818  00EA9A                     __end_of_getPressedKeypadKey:
  4819                           	opt stack 0
  4820                           tblptru	equ	0xFF8
  4821                           tblptrh	equ	0xFF7
  4822                           tblptrl	equ	0xFF6
  4823                           tablat	equ	0xFF5
  4824                           prodh	equ	0xFF4
  4825                           prodl	equ	0xFF3
  4826                           intcon	equ	0xFF2
  4827                           intcon2	equ	0xFF1
  4828                           postinc0	equ	0xFEE
  4829                           wreg	equ	0xFE8
  4830                           indf1	equ	0xFE7
  4831                           postinc1	equ	0xFE6
  4832                           postdec1	equ	0xFE5
  4833                           fsr1h	equ	0xFE2
  4834                           fsr1l	equ	0xFE1
  4835                           indf2	equ	0xFDF
  4836                           postinc2	equ	0xFDE
  4837                           postdec2	equ	0xFDD
  4838                           fsr2h	equ	0xFDA
  4839                           fsr2l	equ	0xFD9
  4840                           status	equ	0xFD8
  4841                           
  4842 ;; *************** function _getEEPROM *****************
  4843 ;; Defined at:
  4844 ;;		line 456 in file "main.c"
  4845 ;; Parameters:    Size  Location     Type
  4846 ;;  num             2    8[COMRAM] int 
  4847 ;; Auto vars:     Size  Location     Type
  4848 ;;  i               2   14[COMRAM] int 
  4849 ;; Return value:  Size  Location     Type
  4850 ;;                  1    wreg      void 
  4851 ;; Registers used:
  4852 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4853 ;; Tracked objects:
  4854 ;;		On entry : 0/0
  4855 ;;		On exit  : 0/0
  4856 ;;		Unchanged: 0/0
  4857 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4858 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4859 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4860 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4861 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4862 ;;Total ram usage:        8 bytes
  4863 ;; Hardware stack levels used:    1
  4864 ;; Hardware stack levels required when called:    1
  4865 ;; This function calls:
  4866 ;;		_Eeprom_ReadByte
  4867 ;;		___wmul
  4868 ;; This function is called by:
  4869 ;;		_EEPROM
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           	psect	text21
  4874  00EEF8                     __ptext21:
  4875                           	opt stack 0
  4876  00EEF8                     _getEEPROM:
  4877                           	opt stack 27
  4878                           
  4879                           ;main.c: 457: int i;
  4880                           ;main.c: 458: for (i = 0; i<6; i++){
  4881                           
  4882                           ;incstack = 0
  4883  00EEF8  0E00               	movlw	0
  4884  00EEFA  6E10               	movwf	getEEPROM@i+1,c
  4885  00EEFC  0E00               	movlw	0
  4886  00EEFE  6E0F               	movwf	getEEPROM@i,c
  4887  00EF00                     l2806:
  4888  00EF00  BE10               	btfsc	getEEPROM@i+1,7,c
  4889  00EF02  D006               	goto	l2810
  4890  00EF04  5010               	movf	getEEPROM@i+1,w,c
  4891  00EF06  E136               	bnz	l2816
  4892  00EF08  0E06               	movlw	6
  4893  00EF0A  5C0F               	subwf	getEEPROM@i,w,c
  4894  00EF0C  B0D8               	btfsc	status,0,c
  4895  00EF0E  D032               	goto	l2816
  4896  00EF10                     l2810:
  4897                           
  4898                           ;main.c: 459: runInfo[i] = Eeprom_ReadByte(12*i+num*200);
  4899  00EF10  C00F  F001         	movff	getEEPROM@i,___wmul@multiplier
  4900  00EF14  C010  F002         	movff	getEEPROM@i+1,___wmul@multiplier+1
  4901  00EF18  0E00               	movlw	0
  4902  00EF1A  6E04               	movwf	___wmul@multiplicand+1,c
  4903  00EF1C  0E0C               	movlw	12
  4904  00EF1E  6E03               	movwf	___wmul@multiplicand,c
  4905  00EF20  EC7D  F072         	call	___wmul	;wreg free
  4906  00EF24  C001  F00B         	movff	?___wmul,??_getEEPROM
  4907  00EF28  C002  F00C         	movff	?___wmul+1,??_getEEPROM+1
  4908  00EF2C  C009  F001         	movff	getEEPROM@num,___wmul@multiplier
  4909  00EF30  C00A  F002         	movff	getEEPROM@num+1,___wmul@multiplier+1
  4910  00EF34  0E00               	movlw	0
  4911  00EF36  6E04               	movwf	___wmul@multiplicand+1,c
  4912  00EF38  0EC8               	movlw	200
  4913  00EF3A  6E03               	movwf	___wmul@multiplicand,c
  4914  00EF3C  EC7D  F072         	call	___wmul	;wreg free
  4915  00EF40  5001               	movf	?___wmul,w,c
  4916  00EF42  240B               	addwf	??_getEEPROM,w,c
  4917  00EF44  6E07               	movwf	Eeprom_ReadByte@address,c
  4918  00EF46  5002               	movf	?___wmul+1,w,c
  4919  00EF48  200C               	addwfc	??_getEEPROM+1,w,c
  4920  00EF4A  6E08               	movwf	Eeprom_ReadByte@address+1,c
  4921  00EF4C  EC53  F072         	call	_Eeprom_ReadByte	;wreg free
  4922  00EF50  6E0D               	movwf	(??_getEEPROM+2)& (0+255),c
  4923  00EF52  6A0E               	clrf	(??_getEEPROM+3)& (0+255),c
  4924  00EF54  90D8               	bcf	status,0,c
  4925  00EF56  340F               	rlcf	getEEPROM@i,w,c
  4926  00EF58  6ED9               	movwf	fsr2l,c
  4927  00EF5A  3410               	rlcf	getEEPROM@i+1,w,c
  4928  00EF5C  6EDA               	movwf	fsr2h,c
  4929  00EF5E  0E6A               	movlw	low _runInfo
  4930  00EF60  26D9               	addwf	fsr2l,f,c
  4931  00EF62  0E00               	movlw	high _runInfo
  4932  00EF64  22DA               	addwfc	fsr2h,f,c
  4933  00EF66  C00D  FFDE         	movff	??_getEEPROM+2,postinc2
  4934  00EF6A  C00E  FFDD         	movff	??_getEEPROM+3,postdec2
  4935  00EF6E  4A0F               	infsnz	getEEPROM@i,f,c
  4936  00EF70  2A10               	incf	getEEPROM@i+1,f,c
  4937  00EF72  D7C6               	goto	l2806
  4938  00EF74                     l2816:
  4939                           
  4940                           ;main.c: 460: }
  4941                           ;main.c: 461: for (i = 0; i<7; i++){
  4942  00EF74  0E00               	movlw	0
  4943  00EF76  6E10               	movwf	getEEPROM@i+1,c
  4944  00EF78  0E00               	movlw	0
  4945  00EF7A  6E0F               	movwf	getEEPROM@i,c
  4946  00EF7C                     l2818:
  4947  00EF7C  BE10               	btfsc	getEEPROM@i+1,7,c
  4948  00EF7E  D006               	goto	l2822
  4949  00EF80  5010               	movf	getEEPROM@i+1,w,c
  4950  00EF82  E130               	bnz	l307
  4951  00EF84  0E07               	movlw	7
  4952  00EF86  5C0F               	subwf	getEEPROM@i,w,c
  4953  00EF88  B0D8               	btfsc	status,0,c
  4954  00EF8A  0012               	return	
  4955  00EF8C                     l2822:
  4956                           
  4957                           ;main.c: 462: lastRunTime[i] = Eeprom_ReadByte(12*(6+i)+num*200);
  4958  00EF8C  0E5A               	movlw	low _lastRunTime
  4959  00EF8E  240F               	addwf	getEEPROM@i,w,c
  4960  00EF90  6ED9               	movwf	fsr2l,c
  4961  00EF92  0E00               	movlw	high _lastRunTime
  4962  00EF94  2010               	addwfc	getEEPROM@i+1,w,c
  4963  00EF96  6EDA               	movwf	fsr2h,c
  4964  00EF98  0E06               	movlw	6
  4965  00EF9A  240F               	addwf	getEEPROM@i,w,c
  4966  00EF9C  6E01               	movwf	___wmul@multiplier,c
  4967  00EF9E  0E00               	movlw	0
  4968  00EFA0  2010               	addwfc	getEEPROM@i+1,w,c
  4969  00EFA2  6E02               	movwf	___wmul@multiplier+1,c
  4970  00EFA4  0E00               	movlw	0
  4971  00EFA6  6E04               	movwf	___wmul@multiplicand+1,c
  4972  00EFA8  0E0C               	movlw	12
  4973  00EFAA  6E03               	movwf	___wmul@multiplicand,c
  4974  00EFAC  EC7D  F072         	call	___wmul	;wreg free
  4975  00EFB0  C001  F00B         	movff	?___wmul,??_getEEPROM
  4976  00EFB4  C002  F00C         	movff	?___wmul+1,??_getEEPROM+1
  4977  00EFB8  C009  F001         	movff	getEEPROM@num,___wmul@multiplier
  4978  00EFBC  C00A  F002         	movff	getEEPROM@num+1,___wmul@multiplier+1
  4979  00EFC0  0E00               	movlw	0
  4980  00EFC2  6E04               	movwf	___wmul@multiplicand+1,c
  4981  00EFC4  0EC8               	movlw	200
  4982  00EFC6  6E03               	movwf	___wmul@multiplicand,c
  4983  00EFC8  EC7D  F072         	call	___wmul	;wreg free
  4984  00EFCC  5001               	movf	?___wmul,w,c
  4985  00EFCE  240B               	addwf	??_getEEPROM,w,c
  4986  00EFD0  6E07               	movwf	Eeprom_ReadByte@address,c
  4987  00EFD2  5002               	movf	?___wmul+1,w,c
  4988  00EFD4  200C               	addwfc	??_getEEPROM+1,w,c
  4989  00EFD6  6E08               	movwf	Eeprom_ReadByte@address+1,c
  4990  00EFD8  EC53  F072         	call	_Eeprom_ReadByte	;wreg free
  4991  00EFDC  6EDF               	movwf	indf2,c
  4992  00EFDE  4A0F               	infsnz	getEEPROM@i,f,c
  4993  00EFE0  2A10               	incf	getEEPROM@i+1,f,c
  4994  00EFE2  D7CC               	goto	l2818
  4995  00EFE4                     l307:
  4996  00EFE4  0012               	return		;funcret
  4997  00EFE6                     __end_of_getEEPROM:
  4998                           	opt stack 0
  4999                           tblptru	equ	0xFF8
  5000                           tblptrh	equ	0xFF7
  5001                           tblptrl	equ	0xFF6
  5002                           tablat	equ	0xFF5
  5003                           prodh	equ	0xFF4
  5004                           prodl	equ	0xFF3
  5005                           intcon	equ	0xFF2
  5006                           intcon2	equ	0xFF1
  5007                           postinc0	equ	0xFEE
  5008                           wreg	equ	0xFE8
  5009                           indf1	equ	0xFE7
  5010                           postinc1	equ	0xFE6
  5011                           postdec1	equ	0xFE5
  5012                           fsr1h	equ	0xFE2
  5013                           fsr1l	equ	0xFE1
  5014                           indf2	equ	0xFDF
  5015                           postinc2	equ	0xFDE
  5016                           postdec2	equ	0xFDD
  5017                           fsr2h	equ	0xFDA
  5018                           fsr2l	equ	0xFD9
  5019                           status	equ	0xFD8
  5020                           
  5021 ;; *************** function _Eeprom_ReadByte *****************
  5022 ;; Defined at:
  5023 ;;		line 497 in file "main.c"
  5024 ;; Parameters:    Size  Location     Type
  5025 ;;  address         2    6[COMRAM] unsigned int 
  5026 ;; Auto vars:     Size  Location     Type
  5027 ;;		None
  5028 ;; Return value:  Size  Location     Type
  5029 ;;                  1    wreg      unsigned char 
  5030 ;; Registers used:
  5031 ;;		wreg, status,2
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5037 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5040 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5041 ;;Total ram usage:        2 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; This function calls:
  5044 ;;		Nothing
  5045 ;; This function is called by:
  5046 ;;		_saveEEPROM
  5047 ;;		_getEEPROM
  5048 ;; This function uses a non-reentrant model
  5049 ;;
  5050                           
  5051                           	psect	text22
  5052  00E4A6                     __ptext22:
  5053                           	opt stack 0
  5054  00E4A6                     _Eeprom_ReadByte:
  5055                           	opt stack 27
  5056                           
  5057                           ;main.c: 501: EEADRH = (uint8_t)(address >> 8);
  5058                           
  5059                           ;incstack = 0
  5060  00E4A6  5008               	movf	Eeprom_ReadByte@address+1,w,c
  5061  00E4A8  6EAA               	movwf	4010,c	;volatile
  5062                           
  5063                           ;main.c: 502: EEADR = (uint8_t)address;
  5064  00E4AA  C007  FFA9         	movff	Eeprom_ReadByte@address,4009	;volatile
  5065                           
  5066                           ;main.c: 504: EECON1bits.EEPGD = 0;
  5067  00E4AE  9EA6               	bcf	4006,7,c	;volatile
  5068                           
  5069                           ;main.c: 505: EECON1bits.CFGS = 0;
  5070  00E4B0  9CA6               	bcf	4006,6,c	;volatile
  5071                           
  5072                           ;main.c: 506: EECON1bits.RD = 1;
  5073  00E4B2  80A6               	bsf	4006,0,c	;volatile
  5074  00E4B4                     l325:
  5075  00E4B4  B0A6               	btfsc	4006,0,c	;volatile
  5076  00E4B6  D7FE               	goto	l325
  5077                           
  5078                           ;main.c: 512: return EEDATA;
  5079  00E4B8  50A8               	movf	4008,w,c	;volatile
  5080  00E4BA  0012               	return	
  5081  00E4BC                     __end_of_Eeprom_ReadByte:
  5082                           	opt stack 0
  5083                           tblptru	equ	0xFF8
  5084                           tblptrh	equ	0xFF7
  5085                           tblptrl	equ	0xFF6
  5086                           tablat	equ	0xFF5
  5087                           prodh	equ	0xFF4
  5088                           prodl	equ	0xFF3
  5089                           intcon	equ	0xFF2
  5090                           intcon2	equ	0xFF1
  5091                           postinc0	equ	0xFEE
  5092                           wreg	equ	0xFE8
  5093                           indf1	equ	0xFE7
  5094                           postinc1	equ	0xFE6
  5095                           postdec1	equ	0xFE5
  5096                           fsr1h	equ	0xFE2
  5097                           fsr1l	equ	0xFE1
  5098                           indf2	equ	0xFDF
  5099                           postinc2	equ	0xFDE
  5100                           postdec2	equ	0xFDD
  5101                           fsr2h	equ	0xFDA
  5102                           fsr2l	equ	0xFD9
  5103                           status	equ	0xFD8
  5104                           
  5105 ;; *************** function _cycleMainProgramScreenRight *****************
  5106 ;; Defined at:
  5107 ;;		line 121 in file "main.c"
  5108 ;; Parameters:    Size  Location     Type
  5109 ;;		None
  5110 ;; Auto vars:     Size  Location     Type
  5111 ;;		None
  5112 ;; Return value:  Size  Location     Type
  5113 ;;                  1    wreg      void 
  5114 ;; Registers used:
  5115 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5116 ;; Tracked objects:
  5117 ;;		On entry : 0/0
  5118 ;;		On exit  : 0/0
  5119 ;;		Unchanged: 0/0
  5120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5121 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5122 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5123 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5124 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5125 ;;Total ram usage:        0 bytes
  5126 ;; Hardware stack levels used:    1
  5127 ;; Hardware stack levels required when called:    6
  5128 ;; This function calls:
  5129 ;;		_displayMainProgramLcdScreen
  5130 ;; This function is called by:
  5131 ;;		_main
  5132 ;; This function uses a non-reentrant model
  5133 ;;
  5134                           
  5135                           	psect	text23
  5136  00E56C                     __ptext23:
  5137                           	opt stack 0
  5138  00E56C                     _cycleMainProgramScreenRight:
  5139                           	opt stack 24
  5140                           
  5141                           ;main.c: 122: if (initScreenState == 3){
  5142                           
  5143                           ;incstack = 0
  5144  00E56C  0E03               	movlw	3
  5145  00E56E  1868               	xorwf	_initScreenState,w,c
  5146  00E570  1069               	iorwf	_initScreenState+1,w,c
  5147  00E572  A4D8               	btfss	status,2,c
  5148  00E574  D005               	goto	l3092
  5149                           
  5150                           ;main.c: 123: initScreenState = 0;
  5151  00E576  0E00               	movlw	0
  5152  00E578  6E69               	movwf	_initScreenState+1,c
  5153  00E57A  0E00               	movlw	0
  5154  00E57C  6E68               	movwf	_initScreenState,c
  5155                           
  5156                           ;main.c: 124: }else{
  5157  00E57E  D002               	goto	l3094
  5158  00E580                     l3092:
  5159                           
  5160                           ;main.c: 125: initScreenState += 1;
  5161  00E580  4A68               	infsnz	_initScreenState,f,c
  5162  00E582  2A69               	incf	_initScreenState+1,f,c
  5163  00E584                     l3094:
  5164                           
  5165                           ;main.c: 126: }
  5166                           ;main.c: 127: displayMainProgramLcdScreen(initScreenState);
  5167  00E584  C068  F02D         	movff	_initScreenState,displayMainProgramLcdScreen@num
  5168  00E588  C069  F02E         	movff	_initScreenState+1,displayMainProgramLcdScreen@num+1
  5169  00E58C  EC4E  F076         	call	_displayMainProgramLcdScreen	;wreg free
  5170  00E590  0012               	return		;funcret
  5171  00E592                     __end_of_cycleMainProgramScreenRight:
  5172                           	opt stack 0
  5173                           tblptru	equ	0xFF8
  5174                           tblptrh	equ	0xFF7
  5175                           tblptrl	equ	0xFF6
  5176                           tablat	equ	0xFF5
  5177                           prodh	equ	0xFF4
  5178                           prodl	equ	0xFF3
  5179                           intcon	equ	0xFF2
  5180                           intcon2	equ	0xFF1
  5181                           postinc0	equ	0xFEE
  5182                           wreg	equ	0xFE8
  5183                           indf1	equ	0xFE7
  5184                           postinc1	equ	0xFE6
  5185                           postdec1	equ	0xFE5
  5186                           fsr1h	equ	0xFE2
  5187                           fsr1l	equ	0xFE1
  5188                           indf2	equ	0xFDF
  5189                           postinc2	equ	0xFDE
  5190                           postdec2	equ	0xFDD
  5191                           fsr2h	equ	0xFDA
  5192                           fsr2l	equ	0xFD9
  5193                           status	equ	0xFD8
  5194                           
  5195 ;; *************** function _cycleMainProgramScreenLeft *****************
  5196 ;; Defined at:
  5197 ;;		line 112 in file "main.c"
  5198 ;; Parameters:    Size  Location     Type
  5199 ;;		None
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;		None
  5202 ;; Return value:  Size  Location     Type
  5203 ;;                  1    wreg      void 
  5204 ;; Registers used:
  5205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5215 ;;Total ram usage:        0 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; Hardware stack levels required when called:    6
  5218 ;; This function calls:
  5219 ;;		_displayMainProgramLcdScreen
  5220 ;; This function is called by:
  5221 ;;		_main
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           	psect	text24
  5226  00E546                     __ptext24:
  5227                           	opt stack 0
  5228  00E546                     _cycleMainProgramScreenLeft:
  5229                           	opt stack 24
  5230                           
  5231                           ;main.c: 113: if (initScreenState == 0){
  5232                           
  5233                           ;incstack = 0
  5234  00E546  5068               	movf	_initScreenState,w,c
  5235  00E548  1069               	iorwf	_initScreenState+1,w,c
  5236  00E54A  A4D8               	btfss	status,2,c
  5237  00E54C  D005               	goto	l3084
  5238                           
  5239                           ;main.c: 114: initScreenState = 3;
  5240  00E54E  0E00               	movlw	0
  5241  00E550  6E69               	movwf	_initScreenState+1,c
  5242  00E552  0E03               	movlw	3
  5243  00E554  6E68               	movwf	_initScreenState,c
  5244                           
  5245                           ;main.c: 115: }else{
  5246  00E556  D003               	goto	l3086
  5247  00E558                     l3084:
  5248                           
  5249                           ;main.c: 116: initScreenState -= 1;
  5250  00E558  0668               	decf	_initScreenState,f,c
  5251  00E55A  A0D8               	btfss	status,0,c
  5252  00E55C  0669               	decf	_initScreenState+1,f,c
  5253  00E55E                     l3086:
  5254                           
  5255                           ;main.c: 117: }
  5256                           ;main.c: 118: displayMainProgramLcdScreen(initScreenState);
  5257  00E55E  C068  F02D         	movff	_initScreenState,displayMainProgramLcdScreen@num
  5258  00E562  C069  F02E         	movff	_initScreenState+1,displayMainProgramLcdScreen@num+1
  5259  00E566  EC4E  F076         	call	_displayMainProgramLcdScreen	;wreg free
  5260  00E56A  0012               	return		;funcret
  5261  00E56C                     __end_of_cycleMainProgramScreenLeft:
  5262                           	opt stack 0
  5263                           tblptru	equ	0xFF8
  5264                           tblptrh	equ	0xFF7
  5265                           tblptrl	equ	0xFF6
  5266                           tablat	equ	0xFF5
  5267                           prodh	equ	0xFF4
  5268                           prodl	equ	0xFF3
  5269                           intcon	equ	0xFF2
  5270                           intcon2	equ	0xFF1
  5271                           postinc0	equ	0xFEE
  5272                           wreg	equ	0xFE8
  5273                           indf1	equ	0xFE7
  5274                           postinc1	equ	0xFE6
  5275                           postdec1	equ	0xFE5
  5276                           fsr1h	equ	0xFE2
  5277                           fsr1l	equ	0xFE1
  5278                           indf2	equ	0xFDF
  5279                           postinc2	equ	0xFDE
  5280                           postdec2	equ	0xFDD
  5281                           fsr2h	equ	0xFDA
  5282                           fsr2l	equ	0xFD9
  5283                           status	equ	0xFD8
  5284                           
  5285 ;; *************** function _displayMainProgramLcdScreen *****************
  5286 ;; Defined at:
  5287 ;;		line 162 in file "main.c"
  5288 ;; Parameters:    Size  Location     Type
  5289 ;;  num             2   44[COMRAM] int 
  5290 ;; Auto vars:     Size  Location     Type
  5291 ;;		None
  5292 ;; Return value:  Size  Location     Type
  5293 ;;                  1    wreg      void 
  5294 ;; Registers used:
  5295 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5296 ;; Tracked objects:
  5297 ;;		On entry : 0/0
  5298 ;;		On exit  : 0/0
  5299 ;;		Unchanged: 0/0
  5300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5301 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5303 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5304 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5305 ;;Total ram usage:        4 bytes
  5306 ;; Hardware stack levels used:    1
  5307 ;; Hardware stack levels required when called:    5
  5308 ;; This function calls:
  5309 ;;		_lcdClear
  5310 ;;		_lcdInst
  5311 ;;		_printf
  5312 ;;		_updateCurrentTime
  5313 ;; This function is called by:
  5314 ;;		_initializeLcdScreen
  5315 ;;		_enterSelectedSubProgramFromMainProgram
  5316 ;;		_cycleMainProgramScreenLeft
  5317 ;;		_cycleMainProgramScreenRight
  5318 ;; This function uses a non-reentrant model
  5319 ;;
  5320                           
  5321                           	psect	text25
  5322  00EC9C                     __ptext25:
  5323                           	opt stack 0
  5324  00EC9C                     _displayMainProgramLcdScreen:
  5325                           	opt stack 23
  5326                           
  5327                           ;main.c: 163: lcdClear();
  5328                           
  5329                           ;incstack = 0
  5330  00EC9C  ECF1  F072         	call	_lcdClear	;wreg free
  5331                           
  5332                           ;main.c: 164: switch(num){
  5333  00ECA0  D03B               	goto	l2600
  5334  00ECA2                     l2584:
  5335                           
  5336                           ;main.c: 166: lcdClear();
  5337  00ECA2  ECF1  F072         	call	_lcdClear	;wreg free
  5338                           
  5339                           ;main.c: 167: printf("Begin Sorting");
  5340  00ECA6  0E9B               	movlw	low STR_6
  5341  00ECA8  6E1F               	movwf	printf@f,c
  5342  00ECAA  0EFF               	movlw	high STR_6
  5343  00ECAC  6E20               	movwf	printf@f+1,c
  5344  00ECAE  EC20  F073         	call	_printf	;wreg free
  5345                           
  5346                           ;main.c: 168: break;
  5347  00ECB2  D047               	goto	l2602
  5348  00ECB4                     l2586:
  5349                           
  5350                           ;main.c: 170: updateCurrentTime();
  5351  00ECB4  EC4A  F074         	call	_updateCurrentTime	;wreg free
  5352                           
  5353                           ;main.c: 171: lcdClear();
  5354  00ECB8  ECF1  F072         	call	_lcdClear	;wreg free
  5355                           
  5356                           ;main.c: 172: printf("%02x/%02x   ", time[5],time[4]);
  5357  00ECBC  0ED2               	movlw	low STR_1
  5358  00ECBE  6E1F               	movwf	printf@f,c
  5359  00ECC0  0EFF               	movlw	high STR_1
  5360  00ECC2  6E20               	movwf	printf@f+1,c
  5361  00ECC4  C066  F021         	movff	_time+5,?_printf+2
  5362  00ECC8  6A22               	clrf	?_printf+3,c
  5363  00ECCA  C065  F023         	movff	_time+4,?_printf+4
  5364  00ECCE  6A24               	clrf	?_printf+5,c
  5365  00ECD0  EC20  F073         	call	_printf	;wreg free
  5366                           
  5367                           ;main.c: 173: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  5368  00ECD4  0E70               	movlw	low STR_2
  5369  00ECD6  6E1F               	movwf	printf@f,c
  5370  00ECD8  0EFF               	movlw	high STR_2
  5371  00ECDA  6E20               	movwf	printf@f+1,c
  5372  00ECDC  C063  F021         	movff	_time+2,?_printf+2
  5373  00ECE0  6A22               	clrf	?_printf+3,c
  5374  00ECE2  C062  F023         	movff	_time+1,?_printf+4
  5375  00ECE6  6A24               	clrf	?_printf+5,c
  5376  00ECE8  C061  F025         	movff	_time,?_printf+6
  5377  00ECEC  6A26               	clrf	?_printf+7,c
  5378  00ECEE  EC20  F073         	call	_printf	;wreg free
  5379                           
  5380                           ;main.c: 174: break;
  5381  00ECF2  D027               	goto	l2602
  5382  00ECF4                     l2594:
  5383                           
  5384                           ;main.c: 176: lcdClear();
  5385  00ECF4  ECF1  F072         	call	_lcdClear	;wreg free
  5386                           
  5387                           ;main.c: 177: printf("Access EEPROM");
  5388  00ECF8  0E8D               	movlw	low STR_9
  5389  00ECFA  6E1F               	movwf	printf@f,c
  5390  00ECFC  0EFF               	movlw	high STR_9
  5391  00ECFE  6E20               	movwf	printf@f+1,c
  5392  00ED00  EC20  F073         	call	_printf	;wreg free
  5393                           
  5394                           ;main.c: 178: break;
  5395  00ED04  D01E               	goto	l2602
  5396  00ED06                     l2596:
  5397                           
  5398                           ;main.c: 180: lcdClear();
  5399  00ED06  ECF1  F072         	call	_lcdClear	;wreg free
  5400                           
  5401                           ;main.c: 181: printf("Access Last Run ");
  5402  00ED0A  0EBC               	movlw	low STR_10
  5403  00ED0C  6E1F               	movwf	printf@f,c
  5404  00ED0E  0EFE               	movlw	high STR_10
  5405  00ED10  6E20               	movwf	printf@f+1,c
  5406  00ED12  EC20  F073         	call	_printf	;wreg free
  5407                           
  5408                           ;main.c: 183: }
  5409                           
  5410                           ;main.c: 182: break;
  5411  00ED16  D015               	goto	l2602
  5412  00ED18                     l2600:
  5413  00ED18  C02D  F02F         	movff	displayMainProgramLcdScreen@num,??_displayMainProgramLcdScreen
  5414  00ED1C  C02E  F030         	movff	displayMainProgramLcdScreen@num+1,??_displayMainProgramLcdScreen+1
  5415                           
  5416                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5417                           ; Switch size 1, requested type "space"
  5418                           ; Number of cases is 1, Range of values is 0 to 0
  5419                           ; switch strategies available:
  5420                           ; Name         Instructions Cycles
  5421                           ; simple_byte            4     3 (average)
  5422                           ;	Chosen strategy is simple_byte
  5423  00ED20  5030               	movf	??_displayMainProgramLcdScreen+1,w,c
  5424  00ED22  0A00               	xorlw	0	; case 0
  5425  00ED24  A4D8               	btfss	status,2,c
  5426  00ED26  D00D               	goto	l2602
  5427                           
  5428                           ; Switch size 1, requested type "space"
  5429                           ; Number of cases is 4, Range of values is 0 to 3
  5430                           ; switch strategies available:
  5431                           ; Name         Instructions Cycles
  5432                           ; simple_byte           13     7 (average)
  5433                           ;	Chosen strategy is simple_byte
  5434  00ED28  502F               	movf	??_displayMainProgramLcdScreen,w,c
  5435  00ED2A  0A00               	xorlw	0	; case 0
  5436  00ED2C  B4D8               	btfsc	status,2,c
  5437  00ED2E  D7B9               	goto	l2584
  5438  00ED30  0A01               	xorlw	1	; case 1
  5439  00ED32  B4D8               	btfsc	status,2,c
  5440  00ED34  D7BF               	goto	l2586
  5441  00ED36  0A03               	xorlw	3	; case 2
  5442  00ED38  B4D8               	btfsc	status,2,c
  5443  00ED3A  D7DC               	goto	l2594
  5444  00ED3C  0A01               	xorlw	1	; case 3
  5445  00ED3E  B4D8               	btfsc	status,2,c
  5446  00ED40  D7E2               	goto	l2596
  5447  00ED42                     l2602:
  5448                           
  5449                           ;main.c: 184: lcdInst(0b11000000);;
  5450  00ED42  0EC0               	movlw	192
  5451  00ED44  EC2F  F072         	call	_lcdInst
  5452                           
  5453                           ;main.c: 185: printf("<4  Start: A  6>");
  5454  00ED48  0ECD               	movlw	low STR_11
  5455  00ED4A  6E1F               	movwf	printf@f,c
  5456  00ED4C  0EFE               	movlw	high STR_11
  5457  00ED4E  6E20               	movwf	printf@f+1,c
  5458  00ED50  EC20  F073         	call	_printf	;wreg free
  5459  00ED54  0012               	return		;funcret
  5460  00ED56                     __end_of_displayMainProgramLcdScreen:
  5461                           	opt stack 0
  5462                           tblptru	equ	0xFF8
  5463                           tblptrh	equ	0xFF7
  5464                           tblptrl	equ	0xFF6
  5465                           tablat	equ	0xFF5
  5466                           prodh	equ	0xFF4
  5467                           prodl	equ	0xFF3
  5468                           intcon	equ	0xFF2
  5469                           intcon2	equ	0xFF1
  5470                           postinc0	equ	0xFEE
  5471                           wreg	equ	0xFE8
  5472                           indf1	equ	0xFE7
  5473                           postinc1	equ	0xFE6
  5474                           postdec1	equ	0xFE5
  5475                           fsr1h	equ	0xFE2
  5476                           fsr1l	equ	0xFE1
  5477                           indf2	equ	0xFDF
  5478                           postinc2	equ	0xFDE
  5479                           postdec2	equ	0xFDD
  5480                           fsr2h	equ	0xFDA
  5481                           fsr2l	equ	0xFD9
  5482                           status	equ	0xFD8
  5483                           
  5484 ;; *************** function _updateCurrentTime *****************
  5485 ;; Defined at:
  5486 ;;		line 131 in file "main.c"
  5487 ;; Parameters:    Size  Location     Type
  5488 ;;		None
  5489 ;; Auto vars:     Size  Location     Type
  5490 ;;  i               1    3[COMRAM] unsigned char 
  5491 ;; Return value:  Size  Location     Type
  5492 ;;                  1    wreg      void 
  5493 ;; Registers used:
  5494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5495 ;; Tracked objects:
  5496 ;;		On entry : 0/0
  5497 ;;		On exit  : 0/0
  5498 ;;		Unchanged: 0/0
  5499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5501 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5503 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5504 ;;Total ram usage:        1 bytes
  5505 ;; Hardware stack levels used:    1
  5506 ;; Hardware stack levels required when called:    2
  5507 ;; This function calls:
  5508 ;;		_I2C_Master_Read
  5509 ;;		_I2C_Master_Start
  5510 ;;		_I2C_Master_Stop
  5511 ;;		_I2C_Master_Write
  5512 ;; This function is called by:
  5513 ;;		_getPressedKeypadKey
  5514 ;;		_displayMainProgramLcdScreen
  5515 ;;		_operation
  5516 ;; This function uses a non-reentrant model
  5517 ;;
  5518                           
  5519                           	psect	text26
  5520  00E894                     __ptext26:
  5521                           	opt stack 0
  5522  00E894                     _updateCurrentTime:
  5523                           	opt stack 25
  5524                           
  5525                           ;main.c: 133: I2C_Master_Start();
  5526                           
  5527                           ;incstack = 0
  5528  00E894  EC22  F072         	call	_I2C_Master_Start	;wreg free
  5529                           
  5530                           ;main.c: 134: I2C_Master_Write(0b11010000);
  5531  00E898  0E00               	movlw	0
  5532  00E89A  6E03               	movwf	I2C_Master_Write@d+1,c
  5533  00E89C  0ED0               	movlw	208
  5534  00E89E  6E02               	movwf	I2C_Master_Write@d,c
  5535  00E8A0  EC2A  F072         	call	_I2C_Master_Write	;wreg free
  5536                           
  5537                           ;main.c: 135: I2C_Master_Write(0x00);
  5538  00E8A4  0E00               	movlw	0
  5539  00E8A6  6E03               	movwf	I2C_Master_Write@d+1,c
  5540  00E8A8  0E00               	movlw	0
  5541  00E8AA  6E02               	movwf	I2C_Master_Write@d,c
  5542  00E8AC  EC2A  F072         	call	_I2C_Master_Write	;wreg free
  5543                           
  5544                           ;main.c: 136: I2C_Master_Stop();
  5545  00E8B0  EC26  F072         	call	_I2C_Master_Stop	;wreg free
  5546                           
  5547                           ;main.c: 139: I2C_Master_Start();
  5548  00E8B4  EC22  F072         	call	_I2C_Master_Start	;wreg free
  5549                           
  5550                           ;main.c: 140: I2C_Master_Write(0b11010001);
  5551  00E8B8  0E00               	movlw	0
  5552  00E8BA  6E03               	movwf	I2C_Master_Write@d+1,c
  5553  00E8BC  0ED1               	movlw	209
  5554  00E8BE  6E02               	movwf	I2C_Master_Write@d,c
  5555  00E8C0  EC2A  F072         	call	_I2C_Master_Write	;wreg free
  5556                           
  5557                           ;main.c: 141: for(unsigned char i=0;i<0x06;i++){
  5558  00E8C4  0E00               	movlw	0
  5559  00E8C6  6E04               	movwf	updateCurrentTime@i,c
  5560  00E8C8                     l2434:
  5561  00E8C8  0E05               	movlw	5
  5562  00E8CA  6404               	cpfsgt	updateCurrentTime@i,c
  5563  00E8CC  D001               	goto	l2438
  5564  00E8CE  D00E               	goto	l2444
  5565  00E8D0                     l2438:
  5566                           
  5567                           ;main.c: 142: time[i] = I2C_Master_Read(1);
  5568  00E8D0  5004               	movf	updateCurrentTime@i,w,c
  5569  00E8D2  0D01               	mullw	1
  5570  00E8D4  0E61               	movlw	low _time
  5571  00E8D6  24F3               	addwf	prodl,w,c
  5572  00E8D8  6ED9               	movwf	fsr2l,c
  5573  00E8DA  0E00               	movlw	high _time
  5574  00E8DC  20F4               	addwfc	prodh,w,c
  5575  00E8DE  6EDA               	movwf	fsr2h,c
  5576  00E8E0  0E01               	movlw	1
  5577  00E8E2  EC90  F072         	call	_I2C_Master_Read
  5578  00E8E6  6EDF               	movwf	indf2,c
  5579  00E8E8  2A04               	incf	updateCurrentTime@i,f,c
  5580  00E8EA  D7EE               	goto	l2434
  5581  00E8EC                     l2444:
  5582                           
  5583                           ;main.c: 143: }
  5584                           ;main.c: 144: time[6] = I2C_Master_Read(0);
  5585  00E8EC  0E00               	movlw	0
  5586  00E8EE  EC90  F072         	call	_I2C_Master_Read
  5587  00E8F2  6E67               	movwf	_time+6,c
  5588                           
  5589                           ;main.c: 145: I2C_Master_Stop();
  5590  00E8F4  EC26  F072         	call	_I2C_Master_Stop	;wreg free
  5591  00E8F8  0012               	return		;funcret
  5592  00E8FA                     __end_of_updateCurrentTime:
  5593                           	opt stack 0
  5594                           tblptru	equ	0xFF8
  5595                           tblptrh	equ	0xFF7
  5596                           tblptrl	equ	0xFF6
  5597                           tablat	equ	0xFF5
  5598                           prodh	equ	0xFF4
  5599                           prodl	equ	0xFF3
  5600                           intcon	equ	0xFF2
  5601                           intcon2	equ	0xFF1
  5602                           postinc0	equ	0xFEE
  5603                           wreg	equ	0xFE8
  5604                           indf1	equ	0xFE7
  5605                           postinc1	equ	0xFE6
  5606                           postdec1	equ	0xFE5
  5607                           fsr1h	equ	0xFE2
  5608                           fsr1l	equ	0xFE1
  5609                           indf2	equ	0xFDF
  5610                           postinc2	equ	0xFDE
  5611                           postdec2	equ	0xFDD
  5612                           fsr2h	equ	0xFDA
  5613                           fsr2l	equ	0xFD9
  5614                           status	equ	0xFD8
  5615                           
  5616 ;; *************** function _I2C_Master_Write *****************
  5617 ;; Defined at:
  5618 ;;		line 47 in file "I2C.c"
  5619 ;; Parameters:    Size  Location     Type
  5620 ;;  d               2    1[COMRAM] unsigned int 
  5621 ;; Auto vars:     Size  Location     Type
  5622 ;;		None
  5623 ;; Return value:  Size  Location     Type
  5624 ;;                  1    wreg      void 
  5625 ;; Registers used:
  5626 ;;		wreg, status,2, status,0, cstack
  5627 ;; Tracked objects:
  5628 ;;		On entry : 0/0
  5629 ;;		On exit  : 0/0
  5630 ;;		Unchanged: 0/0
  5631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5632 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5635 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5636 ;;Total ram usage:        2 bytes
  5637 ;; Hardware stack levels used:    1
  5638 ;; Hardware stack levels required when called:    1
  5639 ;; This function calls:
  5640 ;;		_I2C_Master_Wait
  5641 ;; This function is called by:
  5642 ;;		_updateCurrentTime
  5643 ;; This function uses a non-reentrant model
  5644 ;;
  5645                           
  5646                           	psect	text27
  5647  00E454                     __ptext27:
  5648                           	opt stack 0
  5649  00E454                     _I2C_Master_Write:
  5650                           	opt stack 25
  5651                           
  5652                           ;I2C.c: 49: I2C_Master_Wait();
  5653                           
  5654                           ;incstack = 0
  5655  00E454  EC41  F072         	call	_I2C_Master_Wait	;wreg free
  5656                           
  5657                           ;I2C.c: 50: SSPBUF = d;
  5658  00E458  C002  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  5659  00E45C  0012               	return		;funcret
  5660  00E45E                     __end_of_I2C_Master_Write:
  5661                           	opt stack 0
  5662                           tblptru	equ	0xFF8
  5663                           tblptrh	equ	0xFF7
  5664                           tblptrl	equ	0xFF6
  5665                           tablat	equ	0xFF5
  5666                           prodh	equ	0xFF4
  5667                           prodl	equ	0xFF3
  5668                           intcon	equ	0xFF2
  5669                           intcon2	equ	0xFF1
  5670                           postinc0	equ	0xFEE
  5671                           wreg	equ	0xFE8
  5672                           indf1	equ	0xFE7
  5673                           postinc1	equ	0xFE6
  5674                           postdec1	equ	0xFE5
  5675                           fsr1h	equ	0xFE2
  5676                           fsr1l	equ	0xFE1
  5677                           indf2	equ	0xFDF
  5678                           postinc2	equ	0xFDE
  5679                           postdec2	equ	0xFDD
  5680                           fsr2h	equ	0xFDA
  5681                           fsr2l	equ	0xFD9
  5682                           status	equ	0xFD8
  5683                           
  5684 ;; *************** function _I2C_Master_Stop *****************
  5685 ;; Defined at:
  5686 ;;		line 41 in file "I2C.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;		None
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;		None
  5691 ;; Return value:  Size  Location     Type
  5692 ;;                  2   74[None  ] int 
  5693 ;; Registers used:
  5694 ;;		wreg, status,2, status,0, cstack
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5704 ;;Total ram usage:        0 bytes
  5705 ;; Hardware stack levels used:    1
  5706 ;; Hardware stack levels required when called:    1
  5707 ;; This function calls:
  5708 ;;		_I2C_Master_Wait
  5709 ;; This function is called by:
  5710 ;;		_updateCurrentTime
  5711 ;; This function uses a non-reentrant model
  5712 ;;
  5713                           
  5714                           	psect	text28
  5715  00E44C                     __ptext28:
  5716                           	opt stack 0
  5717  00E44C                     _I2C_Master_Stop:
  5718                           	opt stack 25
  5719                           
  5720                           ;I2C.c: 43: I2C_Master_Wait();
  5721                           
  5722                           ;incstack = 0
  5723  00E44C  EC41  F072         	call	_I2C_Master_Wait	;wreg free
  5724                           
  5725                           ;I2C.c: 44: PEN = 1;
  5726  00E450  84C5               	bsf	4037,2,c	;volatile
  5727  00E452  0012               	return		;funcret
  5728  00E454                     __end_of_I2C_Master_Stop:
  5729                           	opt stack 0
  5730                           tblptru	equ	0xFF8
  5731                           tblptrh	equ	0xFF7
  5732                           tblptrl	equ	0xFF6
  5733                           tablat	equ	0xFF5
  5734                           prodh	equ	0xFF4
  5735                           prodl	equ	0xFF3
  5736                           intcon	equ	0xFF2
  5737                           intcon2	equ	0xFF1
  5738                           postinc0	equ	0xFEE
  5739                           wreg	equ	0xFE8
  5740                           indf1	equ	0xFE7
  5741                           postinc1	equ	0xFE6
  5742                           postdec1	equ	0xFE5
  5743                           fsr1h	equ	0xFE2
  5744                           fsr1l	equ	0xFE1
  5745                           indf2	equ	0xFDF
  5746                           postinc2	equ	0xFDE
  5747                           postdec2	equ	0xFDD
  5748                           fsr2h	equ	0xFDA
  5749                           fsr2l	equ	0xFD9
  5750                           status	equ	0xFD8
  5751                           
  5752 ;; *************** function _I2C_Master_Start *****************
  5753 ;; Defined at:
  5754 ;;		line 29 in file "I2C.c"
  5755 ;; Parameters:    Size  Location     Type
  5756 ;;		None
  5757 ;; Auto vars:     Size  Location     Type
  5758 ;;		None
  5759 ;; Return value:  Size  Location     Type
  5760 ;;                  2   70[None  ] int 
  5761 ;; Registers used:
  5762 ;;		wreg, status,2, status,0, cstack
  5763 ;; Tracked objects:
  5764 ;;		On entry : 0/0
  5765 ;;		On exit  : 0/0
  5766 ;;		Unchanged: 0/0
  5767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5772 ;;Total ram usage:        0 bytes
  5773 ;; Hardware stack levels used:    1
  5774 ;; Hardware stack levels required when called:    1
  5775 ;; This function calls:
  5776 ;;		_I2C_Master_Wait
  5777 ;; This function is called by:
  5778 ;;		_updateCurrentTime
  5779 ;; This function uses a non-reentrant model
  5780 ;;
  5781                           
  5782                           	psect	text29
  5783  00E444                     __ptext29:
  5784                           	opt stack 0
  5785  00E444                     _I2C_Master_Start:
  5786                           	opt stack 25
  5787                           
  5788                           ;I2C.c: 31: I2C_Master_Wait();
  5789                           
  5790                           ;incstack = 0
  5791  00E444  EC41  F072         	call	_I2C_Master_Wait	;wreg free
  5792                           
  5793                           ;I2C.c: 32: SEN = 1;
  5794  00E448  80C5               	bsf	4037,0,c	;volatile
  5795  00E44A  0012               	return		;funcret
  5796  00E44C                     __end_of_I2C_Master_Start:
  5797                           	opt stack 0
  5798                           tblptru	equ	0xFF8
  5799                           tblptrh	equ	0xFF7
  5800                           tblptrl	equ	0xFF6
  5801                           tablat	equ	0xFF5
  5802                           prodh	equ	0xFF4
  5803                           prodl	equ	0xFF3
  5804                           intcon	equ	0xFF2
  5805                           intcon2	equ	0xFF1
  5806                           postinc0	equ	0xFEE
  5807                           wreg	equ	0xFE8
  5808                           indf1	equ	0xFE7
  5809                           postinc1	equ	0xFE6
  5810                           postdec1	equ	0xFE5
  5811                           fsr1h	equ	0xFE2
  5812                           fsr1l	equ	0xFE1
  5813                           indf2	equ	0xFDF
  5814                           postinc2	equ	0xFDE
  5815                           postdec2	equ	0xFDD
  5816                           fsr2h	equ	0xFDA
  5817                           fsr2l	equ	0xFD9
  5818                           status	equ	0xFD8
  5819                           
  5820 ;; *************** function _I2C_Master_Read *****************
  5821 ;; Defined at:
  5822 ;;		line 53 in file "I2C.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  a               1    wreg     unsigned char 
  5825 ;; Auto vars:     Size  Location     Type
  5826 ;;  a               1    1[COMRAM] unsigned char 
  5827 ;;  temp            1    2[COMRAM] unsigned char 
  5828 ;; Return value:  Size  Location     Type
  5829 ;;                  1    wreg      unsigned char 
  5830 ;; Registers used:
  5831 ;;		wreg, status,2, status,0, cstack
  5832 ;; Tracked objects:
  5833 ;;		On entry : 0/0
  5834 ;;		On exit  : 0/0
  5835 ;;		Unchanged: 0/0
  5836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5838 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5840 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;Total ram usage:        2 bytes
  5842 ;; Hardware stack levels used:    1
  5843 ;; Hardware stack levels required when called:    1
  5844 ;; This function calls:
  5845 ;;		_I2C_Master_Wait
  5846 ;; This function is called by:
  5847 ;;		_updateCurrentTime
  5848 ;; This function uses a non-reentrant model
  5849 ;;
  5850                           
  5851                           	psect	text30
  5852  00E520                     __ptext30:
  5853                           	opt stack 0
  5854  00E520                     _I2C_Master_Read:
  5855                           	opt stack 25
  5856                           
  5857                           ;incstack = 0
  5858                           ;I2C_Master_Read@a stored from wreg
  5859  00E520  6E02               	movwf	I2C_Master_Read@a,c
  5860                           
  5861                           ;I2C.c: 55: unsigned char temp;
  5862                           ;I2C.c: 56: I2C_Master_Wait();
  5863  00E522  EC41  F072         	call	_I2C_Master_Wait	;wreg free
  5864                           
  5865                           ;I2C.c: 57: RCEN = 1;
  5866  00E526  86C5               	bsf	4037,3,c	;volatile
  5867                           
  5868                           ;I2C.c: 58: I2C_Master_Wait();
  5869  00E528  EC41  F072         	call	_I2C_Master_Wait	;wreg free
  5870                           
  5871                           ;I2C.c: 59: temp = SSPBUF;
  5872  00E52C  CFC9 F003          	movff	4041,I2C_Master_Read@temp	;volatile
  5873                           
  5874                           ;I2C.c: 60: I2C_Master_Wait();
  5875  00E530  EC41  F072         	call	_I2C_Master_Wait	;wreg free
  5876                           
  5877                           ;I2C.c: 61: ACKDT = (a)?0:1;
  5878  00E534  5002               	movf	I2C_Master_Read@a,w,c
  5879  00E536  A4D8               	btfss	status,2,c
  5880  00E538  D002               	goto	u460
  5881  00E53A  8AC5               	bsf	4037,5,c	;volatile
  5882  00E53C  D001               	goto	l1424
  5883  00E53E                     u460:
  5884  00E53E  9AC5               	bcf	4037,5,c	;volatile
  5885  00E540                     l1424:
  5886                           
  5887                           ;I2C.c: 62: ACKEN = 1;
  5888  00E540  88C5               	bsf	4037,4,c	;volatile
  5889                           
  5890                           ;I2C.c: 63: return temp;
  5891  00E542  5003               	movf	I2C_Master_Read@temp,w,c
  5892  00E544  0012               	return	
  5893  00E546                     __end_of_I2C_Master_Read:
  5894                           	opt stack 0
  5895                           tblptru	equ	0xFF8
  5896                           tblptrh	equ	0xFF7
  5897                           tblptrl	equ	0xFF6
  5898                           tablat	equ	0xFF5
  5899                           prodh	equ	0xFF4
  5900                           prodl	equ	0xFF3
  5901                           intcon	equ	0xFF2
  5902                           intcon2	equ	0xFF1
  5903                           postinc0	equ	0xFEE
  5904                           wreg	equ	0xFE8
  5905                           indf1	equ	0xFE7
  5906                           postinc1	equ	0xFE6
  5907                           postdec1	equ	0xFE5
  5908                           fsr1h	equ	0xFE2
  5909                           fsr1l	equ	0xFE1
  5910                           indf2	equ	0xFDF
  5911                           postinc2	equ	0xFDE
  5912                           postdec2	equ	0xFDD
  5913                           fsr2h	equ	0xFDA
  5914                           fsr2l	equ	0xFD9
  5915                           status	equ	0xFD8
  5916                           
  5917 ;; *************** function _I2C_Master_Wait *****************
  5918 ;; Defined at:
  5919 ;;		line 24 in file "I2C.c"
  5920 ;; Parameters:    Size  Location     Type
  5921 ;;		None
  5922 ;; Auto vars:     Size  Location     Type
  5923 ;;		None
  5924 ;; Return value:  Size  Location     Type
  5925 ;;                  1    wreg      void 
  5926 ;; Registers used:
  5927 ;;		wreg, status,2, status,0
  5928 ;; Tracked objects:
  5929 ;;		On entry : 0/0
  5930 ;;		On exit  : 0/0
  5931 ;;		Unchanged: 0/0
  5932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5935 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5936 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5937 ;;Total ram usage:        1 bytes
  5938 ;; Hardware stack levels used:    1
  5939 ;; This function calls:
  5940 ;;		Nothing
  5941 ;; This function is called by:
  5942 ;;		_I2C_Master_Start
  5943 ;;		_I2C_Master_Stop
  5944 ;;		_I2C_Master_Write
  5945 ;;		_I2C_Master_Read
  5946 ;;		_I2C_Master_RepeatedStart
  5947 ;; This function uses a non-reentrant model
  5948 ;;
  5949                           
  5950                           	psect	text31
  5951  00E482                     __ptext31:
  5952                           	opt stack 0
  5953  00E482                     _I2C_Master_Wait:
  5954                           	opt stack 25
  5955  00E482                     l395:
  5956  00E482  B4C7               	btfsc	4039,2,c	;volatile
  5957  00E484  D7FE               	goto	l395
  5958  00E486  CFC5 F001          	movff	4037,??_I2C_Master_Wait	;volatile
  5959  00E48A  0E1F               	movlw	31
  5960  00E48C  1601               	andwf	??_I2C_Master_Wait,f,c
  5961  00E48E  B4D8               	btfsc	status,2,c
  5962  00E490  0012               	return	
  5963  00E492  D7F7               	goto	l395
  5964  00E494                     __end_of_I2C_Master_Wait:
  5965                           	opt stack 0
  5966                           tblptru	equ	0xFF8
  5967                           tblptrh	equ	0xFF7
  5968                           tblptrl	equ	0xFF6
  5969                           tablat	equ	0xFF5
  5970                           prodh	equ	0xFF4
  5971                           prodl	equ	0xFF3
  5972                           intcon	equ	0xFF2
  5973                           intcon2	equ	0xFF1
  5974                           postinc0	equ	0xFEE
  5975                           wreg	equ	0xFE8
  5976                           indf1	equ	0xFE7
  5977                           postinc1	equ	0xFE6
  5978                           postdec1	equ	0xFE5
  5979                           fsr1h	equ	0xFE2
  5980                           fsr1l	equ	0xFE1
  5981                           indf2	equ	0xFDF
  5982                           postinc2	equ	0xFDE
  5983                           postdec2	equ	0xFDD
  5984                           fsr2h	equ	0xFDA
  5985                           fsr2l	equ	0xFD9
  5986                           status	equ	0xFD8
  5987                           
  5988 ;; *************** function _lcdClear *****************
  5989 ;; Defined at:
  5990 ;;		line 35 in file "lcd.c"
  5991 ;; Parameters:    Size  Location     Type
  5992 ;;		None
  5993 ;; Auto vars:     Size  Location     Type
  5994 ;;		None
  5995 ;; Return value:  Size  Location     Type
  5996 ;;                  2   82[None  ] int 
  5997 ;; Registers used:
  5998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5999 ;; Tracked objects:
  6000 ;;		On entry : 0/0
  6001 ;;		On exit  : 0/0
  6002 ;;		Unchanged: 0/0
  6003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6007 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6008 ;;Total ram usage:        0 bytes
  6009 ;; Hardware stack levels used:    1
  6010 ;; Hardware stack levels required when called:    4
  6011 ;; This function calls:
  6012 ;;		_lcdInst
  6013 ;;		_printf
  6014 ;; This function is called by:
  6015 ;;		_displayMainProgramLcdScreen
  6016 ;;		_update_eeprom_screen_state
  6017 ;;		_update_past_run_screen_state
  6018 ;;		_operation
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           	psect	text32
  6023  00E5E2                     __ptext32:
  6024                           	opt stack 0
  6025  00E5E2                     _lcdClear:
  6026                           	opt stack 23
  6027                           
  6028                           ;lcd.c: 36: lcdInst(0b10000000);
  6029                           
  6030                           ;incstack = 0
  6031  00E5E2  0E80               	movlw	128
  6032  00E5E4  EC2F  F072         	call	_lcdInst
  6033                           
  6034                           ;lcd.c: 37: printf("                ");
  6035  00E5E8  0E89               	movlw	low STR_35
  6036  00E5EA  6E1F               	movwf	printf@f,c
  6037  00E5EC  0EFE               	movlw	high STR_35
  6038  00E5EE  6E20               	movwf	printf@f+1,c
  6039  00E5F0  EC20  F073         	call	_printf	;wreg free
  6040                           
  6041                           ;lcd.c: 38: lcdInst(0b11000000);
  6042  00E5F4  0EC0               	movlw	192
  6043  00E5F6  EC2F  F072         	call	_lcdInst
  6044                           
  6045                           ;lcd.c: 39: printf("                ");
  6046  00E5FA  0E89               	movlw	low STR_35
  6047  00E5FC  6E1F               	movwf	printf@f,c
  6048  00E5FE  0EFE               	movlw	high STR_35
  6049  00E600  6E20               	movwf	printf@f+1,c
  6050  00E602  EC20  F073         	call	_printf	;wreg free
  6051                           
  6052                           ;lcd.c: 40: lcdInst(0b10000000);
  6053  00E606  0E80               	movlw	128
  6054  00E608  EC2F  F072         	call	_lcdInst
  6055  00E60C  0012               	return		;funcret
  6056  00E60E                     __end_of_lcdClear:
  6057                           	opt stack 0
  6058                           tblptru	equ	0xFF8
  6059                           tblptrh	equ	0xFF7
  6060                           tblptrl	equ	0xFF6
  6061                           tablat	equ	0xFF5
  6062                           prodh	equ	0xFF4
  6063                           prodl	equ	0xFF3
  6064                           intcon	equ	0xFF2
  6065                           intcon2	equ	0xFF1
  6066                           postinc0	equ	0xFEE
  6067                           wreg	equ	0xFE8
  6068                           indf1	equ	0xFE7
  6069                           postinc1	equ	0xFE6
  6070                           postdec1	equ	0xFE5
  6071                           fsr1h	equ	0xFE2
  6072                           fsr1l	equ	0xFE1
  6073                           indf2	equ	0xFDF
  6074                           postinc2	equ	0xFDE
  6075                           postdec2	equ	0xFDD
  6076                           fsr2h	equ	0xFDA
  6077                           fsr2l	equ	0xFD9
  6078                           status	equ	0xFD8
  6079                           
  6080 ;; *************** function _printf *****************
  6081 ;; Defined at:
  6082 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
  6083 ;; Parameters:    Size  Location     Type
  6084 ;;  f               2   30[COMRAM] PTR const unsigned char 
  6085 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(18), 
  6086 ;;		 -> STR_32(13), STR_31(12), STR_30(5), STR_29(4), 
  6087 ;;		 -> STR_28(17), STR_27(14), STR_26(16), STR_25(18), 
  6088 ;;		 -> STR_24(15), STR_23(13), STR_22(17), STR_21(16), 
  6089 ;;		 -> STR_20(16), STR_19(14), STR_18(14), STR_17(16), 
  6090 ;;		 -> STR_16(17), STR_15(16), STR_14(16), STR_13(16), 
  6091 ;;		 -> STR_12(11), STR_11(17), STR_10(17), STR_9(14), 
  6092 ;;		 -> STR_8(15), STR_7(13), STR_6(14), STR_2(15), 
  6093 ;;		 -> STR_1(13), 
  6094 ;; Auto vars:     Size  Location     Type
  6095 ;;  pb              4   40[COMRAM] struct __prbuf
  6096 ;;  ap              2   38[COMRAM] PTR void [1]
  6097 ;;		 -> ?_sprintf(2), ?_printf(2), 
  6098 ;; Return value:  Size  Location     Type
  6099 ;;                  2   30[COMRAM] int 
  6100 ;; Registers used:
  6101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6102 ;; Tracked objects:
  6103 ;;		On entry : 0/0
  6104 ;;		On exit  : 0/0
  6105 ;;		Unchanged: 0/0
  6106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6107 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6108 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;Total ram usage:       14 bytes
  6112 ;; Hardware stack levels used:    1
  6113 ;; Hardware stack levels required when called:    3
  6114 ;; This function calls:
  6115 ;;		__doprnt
  6116 ;; This function is called by:
  6117 ;;		_getPressedKeypadKey
  6118 ;;		_displayMainProgramLcdScreen
  6119 ;;		_update_eeprom_screen_state
  6120 ;;		_update_past_run_screen_state
  6121 ;;		_operation
  6122 ;;		_lcdClear
  6123 ;; This function uses a non-reentrant model
  6124 ;;
  6125                           
  6126                           	psect	text33
  6127  00E640                     __ptext33:
  6128                           	opt stack 0
  6129  00E640                     _printf:
  6130                           	opt stack 24
  6131                           
  6132                           ;incstack = 0
  6133  00E640  0E00               	movlw	0
  6134  00E642  6E29               	movwf	printf@pb,c
  6135  00E644  0E00               	movlw	0
  6136  00E646  6E2A               	movwf	printf@pb+1,c
  6137  00E648  0E6A               	movlw	low _putch
  6138  00E64A  6E2B               	movwf	printf@pb+2,c
  6139  00E64C  0EE4               	movlw	high _putch
  6140  00E64E  6E2C               	movwf	printf@pb+3,c
  6141  00E650  0E21               	movlw	low (?_printf+2)
  6142  00E652  6E27               	movwf	printf@ap,c
  6143  00E654  0E00               	movlw	high (?_printf+2)
  6144  00E656  6E28               	movwf	printf@ap+1,c
  6145                           
  6146                           ;	Return value of _printf is never used
  6147  00E658  0E29               	movlw	low printf@pb
  6148  00E65A  6E0D               	movwf	__doprnt@pb,c
  6149  00E65C  0E00               	movlw	high printf@pb
  6150  00E65E  6E0E               	movwf	__doprnt@pb+1,c
  6151  00E660  C01F  F00F         	movff	printf@f,__doprnt@f
  6152  00E664  C020  F010         	movff	printf@f+1,__doprnt@f+1
  6153  00E668  0E27               	movlw	low printf@ap
  6154  00E66A  6E11               	movwf	__doprnt@ap,c
  6155  00E66C  0E00               	movlw	high printf@ap
  6156  00E66E  6E12               	movwf	__doprnt@ap+1,c
  6157  00E670  EC3D  F07C         	call	__doprnt	;wreg free
  6158  00E674  0012               	return	
  6159  00E676                     __end_of_printf:
  6160                           	opt stack 0
  6161                           tblptru	equ	0xFF8
  6162                           tblptrh	equ	0xFF7
  6163                           tblptrl	equ	0xFF6
  6164                           tablat	equ	0xFF5
  6165                           prodh	equ	0xFF4
  6166                           prodl	equ	0xFF3
  6167                           intcon	equ	0xFF2
  6168                           intcon2	equ	0xFF1
  6169                           postinc0	equ	0xFEE
  6170                           wreg	equ	0xFE8
  6171                           indf1	equ	0xFE7
  6172                           postinc1	equ	0xFE6
  6173                           postdec1	equ	0xFE5
  6174                           fsr1h	equ	0xFE2
  6175                           fsr1l	equ	0xFE1
  6176                           indf2	equ	0xFDF
  6177                           postinc2	equ	0xFDE
  6178                           postdec2	equ	0xFDD
  6179                           fsr2h	equ	0xFDA
  6180                           fsr2l	equ	0xFD9
  6181                           status	equ	0xFD8
  6182                           
  6183 ;; *************** function __doprnt *****************
  6184 ;; Defined at:
  6185 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6186 ;; Parameters:    Size  Location     Type
  6187 ;;  pb              2   12[COMRAM] PTR struct __prbuf
  6188 ;;		 -> sprintf@pb(4), printf@pb(4), 
  6189 ;;  f               2   14[COMRAM] PTR const unsigned char 
  6190 ;;		 -> STR_36(17), STR_35(17), STR_34(17), STR_33(18), 
  6191 ;;		 -> STR_32(13), STR_31(12), STR_30(5), STR_29(4), 
  6192 ;;		 -> STR_28(17), STR_27(14), STR_26(16), STR_25(18), 
  6193 ;;		 -> STR_24(15), STR_23(13), STR_22(17), STR_21(16), 
  6194 ;;		 -> STR_20(16), STR_19(14), STR_18(14), STR_17(16), 
  6195 ;;		 -> STR_16(17), STR_15(16), STR_14(16), STR_13(16), 
  6196 ;;		 -> STR_12(11), STR_11(17), STR_10(17), STR_9(14), 
  6197 ;;		 -> STR_8(15), STR_7(13), STR_6(14), STR_5(5), 
  6198 ;;		 -> STR_4(5), STR_3(5), STR_2(15), STR_1(13), 
  6199 ;;  ap              2   16[COMRAM] PTR PTR void 
  6200 ;;		 -> sprintf@ap(2), printf@ap(2), 
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;  idx             1   22[COMRAM] unsigned char 
  6203 ;;  tmpval          4    0        struct .
  6204 ;;  cp              3    0        PTR const unsigned char 
  6205 ;;  width           2   27[COMRAM] int 
  6206 ;;  val             2   24[COMRAM] unsigned int 
  6207 ;;  len             2    0        unsigned int 
  6208 ;;  c               1   29[COMRAM] char 
  6209 ;;  flag            1   26[COMRAM] unsigned char 
  6210 ;;  prec            1   23[COMRAM] char 
  6211 ;; Return value:  Size  Location     Type
  6212 ;;                  2   12[COMRAM] int 
  6213 ;; Registers used:
  6214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6215 ;; Tracked objects:
  6216 ;;		On entry : 0/0
  6217 ;;		On exit  : 0/0
  6218 ;;		Unchanged: 0/0
  6219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6220 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6221 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6222 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6223 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6224 ;;Total ram usage:       18 bytes
  6225 ;; Hardware stack levels used:    1
  6226 ;; Hardware stack levels required when called:    2
  6227 ;; This function calls:
  6228 ;;		Absolute function
  6229 ;;		___lwdiv
  6230 ;;		___lwmod
  6231 ;;		___wmul
  6232 ;;		_isdigit
  6233 ;;		_putch
  6234 ;; This function is called by:
  6235 ;;		_printf
  6236 ;;		_sprintf
  6237 ;; This function uses a non-reentrant model
  6238 ;;
  6239                           
  6240                           	psect	text34
  6241  00F87A                     __ptext34:
  6242                           	opt stack 0
  6243  00F87A                     __doprnt:
  6244                           	opt stack 24
  6245                           
  6246                           ;doprnt.c: 499: signed char c;
  6247                           ;doprnt.c: 501: int width;
  6248                           ;doprnt.c: 506: signed char prec;
  6249                           ;doprnt.c: 508: unsigned char flag;
  6250                           ;doprnt.c: 523: union {
  6251                           ;doprnt.c: 524: unsigned long vd;
  6252                           ;doprnt.c: 525: double integ;
  6253                           ;doprnt.c: 526: } tmpval;
  6254                           ;doprnt.c: 528: unsigned int val;
  6255                           ;doprnt.c: 529: unsigned len;
  6256                           ;doprnt.c: 530: const char * cp;
  6257                           ;doprnt.c: 536: while(c = *f++) {
  6258                           
  6259                           ;incstack = 0
  6260  00F87A  D2C4               	goto	l2410
  6261  00F87C                     l2252:
  6262                           
  6263                           ;doprnt.c: 538: if(c != '%')
  6264  00F87C  0E25               	movlw	37
  6265  00F87E  181E               	xorwf	__doprnt@c,w,c
  6266  00F880  B4D8               	btfsc	status,2,c
  6267  00F882  D036               	goto	l2262
  6268                           
  6269                           ;doprnt.c: 540: {
  6270                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  6271  00F884  EE20 F002          	lfsr	2,2
  6272  00F888  500D               	movf	__doprnt@pb,w,c
  6273  00F88A  26D9               	addwf	fsr2l,f,c
  6274  00F88C  500E               	movf	__doprnt@pb+1,w,c
  6275  00F88E  22DA               	addwfc	fsr2h,f,c
  6276  00F890  50DE               	movf	postinc2,w,c
  6277  00F892  10DE               	iorwf	postinc2,w,c
  6278  00F894  B4D8               	btfsc	status,2,c
  6279  00F896  D016               	goto	l2258
  6280  00F898  EE20 F002          	lfsr	2,2
  6281  00F89C  500D               	movf	__doprnt@pb,w,c
  6282  00F89E  26D9               	addwf	fsr2l,f,c
  6283  00F8A0  500E               	movf	__doprnt@pb+1,w,c
  6284  00F8A2  22DA               	addwfc	fsr2h,f,c
  6285  00F8A4  CFDE F013          	movff	postinc2,??__doprnt
  6286  00F8A8  CFDD F014          	movff	postdec2,??__doprnt+1
  6287  00F8AC  D801               	call	u1418
  6288  00F8AE  D2AA               	goto	l2410
  6289  00F8B0                     u1418:
  6290  00F8B0  0005               	push	
  6291  00F8B2  6EFA               	movwf	pclath,c
  6292  00F8B4  5013               	movf	??__doprnt,w,c
  6293  00F8B6  6EFD               	movwf	tosl,c
  6294  00F8B8  5014               	movf	??__doprnt+1,w,c
  6295  00F8BA  6EFE               	movwf	tosh,c
  6296  00F8BC  6AFF               	clrf	tosu,c
  6297  00F8BE  50FA               	movf	pclath,w,c
  6298  00F8C0  501E               	movf	__doprnt@c,w,c
  6299  00F8C2  0012               	return		;indir
  6300  00F8C4                     l2258:
  6301  00F8C4  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6302  00F8C8  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6303  00F8CC  CFDE F013          	movff	postinc2,??__doprnt
  6304  00F8D0  CFDD F014          	movff	postdec2,??__doprnt+1
  6305  00F8D4  C013  FFD9         	movff	??__doprnt,fsr2l
  6306  00F8D8  C014  FFDA         	movff	??__doprnt+1,fsr2h
  6307  00F8DC  C01E  FFDF         	movff	__doprnt@c,indf2
  6308  00F8E0  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6309  00F8E4  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6310  00F8E8  2ADE               	incf	postinc2,f,c
  6311  00F8EA  0E00               	movlw	0
  6312  00F8EC  22DD               	addwfc	postdec2,f,c
  6313                           
  6314                           ;doprnt.c: 542: continue;
  6315  00F8EE  D28A               	goto	l2410
  6316  00F8F0                     l2262:
  6317                           
  6318                           ;doprnt.c: 543: }
  6319                           ;doprnt.c: 546: width = 0;
  6320  00F8F0  0E00               	movlw	0
  6321  00F8F2  6E1D               	movwf	__doprnt@width+1,c
  6322  00F8F4  0E00               	movlw	0
  6323  00F8F6  6E1C               	movwf	__doprnt@width,c
  6324                           
  6325                           ;doprnt.c: 548: flag = 0;
  6326  00F8F8  0E00               	movlw	0
  6327  00F8FA  6E1B               	movwf	__doprnt@flag,c
  6328                           
  6329                           ;doprnt.c: 551: switch(*f) {
  6330                           
  6331                           ;doprnt.c: 550: for(;;) {
  6332  00F8FC  D003               	goto	l2268
  6333  00F8FE                     l2264:
  6334                           
  6335                           ;doprnt.c: 580: flag |= 0x04;
  6336  00F8FE  841B               	bsf	__doprnt@flag,2,c
  6337                           
  6338                           ;doprnt.c: 581: f++;
  6339  00F900  4A0F               	infsnz	__doprnt@f,f,c
  6340  00F902  2A10               	incf	__doprnt@f+1,f,c
  6341  00F904                     l2268:
  6342  00F904  C00F  FFF6         	movff	__doprnt@f,tblptrl
  6343  00F908  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  6344  00F90C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6345  00F90C  6AF8               	clrf	tblptru,c
  6346  00F90E                     	endif
  6347  00F90E                     	if	0	;tblptru may be non-zero
  6348  00F90E                     	endif
  6349  00F90E  0008               	tblrd		*
  6350  00F910  50F5               	movf	tablat,w,c
  6351                           
  6352                           ; Switch size 1, requested type "space"
  6353                           ; Number of cases is 1, Range of values is 48 to 48
  6354                           ; switch strategies available:
  6355                           ; Name         Instructions Cycles
  6356                           ; simple_byte            4     3 (average)
  6357                           ;	Chosen strategy is simple_byte
  6358  00F912  0A30               	xorlw	48	; case 48
  6359  00F914  B4D8               	btfsc	status,2,c
  6360  00F916  D7F3               	goto	l2264
  6361                           
  6362                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  6363                           
  6364                           ;doprnt.c: 586: }
  6365                           
  6366                           ;doprnt.c: 585: break;
  6367  00F918  C00F  FFF6         	movff	__doprnt@f,tblptrl
  6368  00F91C  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  6369  00F920                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6370  00F920  6AF8               	clrf	tblptru,c
  6371  00F922                     	endif
  6372  00F922                     	if	0	;tblptru may be non-zero
  6373  00F922                     	endif
  6374  00F922  0008               	tblrd		*
  6375  00F924  50F5               	movf	tablat,w,c
  6376  00F926  EC5E  F072         	call	_isdigit
  6377  00F92A  A0D8               	btfss	status,0,c
  6378  00F92C  D037               	goto	l2286
  6379                           
  6380                           ;doprnt.c: 598: width = 0;
  6381  00F92E  0E00               	movlw	0
  6382  00F930  6E1D               	movwf	__doprnt@width+1,c
  6383  00F932  0E00               	movlw	0
  6384  00F934  6E1C               	movwf	__doprnt@width,c
  6385  00F936                     l2274:
  6386                           
  6387                           ;doprnt.c: 600: width *= 10;
  6388  00F936  C01C  F001         	movff	__doprnt@width,___wmul@multiplier
  6389  00F93A  C01D  F002         	movff	__doprnt@width+1,___wmul@multiplier+1
  6390  00F93E  0E00               	movlw	0
  6391  00F940  6E04               	movwf	___wmul@multiplicand+1,c
  6392  00F942  0E0A               	movlw	10
  6393  00F944  6E03               	movwf	___wmul@multiplicand,c
  6394  00F946  EC7D  F072         	call	___wmul	;wreg free
  6395  00F94A  C001  F01C         	movff	?___wmul,__doprnt@width
  6396  00F94E  C002  F01D         	movff	?___wmul+1,__doprnt@width+1
  6397                           
  6398                           ;doprnt.c: 601: width += *f++ - '0';
  6399  00F952  0ED0               	movlw	208
  6400  00F954  6E13               	movwf	??__doprnt& (0+255),c
  6401  00F956  0EFF               	movlw	255
  6402  00F958  6E14               	movwf	(??__doprnt+1)& (0+255),c
  6403  00F95A  C00F  FFF6         	movff	__doprnt@f,tblptrl
  6404  00F95E  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  6405  00F962                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6406  00F962  6AF8               	clrf	tblptru,c
  6407  00F964                     	endif
  6408  00F964                     	if	0	;tblptru may be non-zero
  6409  00F964                     	endif
  6410  00F964  0008               	tblrd		*
  6411  00F966  50F5               	movf	tablat,w,c
  6412  00F968  6E15               	movwf	(??__doprnt+2)& (0+255),c
  6413  00F96A  6A16               	clrf	(??__doprnt+3)& (0+255),c
  6414  00F96C  5013               	movf	??__doprnt,w,c
  6415  00F96E  2615               	addwf	??__doprnt+2,f,c
  6416  00F970  5014               	movf	??__doprnt+1,w,c
  6417  00F972  2216               	addwfc	??__doprnt+3,f,c
  6418  00F974  5015               	movf	??__doprnt+2,w,c
  6419  00F976  261C               	addwf	__doprnt@width,f,c
  6420  00F978  5016               	movf	??__doprnt+3,w,c
  6421  00F97A  221D               	addwfc	__doprnt@width+1,f,c
  6422  00F97C  4A0F               	infsnz	__doprnt@f,f,c
  6423  00F97E  2A10               	incf	__doprnt@f+1,f,c
  6424                           
  6425                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  6426  00F980  C00F  FFF6         	movff	__doprnt@f,tblptrl
  6427  00F984  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  6428  00F988                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6429  00F988  6AF8               	clrf	tblptru,c
  6430  00F98A                     	endif
  6431  00F98A                     	if	0	;tblptru may be non-zero
  6432  00F98A                     	endif
  6433  00F98A  0008               	tblrd		*
  6434  00F98C  50F5               	movf	tablat,w,c
  6435  00F98E  EC5E  F072         	call	_isdigit
  6436  00F992  A0D8               	btfss	status,0,c
  6437  00F994  D003               	goto	l2286
  6438  00F996  D7CF               	goto	l2274
  6439  00F998                     l2282:
  6440                           
  6441                           ;doprnt.c: 721: flag |= 0x80;
  6442  00F998  8E1B               	bsf	__doprnt@flag,7,c
  6443                           
  6444                           ;doprnt.c: 723: break;
  6445  00F99A  D018               	goto	l449
  6446  00F99C                     l2286:
  6447  00F99C  C00F  FFF6         	movff	__doprnt@f,tblptrl
  6448  00F9A0  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  6449  00F9A4  4A0F               	infsnz	__doprnt@f,f,c
  6450  00F9A6  2A10               	incf	__doprnt@f+1,f,c
  6451  00F9A8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6452  00F9A8  6AF8               	clrf	tblptru,c
  6453  00F9AA                     	endif
  6454  00F9AA                     	if	0	;tblptru may be non-zero
  6455  00F9AA                     	endif
  6456  00F9AA  0008               	tblrd		*
  6457  00F9AC  CFF5 F01E          	movff	tablat,__doprnt@c
  6458  00F9B0  501E               	movf	__doprnt@c,w,c
  6459                           
  6460                           ; Switch size 1, requested type "space"
  6461                           ; Number of cases is 4, Range of values is 0 to 120
  6462                           ; switch strategies available:
  6463                           ; Name         Instructions Cycles
  6464                           ; simple_byte           13     7 (average)
  6465                           ;	Chosen strategy is simple_byte
  6466  00F9B2  0A00               	xorlw	0	; case 0
  6467  00F9B4  B4D8               	btfsc	status,2,c
  6468  00F9B6  D233               	goto	l2412
  6469  00F9B8  0A64               	xorlw	100	; case 100
  6470  00F9BA  B4D8               	btfsc	status,2,c
  6471  00F9BC  D007               	goto	l449
  6472  00F9BE  0A0D               	xorlw	13	; case 105
  6473  00F9C0  B4D8               	btfsc	status,2,c
  6474  00F9C2  D004               	goto	l449
  6475  00F9C4  0A11               	xorlw	17	; case 120
  6476  00F9C6  B4D8               	btfsc	status,2,c
  6477  00F9C8  D7E7               	goto	l2282
  6478  00F9CA  D21C               	goto	l2410
  6479  00F9CC                     l449:
  6480                           
  6481                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6482  00F9CC  BE1B               	btfsc	__doprnt@flag,7,c
  6483  00F9CE  D01D               	goto	l2296
  6484                           
  6485                           ;doprnt.c: 1253: {
  6486                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  6487  00F9D0  C011  FFD9         	movff	__doprnt@ap,fsr2l
  6488  00F9D4  C012  FFDA         	movff	__doprnt@ap+1,fsr2h
  6489  00F9D8  CFDF F013          	movff	indf2,??__doprnt
  6490  00F9DC  0E02               	movlw	2
  6491  00F9DE  26DE               	addwf	postinc2,f,c
  6492  00F9E0  CFDF F014          	movff	indf2,??__doprnt+1
  6493  00F9E4  0E00               	movlw	0
  6494  00F9E6  22DD               	addwfc	postdec2,f,c
  6495  00F9E8  C013  FFD9         	movff	??__doprnt,fsr2l
  6496  00F9EC  C014  FFDA         	movff	??__doprnt+1,fsr2h
  6497  00F9F0  CFDE F019          	movff	postinc2,__doprnt@val
  6498  00F9F4  CFDD F01A          	movff	postdec2,__doprnt@val+1
  6499                           
  6500                           ;doprnt.c: 1261: if((int)val < 0) {
  6501  00F9F8  AE1A               	btfss	__doprnt@val+1,7,c
  6502  00F9FA  D052               	goto	l2328
  6503                           
  6504                           ;doprnt.c: 1262: flag |= 0x03;
  6505  00F9FC  0E03               	movlw	3
  6506  00F9FE  121B               	iorwf	__doprnt@flag,f,c
  6507                           
  6508                           ;doprnt.c: 1263: val = -val;
  6509  00FA00  6C19               	negf	__doprnt@val,c
  6510  00FA02  1E1A               	comf	__doprnt@val+1,f,c
  6511  00FA04  B0D8               	btfsc	status,0,c
  6512  00FA06  2A1A               	incf	__doprnt@val+1,f,c
  6513                           
  6514                           ;doprnt.c: 1264: }
  6515                           ;doprnt.c: 1266: }
  6516  00FA08  D04B               	goto	l2328
  6517  00FA0A                     l2296:
  6518                           
  6519                           ;doprnt.c: 1268: else
  6520                           ;doprnt.c: 1273: {
  6521                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6522  00FA0A  C011  FFD9         	movff	__doprnt@ap,fsr2l
  6523  00FA0E  C012  FFDA         	movff	__doprnt@ap+1,fsr2h
  6524  00FA12  CFDF F013          	movff	indf2,??__doprnt
  6525  00FA16  0E02               	movlw	2
  6526  00FA18  26DE               	addwf	postinc2,f,c
  6527  00FA1A  CFDF F014          	movff	indf2,??__doprnt+1
  6528  00FA1E  0E00               	movlw	0
  6529  00FA20  22DD               	addwfc	postdec2,f,c
  6530  00FA22  C013  FFD9         	movff	??__doprnt,fsr2l
  6531  00FA26  C014  FFDA         	movff	??__doprnt+1,fsr2h
  6532  00FA2A  CFDE F019          	movff	postinc2,__doprnt@val
  6533  00FA2E  CFDD F01A          	movff	postdec2,__doprnt@val+1
  6534                           
  6535                           ;doprnt.c: 1287: }
  6536                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6537  00FA32  D036               	goto	l2328
  6538  00FA34                     l2298:
  6539                           
  6540                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6541  00FA34  0E01               	movlw	1
  6542  00FA36  6E1E               	movwf	__doprnt@c,c
  6543  00FA38                     l2300:
  6544  00FA38  0E05               	movlw	5
  6545  00FA3A  181E               	xorwf	__doprnt@c,w,c
  6546  00FA3C  B4D8               	btfsc	status,2,c
  6547  00FA3E  D038               	goto	l2330
  6548                           
  6549                           ;doprnt.c: 1306: if(val < dpowers[c])
  6550  00FA40  501E               	movf	__doprnt@c,w,c
  6551  00FA42  0D02               	mullw	2
  6552  00FA44  0E3A               	movlw	low _dpowers
  6553  00FA46  24F3               	addwf	prodl,w,c
  6554  00FA48  6EF6               	movwf	tblptrl,c
  6555  00FA4A  0EFE               	movlw	high _dpowers
  6556  00FA4C  20F4               	addwfc	prodh,w,c
  6557  00FA4E  6EF7               	movwf	tblptrh,c
  6558  00FA50                     	if	1	;There are 3 active tblptr bytes
  6559  00FA50  6AF8               	clrf	tblptru,c
  6560  00FA52  0E00               	movlw	low (__mediumconst shr (0+16))
  6561  00FA54  22F8               	addwfc	tblptru,f,c
  6562  00FA56                     	endif
  6563  00FA56  0009               	tblrd		*+
  6564  00FA58  50F5               	movf	tablat,w,c
  6565  00FA5A  5C19               	subwf	__doprnt@val,w,c
  6566  00FA5C  0009               	tblrd		*+
  6567  00FA5E  50F5               	movf	tablat,w,c
  6568  00FA60  581A               	subwfb	__doprnt@val+1,w,c
  6569  00FA62  A0D8               	btfss	status,0,c
  6570  00FA64  D025               	goto	l2330
  6571                           
  6572                           ;doprnt.c: 1307: break;
  6573  00FA66  2A1E               	incf	__doprnt@c,f,c
  6574  00FA68  D7E7               	goto	l2300
  6575  00FA6A                     l2312:
  6576                           
  6577                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6578  00FA6A  0E01               	movlw	1
  6579  00FA6C  6E1E               	movwf	__doprnt@c,c
  6580  00FA6E                     l2314:
  6581  00FA6E  0E04               	movlw	4
  6582  00FA70  181E               	xorwf	__doprnt@c,w,c
  6583  00FA72  B4D8               	btfsc	status,2,c
  6584  00FA74  D01D               	goto	l2330
  6585                           
  6586                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6587  00FA76  501E               	movf	__doprnt@c,w,c
  6588  00FA78  0D02               	mullw	2
  6589  00FA7A  0E44               	movlw	low _hexpowers
  6590  00FA7C  24F3               	addwf	prodl,w,c
  6591  00FA7E  6EF6               	movwf	tblptrl,c
  6592  00FA80  0EFE               	movlw	high _hexpowers
  6593  00FA82  20F4               	addwfc	prodh,w,c
  6594  00FA84  6EF7               	movwf	tblptrh,c
  6595  00FA86                     	if	1	;There are 3 active tblptr bytes
  6596  00FA86  6AF8               	clrf	tblptru,c
  6597  00FA88  0E00               	movlw	low (__mediumconst shr (0+16))
  6598  00FA8A  22F8               	addwfc	tblptru,f,c
  6599  00FA8C                     	endif
  6600  00FA8C  0009               	tblrd		*+
  6601  00FA8E  50F5               	movf	tablat,w,c
  6602  00FA90  5C19               	subwf	__doprnt@val,w,c
  6603  00FA92  0009               	tblrd		*+
  6604  00FA94  50F5               	movf	tablat,w,c
  6605  00FA96  581A               	subwfb	__doprnt@val+1,w,c
  6606  00FA98  A0D8               	btfss	status,0,c
  6607  00FA9A  D00A               	goto	l2330
  6608                           
  6609                           ;doprnt.c: 1318: break;
  6610  00FA9C  2A1E               	incf	__doprnt@c,f,c
  6611  00FA9E  D7E7               	goto	l2314
  6612  00FAA0                     l2328:
  6613  00FAA0  501B               	movf	__doprnt@flag,w,c
  6614  00FAA2  0B80               	andlw	128
  6615                           
  6616                           ; Switch size 1, requested type "space"
  6617                           ; Number of cases is 2, Range of values is 0 to 128
  6618                           ; switch strategies available:
  6619                           ; Name         Instructions Cycles
  6620                           ; simple_byte            7     4 (average)
  6621                           ;	Chosen strategy is simple_byte
  6622  00FAA4  0A00               	xorlw	0	; case 0
  6623  00FAA6  B4D8               	btfsc	status,2,c
  6624  00FAA8  D7C5               	goto	l2298
  6625  00FAAA  0A80               	xorlw	128	; case 128
  6626  00FAAC  B4D8               	btfsc	status,2,c
  6627  00FAAE  D7DD               	goto	l2312
  6628  00FAB0                     l2330:
  6629                           
  6630                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6631  00FAB0  501C               	movf	__doprnt@width,w,c
  6632  00FAB2  101D               	iorwf	__doprnt@width+1,w,c
  6633  00FAB4  B4D8               	btfsc	status,2,c
  6634  00FAB6  D009               	goto	l2336
  6635  00FAB8  C01B  F013         	movff	__doprnt@flag,??__doprnt
  6636  00FABC  0E03               	movlw	3
  6637  00FABE  1613               	andwf	??__doprnt,f,c
  6638  00FAC0  B4D8               	btfsc	status,2,c
  6639  00FAC2  D003               	goto	l2336
  6640                           
  6641                           ;doprnt.c: 1346: width--;
  6642  00FAC4  061C               	decf	__doprnt@width,f,c
  6643  00FAC6  A0D8               	btfss	status,0,c
  6644  00FAC8  061D               	decf	__doprnt@width+1,f,c
  6645  00FACA                     l2336:
  6646                           
  6647                           ;doprnt.c: 1381: if(width > c)
  6648  00FACA  0E80               	movlw	128
  6649  00FACC  BE1E               	btfsc	__doprnt@c,7,c
  6650  00FACE  0E7F               	movlw	127
  6651  00FAD0  6E13               	movwf	??__doprnt& (0+255),c
  6652  00FAD2  501C               	movf	__doprnt@width,w,c
  6653  00FAD4  5C1E               	subwf	__doprnt@c,w,c
  6654  00FAD6  501D               	movf	__doprnt@width+1,w,c
  6655  00FAD8  0A80               	xorlw	128
  6656  00FADA  5813               	subwfb	??__doprnt& (0+255),w,c
  6657  00FADC  B0D8               	btfsc	status,0,c
  6658  00FADE  D007               	goto	l2340
  6659                           
  6660                           ;doprnt.c: 1382: width -= c;
  6661  00FAE0  501E               	movf	__doprnt@c,w,c
  6662  00FAE2  5E1C               	subwf	__doprnt@width,f,c
  6663  00FAE4  0E00               	movlw	0
  6664  00FAE6  BE1E               	btfsc	__doprnt@c,7,c
  6665  00FAE8  0EFF               	movlw	255
  6666  00FAEA  5A1D               	subwfb	__doprnt@width+1,f,c
  6667  00FAEC  D004               	goto	l2342
  6668  00FAEE                     l2340:
  6669                           
  6670                           ;doprnt.c: 1383: else
  6671                           ;doprnt.c: 1384: width = 0;
  6672  00FAEE  0E00               	movlw	0
  6673  00FAF0  6E1D               	movwf	__doprnt@width+1,c
  6674  00FAF2  0E00               	movlw	0
  6675  00FAF4  6E1C               	movwf	__doprnt@width,c
  6676  00FAF6                     l2342:
  6677                           
  6678                           ;doprnt.c: 1387: if(flag & 0x04) {
  6679  00FAF6  A41B               	btfss	__doprnt@flag,2,c
  6680  00FAF8  D078               	goto	l2366
  6681                           
  6682                           ;doprnt.c: 1392: if(flag & 0x03)
  6683  00FAFA  C01B  F013         	movff	__doprnt@flag,??__doprnt
  6684  00FAFE  0E03               	movlw	3
  6685  00FB00  1613               	andwf	??__doprnt,f,c
  6686  00FB02  B4D8               	btfsc	status,2,c
  6687  00FB04  D035               	goto	l2354
  6688                           
  6689                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  6690  00FB06  EE20 F002          	lfsr	2,2
  6691  00FB0A  500D               	movf	__doprnt@pb,w,c
  6692  00FB0C  26D9               	addwf	fsr2l,f,c
  6693  00FB0E  500E               	movf	__doprnt@pb+1,w,c
  6694  00FB10  22DA               	addwfc	fsr2h,f,c
  6695  00FB12  50DE               	movf	postinc2,w,c
  6696  00FB14  10DE               	iorwf	postinc2,w,c
  6697  00FB16  B4D8               	btfsc	status,2,c
  6698  00FB18  D016               	goto	l2350
  6699  00FB1A  EE20 F002          	lfsr	2,2
  6700  00FB1E  500D               	movf	__doprnt@pb,w,c
  6701  00FB20  26D9               	addwf	fsr2l,f,c
  6702  00FB22  500E               	movf	__doprnt@pb+1,w,c
  6703  00FB24  22DA               	addwfc	fsr2h,f,c
  6704  00FB26  CFDE F013          	movff	postinc2,??__doprnt
  6705  00FB2A  CFDD F014          	movff	postdec2,??__doprnt+1
  6706  00FB2E  D801               	call	u1588
  6707  00FB30  D01F               	goto	l2354
  6708  00FB32                     u1588:
  6709  00FB32  0005               	push	
  6710  00FB34  6EFA               	movwf	pclath,c
  6711  00FB36  5013               	movf	??__doprnt,w,c
  6712  00FB38  6EFD               	movwf	tosl,c
  6713  00FB3A  5014               	movf	??__doprnt+1,w,c
  6714  00FB3C  6EFE               	movwf	tosh,c
  6715  00FB3E  6AFF               	clrf	tosu,c
  6716  00FB40  50FA               	movf	pclath,w,c
  6717  00FB42  0E2D               	movlw	45
  6718  00FB44  0012               	return		;indir
  6719  00FB46                     l2350:
  6720  00FB46  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6721  00FB4A  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6722  00FB4E  CFDE F013          	movff	postinc2,??__doprnt
  6723  00FB52  CFDD F014          	movff	postdec2,??__doprnt+1
  6724  00FB56  C013  FFD9         	movff	??__doprnt,fsr2l
  6725  00FB5A  C014  FFDA         	movff	??__doprnt+1,fsr2h
  6726  00FB5E  0E2D               	movlw	45
  6727  00FB60  6EDF               	movwf	indf2,c
  6728  00FB62  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6729  00FB66  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6730  00FB6A  2ADE               	incf	postinc2,f,c
  6731  00FB6C  0E00               	movlw	0
  6732  00FB6E  22DD               	addwfc	postdec2,f,c
  6733  00FB70                     l2354:
  6734                           
  6735                           ;doprnt.c: 1415: if(width)
  6736  00FB70  501C               	movf	__doprnt@width,w,c
  6737  00FB72  101D               	iorwf	__doprnt@width+1,w,c
  6738  00FB74  B4D8               	btfsc	status,2,c
  6739  00FB76  D0B4               	goto	l2388
  6740                           
  6741                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  6742                           
  6743                           ;doprnt.c: 1416: do
  6744  00FB78  EE20 F002          	lfsr	2,2
  6745  00FB7C  500D               	movf	__doprnt@pb,w,c
  6746  00FB7E  26D9               	addwf	fsr2l,f,c
  6747  00FB80  500E               	movf	__doprnt@pb+1,w,c
  6748  00FB82  22DA               	addwfc	fsr2h,f,c
  6749  00FB84  50DE               	movf	postinc2,w,c
  6750  00FB86  10DE               	iorwf	postinc2,w,c
  6751  00FB88  B4D8               	btfsc	status,2,c
  6752  00FB8A  D016               	goto	l2360
  6753  00FB8C  EE20 F002          	lfsr	2,2
  6754  00FB90  500D               	movf	__doprnt@pb,w,c
  6755  00FB92  26D9               	addwf	fsr2l,f,c
  6756  00FB94  500E               	movf	__doprnt@pb+1,w,c
  6757  00FB96  22DA               	addwfc	fsr2h,f,c
  6758  00FB98  CFDE F013          	movff	postinc2,??__doprnt
  6759  00FB9C  CFDD F014          	movff	postdec2,??__doprnt+1
  6760  00FBA0  D801               	call	u1618
  6761  00FBA2  D01F               	goto	l2364
  6762  00FBA4                     u1618:
  6763  00FBA4  0005               	push	
  6764  00FBA6  6EFA               	movwf	pclath,c
  6765  00FBA8  5013               	movf	??__doprnt,w,c
  6766  00FBAA  6EFD               	movwf	tosl,c
  6767  00FBAC  5014               	movf	??__doprnt+1,w,c
  6768  00FBAE  6EFE               	movwf	tosh,c
  6769  00FBB0  6AFF               	clrf	tosu,c
  6770  00FBB2  50FA               	movf	pclath,w,c
  6771  00FBB4  0E30               	movlw	48
  6772  00FBB6  0012               	return		;indir
  6773  00FBB8                     l2360:
  6774  00FBB8  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6775  00FBBC  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6776  00FBC0  CFDE F013          	movff	postinc2,??__doprnt
  6777  00FBC4  CFDD F014          	movff	postdec2,??__doprnt+1
  6778  00FBC8  C013  FFD9         	movff	??__doprnt,fsr2l
  6779  00FBCC  C014  FFDA         	movff	??__doprnt+1,fsr2h
  6780  00FBD0  0E30               	movlw	48
  6781  00FBD2  6EDF               	movwf	indf2,c
  6782  00FBD4  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6783  00FBD8  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6784  00FBDC  2ADE               	incf	postinc2,f,c
  6785  00FBDE  0E00               	movlw	0
  6786  00FBE0  22DD               	addwfc	postdec2,f,c
  6787  00FBE2                     l2364:
  6788                           
  6789                           ;doprnt.c: 1418: while(--width);
  6790  00FBE2  061C               	decf	__doprnt@width,f,c
  6791  00FBE4  A0D8               	btfss	status,0,c
  6792  00FBE6  061D               	decf	__doprnt@width+1,f,c
  6793  00FBE8  D7C3               	goto	l2354
  6794  00FBEA                     l2366:
  6795                           
  6796                           ;doprnt.c: 1422: {
  6797                           ;doprnt.c: 1424: if(width
  6798                           ;doprnt.c: 1428: )
  6799  00FBEA  501C               	movf	__doprnt@width,w,c
  6800  00FBEC  101D               	iorwf	__doprnt@width+1,w,c
  6801  00FBEE  B4D8               	btfsc	status,2,c
  6802  00FBF0  D03C               	goto	l2378
  6803  00FBF2                     l2368:
  6804                           
  6805                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  6806  00FBF2  EE20 F002          	lfsr	2,2
  6807  00FBF6  500D               	movf	__doprnt@pb,w,c
  6808  00FBF8  26D9               	addwf	fsr2l,f,c
  6809  00FBFA  500E               	movf	__doprnt@pb+1,w,c
  6810  00FBFC  22DA               	addwfc	fsr2h,f,c
  6811  00FBFE  50DE               	movf	postinc2,w,c
  6812  00FC00  10DE               	iorwf	postinc2,w,c
  6813  00FC02  B4D8               	btfsc	status,2,c
  6814  00FC04  D016               	goto	l2372
  6815  00FC06  EE20 F002          	lfsr	2,2
  6816  00FC0A  500D               	movf	__doprnt@pb,w,c
  6817  00FC0C  26D9               	addwf	fsr2l,f,c
  6818  00FC0E  500E               	movf	__doprnt@pb+1,w,c
  6819  00FC10  22DA               	addwfc	fsr2h,f,c
  6820  00FC12  CFDE F013          	movff	postinc2,??__doprnt
  6821  00FC16  CFDD F014          	movff	postdec2,??__doprnt+1
  6822  00FC1A  D801               	call	u1658
  6823  00FC1C  D01F               	goto	l2376
  6824  00FC1E                     u1658:
  6825  00FC1E  0005               	push	
  6826  00FC20  6EFA               	movwf	pclath,c
  6827  00FC22  5013               	movf	??__doprnt,w,c
  6828  00FC24  6EFD               	movwf	tosl,c
  6829  00FC26  5014               	movf	??__doprnt+1,w,c
  6830  00FC28  6EFE               	movwf	tosh,c
  6831  00FC2A  6AFF               	clrf	tosu,c
  6832  00FC2C  50FA               	movf	pclath,w,c
  6833  00FC2E  0E20               	movlw	32
  6834  00FC30  0012               	return		;indir
  6835  00FC32                     l2372:
  6836  00FC32  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6837  00FC36  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6838  00FC3A  CFDE F013          	movff	postinc2,??__doprnt
  6839  00FC3E  CFDD F014          	movff	postdec2,??__doprnt+1
  6840  00FC42  C013  FFD9         	movff	??__doprnt,fsr2l
  6841  00FC46  C014  FFDA         	movff	??__doprnt+1,fsr2h
  6842  00FC4A  0E20               	movlw	32
  6843  00FC4C  6EDF               	movwf	indf2,c
  6844  00FC4E  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6845  00FC52  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6846  00FC56  2ADE               	incf	postinc2,f,c
  6847  00FC58  0E00               	movlw	0
  6848  00FC5A  22DD               	addwfc	postdec2,f,c
  6849  00FC5C                     l2376:
  6850                           
  6851                           ;doprnt.c: 1431: while(--width);
  6852  00FC5C  061C               	decf	__doprnt@width,f,c
  6853  00FC5E  A0D8               	btfss	status,0,c
  6854  00FC60  061D               	decf	__doprnt@width+1,f,c
  6855  00FC62  501C               	movf	__doprnt@width,w,c
  6856  00FC64  101D               	iorwf	__doprnt@width+1,w,c
  6857  00FC66  A4D8               	btfss	status,2,c
  6858  00FC68  D7C4               	goto	l2368
  6859  00FC6A                     l2378:
  6860                           
  6861                           ;doprnt.c: 1438: if(flag & 0x03)
  6862  00FC6A  C01B  F013         	movff	__doprnt@flag,??__doprnt
  6863  00FC6E  0E03               	movlw	3
  6864  00FC70  1613               	andwf	??__doprnt,f,c
  6865  00FC72  B4D8               	btfsc	status,2,c
  6866  00FC74  D035               	goto	l2388
  6867                           
  6868                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  6869  00FC76  EE20 F002          	lfsr	2,2
  6870  00FC7A  500D               	movf	__doprnt@pb,w,c
  6871  00FC7C  26D9               	addwf	fsr2l,f,c
  6872  00FC7E  500E               	movf	__doprnt@pb+1,w,c
  6873  00FC80  22DA               	addwfc	fsr2h,f,c
  6874  00FC82  50DE               	movf	postinc2,w,c
  6875  00FC84  10DE               	iorwf	postinc2,w,c
  6876  00FC86  B4D8               	btfsc	status,2,c
  6877  00FC88  D016               	goto	l2384
  6878  00FC8A  EE20 F002          	lfsr	2,2
  6879  00FC8E  500D               	movf	__doprnt@pb,w,c
  6880  00FC90  26D9               	addwf	fsr2l,f,c
  6881  00FC92  500E               	movf	__doprnt@pb+1,w,c
  6882  00FC94  22DA               	addwfc	fsr2h,f,c
  6883  00FC96  CFDE F013          	movff	postinc2,??__doprnt
  6884  00FC9A  CFDD F014          	movff	postdec2,??__doprnt+1
  6885  00FC9E  D801               	call	u1698
  6886  00FCA0  D01F               	goto	l2388
  6887  00FCA2                     u1698:
  6888  00FCA2  0005               	push	
  6889  00FCA4  6EFA               	movwf	pclath,c
  6890  00FCA6  5013               	movf	??__doprnt,w,c
  6891  00FCA8  6EFD               	movwf	tosl,c
  6892  00FCAA  5014               	movf	??__doprnt+1,w,c
  6893  00FCAC  6EFE               	movwf	tosh,c
  6894  00FCAE  6AFF               	clrf	tosu,c
  6895  00FCB0  50FA               	movf	pclath,w,c
  6896  00FCB2  0E2D               	movlw	45
  6897  00FCB4  0012               	return		;indir
  6898  00FCB6                     l2384:
  6899  00FCB6  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6900  00FCBA  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6901  00FCBE  CFDE F013          	movff	postinc2,??__doprnt
  6902  00FCC2  CFDD F014          	movff	postdec2,??__doprnt+1
  6903  00FCC6  C013  FFD9         	movff	??__doprnt,fsr2l
  6904  00FCCA  C014  FFDA         	movff	??__doprnt+1,fsr2h
  6905  00FCCE  0E2D               	movlw	45
  6906  00FCD0  6EDF               	movwf	indf2,c
  6907  00FCD2  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  6908  00FCD6  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  6909  00FCDA  2ADE               	incf	postinc2,f,c
  6910  00FCDC  0E00               	movlw	0
  6911  00FCDE  22DD               	addwfc	postdec2,f,c
  6912  00FCE0                     l2388:
  6913                           
  6914                           ;doprnt.c: 1469: }
  6915                           ;doprnt.c: 1472: prec = c;
  6916  00FCE0  C01E  F018         	movff	__doprnt@c,__doprnt@prec
  6917                           
  6918                           ;doprnt.c: 1474: while(prec--) {
  6919  00FCE4  D08B               	goto	l2408
  6920  00FCE6                     l2390:
  6921                           
  6922                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6923  00FCE6  5018               	movf	__doprnt@prec,w,c
  6924  00FCE8  0D02               	mullw	2
  6925  00FCEA  0E3A               	movlw	low _dpowers
  6926  00FCEC  24F3               	addwf	prodl,w,c
  6927  00FCEE  6EF6               	movwf	tblptrl,c
  6928  00FCF0  0EFE               	movlw	high _dpowers
  6929  00FCF2  20F4               	addwfc	prodh,w,c
  6930  00FCF4  6EF7               	movwf	tblptrh,c
  6931  00FCF6                     	if	1	;There are 3 active tblptr bytes
  6932  00FCF6  6AF8               	clrf	tblptru,c
  6933  00FCF8  0E00               	movlw	low (__mediumconst shr (0+16))
  6934  00FCFA  22F8               	addwfc	tblptru,f,c
  6935  00FCFC                     	endif
  6936  00FCFC  0009               	tblrd		*+
  6937  00FCFE  CFF5 F003          	movff	tablat,___lwdiv@divisor
  6938  00FD02  000A               	tblrd		*-
  6939  00FD04  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  6940  00FD08  C019  F001         	movff	__doprnt@val,___lwdiv@dividend
  6941  00FD0C  C01A  F002         	movff	__doprnt@val+1,___lwdiv@dividend+1
  6942  00FD10  ECA0  F073         	call	___lwdiv
  6943  00FD14  C001  F008         	movff	?___lwdiv,___lwmod@dividend
  6944  00FD18  C002  F009         	movff	?___lwdiv+1,___lwmod@dividend+1
  6945  00FD1C  0E00               	movlw	0
  6946  00FD1E  6E0B               	movwf	___lwmod@divisor+1,c
  6947  00FD20  0E0A               	movlw	10
  6948  00FD22  6E0A               	movwf	___lwmod@divisor,c
  6949  00FD24  EC3B  F073         	call	___lwmod	;wreg free
  6950  00FD28  5008               	movf	?___lwmod,w,c
  6951  00FD2A  0F30               	addlw	48
  6952  00FD2C  6E1E               	movwf	__doprnt@c,c
  6953                           
  6954                           ;doprnt.c: 1491: break;
  6955  00FD2E  D031               	goto	l2400
  6956  00FD30                     l2392:
  6957                           
  6958                           ;doprnt.c: 1499: {
  6959                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6960  00FD30  C019  F001         	movff	__doprnt@val,___lwdiv@dividend
  6961  00FD34  C01A  F002         	movff	__doprnt@val+1,___lwdiv@dividend+1
  6962  00FD38  5018               	movf	__doprnt@prec,w,c
  6963  00FD3A  0D02               	mullw	2
  6964  00FD3C  0E44               	movlw	low _hexpowers
  6965  00FD3E  24F3               	addwf	prodl,w,c
  6966  00FD40  6EF6               	movwf	tblptrl,c
  6967  00FD42  0EFE               	movlw	high _hexpowers
  6968  00FD44  20F4               	addwfc	prodh,w,c
  6969  00FD46  6EF7               	movwf	tblptrh,c
  6970  00FD48                     	if	1	;There are 3 active tblptr bytes
  6971  00FD48  6AF8               	clrf	tblptru,c
  6972  00FD4A  0E00               	movlw	low (__mediumconst shr (0+16))
  6973  00FD4C  22F8               	addwfc	tblptru,f,c
  6974  00FD4E                     	endif
  6975  00FD4E  0009               	tblrd		*+
  6976  00FD50  CFF5 F003          	movff	tablat,___lwdiv@divisor
  6977  00FD54  000A               	tblrd		*-
  6978  00FD56  CFF5 F004          	movff	tablat,___lwdiv@divisor+1
  6979  00FD5A  ECA0  F073         	call	___lwdiv	;wreg free
  6980  00FD5E  5001               	movf	?___lwdiv,w,c
  6981  00FD60  0B0F               	andlw	15
  6982  00FD62  6E17               	movwf	__doprnt@idx,c
  6983                           
  6984                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6985  00FD64  5017               	movf	__doprnt@idx,w,c
  6986  00FD66  0D01               	mullw	1
  6987  00FD68  0E78               	movlw	low STR_37
  6988  00FD6A  24F3               	addwf	prodl,w,c
  6989  00FD6C  6EF6               	movwf	tblptrl,c
  6990  00FD6E  0EFE               	movlw	high STR_37
  6991  00FD70  20F4               	addwfc	prodh,w,c
  6992  00FD72  6EF7               	movwf	tblptrh,c
  6993  00FD74                     	if	1	;There are 3 active tblptr bytes
  6994  00FD74  6AF8               	clrf	tblptru,c
  6995  00FD76  0E00               	movlw	low (__mediumconst shr (0+16))
  6996  00FD78  22F8               	addwfc	tblptru,f,c
  6997  00FD7A                     	endif
  6998  00FD7A  0008               	tblrd		*
  6999  00FD7C  CFF5 F01E          	movff	tablat,__doprnt@c
  7000                           
  7001                           ;doprnt.c: 1523: }
  7002                           
  7003                           ;doprnt.c: 1508: }
  7004                           ;doprnt.c: 1510: break;
  7005  00FD80  D008               	goto	l2400
  7006  00FD82                     l2398:
  7007  00FD82  501B               	movf	__doprnt@flag,w,c
  7008  00FD84  0B80               	andlw	128
  7009                           
  7010                           ; Switch size 1, requested type "space"
  7011                           ; Number of cases is 2, Range of values is 0 to 128
  7012                           ; switch strategies available:
  7013                           ; Name         Instructions Cycles
  7014                           ; simple_byte            7     4 (average)
  7015                           ;	Chosen strategy is simple_byte
  7016  00FD86  0A00               	xorlw	0	; case 0
  7017  00FD88  B4D8               	btfsc	status,2,c
  7018  00FD8A  D7AD               	goto	l2390
  7019  00FD8C  0A80               	xorlw	128	; case 128
  7020  00FD8E  B4D8               	btfsc	status,2,c
  7021  00FD90  D7CF               	goto	l2392
  7022  00FD92                     l2400:
  7023                           
  7024                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  7025  00FD92  EE20 F002          	lfsr	2,2
  7026  00FD96  500D               	movf	__doprnt@pb,w,c
  7027  00FD98  26D9               	addwf	fsr2l,f,c
  7028  00FD9A  500E               	movf	__doprnt@pb+1,w,c
  7029  00FD9C  22DA               	addwfc	fsr2h,f,c
  7030  00FD9E  50DE               	movf	postinc2,w,c
  7031  00FDA0  10DE               	iorwf	postinc2,w,c
  7032  00FDA2  B4D8               	btfsc	status,2,c
  7033  00FDA4  D016               	goto	l2404
  7034  00FDA6  EE20 F002          	lfsr	2,2
  7035  00FDAA  500D               	movf	__doprnt@pb,w,c
  7036  00FDAC  26D9               	addwf	fsr2l,f,c
  7037  00FDAE  500E               	movf	__doprnt@pb+1,w,c
  7038  00FDB0  22DA               	addwfc	fsr2h,f,c
  7039  00FDB2  CFDE F013          	movff	postinc2,??__doprnt
  7040  00FDB6  CFDD F014          	movff	postdec2,??__doprnt+1
  7041  00FDBA  D801               	call	u1718
  7042  00FDBC  D01F               	goto	l2408
  7043  00FDBE                     u1718:
  7044  00FDBE  0005               	push	
  7045  00FDC0  6EFA               	movwf	pclath,c
  7046  00FDC2  5013               	movf	??__doprnt,w,c
  7047  00FDC4  6EFD               	movwf	tosl,c
  7048  00FDC6  5014               	movf	??__doprnt+1,w,c
  7049  00FDC8  6EFE               	movwf	tosh,c
  7050  00FDCA  6AFF               	clrf	tosu,c
  7051  00FDCC  50FA               	movf	pclath,w,c
  7052  00FDCE  501E               	movf	__doprnt@c,w,c
  7053  00FDD0  0012               	return		;indir
  7054  00FDD2                     l2404:
  7055  00FDD2  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  7056  00FDD6  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  7057  00FDDA  CFDE F013          	movff	postinc2,??__doprnt
  7058  00FDDE  CFDD F014          	movff	postdec2,??__doprnt+1
  7059  00FDE2  C013  FFD9         	movff	??__doprnt,fsr2l
  7060  00FDE6  C014  FFDA         	movff	??__doprnt+1,fsr2h
  7061  00FDEA  C01E  FFDF         	movff	__doprnt@c,indf2
  7062  00FDEE  C00D  FFD9         	movff	__doprnt@pb,fsr2l
  7063  00FDF2  C00E  FFDA         	movff	__doprnt@pb+1,fsr2h
  7064  00FDF6  2ADE               	incf	postinc2,f,c
  7065  00FDF8  0E00               	movlw	0
  7066  00FDFA  22DD               	addwfc	postdec2,f,c
  7067  00FDFC                     l2408:
  7068  00FDFC  0618               	decf	__doprnt@prec,f,c
  7069  00FDFE  2818               	incf	__doprnt@prec,w,c
  7070  00FE00  A4D8               	btfss	status,2,c
  7071  00FE02  D7BF               	goto	l2398
  7072  00FE04                     l2410:
  7073  00FE04  C00F  FFF6         	movff	__doprnt@f,tblptrl
  7074  00FE08  C010  FFF7         	movff	__doprnt@f+1,tblptrh
  7075  00FE0C  4A0F               	infsnz	__doprnt@f,f,c
  7076  00FE0E  2A10               	incf	__doprnt@f+1,f,c
  7077  00FE10                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7078  00FE10  6AF8               	clrf	tblptru,c
  7079  00FE12                     	endif
  7080  00FE12                     	if	0	;tblptru may be non-zero
  7081  00FE12                     	endif
  7082  00FE12  0008               	tblrd		*
  7083  00FE14  CFF5 F01E          	movff	tablat,__doprnt@c
  7084  00FE18  501E               	movf	__doprnt@c,w,c
  7085  00FE1A  A4D8               	btfss	status,2,c
  7086  00FE1C  D52F               	goto	l2252
  7087  00FE1E                     l2412:
  7088                           
  7089                           ;doprnt.c: 1540: return 0;
  7090  00FE1E  0E00               	movlw	0
  7091  00FE20  6E0E               	movwf	?__doprnt+1,c
  7092  00FE22  0E00               	movlw	0
  7093  00FE24  6E0D               	movwf	?__doprnt,c
  7094  00FE26  0012               	return	
  7095  00FE28                     __end_of__doprnt:
  7096                           	opt stack 0
  7097                           tosu	equ	0xFFF
  7098                           tosh	equ	0xFFE
  7099                           tosl	equ	0xFFD
  7100                           pclath	equ	0xFFA
  7101                           tblptru	equ	0xFF8
  7102                           tblptrh	equ	0xFF7
  7103                           tblptrl	equ	0xFF6
  7104                           tablat	equ	0xFF5
  7105                           prodh	equ	0xFF4
  7106                           prodl	equ	0xFF3
  7107                           intcon	equ	0xFF2
  7108                           intcon2	equ	0xFF1
  7109                           postinc0	equ	0xFEE
  7110                           wreg	equ	0xFE8
  7111                           indf1	equ	0xFE7
  7112                           postinc1	equ	0xFE6
  7113                           postdec1	equ	0xFE5
  7114                           fsr1h	equ	0xFE2
  7115                           fsr1l	equ	0xFE1
  7116                           indf2	equ	0xFDF
  7117                           postinc2	equ	0xFDE
  7118                           postdec2	equ	0xFDD
  7119                           fsr2h	equ	0xFDA
  7120                           fsr2l	equ	0xFD9
  7121                           status	equ	0xFD8
  7122                           
  7123 ;; *************** function _putch *****************
  7124 ;; Defined at:
  7125 ;;		line 30 in file "lcd.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;  data            1    wreg     unsigned char 
  7128 ;; Auto vars:     Size  Location     Type
  7129 ;;  data            1    2[COMRAM] unsigned char 
  7130 ;; Return value:  Size  Location     Type
  7131 ;;                  1    wreg      void 
  7132 ;; Registers used:
  7133 ;;		wreg, status,2, status,0, cstack
  7134 ;; Tracked objects:
  7135 ;;		On entry : 0/0
  7136 ;;		On exit  : 0/0
  7137 ;;		Unchanged: 0/0
  7138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7140 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7143 ;;Total ram usage:        1 bytes
  7144 ;; Hardware stack levels used:    1
  7145 ;; Hardware stack levels required when called:    1
  7146 ;; This function calls:
  7147 ;;		_lcdNibble
  7148 ;; This function is called by:
  7149 ;;		_printf
  7150 ;;		__doprnt
  7151 ;; This function uses a non-reentrant model
  7152 ;;
  7153                           
  7154                           	psect	text35
  7155  00E46A                     __ptext35:
  7156                           	opt stack 0
  7157  00E46A                     _putch:
  7158                           	opt stack 24
  7159                           
  7160                           ;incstack = 0
  7161                           ;putch@data stored from wreg
  7162  00E46A  6E03               	movwf	putch@data,c
  7163                           
  7164                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  7165  00E46C  848C               	bsf	3980,2,c	;volatile
  7166                           
  7167                           ;lcd.c: 32: lcdNibble(data);
  7168  00E46E  5003               	movf	putch@data,w,c
  7169  00E470  ECF2  F073         	call	_lcdNibble
  7170  00E474  0012               	return		;funcret
  7171  00E476                     __end_of_putch:
  7172                           	opt stack 0
  7173                           tosu	equ	0xFFF
  7174                           tosh	equ	0xFFE
  7175                           tosl	equ	0xFFD
  7176                           pclath	equ	0xFFA
  7177                           tblptru	equ	0xFF8
  7178                           tblptrh	equ	0xFF7
  7179                           tblptrl	equ	0xFF6
  7180                           tablat	equ	0xFF5
  7181                           prodh	equ	0xFF4
  7182                           prodl	equ	0xFF3
  7183                           intcon	equ	0xFF2
  7184                           intcon2	equ	0xFF1
  7185                           postinc0	equ	0xFEE
  7186                           wreg	equ	0xFE8
  7187                           indf1	equ	0xFE7
  7188                           postinc1	equ	0xFE6
  7189                           postdec1	equ	0xFE5
  7190                           fsr1h	equ	0xFE2
  7191                           fsr1l	equ	0xFE1
  7192                           indf2	equ	0xFDF
  7193                           postinc2	equ	0xFDE
  7194                           postdec2	equ	0xFDD
  7195                           fsr2h	equ	0xFDA
  7196                           fsr2l	equ	0xFD9
  7197                           status	equ	0xFD8
  7198                           
  7199 ;; *************** function _isdigit *****************
  7200 ;; Defined at:
  7201 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  7202 ;; Parameters:    Size  Location     Type
  7203 ;;  c               1    wreg     unsigned char 
  7204 ;; Auto vars:     Size  Location     Type
  7205 ;;  c               1    2[COMRAM] unsigned char 
  7206 ;; Return value:  Size  Location     Type
  7207 ;;		None               void
  7208 ;; Registers used:
  7209 ;;		wreg, status,2, status,0
  7210 ;; Tracked objects:
  7211 ;;		On entry : 0/0
  7212 ;;		On exit  : 0/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7216 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7217 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7218 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7219 ;;Total ram usage:        3 bytes
  7220 ;; Hardware stack levels used:    1
  7221 ;; This function calls:
  7222 ;;		Nothing
  7223 ;; This function is called by:
  7224 ;;		__doprnt
  7225 ;;		_atoi
  7226 ;; This function uses a non-reentrant model
  7227 ;;
  7228                           
  7229                           	psect	text36
  7230  00E4BC                     __ptext36:
  7231                           	opt stack 0
  7232  00E4BC                     _isdigit:
  7233                           	opt stack 25
  7234                           
  7235                           ;incstack = 0
  7236                           ;isdigit@c stored from wreg
  7237  00E4BC  6E03               	movwf	isdigit@c,c
  7238  00E4BE  0E00               	movlw	0
  7239  00E4C0  6E02               	movwf	_isdigit$1006,c
  7240  00E4C2  0E3A               	movlw	58
  7241  00E4C4  6003               	cpfslt	isdigit@c,c
  7242  00E4C6  D005               	goto	l2202
  7243  00E4C8  0E2F               	movlw	47
  7244  00E4CA  6403               	cpfsgt	isdigit@c,c
  7245  00E4CC  D002               	goto	l2202
  7246  00E4CE  0E01               	movlw	1
  7247  00E4D0  6E02               	movwf	_isdigit$1006,c
  7248  00E4D2                     l2202:
  7249  00E4D2  C002  F001         	movff	_isdigit$1006,??_isdigit
  7250  00E4D6  3001               	rrcf	??_isdigit,w,c
  7251  00E4D8  0012               	return	
  7252  00E4DA                     __end_of_isdigit:
  7253                           	opt stack 0
  7254                           tosu	equ	0xFFF
  7255                           tosh	equ	0xFFE
  7256                           tosl	equ	0xFFD
  7257                           pclath	equ	0xFFA
  7258                           tblptru	equ	0xFF8
  7259                           tblptrh	equ	0xFF7
  7260                           tblptrl	equ	0xFF6
  7261                           tablat	equ	0xFF5
  7262                           prodh	equ	0xFF4
  7263                           prodl	equ	0xFF3
  7264                           intcon	equ	0xFF2
  7265                           intcon2	equ	0xFF1
  7266                           postinc0	equ	0xFEE
  7267                           wreg	equ	0xFE8
  7268                           indf1	equ	0xFE7
  7269                           postinc1	equ	0xFE6
  7270                           postdec1	equ	0xFE5
  7271                           fsr1h	equ	0xFE2
  7272                           fsr1l	equ	0xFE1
  7273                           indf2	equ	0xFDF
  7274                           postinc2	equ	0xFDE
  7275                           postdec2	equ	0xFDD
  7276                           fsr2h	equ	0xFDA
  7277                           fsr2l	equ	0xFD9
  7278                           status	equ	0xFD8
  7279                           
  7280 ;; *************** function ___wmul *****************
  7281 ;; Defined at:
  7282 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7283 ;; Parameters:    Size  Location     Type
  7284 ;;  multiplier      2    0[COMRAM] unsigned int 
  7285 ;;  multiplicand    2    2[COMRAM] unsigned int 
  7286 ;; Auto vars:     Size  Location     Type
  7287 ;;  product         2    4[COMRAM] unsigned int 
  7288 ;; Return value:  Size  Location     Type
  7289 ;;                  2    0[COMRAM] unsigned int 
  7290 ;; Registers used:
  7291 ;;		wreg, status,2, status,0, prodl, prodh
  7292 ;; Tracked objects:
  7293 ;;		On entry : 0/0
  7294 ;;		On exit  : 0/0
  7295 ;;		Unchanged: 0/0
  7296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7297 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7298 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7300 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7301 ;;Total ram usage:        6 bytes
  7302 ;; Hardware stack levels used:    1
  7303 ;; This function calls:
  7304 ;;		Nothing
  7305 ;; This function is called by:
  7306 ;;		_getCurrentTime
  7307 ;;		_saveEEPROM
  7308 ;;		_getEEPROM
  7309 ;;		__doprnt
  7310 ;;		_atoi
  7311 ;; This function uses a non-reentrant model
  7312 ;;
  7313                           
  7314                           	psect	text37
  7315  00E4FA                     __ptext37:
  7316                           	opt stack 0
  7317  00E4FA                     ___wmul:
  7318                           	opt stack 25
  7319                           
  7320                           ;incstack = 0
  7321  00E4FA  5001               	movf	___wmul@multiplier,w,c
  7322  00E4FC  0203               	mulwf	___wmul@multiplicand,c
  7323  00E4FE  CFF3 F005          	movff	prodl,___wmul@product
  7324  00E502  CFF4 F006          	movff	prodh,___wmul@product+1
  7325  00E506  5001               	movf	___wmul@multiplier,w,c
  7326  00E508  0204               	mulwf	___wmul@multiplicand+1,c
  7327  00E50A  50F3               	movf	prodl,w,c
  7328  00E50C  2606               	addwf	___wmul@product+1,f,c
  7329  00E50E  5002               	movf	___wmul@multiplier+1,w,c
  7330  00E510  0203               	mulwf	___wmul@multiplicand,c
  7331  00E512  50F3               	movf	prodl,w,c
  7332  00E514  2606               	addwf	___wmul@product+1,f,c
  7333  00E516  C005  F001         	movff	___wmul@product,?___wmul
  7334  00E51A  C006  F002         	movff	___wmul@product+1,?___wmul+1
  7335  00E51E  0012               	return	
  7336  00E520                     __end_of___wmul:
  7337                           	opt stack 0
  7338                           tosu	equ	0xFFF
  7339                           tosh	equ	0xFFE
  7340                           tosl	equ	0xFFD
  7341                           pclath	equ	0xFFA
  7342                           tblptru	equ	0xFF8
  7343                           tblptrh	equ	0xFF7
  7344                           tblptrl	equ	0xFF6
  7345                           tablat	equ	0xFF5
  7346                           prodh	equ	0xFF4
  7347                           prodl	equ	0xFF3
  7348                           intcon	equ	0xFF2
  7349                           intcon2	equ	0xFF1
  7350                           postinc0	equ	0xFEE
  7351                           wreg	equ	0xFE8
  7352                           indf1	equ	0xFE7
  7353                           postinc1	equ	0xFE6
  7354                           postdec1	equ	0xFE5
  7355                           fsr1h	equ	0xFE2
  7356                           fsr1l	equ	0xFE1
  7357                           indf2	equ	0xFDF
  7358                           postinc2	equ	0xFDE
  7359                           postdec2	equ	0xFDD
  7360                           fsr2h	equ	0xFDA
  7361                           fsr2l	equ	0xFD9
  7362                           status	equ	0xFD8
  7363                           
  7364 ;; *************** function ___lwmod *****************
  7365 ;; Defined at:
  7366 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  7367 ;; Parameters:    Size  Location     Type
  7368 ;;  dividend        2    7[COMRAM] unsigned int 
  7369 ;;  divisor         2    9[COMRAM] unsigned int 
  7370 ;; Auto vars:     Size  Location     Type
  7371 ;;  counter         1   11[COMRAM] unsigned char 
  7372 ;; Return value:  Size  Location     Type
  7373 ;;                  2    7[COMRAM] unsigned int 
  7374 ;; Registers used:
  7375 ;;		wreg, status,2, status,0
  7376 ;; Tracked objects:
  7377 ;;		On entry : 0/0
  7378 ;;		On exit  : 0/0
  7379 ;;		Unchanged: 0/0
  7380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7381 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7382 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7384 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7385 ;;Total ram usage:        5 bytes
  7386 ;; Hardware stack levels used:    1
  7387 ;; This function calls:
  7388 ;;		Nothing
  7389 ;; This function is called by:
  7390 ;;		__doprnt
  7391 ;; This function uses a non-reentrant model
  7392 ;;
  7393                           
  7394                           	psect	text38
  7395  00E676                     __ptext38:
  7396                           	opt stack 0
  7397  00E676                     ___lwmod:
  7398                           	opt stack 25
  7399                           
  7400                           ;incstack = 0
  7401  00E676  500A               	movf	___lwmod@divisor,w,c
  7402  00E678  100B               	iorwf	___lwmod@divisor+1,w,c
  7403  00E67A  B4D8               	btfsc	status,2,c
  7404  00E67C  D018               	goto	l929
  7405  00E67E  0E01               	movlw	1
  7406  00E680  6E0C               	movwf	___lwmod@counter,c
  7407  00E682  D004               	goto	l2240
  7408  00E684                     l2238:
  7409  00E684  90D8               	bcf	status,0,c
  7410  00E686  360A               	rlcf	___lwmod@divisor,f,c
  7411  00E688  360B               	rlcf	___lwmod@divisor+1,f,c
  7412  00E68A  2A0C               	incf	___lwmod@counter,f,c
  7413  00E68C                     l2240:
  7414  00E68C  AE0B               	btfss	___lwmod@divisor+1,7,c
  7415  00E68E  D7FA               	goto	l2238
  7416  00E690                     l2242:
  7417  00E690  500A               	movf	___lwmod@divisor,w,c
  7418  00E692  5C08               	subwf	___lwmod@dividend,w,c
  7419  00E694  500B               	movf	___lwmod@divisor+1,w,c
  7420  00E696  5809               	subwfb	___lwmod@dividend+1,w,c
  7421  00E698  A0D8               	btfss	status,0,c
  7422  00E69A  D004               	goto	l2246
  7423  00E69C  500A               	movf	___lwmod@divisor,w,c
  7424  00E69E  5E08               	subwf	___lwmod@dividend,f,c
  7425  00E6A0  500B               	movf	___lwmod@divisor+1,w,c
  7426  00E6A2  5A09               	subwfb	___lwmod@dividend+1,f,c
  7427  00E6A4                     l2246:
  7428  00E6A4  90D8               	bcf	status,0,c
  7429  00E6A6  320B               	rrcf	___lwmod@divisor+1,f,c
  7430  00E6A8  320A               	rrcf	___lwmod@divisor,f,c
  7431  00E6AA  2E0C               	decfsz	___lwmod@counter,f,c
  7432  00E6AC  D7F1               	goto	l2242
  7433  00E6AE                     l929:
  7434  00E6AE  C008  F008         	movff	___lwmod@dividend,?___lwmod
  7435  00E6B2  C009  F009         	movff	___lwmod@dividend+1,?___lwmod+1
  7436  00E6B6  0012               	return		;funcret
  7437  00E6B8                     __end_of___lwmod:
  7438                           	opt stack 0
  7439                           tosu	equ	0xFFF
  7440                           tosh	equ	0xFFE
  7441                           tosl	equ	0xFFD
  7442                           pclath	equ	0xFFA
  7443                           tblptru	equ	0xFF8
  7444                           tblptrh	equ	0xFF7
  7445                           tblptrl	equ	0xFF6
  7446                           tablat	equ	0xFF5
  7447                           prodh	equ	0xFF4
  7448                           prodl	equ	0xFF3
  7449                           intcon	equ	0xFF2
  7450                           intcon2	equ	0xFF1
  7451                           postinc0	equ	0xFEE
  7452                           wreg	equ	0xFE8
  7453                           indf1	equ	0xFE7
  7454                           postinc1	equ	0xFE6
  7455                           postdec1	equ	0xFE5
  7456                           fsr1h	equ	0xFE2
  7457                           fsr1l	equ	0xFE1
  7458                           indf2	equ	0xFDF
  7459                           postinc2	equ	0xFDE
  7460                           postdec2	equ	0xFDD
  7461                           fsr2h	equ	0xFDA
  7462                           fsr2l	equ	0xFD9
  7463                           status	equ	0xFD8
  7464                           
  7465 ;; *************** function ___lwdiv *****************
  7466 ;; Defined at:
  7467 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  7468 ;; Parameters:    Size  Location     Type
  7469 ;;  dividend        2    0[COMRAM] unsigned int 
  7470 ;;  divisor         2    2[COMRAM] unsigned int 
  7471 ;; Auto vars:     Size  Location     Type
  7472 ;;  quotient        2    4[COMRAM] unsigned int 
  7473 ;;  counter         1    6[COMRAM] unsigned char 
  7474 ;; Return value:  Size  Location     Type
  7475 ;;                  2    0[COMRAM] unsigned int 
  7476 ;; Registers used:
  7477 ;;		wreg, status,2, status,0
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7483 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7484 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7486 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7487 ;;Total ram usage:        7 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; This function calls:
  7490 ;;		Nothing
  7491 ;; This function is called by:
  7492 ;;		__doprnt
  7493 ;; This function uses a non-reentrant model
  7494 ;;
  7495                           
  7496                           	psect	text39
  7497  00E740                     __ptext39:
  7498                           	opt stack 0
  7499  00E740                     ___lwdiv:
  7500                           	opt stack 25
  7501                           
  7502                           ;incstack = 0
  7503  00E740  0E00               	movlw	0
  7504  00E742  6E06               	movwf	___lwdiv@quotient+1,c
  7505  00E744  0E00               	movlw	0
  7506  00E746  6E05               	movwf	___lwdiv@quotient,c
  7507  00E748  5003               	movf	___lwdiv@divisor,w,c
  7508  00E74A  1004               	iorwf	___lwdiv@divisor+1,w,c
  7509  00E74C  B4D8               	btfsc	status,2,c
  7510  00E74E  D01C               	goto	l919
  7511  00E750  0E01               	movlw	1
  7512  00E752  6E07               	movwf	___lwdiv@counter,c
  7513  00E754  D004               	goto	l2220
  7514  00E756                     l2218:
  7515  00E756  90D8               	bcf	status,0,c
  7516  00E758  3603               	rlcf	___lwdiv@divisor,f,c
  7517  00E75A  3604               	rlcf	___lwdiv@divisor+1,f,c
  7518  00E75C  2A07               	incf	___lwdiv@counter,f,c
  7519  00E75E                     l2220:
  7520  00E75E  AE04               	btfss	___lwdiv@divisor+1,7,c
  7521  00E760  D7FA               	goto	l2218
  7522  00E762                     l2222:
  7523  00E762  90D8               	bcf	status,0,c
  7524  00E764  3605               	rlcf	___lwdiv@quotient,f,c
  7525  00E766  3606               	rlcf	___lwdiv@quotient+1,f,c
  7526  00E768  5003               	movf	___lwdiv@divisor,w,c
  7527  00E76A  5C01               	subwf	___lwdiv@dividend,w,c
  7528  00E76C  5004               	movf	___lwdiv@divisor+1,w,c
  7529  00E76E  5802               	subwfb	___lwdiv@dividend+1,w,c
  7530  00E770  A0D8               	btfss	status,0,c
  7531  00E772  D005               	goto	l2230
  7532  00E774  5003               	movf	___lwdiv@divisor,w,c
  7533  00E776  5E01               	subwf	___lwdiv@dividend,f,c
  7534  00E778  5004               	movf	___lwdiv@divisor+1,w,c
  7535  00E77A  5A02               	subwfb	___lwdiv@dividend+1,f,c
  7536  00E77C  8005               	bsf	___lwdiv@quotient,0,c
  7537  00E77E                     l2230:
  7538  00E77E  90D8               	bcf	status,0,c
  7539  00E780  3204               	rrcf	___lwdiv@divisor+1,f,c
  7540  00E782  3203               	rrcf	___lwdiv@divisor,f,c
  7541  00E784  2E07               	decfsz	___lwdiv@counter,f,c
  7542  00E786  D7ED               	goto	l2222
  7543  00E788                     l919:
  7544  00E788  C005  F001         	movff	___lwdiv@quotient,?___lwdiv
  7545  00E78C  C006  F002         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7546  00E790  0012               	return		;funcret
  7547  00E792                     __end_of___lwdiv:
  7548                           	opt stack 0
  7549                           tosu	equ	0xFFF
  7550                           tosh	equ	0xFFE
  7551                           tosl	equ	0xFFD
  7552                           pclath	equ	0xFFA
  7553                           tblptru	equ	0xFF8
  7554                           tblptrh	equ	0xFF7
  7555                           tblptrl	equ	0xFF6
  7556                           tablat	equ	0xFF5
  7557                           prodh	equ	0xFF4
  7558                           prodl	equ	0xFF3
  7559                           intcon	equ	0xFF2
  7560                           intcon2	equ	0xFF1
  7561                           postinc0	equ	0xFEE
  7562                           wreg	equ	0xFE8
  7563                           indf1	equ	0xFE7
  7564                           postinc1	equ	0xFE6
  7565                           postdec1	equ	0xFE5
  7566                           fsr1h	equ	0xFE2
  7567                           fsr1l	equ	0xFE1
  7568                           indf2	equ	0xFDF
  7569                           postinc2	equ	0xFDE
  7570                           postdec2	equ	0xFDD
  7571                           fsr2h	equ	0xFDA
  7572                           fsr2l	equ	0xFD9
  7573                           status	equ	0xFD8
  7574                           
  7575 ;; *************** function _lcdInst *****************
  7576 ;; Defined at:
  7577 ;;		line 25 in file "lcd.c"
  7578 ;; Parameters:    Size  Location     Type
  7579 ;;  data            1    wreg     unsigned char 
  7580 ;; Auto vars:     Size  Location     Type
  7581 ;;  data            1    2[COMRAM] unsigned char 
  7582 ;; Return value:  Size  Location     Type
  7583 ;;                  1    wreg      void 
  7584 ;; Registers used:
  7585 ;;		wreg, status,2, status,0, cstack
  7586 ;; Tracked objects:
  7587 ;;		On entry : 0/0
  7588 ;;		On exit  : 0/0
  7589 ;;		Unchanged: 0/0
  7590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7591 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7592 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7594 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7595 ;;Total ram usage:        1 bytes
  7596 ;; Hardware stack levels used:    1
  7597 ;; Hardware stack levels required when called:    1
  7598 ;; This function calls:
  7599 ;;		_lcdNibble
  7600 ;; This function is called by:
  7601 ;;		_getPressedKeypadKey
  7602 ;;		_displayMainProgramLcdScreen
  7603 ;;		_update_eeprom_screen_state
  7604 ;;		_update_past_run_screen_state
  7605 ;;		_operation
  7606 ;;		_initializeLcdSettings
  7607 ;;		_lcdClear
  7608 ;; This function uses a non-reentrant model
  7609 ;;
  7610                           
  7611                           	psect	text40
  7612  00E45E                     __ptext40:
  7613                           	opt stack 0
  7614  00E45E                     _lcdInst:
  7615                           	opt stack 26
  7616                           
  7617                           ;incstack = 0
  7618                           ;lcdInst@data stored from wreg
  7619  00E45E  6E03               	movwf	lcdInst@data,c
  7620                           
  7621                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  7622  00E460  948C               	bcf	3980,2,c	;volatile
  7623                           
  7624                           ;lcd.c: 27: lcdNibble(data);
  7625  00E462  5003               	movf	lcdInst@data,w,c
  7626  00E464  ECF2  F073         	call	_lcdNibble
  7627  00E468  0012               	return		;funcret
  7628  00E46A                     __end_of_lcdInst:
  7629                           	opt stack 0
  7630                           tosu	equ	0xFFF
  7631                           tosh	equ	0xFFE
  7632                           tosl	equ	0xFFD
  7633                           pclath	equ	0xFFA
  7634                           tblptru	equ	0xFF8
  7635                           tblptrh	equ	0xFF7
  7636                           tblptrl	equ	0xFF6
  7637                           tablat	equ	0xFF5
  7638                           prodh	equ	0xFF4
  7639                           prodl	equ	0xFF3
  7640                           intcon	equ	0xFF2
  7641                           intcon2	equ	0xFF1
  7642                           postinc0	equ	0xFEE
  7643                           wreg	equ	0xFE8
  7644                           indf1	equ	0xFE7
  7645                           postinc1	equ	0xFE6
  7646                           postdec1	equ	0xFE5
  7647                           fsr1h	equ	0xFE2
  7648                           fsr1l	equ	0xFE1
  7649                           indf2	equ	0xFDF
  7650                           postinc2	equ	0xFDE
  7651                           postdec2	equ	0xFDD
  7652                           fsr2h	equ	0xFDA
  7653                           fsr2l	equ	0xFD9
  7654                           status	equ	0xFD8
  7655                           
  7656 ;; *************** function _lcdNibble *****************
  7657 ;; Defined at:
  7658 ;;		line 43 in file "lcd.c"
  7659 ;; Parameters:    Size  Location     Type
  7660 ;;  data            1    wreg     unsigned char 
  7661 ;; Auto vars:     Size  Location     Type
  7662 ;;  data            1    1[COMRAM] unsigned char 
  7663 ;;  temp            1    0[COMRAM] unsigned char 
  7664 ;; Return value:  Size  Location     Type
  7665 ;;                  1    wreg      void 
  7666 ;; Registers used:
  7667 ;;		wreg, status,2, status,0
  7668 ;; Tracked objects:
  7669 ;;		On entry : 0/0
  7670 ;;		On exit  : 0/0
  7671 ;;		Unchanged: 0/0
  7672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7674 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7676 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7677 ;;Total ram usage:        2 bytes
  7678 ;; Hardware stack levels used:    1
  7679 ;; This function calls:
  7680 ;;		Nothing
  7681 ;; This function is called by:
  7682 ;;		_lcdInst
  7683 ;;		_putch
  7684 ;; This function uses a non-reentrant model
  7685 ;;
  7686                           
  7687                           	psect	text41
  7688  00E7E4                     __ptext41:
  7689                           	opt stack 0
  7690  00E7E4                     _lcdNibble:
  7691                           	opt stack 26
  7692                           
  7693                           ;incstack = 0
  7694                           ;lcdNibble@data stored from wreg
  7695  00E7E4  6E02               	movwf	lcdNibble@data,c
  7696                           
  7697                           ;lcd.c: 45: char temp = data & 0xF0;
  7698  00E7E6  5002               	movf	lcdNibble@data,w,c
  7699  00E7E8  0BF0               	andlw	240
  7700  00E7EA  6E01               	movwf	lcdNibble@temp,c
  7701                           
  7702                           ;lcd.c: 46: LATD = LATD & 0x0F;
  7703  00E7EC  508C               	movf	3980,w,c	;volatile
  7704  00E7EE  0B0F               	andlw	15
  7705  00E7F0  6E8C               	movwf	3980,c	;volatile
  7706                           
  7707                           ;lcd.c: 47: LATD = temp | LATD;
  7708  00E7F2  5001               	movf	lcdNibble@temp,w,c
  7709  00E7F4  108C               	iorwf	3980,w,c	;volatile
  7710  00E7F6  6E8C               	movwf	3980,c	;volatile
  7711                           
  7712                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  7713  00E7F8  968C               	bcf	3980,3,c	;volatile
  7714                           
  7715                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
  7716  00E7FA  0E10               	movlw	16
  7717  00E7FC                     u2727:
  7718  00E7FC  2EE8               	decfsz	wreg,f,c
  7719  00E7FE  D7FE               	bra	u2727
  7720  00E800  D000               	nop2	
  7721                           
  7722                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  7723  00E802  868C               	bsf	3980,3,c	;volatile
  7724                           
  7725                           ;lcd.c: 52: _delay((unsigned long)((25)*(8000000/4000000.0)));
  7726  00E804  0E10               	movlw	16
  7727  00E806                     u2737:
  7728  00E806  2EE8               	decfsz	wreg,f,c
  7729  00E808  D7FE               	bra	u2737
  7730  00E80A  D000               	nop2	
  7731                           
  7732                           ;lcd.c: 54: data = data << 4;
  7733  00E80C  3802               	swapf	lcdNibble@data,w,c
  7734  00E80E  0BF0               	andlw	240
  7735  00E810  6E02               	movwf	lcdNibble@data,c
  7736                           
  7737                           ;lcd.c: 56: temp = data & 0xF0;
  7738  00E812  5002               	movf	lcdNibble@data,w,c
  7739  00E814  0BF0               	andlw	240
  7740  00E816  6E01               	movwf	lcdNibble@temp,c
  7741                           
  7742                           ;lcd.c: 57: LATD = LATD & 0x0F;
  7743  00E818  508C               	movf	3980,w,c	;volatile
  7744  00E81A  0B0F               	andlw	15
  7745  00E81C  6E8C               	movwf	3980,c	;volatile
  7746                           
  7747                           ;lcd.c: 58: LATD = temp | LATD;
  7748  00E81E  5001               	movf	lcdNibble@temp,w,c
  7749  00E820  108C               	iorwf	3980,w,c	;volatile
  7750  00E822  6E8C               	movwf	3980,c	;volatile
  7751                           
  7752                           ;lcd.c: 60: LATDbits.LATD3 = 0;
  7753  00E824  968C               	bcf	3980,3,c	;volatile
  7754                           
  7755                           ;lcd.c: 61: _delay((unsigned long)((25)*(8000000/4000000.0)));
  7756  00E826  0E10               	movlw	16
  7757  00E828                     u2747:
  7758  00E828  2EE8               	decfsz	wreg,f,c
  7759  00E82A  D7FE               	bra	u2747
  7760  00E82C  D000               	nop2	
  7761                           
  7762                           ;lcd.c: 62: LATDbits.LATD3 = 1;
  7763  00E82E  868C               	bsf	3980,3,c	;volatile
  7764                           
  7765                           ;lcd.c: 63: _delay((unsigned long)((25)*(8000000/4000000.0)));
  7766  00E830  0E10               	movlw	16
  7767  00E832                     u2757:
  7768  00E832  2EE8               	decfsz	wreg,f,c
  7769  00E834  D7FE               	bra	u2757
  7770  00E836  D000               	nop2	
  7771  00E838  0012               	return		;funcret
  7772  00E83A                     __end_of_lcdNibble:
  7773                           	opt stack 0
  7774                           tosu	equ	0xFFF
  7775                           tosh	equ	0xFFE
  7776                           tosl	equ	0xFFD
  7777                           pclath	equ	0xFFA
  7778                           tblptru	equ	0xFF8
  7779                           tblptrh	equ	0xFF7
  7780                           tblptrl	equ	0xFF6
  7781                           tablat	equ	0xFF5
  7782                           prodh	equ	0xFF4
  7783                           prodl	equ	0xFF3
  7784                           intcon	equ	0xFF2
  7785                           intcon2	equ	0xFF1
  7786                           postinc0	equ	0xFEE
  7787                           wreg	equ	0xFE8
  7788                           indf1	equ	0xFE7
  7789                           postinc1	equ	0xFE6
  7790                           postdec1	equ	0xFE5
  7791                           fsr1h	equ	0xFE2
  7792                           fsr1l	equ	0xFE1
  7793                           indf2	equ	0xFDF
  7794                           postinc2	equ	0xFDE
  7795                           postdec2	equ	0xFDD
  7796                           fsr2h	equ	0xFDA
  7797                           fsr2l	equ	0xFD9
  7798                           status	equ	0xFD8
  7799                           tosu	equ	0xFFF
  7800                           tosh	equ	0xFFE
  7801                           tosl	equ	0xFFD
  7802                           pclath	equ	0xFFA
  7803                           tblptru	equ	0xFF8
  7804                           tblptrh	equ	0xFF7
  7805                           tblptrl	equ	0xFF6
  7806                           tablat	equ	0xFF5
  7807                           prodh	equ	0xFF4
  7808                           prodl	equ	0xFF3
  7809                           intcon	equ	0xFF2
  7810                           intcon2	equ	0xFF1
  7811                           postinc0	equ	0xFEE
  7812                           wreg	equ	0xFE8
  7813                           indf1	equ	0xFE7
  7814                           postinc1	equ	0xFE6
  7815                           postdec1	equ	0xFE5
  7816                           fsr1h	equ	0xFE2
  7817                           fsr1l	equ	0xFE1
  7818                           indf2	equ	0xFDF
  7819                           postinc2	equ	0xFDE
  7820                           postdec2	equ	0xFDD
  7821                           fsr2h	equ	0xFDA
  7822                           fsr2l	equ	0xFD9
  7823                           status	equ	0xFD8
  7824                           
  7825                           	psect	text42
  7826  000000                     __ptext42:
  7827                           	opt stack 0
  7828                           tosu	equ	0xFFF
  7829                           tosh	equ	0xFFE
  7830                           tosl	equ	0xFFD
  7831                           pclath	equ	0xFFA
  7832                           tblptru	equ	0xFF8
  7833                           tblptrh	equ	0xFF7
  7834                           tblptrl	equ	0xFF6
  7835                           tablat	equ	0xFF5
  7836                           prodh	equ	0xFF4
  7837                           prodl	equ	0xFF3
  7838                           intcon	equ	0xFF2
  7839                           intcon2	equ	0xFF1
  7840                           postinc0	equ	0xFEE
  7841                           wreg	equ	0xFE8
  7842                           indf1	equ	0xFE7
  7843                           postinc1	equ	0xFE6
  7844                           postdec1	equ	0xFE5
  7845                           fsr1h	equ	0xFE2
  7846                           fsr1l	equ	0xFE1
  7847                           indf2	equ	0xFDF
  7848                           postinc2	equ	0xFDE
  7849                           postdec2	equ	0xFDD
  7850                           fsr2h	equ	0xFDA
  7851                           fsr2l	equ	0xFD9
  7852                           status	equ	0xFD8
  7853                           
  7854                           	psect	rparam
  7855  0000                     tosu	equ	0xFFF
  7856                           tosh	equ	0xFFE
  7857                           tosl	equ	0xFFD
  7858                           pclath	equ	0xFFA
  7859                           tblptru	equ	0xFF8
  7860                           tblptrh	equ	0xFF7
  7861                           tblptrl	equ	0xFF6
  7862                           tablat	equ	0xFF5
  7863                           prodh	equ	0xFF4
  7864                           prodl	equ	0xFF3
  7865                           intcon	equ	0xFF2
  7866                           intcon2	equ	0xFF1
  7867                           postinc0	equ	0xFEE
  7868                           wreg	equ	0xFE8
  7869                           indf1	equ	0xFE7
  7870                           postinc1	equ	0xFE6
  7871                           postdec1	equ	0xFE5
  7872                           fsr1h	equ	0xFE2
  7873                           fsr1l	equ	0xFE1
  7874                           indf2	equ	0xFDF
  7875                           postinc2	equ	0xFDE
  7876                           postdec2	equ	0xFDD
  7877                           fsr2h	equ	0xFDA
  7878                           fsr2l	equ	0xFD9
  7879                           status	equ	0xFD8


Data Sizes:
    Strings     427
    Constant    43
    Data        12
    BSS         16
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     89     117
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 2
		 -> getCurrentTime@str(COMRAM[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTime@str(COMRAM[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[18]), 
		 -> STR_32(CODE[13]), STR_31(CODE[12]), STR_30(CODE[5]), STR_29(CODE[4]), 
		 -> STR_28(CODE[17]), STR_27(CODE[14]), STR_26(CODE[16]), STR_25(CODE[18]), 
		 -> STR_24(CODE[15]), STR_23(CODE[13]), STR_22(CODE[17]), STR_21(CODE[16]), 
		 -> STR_20(CODE[16]), STR_19(CODE[14]), STR_18(CODE[14]), STR_17(CODE[16]), 
		 -> STR_16(CODE[17]), STR_15(CODE[16]), STR_14(CODE[16]), STR_13(CODE[16]), 
		 -> STR_12(CODE[11]), STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[14]), 
		 -> STR_8(CODE[15]), STR_7(CODE[13]), STR_6(CODE[14]), STR_2(CODE[15]), 
		 -> STR_1(CODE[13]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), ?_printf(COMRAM[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTime@str(COMRAM[2]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 2
		 -> getCurrentTime@str(COMRAM[2]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(COMRAM[2]), printf@ap(COMRAM[2]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_36(CODE[17]), STR_35(CODE[17]), STR_34(CODE[17]), STR_33(CODE[18]), 
		 -> STR_32(CODE[13]), STR_31(CODE[12]), STR_30(CODE[5]), STR_29(CODE[4]), 
		 -> STR_28(CODE[17]), STR_27(CODE[14]), STR_26(CODE[16]), STR_25(CODE[18]), 
		 -> STR_24(CODE[15]), STR_23(CODE[13]), STR_22(CODE[17]), STR_21(CODE[16]), 
		 -> STR_20(CODE[16]), STR_19(CODE[14]), STR_18(CODE[14]), STR_17(CODE[16]), 
		 -> STR_16(CODE[17]), STR_15(CODE[16]), STR_14(CODE[16]), STR_13(CODE[16]), 
		 -> STR_12(CODE[11]), STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[14]), 
		 -> STR_8(CODE[15]), STR_7(CODE[13]), STR_6(CODE[14]), STR_5(CODE[5]), 
		 -> STR_4(CODE[5]), STR_3(CODE[5]), STR_2(CODE[15]), STR_1(CODE[13]), 

    S743__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S743__prbuf$ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTime@str(COMRAM[2]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTime@str(COMRAM[2]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(COMRAM[4]), printf@pb(COMRAM[4]), 


Critical Paths under _main in COMRAM

    _main->_enterSelectedSubProgramFromMainProgram
    _initializeRTC->___lldiv
    _initializeLcdScreen->_displayMainProgramLcdScreen
    _initializeLcdSettings->_lcdInst
    _enterSelectedSubProgramFromMainProgram->_EEPROM
    _operation->_getCurrentTime
    _saveEEPROM->_Eeprom_WriteByte
    _Eeprom_WriteByte->___wmul
    _getCurrentTime->_sprintf
    _sprintf->__doprnt
    _atoi->___wmul
    _EEPROM->_past_run_access
    _update_eeprom_screen_state->_printf
    _past_run_access->_update_past_run_screen_state
    _update_past_run_screen_state->_printf
    _getPressedKeypadKey->_printf
    _getEEPROM->_Eeprom_ReadByte
    _Eeprom_ReadByte->___wmul
    _cycleMainProgramScreenRight->_displayMainProgramLcdScreen
    _cycleMainProgramScreenLeft->_displayMainProgramLcdScreen
    _displayMainProgramLcdScreen->_printf
    _updateCurrentTime->_I2C_Master_Read
    _updateCurrentTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _lcdClear->_printf
    _printf->__doprnt
    __doprnt->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  181131
                                             86 COMRAM     3     3      0
         _cycleMainProgramScreenLeft
        _cycleMainProgramScreenRight
_enterSelectedSubProgramFromMainProg
                _getPressedKeypadKey
              _initializePicSettings
 ---------------------------------------------------------------------------------
 (1) _initializePicSettings                                0     0      0   15977
                _initializeLcdScreen
                  _initializePicPins
                      _initializeRTC
 ---------------------------------------------------------------------------------
 (2) _initializeRTC                                        8     4      4     376
                                             13 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) _initializePicPins                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _initializeLcdScreen                                  0     0      0   15601
        _displayMainProgramLcdScreen
              _initializeLcdSettings
 ---------------------------------------------------------------------------------
 (3) _initializeLcdSettings                                1     1      0     135
                                              3 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _enterSelectedSubProgramFromMainProgram               2     2      0  126382
                                             84 COMRAM     2     2      0
                             _EEPROM
        _displayMainProgramLcdScreen
                          _operation
                    _past_run_access
                         _pushBottle
 ---------------------------------------------------------------------------------
 (2) _operation                                           15    15      0   38278
                                             50 COMRAM    15    15      0
                     _getCurrentTime
                _getPressedKeypadKey
                           _lcdClear
                            _lcdInst
                       _moveBinServo
                             _printf
                         _pushBottle
                         _saveEEPROM
                  _updateCurrentTime
 ---------------------------------------------------------------------------------
 (3) _saveEEPROM                                           5     5      0    3796
                                              9 COMRAM     5     5      0
                    _Eeprom_ReadByte
                   _Eeprom_WriteByte
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _Eeprom_WriteByte                                     3     0      3     706
                                              6 COMRAM     3     0      3
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _pushBottle                                           4     4      0      60
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (3) _moveBinServo                                         6     4      2     336
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (3) _getCurrentTime                                      10     8      2   10803
                                             42 COMRAM     8     6      2
                             ___wmul
                               _atoi
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             12     6      6    5631
                                             30 COMRAM    12     6      6
                            __doprnt
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 7     5      2    2695
                                              6 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _EEPROM                                              33    33      0   49533
                                             51 COMRAM    33    33      0
                          _getEEPROM
                _getPressedKeypadKey
                    _past_run_access
         _update_eeprom_screen_state
 ---------------------------------------------------------------------------------
 (3) _update_eeprom_screen_state                           4     2      2   15154
                                             44 COMRAM     4     2      2
                           _lcdClear
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _past_run_access                                      3     3      0   23045
                                             48 COMRAM     3     3      0
                _getPressedKeypadKey
       _update_past_run_screen_state
 ---------------------------------------------------------------------------------
 (3) _update_past_run_screen_state                         4     2      2   15090
                                             44 COMRAM     4     2      2
                           _lcdClear
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _getPressedKeypadKey                                  3     3      0    7773
                                             44 COMRAM     3     3      0
                            _lcdInst
                             _printf
                  _updateCurrentTime
 ---------------------------------------------------------------------------------
 (3) _getEEPROM                                            8     6      2    2859
                                              8 COMRAM     8     6      2
                    _Eeprom_ReadByte
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _Eeprom_ReadByte                                      2     0      2     364
                                              6 COMRAM     2     0      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _cycleMainProgramScreenRight                          0     0      0   15466
        _displayMainProgramLcdScreen
 ---------------------------------------------------------------------------------
 (1) _cycleMainProgramScreenLeft                           0     0      0   15466
        _displayMainProgramLcdScreen
 ---------------------------------------------------------------------------------
 (3) _displayMainProgramLcdScreen                          4     2      2   15466
                                             44 COMRAM     4     2      2
                           _lcdClear
                            _lcdInst
                             _printf
                  _updateCurrentTime
 ---------------------------------------------------------------------------------
 (4) _updateCurrentTime                                    1     1      0     312
                                              3 COMRAM     1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     214
                                              1 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      30
                                              1 COMRAM     2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _lcdClear                                             0     0      0    7438
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              14     6      8    7303
                                             30 COMRAM    14     6      8
                            __doprnt
 ---------------------------------------------------------------------------------
 (5) __doprnt                                             27    21      6    5065
                                             12 COMRAM    18    12      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    2207
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     287
                                              7 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     418
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0     135
                                              2 COMRAM     1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cycleMainProgramScreenLeft
     _displayMainProgramLcdScreen
       _lcdClear
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
       _updateCurrentTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
   _cycleMainProgramScreenRight
     _displayMainProgramLcdScreen
       _lcdClear
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
       _updateCurrentTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
   _enterSelectedSubProgramFromMainProgram
     _EEPROM
       _getEEPROM
         _Eeprom_ReadByte
           ___wmul (ARG)
         ___wmul
       _getPressedKeypadKey
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
         _updateCurrentTime
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _past_run_access
         _getPressedKeypadKey
           _lcdInst
             _lcdNibble
           _printf
             __doprnt
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               ___wmul *
               _isdigit *
               _putch *
                 _lcdNibble
           _updateCurrentTime
             _I2C_Master_Read
               _I2C_Master_Wait
             _I2C_Master_Start
               _I2C_Master_Wait
             _I2C_Master_Stop
               _I2C_Master_Wait
             _I2C_Master_Write
               _I2C_Master_Wait
         _update_past_run_screen_state
           _lcdClear
             _lcdInst
               _lcdNibble
             _printf
               __doprnt
                 Absolute function(Fake) *
                 ___lwdiv *
                 ___lwmod *
                   ___lwdiv (ARG)
                 ___wmul *
                 _isdigit *
                 _putch *
                   _lcdNibble
           _lcdInst
             _lcdNibble
           _printf
             __doprnt
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               ___wmul *
               _isdigit *
               _putch *
                 _lcdNibble
       _update_eeprom_screen_state
         _lcdClear
           _lcdInst
             _lcdNibble
           _printf
             __doprnt
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               ___wmul *
               _isdigit *
               _putch *
                 _lcdNibble
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
     _displayMainProgramLcdScreen
       _lcdClear
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
       _lcdInst
         _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
       _updateCurrentTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _operation
       _getCurrentTime
         ___wmul
         _atoi
           ___wmul
           _isdigit
         _sprintf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
       _getPressedKeypadKey
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
         _updateCurrentTime
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _lcdClear
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
       _lcdInst
         _lcdNibble
       _moveBinServo
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
       _pushBottle
       _saveEEPROM
         _Eeprom_ReadByte
           ___wmul (ARG)
         _Eeprom_WriteByte
           ___wmul (ARG)
         ___wmul
       _updateCurrentTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _past_run_access
       _getPressedKeypadKey
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
         _updateCurrentTime
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _update_past_run_screen_state
         _lcdClear
           _lcdInst
             _lcdNibble
           _printf
             __doprnt
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               ___wmul *
               _isdigit *
               _putch *
                 _lcdNibble
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
     _pushBottle
   _getPressedKeypadKey
     _lcdInst
       _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
     _updateCurrentTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _initializePicSettings
     _initializeLcdScreen
       _displayMainProgramLcdScreen
         _lcdClear
           _lcdInst
             _lcdNibble
           _printf
             __doprnt
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               ___wmul *
               _isdigit *
               _putch *
                 _lcdNibble
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
         _updateCurrentTime
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _initializeLcdSettings
         _lcdInst
           _lcdNibble
     _initializePicPins
     _initializeRTC
       ___lldiv

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     59      75       1       92.1%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      75      34        0.0%
DATA                 0      0      75       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Feb 28 15:59:19 2017

                           operation@bottle_type 003A                         __end_of_Eeprom_WriteByte E5B8  
           __end_of_update_past_run_screen_state F114            __size_of_update_past_run_screen_state 012E  
                   _update_past_run_screen_state EFE6                              ___wmul@multiplicand 0003  
                                    __CFG_BORV$3 000000                       __size_of_updateCurrentTime 0066  
                                   __CFG_CP0$OFF 000000                                     __CFG_CP1$OFF 000000  
                                   __CFG_CP2$OFF 000000                                     __CFG_CP3$OFF 000000  
                                    __CFG_OSC$HS 000000                                              l300 F442  
                                            l220 F6C0                                              l153 EA76  
                                            l129 EBE8                                              l307 EFE4  
                                            l331 E5AE                                              l325 E4B4  
                                            l266 F134                                              l449 F9CC  
                                            l395 E482                                              l669 EE1A  
                                            l919 E788                                              l929 E6AE  
                                            l866 E96A                                     __CFG_CPB$OFF 000000  
                                            _PEN 007E2A                                     __CFG_CPD$OFF 000000  
                                            u460 E53E                                              _SEN 007E28  
                                            prod 000FF3                                              tosl 000FFD  
                                            wreg 000FE8                                     __CFG_LVP$OFF 000000  
                                   __CFG_WDT$OFF 000000                                             l2202 E4D2  
                                           l2220 E75E                                             l2300 FA38  
                                           l3020 F588                                             l3004 F52A  
                                           l2230 E77E                                             l2222 E762  
                                           l3014 F56C                                             l3102 EC28  
                                           l2240 E68C                                             l2400 FD92  
                                           l2312 FA6A                                             l1424 E540  
                                           l3040 F5FA                                             l3008 F53A  
                                           l2218 E756                                             l2242 E690  
                                           l2314 FA6E                                             l2330 FAB0  
                                           l2410 FE04                                             l3050 F634  
                                           l3042 F608                                             l3026 F5BA  
                                           l3106 EC62                                             l2404 FDD2  
                                           l2340 FAEE                                             l2412 FE1E  
                                           l2252 F87C                                             l1612 EB44  
                                           l2246 E6A4                                             l2238 E684  
                                           l2350 FB46                                             l2342 FAF6  
                                           l2262 F8F0                                             l3038 F5F4  
                                           l2502 EDAE                                             l1622 EB76  
                                           l3062 E794                                             l2408 FDFC  
                                           l2360 FBB8                                             l2336 FACA  
                                           l2328 FAA0                                             l2264 F8FE  
                                           l2600 ED18                                             l2520 F03A  
                                           l3048 F630                                             l2504 EDE4  
                                           l3064 E79A                                             l3072 E7AC  
                                           l2354 FB70                                             l2282 F998  
                                           l2274 F936                                             l2258 F8C4  
                                           l2434 E8C8                                             l2602 ED42  
                                           l2522 F054                                             l2514 EFEC  
                                           l2530 F0C4                                             l2506 EDE8  
                                           l1626 EB96                                             l3066 E7A0  
                                           l3074 E7D6                                             l2372 FC32  
                                           l2364 FBE2                                             l2268 F904  
                                           l2444 E8EC                                             l3084 E558  
                                           l3092 E580                                             l2524 F06E  
                                           l2516 F006                                             l2532 F100  
                                           l2700 F15E                                             l1636 EBCA  
                                           l3068 E7A6                                             l2390 FCE6  
                                           l2366 FBEA                                             l2286 F99C  
                                           l2438 E8D0                                             l3086 E55E  
                                           l3094 E584                                             l2526 F088  
                                           l2518 F020                                             l2630 EAF4  
                                           l2614 EAAE                                             l2392 FD30  
                                           l2384 FCB6                                             l2376 FC5C  
                                           l2368 FBF2                                             l2296 FA0A  
                                           l2456 EA0A                                             l2640 EB2E  
                                           l2632 EB02                                             l2704 F16E  
                                           l2378 FC6A                                             l2298 FA34  
                                           l2810 EF10                                             l2714 F1A2  
                                           l2388 FCE0                                             l2468 EA6A  
                                           l2628 EAEE                                             l2732 F1FA  
                                           l2900 F70E                                             l2398 FD82  
                                           l2822 EF8C                                             l2806 EF00  
                                           l2638 EB2A                                             l2670 E9A6  
                                           l2486 ED58                                             l2718 F1B4  
                                           l2742 F230                                             l2750 F262  
                                           l2910 F730                                             l2584 ECA2  
                                           l2816 EF74                                             l2672 E9B8  
                                           l2488 ED5C                                             l2728 F1E8  
                                           l2594 ECF4                                             l2586 ECB4  
                                           l2818 EF7C                                             l2666 E982  
                                           l2498 ED9C                                             l2770 F336  
                                           l2762 F2D4                                             l2746 F252  
                                           l2914 F744                                             l2930 F7C0  
                                           l2834 E91C                                             l2596 ED06  
                                           l2668 E994                                             l2676 E9CA  
                                           l2780 F39C                                             l2756 F2BC  
                                           l2836 E928                                             l2678 E9F4  
                                           l2782 F3A4                                             l2774 F346  
                                           l2758 F2C4                                             l2950 F838  
                                           l2870 F66C                                             l2846 E95C  
                                           l2838 E92C                                             l2792 F3F0  
                                           l2768 F32E                                             l2794 F3F8  
                                           l2786 F3B4                                             l2946 F828  
                                           l2882 F6AE                                             l2866 F65C  
                                           l2956 F85A                                             l2876 F68C  
                                           _BACK FE4C                                             l2990 F4D4  
                                           l2974 F47A                                             l2798 F408  
                                           l2958 F85E                                             l2984 F4BC  
                                           l2968 F458                                             l2986 F4C4  
                                           l2978 F48A                                             l2996 F506  
                                           STR_1 FFD2                                             STR_2 FF70  
                                           STR_3 FF7A                                             STR_4 FF7A  
                                           STR_5 FF7A                                             STR_6 FF9B  
                                           STR_7 FFD2                                             STR_8 FF70  
                                           STR_9 FF8D                                             _LATB 000F8A  
                                           u2215 E868                                             _LATC 000F8B  
                                           u2400 F586                                             _LATD 000F8C  
                                           _LATE 000F8D                                             u1418 F8B0  
                                           u2410 F5B8                                             _LEFT FE50  
                                           u1618 FBA4                                             u2290 F7D0  
                                           u1718 FDBE                                             u2607 EBBC  
                                           u2527 E700                                             u2617 EBD4  
                                           u2537 E734                                             u1658 FC1E  
                                           u1930 F132                                             u2707 F23A  
                                           u2627 F138                                             u2547 F6E4  
                                           u1588 FB32                                             u2717 EA5C  
                                           u2637 F14C                                             u2557 F7A0  
                                           u2727 E7FC                                             u2647 F182  
                                           u2567 EB54                                             u2737 E806  
                                           u2657 F194                                             u2577 EB68  
                                           u1698 FCA2                                             u2747 E828  
                                           u2667 F1C8                                             u2587 EB80  
                                           u2757 E832                                             u2677 F1D8  
                                           u2597 EBAA                                             u2687 F20E  
                                           u2697 F220                                             _RCEN 007E2B  
                                           _RSEN 007E29                                             _atoi ED56  
                                           _main EBE4                                             _keys FE29  
             __end_of_update_eeprom_screen_state EA08                       _update_eeprom_screen_state E97C  
                                           _time 0061                                             fsr1h 000FE2  
                                           fsr2h 000FDA                                             indf1 000FE7  
                                           indf2 000FDF                                             fsr1l 000FE1  
                                           fsr2l 000FD9                                             prodh 000FF4  
                                           prodl 000FF3                                             start 0000  
                                  __CFG_IESO$OFF 000000                                    __CFG_MCLRE$ON 000000  
                                   ___param_bank 000000                              past_run_access@temp 0031  
                               ?_I2C_Master_Read 0001                                 ?_I2C_Master_Wait 0001  
                               ?_I2C_Master_Stop 0001                    ?_update_past_run_screen_state 002D  
                                          ?_atoi 0007                                            ?_main 0001  
                                          _ACKEN 007E2C                                            _ACKDT 007E2D  
                                          _EEADR 000FA9                                            STR_10 FEBC  
                                          STR_11 FECD                                            STR_12 FFEB  
                                          STR_20 FF50                                            STR_21 FF40  
                                          STR_13 FF00                                            STR_30 FFF6  
                                          STR_14 FF10                                            STR_22 FEEF  
                                          STR_23 FFD2                                            STR_31 FFDF  
                                          STR_15 FF20                                            STR_24 FF70  
                                          STR_32 FFC5                                            STR_16 FEDE  
                                          STR_17 FF60                                            STR_25 FE66  
                                          STR_33 FE54                                            STR_18 FFB7  
                                          STR_26 FF30                                            STR_34 FE9A  
                                          STR_19 FFA9                                            STR_27 FF7F  
                                          STR_35 FE89                                            STR_36 FE89  
                                          STR_28 FEAB                                            STR_29 FFFB  
                                          STR_37 FE78                                  __end_of___lldiv E97C  
                                          _ENTER FE4E                                  __end_of___lwdiv E792  
                                __end_of___lwmod E6B8                                            _RIGHT FE52  
                        ??_initializePicSettings 0031                                            _PORTB 000F81  
                                __end_of__doprnt FE28                                            _TRISA 000F92  
                                          _TRISB 000F93                                            _TRISC 000F94  
                                          _TRISD 000F95                                            _TRISE 000F96  
                                  __CFG_PWRT$OFF 000000                                    __CFG_WRT0$OFF 000000  
                                  __CFG_WRT1$OFF 000000                                    __CFG_WRT2$OFF 000000  
                                  __CFG_WRT3$OFF 000000                                  __end_of_lcdInst E46A  
                                 __CFG_EBTR0$OFF 000000                                   __CFG_FCMEN$OFF 000000  
                                 __CFG_EBTR1$OFF 000000                                   __CFG_EBTR2$OFF 000000  
                                 __CFG_EBTR3$OFF 000000                                            _nRBPU 007F8F  
                                  __CFG_WRTB$OFF 000000                                    __CFG_WRTC$OFF 000000  
                                  __CFG_WRTD$OFF 000000               __end_of_cycleMainProgramScreenLeft E56C  
                     _cycleMainProgramScreenLeft E546                                   __CFG_EBTRB$OFF 000000  
                                __end_of_dpowers FE44                                 ?_Eeprom_ReadByte 0007  
                            _getPressedKeypadKey EA08                                  __end_of_isdigit E4DA  
                                          atoi@a 000C                                            atoi@s 0007  
                                          _putch E46A                                            pclath 000FFA  
                                          tablat 000FF5                                            status 000FD8  
                                __end_of_sprintf E6FA                                   saveEEPROM@temp 000B  
                                 __CFG_PBADEN$ON 000000                                     __end_of_BACK FE4E  
                                   __end_of_LEFT FE52                                  __initialization E60E  
                                   __end_of_atoi EE24                                     __end_of_main EC9C  
                                   __end_of_keys FE3A                             ?_getPressedKeypadKey 0001  
                                _past_run_access EA9A                                           ??_atoi 0009  
                                         ??_main 0057                                    __activetblptr 000003  
                             EEPROM@screen_state 0051                                ?_I2C_Master_Start 0001  
                   __size_of_initializeLcdScreen 0012                                ?_I2C_Master_Write 0002  
                             ??_I2C_Master_Start 0002                                           _ADCON0 000FC2  
                                         _ADCON1 000FC1                               ??_I2C_Master_Write 0004  
                                         _EEADRH 000FAA                                           _EEDATA 000FA8  
                                         _EECON2 000FA7                                           ?_putch 0001  
                                         _EEPROM F444                                           _SSPADD 000FC8  
                                         _TRISC3 007CA3                                           _TRISC4 007CA4  
                                         _SSPBUF 000FC9                                 __end_of_lcdClear E60E  
                                 __CFG_XINST$OFF 000000                            ??_getPressedKeypadKey 002D  
                                         ___wmul E4FA                                   __CFG_STVREN$ON 000000  
                                      ??___lldiv 0009              __end_of_cycleMainProgramScreenRight E592  
                    _cycleMainProgramScreenRight E56C                                        ??___lwdiv 0005  
                                      ??___lwmod 000C                                        ??__doprnt 0013  
                                         clear_0 E634                                     __doprnt@flag 001B  
                                      ??_lcdInst 0003                                           _printf E640  
                                   __doprnt@prec 0018                                     __pdataCOMRAM 006A  
                                      ??_isdigit 0001                                     __mediumconst FE28  
                 ??_update_past_run_screen_state 002F                                           tblptrh 000FF7  
                        Eeprom_WriteByte@address 0007                                           tblptrl 000FF6  
                                         tblptru 000FF8                           __size_of_initializeRTC 005A  
                                      ??_sprintf 0025                                       __accesstop 0080  
                        __end_of__initialization E63A                   __size_of_initializeLcdSettings 0046  
                  __end_of_initializeLcdSettings E740                                    ___rparam_used 000001  
                                  __end_of_ENTER FE50                                    __end_of_RIGHT FE54  
                                    saveEEPROM@i 000D                          __end_of_past_run_access EB3C  
                                 __pcstackCOMRAM 0001                               __size_of_getEEPROM 00EE  
                                  __end_of_putch E476                                ?_Eeprom_WriteByte 0007  
                             ??_Eeprom_WriteByte 000A                      getPressedKeypadKey@keypress 002F  
                             __size_of_lcdNibble 0056                                          EEPROM@i 0053  
                                     __doprnt@ap 0011                                       __doprnt@pb 000D  
                                        ??_putch 0003                                          ?_EEPROM 0001  
                        __size_of_getCurrentTime 00D4                                    ?_moveBinServo 0001  
                    ?_update_eeprom_screen_state 002D                                    _initializeRTC E83A  
                                        ?___wmul 0001                                          ?_printf 001F  
                             __size_of_operation 0238                                _initializePicPins E5B8  
                             ?_initializePicPins 0001                   __size_of_initializePicSettings 0020  
                                      ?_lcdClear 0001                    __end_of_initializePicSettings E4FA  
                    ?_cycleMainProgramScreenLeft 0001                                          _SSPCON1 000FC6  
                                        _SSPCON2 000FC5                                __end_of_getEEPROM EFE6  
                   ?_displayMainProgramLcdScreen 002D                                          _SSPSTAT 000FC7  
                                __size_of_EEPROM 01FE                              ??_initializePicPins 0001  
                                 ??_moveBinServo 0003                              _getCurrentTime$1376 002F  
                              __end_of_lcdNibble E83A                                       getEEPROM@i 000F  
                                        __Hparam 0000                              _initializeLcdScreen E494  
                                 ?_initializeRTC 000E                                          __Lparam 0000  
                               ?_past_run_access 0001                             Eeprom_WriteByte@data 0009  
                                        ___lldiv E8FA                                  __size_of___wmul 0026  
                                        ___lwdiv E740                                          ___lwmod E676  
                                        __doprnt F87A                        __end_of_initializePicPins E5E2  
                                        __pcinit E60E                                          __ramtop 1000  
                                  moveBinServo@i 0005                                          _lcdInst E45E  
                                        __ptext0 EBE4                                          __ptext1 E4DA  
                                        __ptext2 E83A                                          __ptext3 E8FA  
                                        __ptext4 E5B8                                          __ptext5 E494  
                                        __ptext6 E6FA                                          __ptext7 E792  
                                        __ptext8 F642                                          __ptext9 F24A  
                                __size_of_printf 0036                                __end_of_hexpowers FE4C  
                                     _saveEEPROM F24A                                          _dpowers FE3A  
                                        _isdigit E4BC                             ?_initializeLcdScreen 0001  
                       __size_of_I2C_Master_Read 0026                                       ??_lcdClear 002D  
                       __size_of_I2C_Master_Wait 0012                                       EEPROM@temp 0050  
                       __size_of_I2C_Master_Stop 0008                  update_past_run_screen_state@num 002D  
                                        _runInfo 006A                                          _sprintf E6B8  
                                  __doprnt@width 001C                             end_of_initialization E63A  
                  ??_displayMainProgramLcdScreen 002F                                __end_of_operation F87A  
                 displayMainProgramLcdScreen@num 002D                         __size_of_Eeprom_ReadByte 0016  
                      __size_of_I2C_Master_Start 0008                        __size_of_I2C_Master_Write 000A  
                                ___lldiv@divisor 0005                                  ___lldiv@counter 000D  
                                        printf@f 001F                                 I2C_Master_Read@a 0002  
                                        postdec1 000FE5                                          postdec2 000FDD  
                                        postinc0 000FEE                                          postinc1 000FE6  
                                        postinc2 000FDE                    update_eeprom_screen_state@num 002D  
                                  EEPROM@storage 0044                                        _PORTAbits 000F80  
                                      _PORTBbits 000F81                                        _PORTCbits 000F82  
                          ??_initializeLcdScreen 0031                                       _pushBottle EB3C  
                                 _getCurrentTime EE24                      past_run_access@screen_state 0032  
                          operation@startingTime 0035                                   __end_of_EEPROM F642  
                    __end_of_getPressedKeypadKey EA9A                                  ??_initializeRTC 0012  
                              getCurrentTime@str 0031             __size_of_displayMainProgramLcdScreen 00BA  
                                 __end_of___wmul E520                       __size_of_initializePicPins 002A  
                                  __pidataCOMRAM E476                             __end_of_moveBinServo F24A  
                                    ?_saveEEPROM 0001                                   __end_of_printf E676  
                                    pushBottle@i 0003                              start_initialization E60E  
                         __end_of_getCurrentTime EEF8                                     getEEPROM@num 0009  
                                       ??_EEPROM 0034                        __size_of_Eeprom_WriteByte 0026  
                              ??_I2C_Master_Read 0002                                ??_I2C_Master_Wait 0001  
                              ??_I2C_Master_Stop 0002                            _initializeLcdSettings E6FA  
                                       ??___wmul 0005                                      __doprnt@idx 0017  
                                    __doprnt@val 0019                                ??_Eeprom_ReadByte 0009  
                               __CFG_LPT1OSC$OFF 000000                                EEPROM@timeStorage 0036  
                                       ??_printf 0027                                      __pbssCOMRAM 005A  
                                    ?_pushBottle 0001                                     _isdigit$1006 0002  
                                ?_getCurrentTime 002B                                __size_of_lcdClear 002C  
                                      __doprnt@c 001E                                        __doprnt@f 000F  
                                      _getEEPROM EEF8                                 _I2C_Master_Start E444  
                               _I2C_Master_Write E454                              __size_of_saveEEPROM 01FA  
                               ___lwdiv@dividend 0001                                __CFG_CCP2MX$PORTC 000000  
                                moveBinServo@num 0001                                    __pmediumconst FE28  
                                      _lcdNibble E7E4                                         ?___lldiv 0001  
                                       ?___lwdiv 0001                                         ?___lwmod 0008  
                                       ?__doprnt 000D                                         ?_lcdInst 0001  
                                       ?_isdigit 0001                                        _hexpowers FE44  
                               ___lwdiv@quotient 0005                                         ?_sprintf 001F  
                          _initializePicSettings E4DA                                   __size_of_putch 000C  
                                     operation@i 0040                                       ?_getEEPROM 0009  
                                 ___wmul@product 0005                                    operation@temp 0039  
                                       _LATDbits 000F8C                           ?_initializeLcdSettings 0001  
                                       _PIR2bits 000FA1                                        _operation F642  
                            __size_of_pushBottle 00A8                                 __CFG_WDTPS$32768 000000  
                          __size_of_moveBinServo 0136                                       ?_lcdNibble 0001  
                   ?_cycleMainProgramScreenRight 0001                                ___wmul@multiplier 0001  
                       __size_of_past_run_access 00A2                                    lcdNibble@data 0002  
                                  lcdNibble@temp 0001                              I2C_Master_Read@temp 0003  
                                      copy_data0 E622                                 _Eeprom_WriteByte E592  
                                   _moveBinServo F114                                       _EECON1bits 000FA6  
                                       __Hrparam 0000                                       ?_operation 0001  
                                    _lastRunTime 005A                                         __Lrparam 0000  
                             __CFG_BOREN$SBORDIS 000000   __end_of_enterSelectedSubProgramFromMainProgram E7E4  
__size_of_enterSelectedSubProgramFromMainProgram 0052         ??_enterSelectedSubProgramFromMainProgram 0055  
        ?_enterSelectedSubProgramFromMainProgram 0001           _enterSelectedSubProgramFromMainProgram E792  
                    __end_of_initializeLcdScreen E4A6                                 __size_of___lldiv 0082  
                               __size_of___lwdiv 0052                                 __size_of___lwmod 0042  
                               __size_of__doprnt 05AE                    ??_cycleMainProgramScreenRight 0031  
                         Eeprom_ReadByte@address 0007                                 __size_of_lcdInst 000C  
                                   ??_saveEEPROM 000A                                _updateCurrentTime E894  
                                _I2C_Master_Read E520                                  _I2C_Master_Wait E482  
                                _I2C_Master_Stop E44C                                 __size_of_isdigit 001E  
                             ?_updateCurrentTime 0001                                         _lcdClear E5E2  
                                ___lwdiv@divisor 0003                                  ___lwdiv@counter 0007  
                         ?_initializePicSettings 0001              __end_of_displayMainProgramLcdScreen ED56  
                    _displayMainProgramLcdScreen EC9C                                         __ptext10 E592  
                                       __ptext11 EB3C                                         __ptext20 EA08  
                                       __ptext12 F114                                         __ptext21 EEF8  
                                       __ptext13 EE24                                         __ptext30 E520  
                                       __ptext22 E4A6                                         __ptext14 E6B8  
                                       __ptext31 E482                                         __ptext23 E56C  
                                       __ptext15 ED56                                         __ptext40 E45E  
                                       __ptext32 E5E2                                         __ptext24 E546  
                                       __ptext16 F444                                         __ptext41 E7E4  
                                       __ptext33 E640                                         __ptext25 EC9C  
                                       __ptext17 E97C                                         __ptext42 0000  
                                       __ptext34 F87A                                         __ptext26 E894  
                                       __ptext18 EA9A                                         __ptext35 E46A  
                                       __ptext27 E454                                         __ptext19 EFE6  
                                       __ptext36 E4BC                                         __ptext28 E44C  
                                       __ptext37 E4FA                                         __ptext29 E444  
                                       __ptext38 E676                                         __ptext39 E740  
                               __size_of_sprintf 0042                              ??_updateCurrentTime 0004  
                                    ??_getEEPROM 000B                                    __size_of_atoi 00CE  
                                  __size_of_main 00B8                                  _Eeprom_ReadByte E4A6  
                   ??_update_eeprom_screen_state 002F                            __end_of_initializeRTC E894  
                             __end_of_saveEEPROM F444                                      ??_lcdNibble 0001  
                   __size_of_getPressedKeypadKey 0092                                   initializeRTC@c 000E  
                                       atoi@sign 000B                                  operation@bottle 003E  
                                       main@temp 0059                        __end_of_updateCurrentTime E8FA  
                               ??_getCurrentTime 002D                                        putch@data 0003  
                       __end_of_I2C_Master_Start E44C                         __end_of_I2C_Master_Write E45E  
                                     _INTCONbits 000FF2                                     ??_pushBottle 0001  
                      getCurrentTime@currentTime 002D                                         isdigit@c 0003  
                              ??_past_run_access 0031              __size_of_update_eeprom_screen_state 008C  
                   ??_cycleMainProgramScreenLeft 0031                                        sprintf@ap 0025  
                                      sprintf@pb 0027                                        sprintf@wh 001F  
           __size_of_cycleMainProgramScreenRight 0026                                 ___lwmod@dividend 0008  
                               ___lldiv@dividend 0001                                      ??_operation 0033  
                             updateCurrentTime@i 0004                                         printf@ap 0027  
                                       printf@pb 0029                               __end_of_pushBottle EBE4  
                        __end_of_I2C_Master_Read E546                          __end_of_I2C_Master_Wait E494  
                        __end_of_I2C_Master_Stop E454                                      lcdInst@data 0003  
            __size_of_cycleMainProgramScreenLeft 0026                                         sprintf@f 0021  
                               ___lldiv@quotient 0009                                I2C_Master_Write@d 0002  
                                ___lwmod@divisor 000A                                  ___lwmod@counter 000C  
                        __end_of_Eeprom_ReadByte E4BC                              operation@endingTime 0037  
                        ??_initializeLcdSettings 0004                                  _initScreenState 0068  
                            operation@bottle_cap 003C  
