

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Mar 28 16:33:56 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	text52,global,reloc=2,class=CODE,delta=1
    66                           	psect	text53,global,reloc=2,class=CODE,delta=1
    67                           	psect	text54,global,reloc=2,class=CODE,delta=1
    68                           	psect	text55,global,reloc=2,class=CODE,delta=1
    69                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    70                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	text73,global,reloc=2,class=CODE,delta=1
    88                           	psect	text74,global,reloc=2,class=CODE,delta=1
    89                           	psect	text75,global,reloc=2,class=CODE,delta=1
    90                           	psect	text76,global,reloc=2,class=CODE,delta=1
    91                           	psect	text77,global,reloc=2,class=CODE,delta=1
    92                           	psect	text78,global,reloc=2,class=CODE,delta=1
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    94                           	psect	text79,global,reloc=2,class=CODE,delta=1
    95                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    96                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    97  0000                     
    98                           ; Version 1.40
    99                           ; Generated 01/12/2016 GMT
   100                           ; 
   101                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
   102                           ; All rights reserved.
   103                           ; 
   104                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   105                           ; 
   106                           ; Redistribution and use in source and binary forms, with or without modification, are
   107                           ; permitted provided that the following conditions are met:
   108                           ; 
   109                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   110                           ;        conditions and the following disclaimer.
   111                           ; 
   112                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   113                           ;        of conditions and the following disclaimer in the documentation and/or other
   114                           ;        materials provided with the distribution.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC18F4620 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132  0000                     
   133                           	psect	idataBANK0
   134  00385E                     __pidataBANK0:
   135                           	opt stack 0
   136                           
   137                           ;initializer for _runInfo
   138  00385E  0028               	dw	40
   139  003860  000A               	dw	10
   140  003862  0002               	dw	2
   141  003864  0003               	dw	3
   142  003866  0003               	dw	3
   143  003868  0002               	dw	2
   144                           
   145                           	psect	mediumconst
   146  00FE30                     __pmediumconst:
   147                           	opt stack 0
   148  00FE30  00                 	db	0
   149  00FE31                     _keys:
   150                           	opt stack 0
   151  00FE31  31                 	db	49
   152  00FE32  32                 	db	50
   153  00FE33  33                 	db	51
   154  00FE34  41                 	db	65
   155  00FE35  34                 	db	52
   156  00FE36  35                 	db	53
   157  00FE37  36                 	db	54
   158  00FE38  42                 	db	66
   159  00FE39  37                 	db	55
   160  00FE3A  38                 	db	56
   161  00FE3B  39                 	db	57
   162  00FE3C  43                 	db	67
   163  00FE3D  2A                 	db	42
   164  00FE3E  30                 	db	48
   165  00FE3F  23                 	db	35
   166  00FE40  44                 	db	68
   167  00FE41  00                 	db	0
   168  00FE42                     __end_of_keys:
   169                           	opt stack 0
   170  00FE42                     _dpowers:
   171                           	opt stack 0
   172  00FE42  0001               	dw	1
   173  00FE44  000A               	dw	10
   174  00FE46  0064               	dw	100
   175  00FE48  03E8               	dw	1000
   176  00FE4A  2710               	dw	10000
   177  00FE4C                     __end_of_dpowers:
   178                           	opt stack 0
   179  00FE4C                     _hexpowers:
   180                           	opt stack 0
   181  00FE4C  0001               	dw	1
   182  00FE4E  0010               	dw	16
   183  00FE50  0100               	dw	256
   184  00FE52  1000               	dw	4096
   185  00FE54                     __end_of_hexpowers:
   186                           	opt stack 0
   187  00FE54                     _BACK:
   188                           	opt stack 0
   189  00FE54  0000               	dw	0
   190  00FE56                     __end_of_BACK:
   191                           	opt stack 0
   192  00FE56                     _ENTER:
   193                           	opt stack 0
   194  00FE56  0003               	dw	3
   195  00FE58                     __end_of_ENTER:
   196                           	opt stack 0
   197  00FE58                     _LEFT:
   198                           	opt stack 0
   199  00FE58  0004               	dw	4
   200  00FE5A                     __end_of_LEFT:
   201                           	opt stack 0
   202  00FE5A                     _RIGHT:
   203                           	opt stack 0
   204  00FE5A  0006               	dw	6
   205  00FE5C                     __end_of_RIGHT:
   206                           	opt stack 0
   207  0000                     _ADCON0	set	4034
   208  0000                     _ADCON1	set	4033
   209  0000                     _CMCONbits	set	4020
   210  0000                     _CVRCON	set	4021
   211  0000                     _EEADR	set	4009
   212  0000                     _EEADRH	set	4010
   213  0000                     _EECON1bits	set	4006
   214  0000                     _EECON2	set	4007
   215  0000                     _EEDATA	set	4008
   216  0000                     _INTCONbits	set	4082
   217  0000                     _LATA	set	3977
   218  0000                     _LATB	set	3978
   219  0000                     _LATC	set	3979
   220  0000                     _LATD	set	3980
   221  0000                     _LATDbits	set	3980
   222  0000                     _LATE	set	3981
   223  0000                     _OSCCON	set	4051
   224  0000                     _OSCTUNEbits	set	3995
   225  0000                     _PIR2bits	set	4001
   226  0000                     _PORTAbits	set	3968
   227  0000                     _PORTB	set	3969
   228  0000                     _PORTBbits	set	3969
   229  0000                     _PORTCbits	set	3970
   230  0000                     _PORTDbits	set	3971
   231  0000                     _SSPADD	set	4040
   232  0000                     _SSPBUF	set	4041
   233  0000                     _SSPCON1	set	4038
   234  0000                     _SSPCON2	set	4037
   235  0000                     _SSPSTAT	set	4039
   236  0000                     _T1CON	set	4045
   237  0000                     _TMR1H	set	4047
   238  0000                     _TMR1L	set	4046
   239  0000                     _TRISA	set	3986
   240  0000                     _TRISB	set	3987
   241  0000                     _TRISC	set	3988
   242  0000                     _TRISD	set	3989
   243  0000                     _TRISE	set	3990
   244  0000                     _ACKDT	set	32301
   245  0000                     _ACKEN	set	32300
   246  0000                     _ADFM	set	32263
   247  0000                     _PEIE	set	32662
   248  0000                     _PEN	set	32298
   249  0000                     _PSA	set	32427
   250  0000                     _RCEN	set	32299
   251  0000                     _RSEN	set	32297
   252  0000                     _SEN	set	32296
   253  0000                     _T08BIT	set	32430
   254  0000                     _T0CS	set	32429
   255  0000                     _T0PS0	set	32424
   256  0000                     _T0PS1	set	32425
   257  0000                     _T0PS2	set	32426
   258  0000                     _T1CKPS0	set	32364
   259  0000                     _T1CKPS1	set	32365
   260  0000                     _T1OSCEN	set	32363
   261  0000                     _T1SYNC	set	32362
   262  0000                     _TMR0IE	set	32661
   263  0000                     _TMR0IF	set	32658
   264  0000                     _TMR0ON	set	32431
   265  0000                     _TMR1CS	set	32361
   266  0000                     _TMR1IE	set	31976
   267  0000                     _TMR1IF	set	31984
   268  0000                     _TMR1ON	set	32360
   269  0000                     _TRISC3	set	31907
   270  0000                     _TRISC4	set	31908
   271  0000                     _nRBPU	set	32655
   272  00FE5C                     STR_30:
   273  00FE5C  43                 	db	67	;'C'
   274  00FE5D  4F                 	db	79	;'O'
   275  00FE5E  4D                 	db	77	;'M'
   276  00FE5F  50                 	db	80	;'P'
   277  00FE60  4C                 	db	76	;'L'
   278  00FE61  45                 	db	69	;'E'
   279  00FE62  54                 	db	84	;'T'
   280  00FE63  45                 	db	69	;'E'
   281  00FE64  44                 	db	68	;'D'
   282  00FE65  21                 	db	33
   283  00FE66  21                 	db	33
   284  00FE67  21                 	db	33
   285  00FE68  20                 	db	32
   286  00FE69  20                 	db	32
   287  00FE6A  20                 	db	32
   288  00FE6B  20                 	db	32
   289  00FE6C  20                 	db	32
   290  00FE6D  00                 	db	0
   291  00FE6E                     STR_23:
   292  00FE6E  3C                 	db	60	;'<'
   293  00FE6F  34                 	db	52	;'4'
   294  00FE70  20                 	db	32
   295  00FE71  20                 	db	32
   296  00FE72  42                 	db	66	;'B'
   297  00FE73  61                 	db	97	;'a'
   298  00FE74  63                 	db	99	;'c'
   299  00FE75  6B                 	db	107	;'k'
   300  00FE76  3A                 	db	58	;':'
   301  00FE77  20                 	db	32
   302  00FE78  20                 	db	32
   303  00FE79  31                 	db	49	;'1'
   304  00FE7A  20                 	db	32
   305  00FE7B  20                 	db	32
   306  00FE7C  36                 	db	54	;'6'
   307  00FE7D  3E                 	db	62	;'>'
   308  00FE7E  20                 	db	32
   309  00FE7F  00                 	db	0
   310  00FE80                     STR_35:
   311  00FE80  30                 	db	48	;'0'
   312  00FE81  31                 	db	49	;'1'
   313  00FE82  32                 	db	50	;'2'
   314  00FE83  33                 	db	51	;'3'
   315  00FE84  34                 	db	52	;'4'
   316  00FE85  35                 	db	53	;'5'
   317  00FE86  36                 	db	54	;'6'
   318  00FE87  37                 	db	55	;'7'
   319  00FE88  38                 	db	56	;'8'
   320  00FE89  39                 	db	57	;'9'
   321  00FE8A  61                 	db	97	;'a'
   322  00FE8B  62                 	db	98	;'b'
   323  00FE8C  63                 	db	99	;'c'
   324  00FE8D  64                 	db	100	;'d'
   325  00FE8E  65                 	db	101	;'e'
   326  00FE8F  66                 	db	102	;'f'
   327  00FE90  00                 	db	0
   328  00FE91                     STR_33:
   329  00FE91  20                 	db	32
   330  00FE92  20                 	db	32
   331  00FE93  20                 	db	32
   332  00FE94  20                 	db	32
   333  00FE95  20                 	db	32
   334  00FE96  20                 	db	32
   335  00FE97  20                 	db	32
   336  00FE98  20                 	db	32
   337  00FE99  20                 	db	32
   338  00FE9A  20                 	db	32
   339  00FE9B  20                 	db	32
   340  00FE9C  20                 	db	32
   341  00FE9D  20                 	db	32
   342  00FE9E  20                 	db	32
   343  00FE9F  20                 	db	32
   344  00FEA0  20                 	db	32
   345  00FEA1  00                 	db	0
   346  00FEA2                     STR_31:
   347  00FEA2  41                 	db	65	;'A'
   348  00FEA3  20                 	db	32
   349  00FEA4  74                 	db	116	;'t'
   350  00FEA5  6F                 	db	111	;'o'
   351  00FEA6  20                 	db	32
   352  00FEA7  62                 	db	98	;'b'
   353  00FEA8  61                 	db	97	;'a'
   354  00FEA9  63                 	db	99	;'c'
   355  00FEAA  6B                 	db	107	;'k'
   356  00FEAB  20                 	db	32
   357  00FEAC  20                 	db	32
   358  00FEAD  20                 	db	32
   359  00FEAE  20                 	db	32
   360  00FEAF  20                 	db	32
   361  00FEB0  20                 	db	32
   362  00FEB1  20                 	db	32
   363  00FEB2  00                 	db	0
   364  00FEB3                     STR_8:
   365  00FEB3  41                 	db	65	;'A'
   366  00FEB4  63                 	db	99	;'c'
   367  00FEB5  63                 	db	99	;'c'
   368  00FEB6  65                 	db	101	;'e'
   369  00FEB7  73                 	db	115	;'s'
   370  00FEB8  73                 	db	115	;'s'
   371  00FEB9  20                 	db	32
   372  00FEBA  4C                 	db	76	;'L'
   373  00FEBB  61                 	db	97	;'a'
   374  00FEBC  73                 	db	115	;'s'
   375  00FEBD  74                 	db	116	;'t'
   376  00FEBE  20                 	db	32
   377  00FEBF  52                 	db	82	;'R'
   378  00FEC0  75                 	db	117	;'u'
   379  00FEC1  6E                 	db	110	;'n'
   380  00FEC2  20                 	db	32
   381  00FEC3  00                 	db	0
   382  00FEC4                     STR_14:
   383  00FEC4  3C                 	db	60	;'<'
   384  00FEC5  34                 	db	52	;'4'
   385  00FEC6  20                 	db	32
   386  00FEC7  20                 	db	32
   387  00FEC8  4E                 	db	78	;'N'
   388  00FEC9  61                 	db	97	;'a'
   389  00FECA  76                 	db	118	;'v'
   390  00FECB  3A                 	db	58	;':'
   391  00FECC  20                 	db	32
   392  00FECD  41                 	db	65	;'A'
   393  00FECE  2F                 	db	47
   394  00FECF  31                 	db	49	;'1'
   395  00FED0  20                 	db	32
   396  00FED1  20                 	db	32
   397  00FED2  36                 	db	54	;'6'
   398  00FED3  3E                 	db	62	;'>'
   399  00FED4  00                 	db	0
   400  00FED5                     STR_9:
   401  00FED5  3C                 	db	60	;'<'
   402  00FED6  34                 	db	52	;'4'
   403  00FED7  20                 	db	32
   404  00FED8  20                 	db	32
   405  00FED9  53                 	db	83	;'S'
   406  00FEDA  74                 	db	116	;'t'
   407  00FEDB  61                 	db	97	;'a'
   408  00FEDC  72                 	db	114	;'r'
   409  00FEDD  74                 	db	116	;'t'
   410  00FEDE  3A                 	db	58	;':'
   411  00FEDF  20                 	db	32
   412  00FEE0  41                 	db	65	;'A'
   413  00FEE1  20                 	db	32
   414  00FEE2  20                 	db	32
   415  00FEE3  36                 	db	54	;'6'
   416  00FEE4  3E                 	db	62	;'>'
   417  00FEE5  00                 	db	0
   418  00FEE6                     STR_20:
   419  00FEE6  45                 	db	69	;'E'
   420  00FEE7  73                 	db	115	;'s'
   421  00FEE8  6B                 	db	107	;'k'
   422  00FEE9  61                 	db	97	;'a'
   423  00FEEA  20                 	db	32
   424  00FEEB  77                 	db	119	;'w'
   425  00FEEC  2F                 	db	47
   426  00FEED  6F                 	db	111	;'o'
   427  00FEEE  20                 	db	32
   428  00FEEF  43                 	db	67	;'C'
   429  00FEF0  61                 	db	97	;'a'
   430  00FEF1  70                 	db	112	;'p'
   431  00FEF2  3A                 	db	58	;':'
   432  00FEF3  20                 	db	32
   433  00FEF4  25                 	db	37
   434  00FEF5  69                 	db	105	;'i'
   435  00FEF6  00                 	db	0
   436  00FEF7                     STR_11:
   437  00FEF7  20                 	db	32
   438  00FEF8  20                 	db	32
   439  00FEF9  20                 	db	32
   440  00FEFA  50                 	db	80	;'P'
   441  00FEFB  61                 	db	97	;'a'
   442  00FEFC  73                 	db	115	;'s'
   443  00FEFD  74                 	db	116	;'t'
   444  00FEFE  20                 	db	32
   445  00FEFF  52                 	db	82	;'R'
   446  00FF00  75                 	db	117	;'u'
   447  00FF01  6E                 	db	110	;'n'
   448  00FF02  20                 	db	32
   449  00FF03  32                 	db	50	;'2'
   450  00FF04  20                 	db	32
   451  00FF05  20                 	db	32
   452  00FF06  00                 	db	0
   453  00FF07                     STR_12:
   454  00FF07  20                 	db	32
   455  00FF08  20                 	db	32
   456  00FF09  20                 	db	32
   457  00FF0A  50                 	db	80	;'P'
   458  00FF0B  61                 	db	97	;'a'
   459  00FF0C  73                 	db	115	;'s'
   460  00FF0D  74                 	db	116	;'t'
   461  00FF0E  20                 	db	32
   462  00FF0F  52                 	db	82	;'R'
   463  00FF10  75                 	db	117	;'u'
   464  00FF11  6E                 	db	110	;'n'
   465  00FF12  20                 	db	32
   466  00FF13  33                 	db	51	;'3'
   467  00FF14  20                 	db	32
   468  00FF15  20                 	db	32
   469  00FF16  00                 	db	0
   470  00FF17                     STR_13:
   471  00FF17  20                 	db	32
   472  00FF18  20                 	db	32
   473  00FF19  20                 	db	32
   474  00FF1A  50                 	db	80	;'P'
   475  00FF1B  61                 	db	97	;'a'
   476  00FF1C  73                 	db	115	;'s'
   477  00FF1D  74                 	db	116	;'t'
   478  00FF1E  20                 	db	32
   479  00FF1F  52                 	db	82	;'R'
   480  00FF20  75                 	db	117	;'u'
   481  00FF21  6E                 	db	110	;'n'
   482  00FF22  20                 	db	32
   483  00FF23  34                 	db	52	;'4'
   484  00FF24  20                 	db	32
   485  00FF25  20                 	db	32
   486  00FF26  00                 	db	0
   487  00FF27                     STR_24:
   488  00FF27  2E                 	db	46
   489  00FF28  2E                 	db	46
   490  00FF29  2E                 	db	46
   491  00FF2A  4F                 	db	79	;'O'
   492  00FF2B  70                 	db	112	;'p'
   493  00FF2C  65                 	db	101	;'e'
   494  00FF2D  72                 	db	114	;'r'
   495  00FF2E  61                 	db	97	;'a'
   496  00FF2F  74                 	db	116	;'t'
   497  00FF30  69                 	db	105	;'i'
   498  00FF31  6E                 	db	110	;'n'
   499  00FF32  67                 	db	103	;'g'
   500  00FF33  2E                 	db	46
   501  00FF34  2E                 	db	46
   502  00FF35  2E                 	db	46
   503  00FF36  00                 	db	0
   504  00FF37                     STR_19:
   505  00FF37  45                 	db	69	;'E'
   506  00FF38  73                 	db	115	;'s'
   507  00FF39  6B                 	db	107	;'k'
   508  00FF3A  61                 	db	97	;'a'
   509  00FF3B  20                 	db	32
   510  00FF3C  77                 	db	119	;'w'
   511  00FF3D  2F                 	db	47
   512  00FF3E  20                 	db	32
   513  00FF3F  43                 	db	67	;'C'
   514  00FF40  61                 	db	97	;'a'
   515  00FF41  70                 	db	112	;'p'
   516  00FF42  3A                 	db	58	;':'
   517  00FF43  20                 	db	32
   518  00FF44  25                 	db	37
   519  00FF45  69                 	db	105	;'i'
   520  00FF46  00                 	db	0
   521  00FF47                     STR_18:
   522  00FF47  59                 	db	89	;'Y'
   523  00FF48  6F                 	db	111	;'o'
   524  00FF49  70                 	db	112	;'p'
   525  00FF4A  20                 	db	32
   526  00FF4B  77                 	db	119	;'w'
   527  00FF4C  2F                 	db	47
   528  00FF4D  6F                 	db	111	;'o'
   529  00FF4E  20                 	db	32
   530  00FF4F  43                 	db	67	;'C'
   531  00FF50  61                 	db	97	;'a'
   532  00FF51  70                 	db	112	;'p'
   533  00FF52  3A                 	db	58	;':'
   534  00FF53  20                 	db	32
   535  00FF54  25                 	db	37
   536  00FF55  69                 	db	105	;'i'
   537  00FF56  00                 	db	0
   538  00FF57                     STR_15:
   539  00FF57  54                 	db	84	;'T'
   540  00FF58  69                 	db	105	;'i'
   541  00FF59  6D                 	db	109	;'m'
   542  00FF5A  65                 	db	101	;'e'
   543  00FF5B  20                 	db	32
   544  00FF5C  74                 	db	116	;'t'
   545  00FF5D  61                 	db	97	;'a'
   546  00FF5E  6B                 	db	107	;'k'
   547  00FF5F  65                 	db	101	;'e'
   548  00FF60  6E                 	db	110	;'n'
   549  00FF61  3A                 	db	58	;':'
   550  00FF62  20                 	db	32
   551  00FF63  25                 	db	37
   552  00FF64  69                 	db	105	;'i'
   553  00FF65  73                 	db	115	;'s'
   554  00FF66  00                 	db	0
   555  00FF67                     STR_2:
   556  00FF67  25                 	db	37
   557  00FF68  30                 	db	48	;'0'
   558  00FF69  32                 	db	50	;'2'
   559  00FF6A  78                 	db	120	;'x'
   560  00FF6B  3A                 	db	58	;':'
   561  00FF6C  25                 	db	37
   562  00FF6D  30                 	db	48	;'0'
   563  00FF6E  32                 	db	50	;'2'
   564  00FF6F  78                 	db	120	;'x'
   565  00FF70  3A                 	db	58	;':'
   566  00FF71  25                 	db	37
   567  00FF72  30                 	db	48	;'0'
   568  00FF73  32                 	db	50	;'2'
   569  00FF74  78                 	db	120	;'x'
   570  00FF75  00                 	db	0
   571  00FF76                     STR_25:
   572  00FF76  3F                 	db	63	;'?'
   573  00FF77  3F                 	db	63	;'?'
   574  00FF78  3F                 	db	63	;'?'
   575  00FF79  20                 	db	32
   576  00FF7A  49                 	db	73	;'I'
   577  00FF7B  4E                 	db	78	;'N'
   578  00FF7C  53                 	db	83	;'S'
   579  00FF7D  49                 	db	73	;'I'
   580  00FF7E  44                 	db	68	;'D'
   581  00FF7F  45                 	db	69	;'E'
   582  00FF80  20                 	db	32
   583  00FF81  20                 	db	32
   584  00FF82  20                 	db	32
   585  00FF83  00                 	db	0
   586  00FF84                     STR_7:
   587  00FF84  41                 	db	65	;'A'
   588  00FF85  63                 	db	99	;'c'
   589  00FF86  63                 	db	99	;'c'
   590  00FF87  65                 	db	101	;'e'
   591  00FF88  73                 	db	115	;'s'
   592  00FF89  73                 	db	115	;'s'
   593  00FF8A  20                 	db	32
   594  00FF8B  45                 	db	69	;'E'
   595  00FF8C  45                 	db	69	;'E'
   596  00FF8D  50                 	db	80	;'P'
   597  00FF8E  52                 	db	82	;'R'
   598  00FF8F  4F                 	db	79	;'O'
   599  00FF90  4D                 	db	77	;'M'
   600  00FF91  00                 	db	0
   601  00FF92                     STR_6:
   602  00FF92  42                 	db	66	;'B'
   603  00FF93  65                 	db	101	;'e'
   604  00FF94  67                 	db	103	;'g'
   605  00FF95  69                 	db	105	;'i'
   606  00FF96  6E                 	db	110	;'n'
   607  00FF97  20                 	db	32
   608  00FF98  53                 	db	83	;'S'
   609  00FF99  6F                 	db	111	;'o'
   610  00FF9A  72                 	db	114	;'r'
   611  00FF9B  74                 	db	116	;'t'
   612  00FF9C  69                 	db	105	;'i'
   613  00FF9D  6E                 	db	110	;'n'
   614  00FF9E  67                 	db	103	;'g'
   615  00FF9F  00                 	db	0
   616  00FFA0                     STR_17:
   617  00FFA0  59                 	db	89	;'Y'
   618  00FFA1  6F                 	db	111	;'o'
   619  00FFA2  70                 	db	112	;'p'
   620  00FFA3  20                 	db	32
   621  00FFA4  77                 	db	119	;'w'
   622  00FFA5  2F                 	db	47
   623  00FFA6  43                 	db	67	;'C'
   624  00FFA7  61                 	db	97	;'a'
   625  00FFA8  70                 	db	112	;'p'
   626  00FFA9  3A                 	db	58	;':'
   627  00FFAA  20                 	db	32
   628  00FFAB  25                 	db	37
   629  00FFAC  69                 	db	105	;'i'
   630  00FFAD  00                 	db	0
   631  00FFAE                     STR_16:
   632  00FFAE  23                 	db	35
   633  00FFAF  20                 	db	32
   634  00FFB0  42                 	db	66	;'B'
   635  00FFB1  6F                 	db	111	;'o'
   636  00FFB2  74                 	db	116	;'t'
   637  00FFB3  74                 	db	116	;'t'
   638  00FFB4  6C                 	db	108	;'l'
   639  00FFB5  65                 	db	101	;'e'
   640  00FFB6  73                 	db	115	;'s'
   641  00FFB7  3A                 	db	58	;':'
   642  00FFB8  20                 	db	32
   643  00FFB9  25                 	db	37
   644  00FFBA  69                 	db	105	;'i'
   645  00FFBB  00                 	db	0
   646  00FFBC                     STR_29:
   647  00FFBC  20                 	db	32
   648  00FFBD  77                 	db	119	;'w'
   649  00FFBE  2F                 	db	47
   650  00FFBF  6F                 	db	111	;'o'
   651  00FFC0  20                 	db	32
   652  00FFC1  43                 	db	67	;'C'
   653  00FFC2  61                 	db	97	;'a'
   654  00FFC3  70                 	db	112	;'p'
   655  00FFC4  20                 	db	32
   656  00FFC5  20                 	db	32
   657  00FFC6  20                 	db	32
   658  00FFC7  20                 	db	32
   659  00FFC8  00                 	db	0
   660  00FFC9                     STR_1:
   661  00FFC9  25                 	db	37
   662  00FFCA  30                 	db	48	;'0'
   663  00FFCB  32                 	db	50	;'2'
   664  00FFCC  78                 	db	120	;'x'
   665  00FFCD  2F                 	db	47
   666  00FFCE  25                 	db	37
   667  00FFCF  30                 	db	48	;'0'
   668  00FFD0  32                 	db	50	;'2'
   669  00FFD1  78                 	db	120	;'x'
   670  00FFD2  20                 	db	32
   671  00FFD3  20                 	db	32
   672  00FFD4  20                 	db	32
   673  00FFD5  00                 	db	0
   674  00FFD6                     STR_28:
   675  00FFD6  20                 	db	32
   676  00FFD7  77                 	db	119	;'w'
   677  00FFD8  2F                 	db	47
   678  00FFD9  20                 	db	32
   679  00FFDA  43                 	db	67	;'C'
   680  00FFDB  61                 	db	97	;'a'
   681  00FFDC  70                 	db	112	;'p'
   682  00FFDD  20                 	db	32
   683  00FFDE  20                 	db	32
   684  00FFDF  20                 	db	32
   685  00FFE0  20                 	db	32
   686  00FFE1  00                 	db	0
   687  00FFE2                     STR_10:
   688  00FFE2  52                 	db	82	;'R'
   689  00FFE3  65                 	db	101	;'e'
   690  00FFE4  63                 	db	99	;'c'
   691  00FFE5  65                 	db	101	;'e'
   692  00FFE6  6E                 	db	110	;'n'
   693  00FFE7  74                 	db	116	;'t'
   694  00FFE8  20                 	db	32
   695  00FFE9  52                 	db	82	;'R'
   696  00FFEA  75                 	db	117	;'u'
   697  00FFEB  6E                 	db	110	;'n'
   698  00FFEC  00                 	db	0
   699  00FFED  61                 	db	97	;'a'
   700  00FFEE  79                 	db	121	;'y'
   701  00FFEF  79                 	db	121	;'y'
   702  00FFF0  6C                 	db	108	;'l'
   703  00FFF1  6D                 	db	109	;'m'
   704  00FFF2  61                 	db	97	;'a'
   705  00FFF3  6F                 	db	111	;'o'
   706  00FFF4  00                 	db	0
   707  00FFF5                     STR_27:
   708  00FFF5  45                 	db	69	;'E'
   709  00FFF6  53                 	db	83	;'S'
   710  00FFF7  4B                 	db	75	;'K'
   711  00FFF8  41                 	db	65	;'A'
   712  00FFF9  00                 	db	0
   713  00FFFA                     STR_26:
   714  00FFFA  59                 	db	89	;'Y'
   715  00FFFB  4F                 	db	79	;'O'
   716  00FFFC  50                 	db	80	;'P'
   717  00FFFD  00                 	db	0
   718  0000                     
   719                           ; #config settings
   720  00FFFE  00                 	db	0	; dummy byte at the end
   721  0000                     
   722                           	psect	cinit
   723  0034AE                     __pcinit:
   724                           	opt stack 0
   725  0034AE                     start_initialization:
   726                           	opt stack 0
   727  0034AE                     __initialization:
   728                           	opt stack 0
   729                           
   730                           ; Initialize objects allocated to BANK0 (12 bytes)
   731                           ; load TBLPTR registers with __pidataBANK0
   732  0034AE  0E5E               	movlw	low __pidataBANK0
   733  0034B0  6EF6               	movwf	tblptrl,c
   734  0034B2  0E38               	movlw	high __pidataBANK0
   735  0034B4  6EF7               	movwf	tblptrh,c
   736  0034B6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   737  0034B8  6EF8               	movwf	tblptru,c
   738  0034BA  EE00  F0F1         	lfsr	0,__pdataBANK0
   739  0034BE  EE10 F00C          	lfsr	1,12
   740  0034C2                     copy_data0:
   741  0034C2  0009               	tblrd		*+
   742  0034C4  CFF5 FFEE          	movff	tablat,postinc0
   743  0034C8  50E5               	movf	postdec1,w,c
   744  0034CA  50E1               	movf	fsr1l,w,c
   745  0034CC  E1FA               	bnz	copy_data0
   746                           
   747                           ; Clear objects allocated to BANK0 (22 bytes)
   748  0034CE  EE00  F0DB         	lfsr	0,__pbssBANK0
   749  0034D2  0E16               	movlw	22
   750  0034D4                     clear_0:
   751  0034D4  6AEE               	clrf	postinc0,c
   752  0034D6  06E8               	decf	wreg,f,c
   753  0034D8  E1FD               	bnz	clear_0
   754                           
   755                           ; Clear objects allocated to COMRAM (8 bytes)
   756  0034DA  EE00  F049         	lfsr	0,__pbssCOMRAM
   757  0034DE  0E08               	movlw	8
   758  0034E0                     clear_1:
   759  0034E0  6AEE               	clrf	postinc0,c
   760  0034E2  06E8               	decf	wreg,f,c
   761  0034E4  E1FD               	bnz	clear_1
   762  0034E6                     end_of_initialization:
   763                           	opt stack 0
   764  0034E6                     __end_of__initialization:
   765                           	opt stack 0
   766  0034E6  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   767  0034E8  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   768  0034EA  0100               	movlb	0
   769  0034EC  EF3B  F00F         	goto	_main	;jump to C main() function
   770                           tblptru	equ	0xFF8
   771                           tblptrh	equ	0xFF7
   772                           tblptrl	equ	0xFF6
   773                           tablat	equ	0xFF5
   774                           postinc0	equ	0xFEE
   775                           wreg	equ	0xFE8
   776                           postdec1	equ	0xFE5
   777                           fsr1l	equ	0xFE1
   778                           
   779                           	psect	bssCOMRAM
   780  000049                     __pbssCOMRAM:
   781                           	opt stack 0
   782  000049                     _motorCounter:
   783                           	opt stack 0
   784  000049                     	ds	2
   785  00004B                     _randomSpeed:
   786                           	opt stack 0
   787  00004B                     	ds	2
   788  00004D                     _timerCounter:
   789                           	opt stack 0
   790  00004D                     	ds	2
   791  00004F                     _timerDisabled:
   792                           	opt stack 0
   793  00004F                     	ds	2
   794                           tblptru	equ	0xFF8
   795                           tblptrh	equ	0xFF7
   796                           tblptrl	equ	0xFF6
   797                           tablat	equ	0xFF5
   798                           postinc0	equ	0xFEE
   799                           wreg	equ	0xFE8
   800                           postdec1	equ	0xFE5
   801                           fsr1l	equ	0xFE1
   802                           
   803                           	psect	bssBANK0
   804  0000DB                     __pbssBANK0:
   805                           	opt stack 0
   806  0000DB                     _lastRunTime:
   807                           	opt stack 0
   808  0000DB                     	ds	7
   809  0000E2                     _time:
   810                           	opt stack 0
   811  0000E2                     	ds	7
   812  0000E9                     _currentBottle:
   813                           	opt stack 0
   814  0000E9                     	ds	2
   815  0000EB                     _currentBottleBin:
   816                           	opt stack 0
   817  0000EB                     	ds	2
   818  0000ED                     _lastSortedBottleTime:
   819                           	opt stack 0
   820  0000ED                     	ds	2
   821  0000EF                     _currentMainProgramScreen:
   822                           	opt stack 0
   823  0000EF                     	ds	2
   824                           tblptru	equ	0xFF8
   825                           tblptrh	equ	0xFF7
   826                           tblptrl	equ	0xFF6
   827                           tablat	equ	0xFF5
   828                           postinc0	equ	0xFEE
   829                           wreg	equ	0xFE8
   830                           postdec1	equ	0xFE5
   831                           fsr1l	equ	0xFE1
   832                           
   833                           	psect	dataBANK0
   834  0000F1                     __pdataBANK0:
   835                           	opt stack 0
   836  0000F1                     _runInfo:
   837                           	opt stack 0
   838  0000F1                     	ds	12
   839                           tblptru	equ	0xFF8
   840                           tblptrh	equ	0xFF7
   841                           tblptrl	equ	0xFF6
   842                           tablat	equ	0xFF5
   843                           postinc0	equ	0xFEE
   844                           wreg	equ	0xFE8
   845                           postdec1	equ	0xFE5
   846                           fsr1l	equ	0xFE1
   847                           
   848                           	psect	cstackBANK0
   849  000080                     __pcstackBANK0:
   850                           	opt stack 0
   851  000080                     ??_retractSensorAreaArm:
   852  000080                     ??_extendSensorAreaArm:
   853  000080                     ??_isdigit:
   854  000080                     ??_I2C_Master_Wait:
   855  000080                     ?_analyzeRgbcForSensor:
   856                           	opt stack 0
   857  000080                     ?___wmul:
   858                           	opt stack 0
   859  000080                     ?___lwdiv:
   860                           	opt stack 0
   861  000080                     ?___ftpack:
   862                           	opt stack 0
   863  000080                     ?___lldiv:
   864                           	opt stack 0
   865  000080                     getPressedKeypadKey@keypress:
   866                           	opt stack 0
   867  000080                     lcdNibble@temp:
   868                           	opt stack 0
   869  000080                     cycleProgramScreenLeft@programScreen:
   870                           	opt stack 0
   871  000080                     cycleProgramScreenRight@programScreen:
   872                           	opt stack 0
   873  000080                     analyzeRgbcForSensor@sensorNum:
   874                           	opt stack 0
   875  000080                     moveBinServo@num90Rotations:
   876                           	opt stack 0
   877  000080                     ___wmul@multiplier:
   878                           	opt stack 0
   879  000080                     ___lwdiv@dividend:
   880                           	opt stack 0
   881  000080                     ___ftpack@arg:
   882                           	opt stack 0
   883  000080                     ___lldiv@dividend:
   884                           	opt stack 0
   885                           
   886                           ; 4 bytes @ 0x0
   887  000080                     	ds	1
   888  000081                     lcdNibble@data:
   889                           	opt stack 0
   890  000081                     I2C_Master_Read@a:
   891                           	opt stack 0
   892  000081                     _isdigit$1338:
   893                           	opt stack 0
   894  000081                     I2C_Master_Write@d:
   895                           	opt stack 0
   896                           
   897                           ; 2 bytes @ 0x1
   898  000081                     	ds	1
   899  000082                     ??_moveBinServo:
   900  000082                     lcdInst@data:
   901                           	opt stack 0
   902  000082                     putch@data:
   903                           	opt stack 0
   904  000082                     I2C_Master_Read@temp:
   905                           	opt stack 0
   906  000082                     isdigit@c:
   907                           	opt stack 0
   908  000082                     cycleProgramScreenLeft@min:
   909                           	opt stack 0
   910  000082                     cycleProgramScreenRight@min:
   911                           	opt stack 0
   912  000082                     analyzeRgbcForSensor@rgbc:
   913                           	opt stack 0
   914  000082                     retractSensorAreaArm@i:
   915                           	opt stack 0
   916  000082                     extendSensorAreaArm@i:
   917                           	opt stack 0
   918  000082                     ___wmul@multiplicand:
   919                           	opt stack 0
   920  000082                     ___lwdiv@divisor:
   921                           	opt stack 0
   922                           
   923                           ; 2 bytes @ 0x2
   924  000082                     	ds	1
   925  000083                     ??_initializeLcdSettings:
   926  000083                     updateCurrentTime@i:
   927                           	opt stack 0
   928  000083                     ___ftpack@exp:
   929                           	opt stack 0
   930  000083                     setMultiplexerToSensor@num:
   931                           	opt stack 0
   932                           
   933                           ; 2 bytes @ 0x3
   934  000083                     	ds	1
   935  000084                     ??_pushBottle:
   936  000084                     ??_analyzeRgbcForSensor:
   937  000084                     ___ftpack@sign:
   938                           	opt stack 0
   939  000084                     cycleProgramScreenLeft@max:
   940                           	opt stack 0
   941  000084                     cycleProgramScreenRight@max:
   942                           	opt stack 0
   943  000084                     ___wmul@product:
   944                           	opt stack 0
   945  000084                     ___lwdiv@quotient:
   946                           	opt stack 0
   947  000084                     ___lldiv@divisor:
   948                           	opt stack 0
   949                           
   950                           ; 4 bytes @ 0x4
   951  000084                     	ds	1
   952  000085                     ??___ftpack:
   953                           
   954                           ; 1 bytes @ 0x5
   955  000085                     	ds	1
   956  000086                     ?_atoi:
   957                           	opt stack 0
   958  000086                     ___lwdiv@counter:
   959                           	opt stack 0
   960  000086                     analyzeRgbcForSensor@b1:
   961                           	opt stack 0
   962  000086                     Eeprom_ReadByte@address:
   963                           	opt stack 0
   964  000086                     Eeprom_WriteByte@address:
   965                           	opt stack 0
   966  000086                     atoi@s:
   967                           	opt stack 0
   968                           
   969                           ; 2 bytes @ 0x6
   970  000086                     	ds	1
   971  000087                     ?___lwmod:
   972                           	opt stack 0
   973  000087                     ___lwmod@dividend:
   974                           	opt stack 0
   975                           
   976                           ; 2 bytes @ 0x7
   977  000087                     	ds	1
   978  000088                     ??_atoi:
   979  000088                     ?___ftmul:
   980                           	opt stack 0
   981  000088                     Eeprom_WriteByte@data:
   982                           	opt stack 0
   983  000088                     analyzeRgbcForSensor@c1:
   984                           	opt stack 0
   985  000088                     getEEPROM@num:
   986                           	opt stack 0
   987  000088                     ___ftmul@f1:
   988                           	opt stack 0
   989  000088                     ___lldiv@quotient:
   990                           	opt stack 0
   991                           
   992                           ; 4 bytes @ 0x8
   993  000088                     	ds	1
   994  000089                     ??_saveEEPROM:
   995  000089                     ___lwmod@divisor:
   996                           	opt stack 0
   997                           
   998                           ; 2 bytes @ 0x9
   999  000089                     	ds	1
  1000  00008A                     ??_getEEPROM:
  1001  00008A                     atoi@sign:
  1002                           	opt stack 0
  1003  00008A                     analyzeRgbcForSensor@r1:
  1004                           	opt stack 0
  1005  00008A                     saveEEPROM@temp:
  1006                           	opt stack 0
  1007                           
  1008                           ; 2 bytes @ 0xA
  1009  00008A                     	ds	1
  1010  00008B                     ___lwmod@counter:
  1011                           	opt stack 0
  1012  00008B                     atoi@a:
  1013                           	opt stack 0
  1014  00008B                     ___ftmul@f2:
  1015                           	opt stack 0
  1016                           
  1017                           ; 3 bytes @ 0xB
  1018  00008B                     	ds	1
  1019  00008C                     ?__doprnt:
  1020                           	opt stack 0
  1021  00008C                     ___lldiv@counter:
  1022                           	opt stack 0
  1023  00008C                     analyzeRgbcForSensor@g1:
  1024                           	opt stack 0
  1025  00008C                     saveEEPROM@i:
  1026                           	opt stack 0
  1027  00008C                     __doprnt@pb:
  1028                           	opt stack 0
  1029                           
  1030                           ; 2 bytes @ 0xC
  1031  00008C                     	ds	1
  1032  00008D                     initializeI2C@c:
  1033                           	opt stack 0
  1034                           
  1035                           ; 4 bytes @ 0xD
  1036  00008D                     	ds	1
  1037  00008E                     ??___ftmul:
  1038  00008E                     ?_storeRgbSensorInputIntegerValuesInto:
  1039                           	opt stack 0
  1040  00008E                     storeRgbSensorInputIntegerValuesInto@colorValues:
  1041                           	opt stack 0
  1042  00008E                     getEEPROM@i:
  1043                           	opt stack 0
  1044  00008E                     __doprnt@f:
  1045                           	opt stack 0
  1046                           
  1047                           ; 2 bytes @ 0xE
  1048  00008E                     	ds	2
  1049  000090                     storeRgbSensorInputIntegerValuesInto@sensorNum:
  1050                           	opt stack 0
  1051  000090                     __doprnt@ap:
  1052                           	opt stack 0
  1053                           
  1054                           ; 2 bytes @ 0x10
  1055  000090                     	ds	1
  1056  000091                     ??_initializeI2C:
  1057  000091                     ___ftmul@exp:
  1058                           	opt stack 0
  1059                           
  1060                           ; 1 bytes @ 0x11
  1061  000091                     	ds	1
  1062  000092                     ??__doprnt:
  1063  000092                     storeRgbSensorInputIntegerValuesInto@r1:
  1064                           	opt stack 0
  1065  000092                     ___ftmul@f3_as_product:
  1066                           	opt stack 0
  1067                           
  1068                           ; 3 bytes @ 0x12
  1069  000092                     	ds	2
  1070  000094                     storeRgbSensorInputIntegerValuesInto@g1:
  1071                           	opt stack 0
  1072                           
  1073                           ; 2 bytes @ 0x14
  1074  000094                     	ds	1
  1075  000095                     ___ftmul@cntr:
  1076                           	opt stack 0
  1077                           
  1078                           ; 1 bytes @ 0x15
  1079  000095                     	ds	1
  1080  000096                     __doprnt@idx:
  1081                           	opt stack 0
  1082  000096                     ___ftmul@sign:
  1083                           	opt stack 0
  1084  000096                     storeRgbSensorInputIntegerValuesInto@b1:
  1085                           	opt stack 0
  1086                           
  1087                           ; 2 bytes @ 0x16
  1088  000096                     	ds	1
  1089  000097                     ?___ftdiv:
  1090                           	opt stack 0
  1091  000097                     __doprnt@prec:
  1092                           	opt stack 0
  1093  000097                     ___ftdiv@f1:
  1094                           	opt stack 0
  1095                           
  1096                           ; 3 bytes @ 0x17
  1097  000097                     	ds	1
  1098  000098                     storeRgbSensorInputIntegerValuesInto@c1:
  1099                           	opt stack 0
  1100  000098                     __doprnt@val:
  1101                           	opt stack 0
  1102                           
  1103                           ; 2 bytes @ 0x18
  1104  000098                     	ds	2
  1105  00009A                     __doprnt@flag:
  1106                           	opt stack 0
  1107  00009A                     storeRgbSensorInputIntegerValuesInto@red:
  1108                           	opt stack 0
  1109  00009A                     ___ftdiv@f2:
  1110                           	opt stack 0
  1111                           
  1112                           ; 3 bytes @ 0x1A
  1113  00009A                     	ds	1
  1114  00009B                     __doprnt@width:
  1115                           	opt stack 0
  1116                           
  1117                           ; 2 bytes @ 0x1B
  1118  00009B                     	ds	1
  1119  00009C                     storeRgbSensorInputIntegerValuesInto@green:
  1120                           	opt stack 0
  1121                           
  1122                           ; 2 bytes @ 0x1C
  1123  00009C                     	ds	1
  1124  00009D                     ??___ftdiv:
  1125  00009D                     __doprnt@c:
  1126                           	opt stack 0
  1127                           
  1128                           ; 1 bytes @ 0x1D
  1129  00009D                     	ds	1
  1130  00009E                     ?_printf:
  1131                           	opt stack 0
  1132  00009E                     ?_sprintf:
  1133                           	opt stack 0
  1134  00009E                     storeRgbSensorInputIntegerValuesInto@blue:
  1135                           	opt stack 0
  1136  00009E                     printf@f:
  1137                           	opt stack 0
  1138  00009E                     sprintf@wh:
  1139                           	opt stack 0
  1140                           
  1141                           ; 2 bytes @ 0x1E
  1142  00009E                     	ds	2
  1143  0000A0                     ___ftdiv@cntr:
  1144                           	opt stack 0
  1145  0000A0                     storeRgbSensorInputIntegerValuesInto@clear:
  1146                           	opt stack 0
  1147  0000A0                     sprintf@f:
  1148                           	opt stack 0
  1149                           
  1150                           ; 2 bytes @ 0x20
  1151  0000A0                     	ds	1
  1152  0000A1                     ___ftdiv@f3:
  1153                           	opt stack 0
  1154                           
  1155                           ; 3 bytes @ 0x21
  1156  0000A1                     	ds	1
  1157  0000A2                     storeRgbSensorInputIntegerValuesInto@colorValue:
  1158                           	opt stack 0
  1159                           
  1160                           ; 4 bytes @ 0x22
  1161  0000A2                     	ds	2
  1162  0000A4                     ___ftdiv@exp:
  1163                           	opt stack 0
  1164  0000A4                     sprintf@ap:
  1165                           	opt stack 0
  1166                           
  1167                           ; 2 bytes @ 0x24
  1168  0000A4                     	ds	1
  1169  0000A5                     ___ftdiv@sign:
  1170                           	opt stack 0
  1171                           
  1172                           ; 1 bytes @ 0x25
  1173  0000A5                     	ds	1
  1174  0000A6                     ?_capIsOnBottle:
  1175                           	opt stack 0
  1176  0000A6                     ?___fttol:
  1177                           	opt stack 0
  1178  0000A6                     printf@ap:
  1179                           	opt stack 0
  1180  0000A6                     ___fttol@f1:
  1181                           	opt stack 0
  1182  0000A6                     sprintf@pb:
  1183                           	opt stack 0
  1184                           
  1185                           ; 4 bytes @ 0x26
  1186  0000A6                     	ds	2
  1187  0000A8                     capIsOnBottle@rgbc:
  1188                           	opt stack 0
  1189  0000A8                     printf@pb:
  1190                           	opt stack 0
  1191                           
  1192                           ; 4 bytes @ 0x28
  1193  0000A8                     	ds	2
  1194  0000AA                     ??___fttol:
  1195  0000AA                     ?_getCurrentTimeInSeconds:
  1196                           	opt stack 0
  1197                           
  1198                           ; 2 bytes @ 0x2A
  1199  0000AA                     	ds	2
  1200  0000AC                     ?_displayMainProgramLcdScreen:
  1201                           	opt stack 0
  1202  0000AC                     getCurrentTimeInSeconds@currentTime:
  1203                           	opt stack 0
  1204  0000AC                     capIsOnBottle@v1:
  1205                           	opt stack 0
  1206  0000AC                     update_eeprom_screen_state@num:
  1207                           	opt stack 0
  1208  0000AC                     update_past_run_screen_state@num:
  1209                           	opt stack 0
  1210                           
  1211                           ; 2 bytes @ 0x2C
  1212  0000AC                     	ds	2
  1213  0000AE                     ??_displayMainProgramLcdScreen:
  1214  0000AE                     ??_update_eeprom_screen_state:
  1215  0000AE                     ??_update_past_run_screen_state:
  1216  0000AE                     capIsOnBottle@v2:
  1217                           	opt stack 0
  1218  0000AE                     _getCurrentTimeInSeconds$1724:
  1219                           	opt stack 0
  1220                           
  1221                           ; 2 bytes @ 0x2E
  1222  0000AE                     	ds	1
  1223  0000AF                     ___fttol@sign1:
  1224                           	opt stack 0
  1225                           
  1226                           ; 1 bytes @ 0x2F
  1227  0000AF                     	ds	1
  1228  0000B0                     ??_past_run_access:
  1229  0000B0                     getCurrentTimeInSeconds@str:
  1230                           	opt stack 0
  1231  0000B0                     capIsOnBottle@i:
  1232                           	opt stack 0
  1233  0000B0                     ___fttol@lval:
  1234                           	opt stack 0
  1235                           
  1236                           ; 4 bytes @ 0x30
  1237  0000B0                     	ds	2
  1238  0000B2                     ??_operation:
  1239  0000B2                     past_run_access@temp:
  1240                           	opt stack 0
  1241                           
  1242                           ; 1 bytes @ 0x32
  1243  0000B2                     	ds	1
  1244  0000B3                     past_run_access@screen_state:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x33
  1248  0000B3                     	ds	1
  1249  0000B4                     ___fttol@exp1:
  1250                           	opt stack 0
  1251  0000B4                     operation@startingTime:
  1252                           	opt stack 0
  1253                           
  1254                           ; 2 bytes @ 0x34
  1255  0000B4                     	ds	1
  1256  0000B5                     ??_EEPROM:
  1257  0000B5                     initializePicPins@time:
  1258                           	opt stack 0
  1259                           
  1260                           ; 3 bytes @ 0x35
  1261  0000B5                     	ds	1
  1262  0000B6                     operation@endingTime:
  1263                           	opt stack 0
  1264                           
  1265                           ; 2 bytes @ 0x36
  1266  0000B6                     	ds	1
  1267  0000B7                     EEPROM@timeStorage:
  1268                           	opt stack 0
  1269                           
  1270                           ; 14 bytes @ 0x37
  1271  0000B7                     	ds	1
  1272  0000B8                     operation@temp:
  1273                           	opt stack 0
  1274  0000B8                     initializePicPins@set_time:
  1275                           	opt stack 0
  1276                           
  1277                           ; 2 bytes @ 0x38
  1278  0000B8                     	ds	1
  1279  0000B9                     operation@numberRotationsNeeded:
  1280                           	opt stack 0
  1281                           
  1282                           ; 2 bytes @ 0x39
  1283  0000B9                     	ds	1
  1284  0000BA                     
  1285                           ; 1 bytes @ 0x3A
  1286  0000BA                     	ds	1
  1287  0000BB                     operation@bottle_type:
  1288                           	opt stack 0
  1289                           
  1290                           ; 2 bytes @ 0x3B
  1291  0000BB                     	ds	2
  1292  0000BD                     operation@bottle_cap:
  1293                           	opt stack 0
  1294                           
  1295                           ; 2 bytes @ 0x3D
  1296  0000BD                     	ds	2
  1297  0000BF                     operation@bottle:
  1298                           	opt stack 0
  1299                           
  1300                           ; 2 bytes @ 0x3F
  1301  0000BF                     	ds	2
  1302  0000C1                     operation@requiredBottleBin:
  1303                           	opt stack 0
  1304                           
  1305                           ; 2 bytes @ 0x41
  1306  0000C1                     	ds	2
  1307  0000C3                     operation@i:
  1308                           	opt stack 0
  1309                           
  1310                           ; 2 bytes @ 0x43
  1311  0000C3                     	ds	2
  1312  0000C5                     EEPROM@storage:
  1313                           	opt stack 0
  1314                           
  1315                           ; 12 bytes @ 0x45
  1316  0000C5                     	ds	12
  1317  0000D1                     EEPROM@temp:
  1318                           	opt stack 0
  1319                           
  1320                           ; 1 bytes @ 0x51
  1321  0000D1                     	ds	1
  1322  0000D2                     EEPROM@screen_state:
  1323                           	opt stack 0
  1324                           
  1325                           ; 2 bytes @ 0x52
  1326  0000D2                     	ds	2
  1327  0000D4                     EEPROM@i:
  1328                           	opt stack 0
  1329                           
  1330                           ; 2 bytes @ 0x54
  1331  0000D4                     	ds	2
  1332  0000D6                     ??_enterSelectedSubProgramFromMainProgram:
  1333                           
  1334                           ; 1 bytes @ 0x56
  1335  0000D6                     	ds	2
  1336  0000D8                     ??_main:
  1337                           
  1338                           ; 1 bytes @ 0x58
  1339  0000D8                     	ds	2
  1340  0000DA                     main@userInput:
  1341                           	opt stack 0
  1342                           
  1343                           ; 1 bytes @ 0x5A
  1344  0000DA                     	ds	1
  1345                           tblptru	equ	0xFF8
  1346                           tblptrh	equ	0xFF7
  1347                           tblptrl	equ	0xFF6
  1348                           tablat	equ	0xFF5
  1349                           postinc0	equ	0xFEE
  1350                           wreg	equ	0xFE8
  1351                           postdec1	equ	0xFE5
  1352                           fsr1l	equ	0xFE1
  1353                           
  1354                           	psect	cstackCOMRAM
  1355  000001                     __pcstackCOMRAM:
  1356                           	opt stack 0
  1357  000001                     ??i2_I2C_Master_Wait:
  1358  000001                     ??i2_isdigit:
  1359  000001                     ?___awdiv:
  1360                           	opt stack 0
  1361  000001                     ?i2___wmul:
  1362                           	opt stack 0
  1363  000001                     ?i2___lwdiv:
  1364                           	opt stack 0
  1365  000001                     ?i2___ftpack:
  1366                           	opt stack 0
  1367  000001                     i2lcdNibble@temp:
  1368                           	opt stack 0
  1369  000001                     ___awdiv@dividend:
  1370                           	opt stack 0
  1371  000001                     i2___wmul@multiplier:
  1372                           	opt stack 0
  1373  000001                     i2___lwdiv@dividend:
  1374                           	opt stack 0
  1375  000001                     i2___ftpack@arg:
  1376                           	opt stack 0
  1377                           
  1378                           ; 3 bytes @ 0x0
  1379  000001                     	ds	1
  1380  000002                     i2lcdNibble@data:
  1381                           	opt stack 0
  1382  000002                     i2I2C_Master_Read@a:
  1383                           	opt stack 0
  1384  000002                     i2_isdigit$1338:
  1385                           	opt stack 0
  1386  000002                     i2I2C_Master_Write@d:
  1387                           	opt stack 0
  1388                           
  1389                           ; 2 bytes @ 0x1
  1390  000002                     	ds	1
  1391  000003                     i2lcdInst@data:
  1392                           	opt stack 0
  1393  000003                     i2putch@data:
  1394                           	opt stack 0
  1395  000003                     i2I2C_Master_Read@temp:
  1396                           	opt stack 0
  1397  000003                     i2isdigit@c:
  1398                           	opt stack 0
  1399  000003                     ___awdiv@divisor:
  1400                           	opt stack 0
  1401  000003                     i2___wmul@multiplicand:
  1402                           	opt stack 0
  1403  000003                     i2___lwdiv@divisor:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x2
  1407  000003                     	ds	1
  1408  000004                     i2updateCurrentTime@i:
  1409                           	opt stack 0
  1410  000004                     i2___ftpack@exp:
  1411                           	opt stack 0
  1412                           
  1413                           ; 1 bytes @ 0x3
  1414  000004                     	ds	1
  1415  000005                     ___awdiv@counter:
  1416                           	opt stack 0
  1417  000005                     i2___ftpack@sign:
  1418                           	opt stack 0
  1419  000005                     i2___wmul@product:
  1420                           	opt stack 0
  1421  000005                     i2___lwdiv@quotient:
  1422                           	opt stack 0
  1423                           
  1424                           ; 2 bytes @ 0x4
  1425  000005                     	ds	1
  1426  000006                     ??i2___ftpack:
  1427  000006                     ___awdiv@sign:
  1428                           	opt stack 0
  1429                           
  1430                           ; 1 bytes @ 0x5
  1431  000006                     	ds	1
  1432  000007                     i2___lwdiv@counter:
  1433                           	opt stack 0
  1434  000007                     ___awdiv@quotient:
  1435                           	opt stack 0
  1436                           
  1437                           ; 2 bytes @ 0x6
  1438  000007                     	ds	1
  1439  000008                     ?i2___lwmod:
  1440                           	opt stack 0
  1441  000008                     i2___lwmod@dividend:
  1442                           	opt stack 0
  1443                           
  1444                           ; 2 bytes @ 0x7
  1445  000008                     	ds	1
  1446  000009                     ?_getMotorCounterBasedOnBottlesLeft:
  1447                           	opt stack 0
  1448  000009                     ?i2___ftmul:
  1449                           	opt stack 0
  1450  000009                     i2___ftmul@f1:
  1451                           	opt stack 0
  1452                           
  1453                           ; 3 bytes @ 0x8
  1454  000009                     	ds	1
  1455  00000A                     i2___lwmod@divisor:
  1456                           	opt stack 0
  1457                           
  1458                           ; 2 bytes @ 0x9
  1459  00000A                     	ds	1
  1460  00000B                     
  1461                           ; 1 bytes @ 0xA
  1462  00000B                     	ds	1
  1463  00000C                     i2___lwmod@counter:
  1464                           	opt stack 0
  1465  00000C                     i2___ftmul@f2:
  1466                           	opt stack 0
  1467                           
  1468                           ; 3 bytes @ 0xB
  1469  00000C                     	ds	1
  1470  00000D                     ?i2__doprnt:
  1471                           	opt stack 0
  1472  00000D                     i2__doprnt@pb:
  1473                           	opt stack 0
  1474                           
  1475                           ; 2 bytes @ 0xC
  1476  00000D                     	ds	2
  1477  00000F                     ??i2___ftmul:
  1478  00000F                     i2__doprnt@f:
  1479                           	opt stack 0
  1480                           
  1481                           ; 2 bytes @ 0xE
  1482  00000F                     	ds	2
  1483  000011                     i2__doprnt@ap:
  1484                           	opt stack 0
  1485                           
  1486                           ; 2 bytes @ 0x10
  1487  000011                     	ds	1
  1488  000012                     i2___ftmul@exp:
  1489                           	opt stack 0
  1490                           
  1491                           ; 1 bytes @ 0x11
  1492  000012                     	ds	1
  1493  000013                     ??i2__doprnt:
  1494  000013                     i2___ftmul@f3_as_product:
  1495                           	opt stack 0
  1496                           
  1497                           ; 3 bytes @ 0x12
  1498  000013                     	ds	3
  1499  000016                     i2___ftmul@cntr:
  1500                           	opt stack 0
  1501                           
  1502                           ; 1 bytes @ 0x15
  1503  000016                     	ds	1
  1504  000017                     i2__doprnt@idx:
  1505                           	opt stack 0
  1506  000017                     i2___ftmul@sign:
  1507                           	opt stack 0
  1508                           
  1509                           ; 1 bytes @ 0x16
  1510  000017                     	ds	1
  1511  000018                     ?i2___ftdiv:
  1512                           	opt stack 0
  1513  000018                     i2__doprnt@prec:
  1514                           	opt stack 0
  1515  000018                     i2___ftdiv@f1:
  1516                           	opt stack 0
  1517                           
  1518                           ; 3 bytes @ 0x17
  1519  000018                     	ds	1
  1520  000019                     i2__doprnt@val:
  1521                           	opt stack 0
  1522                           
  1523                           ; 2 bytes @ 0x18
  1524  000019                     	ds	2
  1525  00001B                     i2__doprnt@flag:
  1526                           	opt stack 0
  1527  00001B                     i2___ftdiv@f2:
  1528                           	opt stack 0
  1529                           
  1530                           ; 3 bytes @ 0x1A
  1531  00001B                     	ds	1
  1532  00001C                     i2__doprnt@width:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x1B
  1536  00001C                     	ds	2
  1537  00001E                     ??i2___ftdiv:
  1538  00001E                     i2__doprnt@c:
  1539                           	opt stack 0
  1540                           
  1541                           ; 1 bytes @ 0x1D
  1542  00001E                     	ds	1
  1543  00001F                     ?i2_printf:
  1544                           	opt stack 0
  1545  00001F                     i2printf@f:
  1546                           	opt stack 0
  1547                           
  1548                           ; 2 bytes @ 0x1E
  1549  00001F                     	ds	2
  1550  000021                     i2___ftdiv@cntr:
  1551                           	opt stack 0
  1552                           
  1553                           ; 1 bytes @ 0x20
  1554  000021                     	ds	1
  1555  000022                     i2___ftdiv@f3:
  1556                           	opt stack 0
  1557                           
  1558                           ; 3 bytes @ 0x21
  1559  000022                     	ds	3
  1560  000025                     i2___ftdiv@exp:
  1561                           	opt stack 0
  1562                           
  1563                           ; 1 bytes @ 0x24
  1564  000025                     	ds	1
  1565  000026                     i2___ftdiv@sign:
  1566                           	opt stack 0
  1567                           
  1568                           ; 1 bytes @ 0x25
  1569  000026                     	ds	1
  1570  000027                     ?i2___fttol:
  1571                           	opt stack 0
  1572  000027                     i2printf@ap:
  1573                           	opt stack 0
  1574  000027                     i2___fttol@f1:
  1575                           	opt stack 0
  1576                           
  1577                           ; 3 bytes @ 0x26
  1578  000027                     	ds	2
  1579  000029                     i2printf@pb:
  1580                           	opt stack 0
  1581                           
  1582                           ; 4 bytes @ 0x28
  1583  000029                     	ds	2
  1584  00002B                     ??i2___fttol:
  1585                           
  1586                           ; 1 bytes @ 0x2A
  1587  00002B                     	ds	2
  1588  00002D                     
  1589                           ; 1 bytes @ 0x2C
  1590  00002D                     	ds	3
  1591  000030                     i2___fttol@sign1:
  1592                           	opt stack 0
  1593                           
  1594                           ; 1 bytes @ 0x2F
  1595  000030                     	ds	1
  1596  000031                     i2___fttol@lval:
  1597                           	opt stack 0
  1598                           
  1599                           ; 4 bytes @ 0x30
  1600  000031                     	ds	4
  1601  000035                     i2___fttol@exp1:
  1602                           	opt stack 0
  1603                           
  1604                           ; 1 bytes @ 0x34
  1605  000035                     	ds	1
  1606  000036                     ??_handler:
  1607                           
  1608                           ; 1 bytes @ 0x35
  1609  000036                     	ds	14
  1610  000044                     handler@time:
  1611                           	opt stack 0
  1612                           
  1613                           ; 3 bytes @ 0x43
  1614  000044                     	ds	3
  1615  000047                     handler@set_time:
  1616                           	opt stack 0
  1617                           
  1618                           ; 2 bytes @ 0x46
  1619  000047                     	ds	2
  1620                           tblptru	equ	0xFF8
  1621                           tblptrh	equ	0xFF7
  1622                           tblptrl	equ	0xFF6
  1623                           tablat	equ	0xFF5
  1624                           postinc0	equ	0xFEE
  1625                           wreg	equ	0xFE8
  1626                           postdec1	equ	0xFE5
  1627                           fsr1l	equ	0xFE1
  1628                           
  1629 ;;
  1630 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1631 ;;
  1632 ;; *************** function _main *****************
  1633 ;; Defined at:
  1634 ;;		line 310 in file "main.c"
  1635 ;; Parameters:    Size  Location     Type
  1636 ;;		None
  1637 ;; Auto vars:     Size  Location     Type
  1638 ;;  userInput       1   90[BANK0 ] unsigned char 
  1639 ;; Return value:  Size  Location     Type
  1640 ;;                  1    wreg      void 
  1641 ;; Registers used:
  1642 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1643 ;; Tracked objects:
  1644 ;;		On entry : 0/0
  1645 ;;		On exit  : 0/0
  1646 ;;		Unchanged: 0/0
  1647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1649 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1650 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1651 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1652 ;;Total ram usage:        3 bytes
  1653 ;; Hardware stack levels required when called:   15
  1654 ;; This function calls:
  1655 ;;		_cycleProgramScreenLeft
  1656 ;;		_cycleProgramScreenRight
  1657 ;;		_displayMainProgramLcdScreen
  1658 ;;		_enterSelectedSubProgramFromMainProgram
  1659 ;;		_getPressedKeypadKey
  1660 ;;		_initializePicSettings
  1661 ;;		_moveBinServo
  1662 ;; This function is called by:
  1663 ;;		Startup code after reset
  1664 ;; This function uses a non-reentrant model
  1665 ;;
  1666                           
  1667                           	psect	text0
  1668  001E76                     __ptext0:
  1669                           	opt stack 0
  1670  001E76                     _main:
  1671                           	opt stack 16
  1672                           
  1673                           ;main.c: 311: initializePicSettings();
  1674                           
  1675                           ;incstack = 0
  1676  001E76  ECB8  F01B         	call	_initializePicSettings	;wreg free
  1677  001E7A                     l8747:
  1678                           
  1679                           ;main.c: 315: userInput = getPressedKeypadKey();
  1680  001E7A  EC25  F01B         	call	_getPressedKeypadKey	;wreg free
  1681  001E7E  0100               	movlb	0	; () banked
  1682  001E80  6FDA               	movwf	main@userInput& (0+255),b
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;main.c: 316: if (userInput == keys[ENTER]){
  1686  001E82  0E56               	movlw	low _ENTER
  1687  001E84  6EF6               	movwf	tblptrl,c
  1688  001E86                     	if	1	;There is more than 1 active tblptr byte
  1689  001E86  0EFE               	movlw	high _ENTER
  1690  001E88  6EF7               	movwf	tblptrh,c
  1691  001E8A                     	endif
  1692  001E8A                     	if	1	;There are 3 active tblptr bytes
  1693  001E8A  0E00               	movlw	low (_ENTER shr (0+16))
  1694  001E8C  6EF8               	movwf	tblptru,c
  1695  001E8E                     	endif
  1696  001E8E  0009               	tblrd		*+
  1697  001E90  CFF5 F0D8          	movff	tablat,??_main
  1698  001E94  0009               	tblrd		*+
  1699  001E96  CFF5 F0D9          	movff	tablat,??_main+1
  1700  001E9A  0E31               	movlw	low _keys
  1701  001E9C  0100               	movlb	0	; () banked
  1702  001E9E  25D8               	addwf	??_main& (0+255),w,b
  1703  001EA0  6EF6               	movwf	tblptrl,c
  1704  001EA2  0EFE               	movlw	high _keys
  1705  001EA4  21D9               	addwfc	(??_main+1)& (0+255),w,b
  1706  001EA6  6EF7               	movwf	tblptrh,c
  1707  001EA8                     	if	1	;There are 3 active tblptr bytes
  1708  001EA8  6AF8               	clrf	tblptru,c
  1709  001EAA  0E00               	movlw	low (__mediumconst shr (0+16))
  1710  001EAC  22F8               	addwfc	tblptru,f,c
  1711  001EAE                     	endif
  1712  001EAE  0008               	tblrd		*
  1713  001EB0  50F5               	movf	tablat,w,c
  1714  001EB2  0100               	movlb	0	; () banked
  1715  001EB4  19DA               	xorwf	main@userInput& (0+255),w,b
  1716  001EB6  A4D8               	btfss	status,2,c
  1717  001EB8  D003               	goto	l8753
  1718                           
  1719                           ; BSR set to: 0
  1720                           ;main.c: 317: enterSelectedSubProgramFromMainProgram();
  1721  001EBA  ECC5  F019         	call	_enterSelectedSubProgramFromMainProgram	;wreg free
  1722                           
  1723                           ;main.c: 318: }else if (userInput == keys[LEFT]){
  1724  001EBE  D7DD               	goto	l8747
  1725  001EC0                     l8753:
  1726  001EC0  0E58               	movlw	low _LEFT
  1727  001EC2  6EF6               	movwf	tblptrl,c
  1728  001EC4                     	if	1	;There is more than 1 active tblptr byte
  1729  001EC4  0EFE               	movlw	high _LEFT
  1730  001EC6  6EF7               	movwf	tblptrh,c
  1731  001EC8                     	endif
  1732  001EC8                     	if	1	;There are 3 active tblptr bytes
  1733  001EC8  0E00               	movlw	low (_LEFT shr (0+16))
  1734  001ECA  6EF8               	movwf	tblptru,c
  1735  001ECC                     	endif
  1736  001ECC  0009               	tblrd		*+
  1737  001ECE  CFF5 F0D8          	movff	tablat,??_main
  1738  001ED2  0009               	tblrd		*+
  1739  001ED4  CFF5 F0D9          	movff	tablat,??_main+1
  1740  001ED8  0E31               	movlw	low _keys
  1741  001EDA  0100               	movlb	0	; () banked
  1742  001EDC  25D8               	addwf	??_main& (0+255),w,b
  1743  001EDE  6EF6               	movwf	tblptrl,c
  1744  001EE0  0EFE               	movlw	high _keys
  1745  001EE2  21D9               	addwfc	(??_main+1)& (0+255),w,b
  1746  001EE4  6EF7               	movwf	tblptrh,c
  1747  001EE6                     	if	1	;There are 3 active tblptr bytes
  1748  001EE6  6AF8               	clrf	tblptru,c
  1749  001EE8  0E00               	movlw	low (__mediumconst shr (0+16))
  1750  001EEA  22F8               	addwfc	tblptru,f,c
  1751  001EEC                     	endif
  1752  001EEC  0008               	tblrd		*
  1753  001EEE  50F5               	movf	tablat,w,c
  1754  001EF0  0100               	movlb	0	; () banked
  1755  001EF2  19DA               	xorwf	main@userInput& (0+255),w,b
  1756  001EF4  A4D8               	btfss	status,2,c
  1757  001EF6  D015               	goto	l8759
  1758                           
  1759                           ; BSR set to: 0
  1760                           ;main.c: 319: cycleProgramScreenLeft(&currentMainProgramScreen,0,3);
  1761  001EF8  0EEF               	movlw	low _currentMainProgramScreen
  1762  001EFA  0100               	movlb	0	; () banked
  1763  001EFC  6F80               	movwf	cycleProgramScreenLeft@programScreen& (0+255),b
  1764  001EFE  0E00               	movlw	high _currentMainProgramScreen
  1765  001F00  0100               	movlb	0	; () banked
  1766  001F02  6F81               	movwf	(cycleProgramScreenLeft@programScreen+1)& (0+255),b
  1767  001F04  0E00               	movlw	0
  1768  001F06  0100               	movlb	0	; () banked
  1769  001F08  6F83               	movwf	(cycleProgramScreenLeft@min+1)& (0+255),b
  1770  001F0A  0E00               	movlw	0
  1771  001F0C  6F82               	movwf	cycleProgramScreenLeft@min& (0+255),b
  1772  001F0E  0E00               	movlw	0
  1773  001F10  0100               	movlb	0	; () banked
  1774  001F12  6F85               	movwf	(cycleProgramScreenLeft@max+1)& (0+255),b
  1775  001F14  0E03               	movlw	3
  1776  001F16  6F84               	movwf	cycleProgramScreenLeft@max& (0+255),b
  1777  001F18  ECB7  F01A         	call	_cycleProgramScreenLeft	;wreg free
  1778                           
  1779                           ;main.c: 320: displayMainProgramLcdScreen();
  1780  001F1C  EC5B  F016         	call	_displayMainProgramLcdScreen	;wreg free
  1781                           
  1782                           ;main.c: 321: }else if (userInput == keys[RIGHT]){
  1783  001F20  D7AC               	goto	l8747
  1784  001F22                     l8759:
  1785  001F22  0E5A               	movlw	low _RIGHT
  1786  001F24  6EF6               	movwf	tblptrl,c
  1787  001F26                     	if	1	;There is more than 1 active tblptr byte
  1788  001F26  0EFE               	movlw	high _RIGHT
  1789  001F28  6EF7               	movwf	tblptrh,c
  1790  001F2A                     	endif
  1791  001F2A                     	if	1	;There are 3 active tblptr bytes
  1792  001F2A  0E00               	movlw	low (_RIGHT shr (0+16))
  1793  001F2C  6EF8               	movwf	tblptru,c
  1794  001F2E                     	endif
  1795  001F2E  0009               	tblrd		*+
  1796  001F30  CFF5 F0D8          	movff	tablat,??_main
  1797  001F34  0009               	tblrd		*+
  1798  001F36  CFF5 F0D9          	movff	tablat,??_main+1
  1799  001F3A  0E31               	movlw	low _keys
  1800  001F3C  0100               	movlb	0	; () banked
  1801  001F3E  25D8               	addwf	??_main& (0+255),w,b
  1802  001F40  6EF6               	movwf	tblptrl,c
  1803  001F42  0EFE               	movlw	high _keys
  1804  001F44  21D9               	addwfc	(??_main+1)& (0+255),w,b
  1805  001F46  6EF7               	movwf	tblptrh,c
  1806  001F48                     	if	1	;There are 3 active tblptr bytes
  1807  001F48  6AF8               	clrf	tblptru,c
  1808  001F4A  0E00               	movlw	low (__mediumconst shr (0+16))
  1809  001F4C  22F8               	addwfc	tblptru,f,c
  1810  001F4E                     	endif
  1811  001F4E  0008               	tblrd		*
  1812  001F50  50F5               	movf	tablat,w,c
  1813  001F52  0100               	movlb	0	; () banked
  1814  001F54  19DA               	xorwf	main@userInput& (0+255),w,b
  1815  001F56  A4D8               	btfss	status,2,c
  1816  001F58  D015               	goto	l8765
  1817                           
  1818                           ; BSR set to: 0
  1819                           ;main.c: 322: cycleProgramScreenRight(&currentMainProgramScreen,0,3);
  1820  001F5A  0EEF               	movlw	low _currentMainProgramScreen
  1821  001F5C  0100               	movlb	0	; () banked
  1822  001F5E  6F80               	movwf	cycleProgramScreenRight@programScreen& (0+255),b
  1823  001F60  0E00               	movlw	high _currentMainProgramScreen
  1824  001F62  0100               	movlb	0	; () banked
  1825  001F64  6F81               	movwf	(cycleProgramScreenRight@programScreen+1)& (0+255),b
  1826  001F66  0E00               	movlw	0
  1827  001F68  0100               	movlb	0	; () banked
  1828  001F6A  6F83               	movwf	(cycleProgramScreenRight@min+1)& (0+255),b
  1829  001F6C  0E00               	movlw	0
  1830  001F6E  6F82               	movwf	cycleProgramScreenRight@min& (0+255),b
  1831  001F70  0E00               	movlw	0
  1832  001F72  0100               	movlb	0	; () banked
  1833  001F74  6F85               	movwf	(cycleProgramScreenRight@max+1)& (0+255),b
  1834  001F76  0E03               	movlw	3
  1835  001F78  6F84               	movwf	cycleProgramScreenRight@max& (0+255),b
  1836  001F7A  EC99  F01A         	call	_cycleProgramScreenRight	;wreg free
  1837                           
  1838                           ;main.c: 323: displayMainProgramLcdScreen();
  1839  001F7E  EC5B  F016         	call	_displayMainProgramLcdScreen	;wreg free
  1840                           
  1841                           ;main.c: 324: }
  1842  001F82  D77B               	goto	l8747
  1843  001F84                     l8765:
  1844                           
  1845                           ;main.c: 325: else if (userInput == keys[0]){
  1846  001F84  0E31               	movlw	low _keys
  1847  001F86  6EF6               	movwf	tblptrl,c
  1848  001F88                     	if	1	;There is more than 1 active tblptr byte
  1849  001F88  0EFE               	movlw	high _keys
  1850  001F8A  6EF7               	movwf	tblptrh,c
  1851  001F8C                     	endif
  1852  001F8C                     	if	1	;There are 3 active tblptr bytes
  1853  001F8C  0E00               	movlw	low (_keys shr (0+16))
  1854  001F8E  6EF8               	movwf	tblptru,c
  1855  001F90                     	endif
  1856  001F90  0008               	tblrd		*
  1857  001F92  50F5               	movf	tablat,w,c
  1858  001F94  0100               	movlb	0	; () banked
  1859  001F96  19DA               	xorwf	main@userInput& (0+255),w,b
  1860  001F98  A4D8               	btfss	status,2,c
  1861  001F9A  D76F               	goto	l8747
  1862                           
  1863                           ; BSR set to: 0
  1864                           ;main.c: 326: moveBinServo(1);
  1865  001F9C  0E00               	movlw	0
  1866  001F9E  0100               	movlb	0	; () banked
  1867  001FA0  6F81               	movwf	(moveBinServo@num90Rotations+1)& (0+255),b
  1868  001FA2  0E01               	movlw	1
  1869  001FA4  6F80               	movwf	moveBinServo@num90Rotations& (0+255),b
  1870  001FA6  ECA9  F016         	call	_moveBinServo	;wreg free
  1871  001FAA  D767               	goto	l8747
  1872  001FAC                     __end_of_main:
  1873                           	opt stack 0
  1874                           tblptru	equ	0xFF8
  1875                           tblptrh	equ	0xFF7
  1876                           tblptrl	equ	0xFF6
  1877                           tablat	equ	0xFF5
  1878                           postinc0	equ	0xFEE
  1879                           wreg	equ	0xFE8
  1880                           postdec1	equ	0xFE5
  1881                           fsr1l	equ	0xFE1
  1882                           status	equ	0xFD8
  1883                           
  1884 ;; *************** function _initializePicSettings *****************
  1885 ;; Defined at:
  1886 ;;		line 331 in file "main.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;		None
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;		None
  1891 ;; Return value:  Size  Location     Type
  1892 ;;                  1    wreg      void 
  1893 ;; Registers used:
  1894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1895 ;; Tracked objects:
  1896 ;;		On entry : 0/0
  1897 ;;		On exit  : 0/0
  1898 ;;		Unchanged: 0/0
  1899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1904 ;;Total ram usage:        0 bytes
  1905 ;; Hardware stack levels used:    1
  1906 ;; Hardware stack levels required when called:   13
  1907 ;; This function calls:
  1908 ;;		_initializeI2C
  1909 ;;		_initializeLcdScreen
  1910 ;;		_initializePicPins
  1911 ;; This function is called by:
  1912 ;;		_main
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916                           	psect	text1
  1917  003770                     __ptext1:
  1918                           	opt stack 0
  1919  003770                     _initializePicSettings:
  1920                           	opt stack 17
  1921                           
  1922                           ;main.c: 332: initializePicPins();
  1923                           
  1924                           ;incstack = 0
  1925  003770  EC9E  F012         	call	_initializePicPins	;wreg free
  1926                           
  1927                           ;main.c: 333: initializeI2C(10000);
  1928  003774  0E10               	movlw	16
  1929  003776  0100               	movlb	0	; () banked
  1930  003778  6F8D               	movwf	initializeI2C@c& (0+255),b
  1931  00377A  0E27               	movlw	39
  1932  00377C  6F8E               	movwf	(initializeI2C@c+1)& (0+255),b
  1933  00377E  0E00               	movlw	0
  1934  003780  6F8F               	movwf	(initializeI2C@c+2)& (0+255),b
  1935  003782  0E00               	movlw	0
  1936  003784  6F90               	movwf	(initializeI2C@c+3)& (0+255),b
  1937  003786  ECEB  F018         	call	_initializeI2C	;wreg free
  1938                           
  1939                           ;main.c: 334: (INTCONbits.GIE = 0);
  1940  00378A  9EF2               	bcf	intcon,7,c	;volatile
  1941                           
  1942                           ;main.c: 335: initializeLcdScreen();
  1943  00378C  EC00  F01C         	call	_initializeLcdScreen	;wreg free
  1944  003790  0012               	return		;funcret
  1945  003792                     __end_of_initializePicSettings:
  1946                           	opt stack 0
  1947                           tblptru	equ	0xFF8
  1948                           tblptrh	equ	0xFF7
  1949                           tblptrl	equ	0xFF6
  1950                           tablat	equ	0xFF5
  1951                           intcon	equ	0xFF2
  1952                           postinc0	equ	0xFEE
  1953                           wreg	equ	0xFE8
  1954                           postdec1	equ	0xFE5
  1955                           fsr1l	equ	0xFE1
  1956                           status	equ	0xFD8
  1957                           
  1958 ;; *************** function _initializePicPins *****************
  1959 ;; Defined at:
  1960 ;;		line 338 in file "main.c"
  1961 ;; Parameters:    Size  Location     Type
  1962 ;;		None
  1963 ;; Auto vars:     Size  Location     Type
  1964 ;;  time            3   53[BANK0 ] float 
  1965 ;;  set_time        2   56[BANK0 ] unsigned int 
  1966 ;; Return value:  Size  Location     Type
  1967 ;;                  1    wreg      void 
  1968 ;; Registers used:
  1969 ;;		wreg, status,2, status,0, cstack
  1970 ;; Tracked objects:
  1971 ;;		On entry : 0/0
  1972 ;;		On exit  : 0/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1976 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1978 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1979 ;;Total ram usage:        5 bytes
  1980 ;; Hardware stack levels used:    1
  1981 ;; Hardware stack levels required when called:    8
  1982 ;; This function calls:
  1983 ;;		___ftdiv
  1984 ;;		___ftmul
  1985 ;;		___fttol
  1986 ;; This function is called by:
  1987 ;;		_initializePicSettings
  1988 ;; This function uses a non-reentrant model
  1989 ;;
  1990                           
  1991                           	psect	text2
  1992  00253C                     __ptext2:
  1993                           	opt stack 0
  1994  00253C                     _initializePicPins:
  1995                           	opt stack 21
  1996                           
  1997                           ;main.c: 340: OSCCON = 0b11110000;
  1998                           
  1999                           ;incstack = 0
  2000  00253C  0EF0               	movlw	240
  2001  00253E  6ED3               	movwf	4051,c	;volatile
  2002                           
  2003                           ;main.c: 342: OSCTUNEbits.PLLEN = 1;
  2004  002540  8C9B               	bsf	3995,6,c	;volatile
  2005                           
  2006                           ;main.c: 345: TRISA = 0xFF;
  2007  002542  6892               	setf	3986,c	;volatile
  2008                           
  2009                           ;main.c: 346: TRISB = 0xFF;
  2010  002544  6893               	setf	3987,c	;volatile
  2011                           
  2012                           ;main.c: 347: TRISC = 0x18;
  2013  002546  0E18               	movlw	24
  2014  002548  6E94               	movwf	3988,c	;volatile
  2015                           
  2016                           ;main.c: 348: TRISD = 0x01;
  2017  00254A  0E01               	movlw	1
  2018  00254C  6E95               	movwf	3989,c	;volatile
  2019                           
  2020                           ;main.c: 351: TRISE = 0x00;
  2021  00254E  0E00               	movlw	0
  2022  002550  6E96               	movwf	3990,c	;volatile
  2023                           
  2024                           ;main.c: 354: LATA = 0x00;
  2025  002552  0E00               	movlw	0
  2026  002554  6E89               	movwf	3977,c	;volatile
  2027                           
  2028                           ;main.c: 355: LATB = 0x00;
  2029  002556  0E00               	movlw	0
  2030  002558  6E8A               	movwf	3978,c	;volatile
  2031                           
  2032                           ;main.c: 356: LATC = 0x00;
  2033  00255A  0E00               	movlw	0
  2034  00255C  6E8B               	movwf	3979,c	;volatile
  2035                           
  2036                           ;main.c: 357: LATD = 0x00;
  2037  00255E  0E00               	movlw	0
  2038  002560  6E8C               	movwf	3980,c	;volatile
  2039                           
  2040                           ;main.c: 358: LATE = 0x00;
  2041  002562  0E00               	movlw	0
  2042  002564  6E8D               	movwf	3981,c	;volatile
  2043                           
  2044                           ;main.c: 361: ADCON0 = 0x00;
  2045  002566  0E00               	movlw	0
  2046  002568  6EC2               	movwf	4034,c	;volatile
  2047                           
  2048                           ;main.c: 363: ADCON1 = 0xFF;
  2049  00256A  68C1               	setf	4033,c	;volatile
  2050                           
  2051                           ;main.c: 364: nRBPU = 0;
  2052  00256C  9EF1               	bcf	intcon2,7,c	;volatile
  2053                           
  2054                           ;main.c: 366: CVRCON = 0x00;
  2055  00256E  0E00               	movlw	0
  2056  002570  6EB5               	movwf	4021,c	;volatile
  2057                           
  2058                           ;main.c: 367: CMCONbits.CIS = 0;
  2059  002572  96B4               	bcf	4020,3,c	;volatile
  2060                           
  2061                           ;main.c: 368: ADFM = 1;
  2062  002574  8EC0               	bsf	4032,7,c	;volatile
  2063                           
  2064                           ;main.c: 371: T0PS0=1;
  2065  002576  80D5               	bsf	4053,0,c	;volatile
  2066                           
  2067                           ;main.c: 372: T0PS1=1;
  2068  002578  82D5               	bsf	4053,1,c	;volatile
  2069                           
  2070                           ;main.c: 373: T0PS2=1;
  2071  00257A  84D5               	bsf	4053,2,c	;volatile
  2072                           
  2073                           ;main.c: 374: PSA=0;
  2074  00257C  96D5               	bcf	4053,3,c	;volatile
  2075                           
  2076                           ;main.c: 375: T0CS=0;
  2077  00257E  9AD5               	bcf	4053,5,c	;volatile
  2078                           
  2079                           ;main.c: 376: T08BIT=1;
  2080  002580  8CD5               	bsf	4053,6,c	;volatile
  2081                           
  2082                           ;main.c: 379: T1CON = 0b10000000;
  2083  002582  0E80               	movlw	128
  2084  002584  6ECD               	movwf	4045,c	;volatile
  2085                           
  2086                           ;main.c: 380: T1CKPS1 = 1;
  2087  002586  8ACD               	bsf	4045,5,c	;volatile
  2088                           
  2089                           ;main.c: 381: T1CKPS0 = 1;
  2090  002588  88CD               	bsf	4045,4,c	;volatile
  2091                           
  2092                           ;main.c: 382: T1OSCEN = 0;
  2093  00258A  96CD               	bcf	4045,3,c	;volatile
  2094                           
  2095                           ;main.c: 383: T1SYNC = 1;
  2096  00258C  84CD               	bsf	4045,2,c	;volatile
  2097                           
  2098                           ;main.c: 384: TMR1CS = 0;
  2099  00258E  92CD               	bcf	4045,1,c	;volatile
  2100                           
  2101                           ;main.c: 386: float time = 10;
  2102  002590  0E00               	movlw	0
  2103  002592  0100               	movlb	0	; () banked
  2104  002594  6FB5               	movwf	initializePicPins@time& (0+255),b
  2105  002596  0E20               	movlw	32
  2106  002598  0100               	movlb	0	; () banked
  2107  00259A  6FB6               	movwf	(initializePicPins@time+1)& (0+255),b
  2108  00259C  0E41               	movlw	65
  2109  00259E  0100               	movlb	0	; () banked
  2110  0025A0  6FB7               	movwf	(initializePicPins@time+2)& (0+255),b
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;main.c: 387: unsigned int set_time = 65535-(int)((float)time*2000/8);
  2114  0025A2  0E00               	movlw	0
  2115  0025A4  0100               	movlb	0	; () banked
  2116  0025A6  6F9A               	movwf	___ftdiv@f2& (0+255),b
  2117  0025A8  0E00               	movlw	0
  2118  0025AA  0100               	movlb	0	; () banked
  2119  0025AC  6F9B               	movwf	(___ftdiv@f2+1)& (0+255),b
  2120  0025AE  0E41               	movlw	65
  2121  0025B0  0100               	movlb	0	; () banked
  2122  0025B2  6F9C               	movwf	(___ftdiv@f2+2)& (0+255),b
  2123  0025B4  0E00               	movlw	0
  2124  0025B6  0100               	movlb	0	; () banked
  2125  0025B8  6F8B               	movwf	___ftmul@f2& (0+255),b
  2126  0025BA  0EFA               	movlw	250
  2127  0025BC  0100               	movlb	0	; () banked
  2128  0025BE  6F8C               	movwf	(___ftmul@f2+1)& (0+255),b
  2129  0025C0  0E44               	movlw	68
  2130  0025C2  0100               	movlb	0	; () banked
  2131  0025C4  6F8D               	movwf	(___ftmul@f2+2)& (0+255),b
  2132  0025C6  C0B5  F088         	movff	initializePicPins@time,___ftmul@f1
  2133  0025CA  C0B6  F089         	movff	initializePicPins@time+1,___ftmul@f1+1
  2134  0025CE  C0B7  F08A         	movff	initializePicPins@time+2,___ftmul@f1+2
  2135  0025D2  ECA4  F00C         	call	___ftmul	;wreg free
  2136  0025D6  C088  F097         	movff	?___ftmul,___ftdiv@f1
  2137  0025DA  C089  F098         	movff	?___ftmul+1,___ftdiv@f1+1
  2138  0025DE  C08A  F099         	movff	?___ftmul+2,___ftdiv@f1+2
  2139  0025E2  EC53  F00D         	call	___ftdiv	;wreg free
  2140  0025E6  C097  F0A6         	movff	?___ftdiv,___fttol@f1
  2141  0025EA  C098  F0A7         	movff	?___ftdiv+1,___fttol@f1+1
  2142  0025EE  C099  F0A8         	movff	?___ftdiv+2,___fttol@f1+2
  2143  0025F2  ECF9  F00D         	call	___fttol	;wreg free
  2144  0025F6  0100               	movlb	0	; () banked
  2145  0025F8  1FA6               	comf	?___fttol& (0+255),f,b
  2146  0025FA  0100               	movlb	0	; () banked
  2147  0025FC  1FA7               	comf	(?___fttol+1)& (0+255),f,b
  2148  0025FE  0100               	movlb	0	; () banked
  2149  002600  4BA6               	infsnz	?___fttol& (0+255),f,b
  2150  002602  2BA7               	incf	(?___fttol+1)& (0+255),f,b
  2151  002604  0EFF               	movlw	255
  2152  002606  0100               	movlb	0	; () banked
  2153  002608  25A6               	addwf	?___fttol& (0+255),w,b
  2154  00260A  0100               	movlb	0	; () banked
  2155  00260C  6FB8               	movwf	initializePicPins@set_time& (0+255),b
  2156  00260E  0EFF               	movlw	255
  2157  002610  0100               	movlb	0	; () banked
  2158  002612  21A7               	addwfc	(?___fttol+1)& (0+255),w,b
  2159  002614  0100               	movlb	0	; () banked
  2160  002616  6FB9               	movwf	(initializePicPins@set_time+1)& (0+255),b
  2161                           
  2162                           ; BSR set to: 0
  2163                           ;main.c: 388: TMR1H = set_time >> 8;
  2164  002618  0100               	movlb	0	; () banked
  2165  00261A  51B9               	movf	(initializePicPins@set_time+1)& (0+255),w,b
  2166  00261C  6ECF               	movwf	4047,c	;volatile
  2167                           
  2168                           ; BSR set to: 0
  2169                           ;main.c: 389: TMR1L = set_time & 0b11111111;
  2170  00261E  C0B8  FFCE         	movff	initializePicPins@set_time,4046	;volatile
  2171                           
  2172                           ; BSR set to: 0
  2173                           ;main.c: 392: TMR0IE = 1;
  2174  002622  8AF2               	bsf	intcon,5,c	;volatile
  2175                           
  2176                           ; BSR set to: 0
  2177                           ;main.c: 393: TMR0IF = 1;
  2178  002624  84F2               	bsf	intcon,2,c	;volatile
  2179                           
  2180                           ; BSR set to: 0
  2181                           ;main.c: 394: TMR0ON = 1;
  2182  002626  8ED5               	bsf	4053,7,c	;volatile
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;main.c: 395: TMR1IE = 0;
  2186  002628  909D               	bcf	3997,0,c	;volatile
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;main.c: 396: TMR1IF = 1;
  2190  00262A  809E               	bsf	3998,0,c	;volatile
  2191                           
  2192                           ; BSR set to: 0
  2193                           ;main.c: 397: TMR1ON = 1;
  2194  00262C  80CD               	bsf	4045,0,c	;volatile
  2195                           
  2196                           ; BSR set to: 0
  2197                           ;main.c: 398: PEIE = 1;
  2198  00262E  8CF2               	bsf	intcon,6,c	;volatile
  2199                           
  2200                           ; BSR set to: 0
  2201  002630  0012               	return		;funcret
  2202  002632                     __end_of_initializePicPins:
  2203                           	opt stack 0
  2204                           tblptru	equ	0xFF8
  2205                           tblptrh	equ	0xFF7
  2206                           tblptrl	equ	0xFF6
  2207                           tablat	equ	0xFF5
  2208                           intcon	equ	0xFF2
  2209                           intcon2	equ	0xFF1
  2210                           postinc0	equ	0xFEE
  2211                           wreg	equ	0xFE8
  2212                           postdec1	equ	0xFE5
  2213                           fsr1l	equ	0xFE1
  2214                           status	equ	0xFD8
  2215                           
  2216 ;; *************** function ___fttol *****************
  2217 ;; Defined at:
  2218 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  2219 ;; Parameters:    Size  Location     Type
  2220 ;;  f1              3   38[BANK0 ] float 
  2221 ;; Auto vars:     Size  Location     Type
  2222 ;;  lval            4   48[BANK0 ] unsigned long 
  2223 ;;  exp1            1   52[BANK0 ] unsigned char 
  2224 ;;  sign1           1   47[BANK0 ] unsigned char 
  2225 ;; Return value:  Size  Location     Type
  2226 ;;                  4   38[BANK0 ] long 
  2227 ;; Registers used:
  2228 ;;		wreg, status,2, status,0
  2229 ;; Tracked objects:
  2230 ;;		On entry : 0/0
  2231 ;;		On exit  : 0/0
  2232 ;;		Unchanged: 0/0
  2233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2234 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2235 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2236 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2237 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2238 ;;Total ram usage:       15 bytes
  2239 ;; Hardware stack levels used:    1
  2240 ;; Hardware stack levels required when called:    6
  2241 ;; This function calls:
  2242 ;;		Nothing
  2243 ;; This function is called by:
  2244 ;;		_initializePicPins
  2245 ;; This function uses a non-reentrant model
  2246 ;;
  2247                           
  2248                           	psect	text3
  2249  001BF2                     __ptext3:
  2250                           	opt stack 0
  2251  001BF2                     ___fttol:
  2252                           	opt stack 22
  2253                           
  2254                           ; BSR set to: 0
  2255                           ;incstack = 0
  2256  001BF2  C0A8  F0AA         	movff	___fttol@f1+2,??___fttol
  2257  001BF6  0100               	movlb	0	; () banked
  2258  001BF8  6BAB               	clrf	(??___fttol+1)& (0+255),b
  2259  001BFA  6BAC               	clrf	(??___fttol+2)& (0+255),b
  2260  001BFC  0100               	movlb	0	; () banked
  2261  001BFE  35A7               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2262  001C00  0100               	movlb	0	; () banked
  2263  001C02  37AA               	rlcf	??___fttol& (0+255),f,b
  2264  001C04  E301               	bnc	u3971
  2265  001C06  81AB               	bsf	(??___fttol+1)& (0+255),0,b
  2266  001C08                     u3971:
  2267  001C08  0100               	movlb	0	; () banked
  2268  001C0A  51AA               	movf	??___fttol& (0+255),w,b
  2269  001C0C  0100               	movlb	0	; () banked
  2270  001C0E  6FB4               	movwf	___fttol@exp1& (0+255),b
  2271  001C10  0100               	movlb	0	; () banked
  2272  001C12  51B4               	movf	___fttol@exp1& (0+255),w,b
  2273  001C14  A4D8               	btfss	status,2,c
  2274  001C16  D00A               	goto	l4335
  2275                           
  2276                           ; BSR set to: 0
  2277  001C18  0E00               	movlw	0
  2278  001C1A  0100               	movlb	0	; () banked
  2279  001C1C  6FA6               	movwf	?___fttol& (0+255),b
  2280  001C1E  0E00               	movlw	0
  2281  001C20  6FA7               	movwf	(?___fttol+1)& (0+255),b
  2282  001C22  0E00               	movlw	0
  2283  001C24  6FA8               	movwf	(?___fttol+2)& (0+255),b
  2284  001C26  0E00               	movlw	0
  2285  001C28  6FA9               	movwf	(?___fttol+3)& (0+255),b
  2286                           
  2287                           ; BSR set to: 0
  2288  001C2A  0012               	return	
  2289  001C2C                     l4335:
  2290                           
  2291                           ; BSR set to: 0
  2292  001C2C  0E17               	movlw	23
  2293  001C2E  0100               	movlb	0	; () banked
  2294  001C30  6FAA               	movwf	??___fttol& (0+255),b
  2295  001C32  C0A6  F0AB         	movff	___fttol@f1,??___fttol+1
  2296  001C36  C0A7  F0AC         	movff	___fttol@f1+1,??___fttol+2
  2297  001C3A  C0A8  F0AD         	movff	___fttol@f1+2,??___fttol+3
  2298  001C3E  0100               	movlb	0	; () banked
  2299  001C40  29AA               	incf	??___fttol& (0+255),w,b
  2300  001C42  0100               	movlb	0	; () banked
  2301  001C44  6FAE               	movwf	(??___fttol+4)& (0+255),b
  2302  001C46  D005               	goto	u3990
  2303  001C48                     u3995:
  2304  001C48  0100               	movlb	0	; () banked
  2305  001C4A  90D8               	bcf	status,0,c
  2306  001C4C  33AD               	rrcf	(??___fttol+3)& (0+255),f,b
  2307  001C4E  33AC               	rrcf	(??___fttol+2)& (0+255),f,b
  2308  001C50  33AB               	rrcf	(??___fttol+1)& (0+255),f,b
  2309  001C52                     u3990:
  2310  001C52  0100               	movlb	0	; () banked
  2311  001C54  2FAE               	decfsz	(??___fttol+4)& (0+255),f,b
  2312  001C56  D7F8               	goto	u3995
  2313  001C58  0100               	movlb	0	; () banked
  2314  001C5A  51AB               	movf	(??___fttol+1)& (0+255),w,b
  2315  001C5C  0100               	movlb	0	; () banked
  2316  001C5E  6FAF               	movwf	___fttol@sign1& (0+255),b
  2317                           
  2318                           ; BSR set to: 0
  2319  001C60  0100               	movlb	0	; () banked
  2320  001C62  8FA7               	bsf	(___fttol@f1+1)& (0+255),7,b
  2321                           
  2322                           ; BSR set to: 0
  2323  001C64  0EFF               	movlw	255
  2324  001C66  0100               	movlb	0	; () banked
  2325  001C68  17A6               	andwf	___fttol@f1& (0+255),f,b
  2326  001C6A  0EFF               	movlw	255
  2327  001C6C  0100               	movlb	0	; () banked
  2328  001C6E  17A7               	andwf	(___fttol@f1+1)& (0+255),f,b
  2329  001C70  0E00               	movlw	0
  2330  001C72  0100               	movlb	0	; () banked
  2331  001C74  17A8               	andwf	(___fttol@f1+2)& (0+255),f,b
  2332                           
  2333                           ; BSR set to: 0
  2334  001C76  0100               	movlb	0	; () banked
  2335  001C78  51A6               	movf	___fttol@f1& (0+255),w,b
  2336  001C7A  0100               	movlb	0	; () banked
  2337  001C7C  6FB0               	movwf	___fttol@lval& (0+255),b
  2338  001C7E  0100               	movlb	0	; () banked
  2339  001C80  51A7               	movf	(___fttol@f1+1)& (0+255),w,b
  2340  001C82  0100               	movlb	0	; () banked
  2341  001C84  6FB1               	movwf	(___fttol@lval+1)& (0+255),b
  2342  001C86  0100               	movlb	0	; () banked
  2343  001C88  51A8               	movf	(___fttol@f1+2)& (0+255),w,b
  2344  001C8A  0100               	movlb	0	; () banked
  2345  001C8C  6FB2               	movwf	(___fttol@lval+2)& (0+255),b
  2346  001C8E  0100               	movlb	0	; () banked
  2347  001C90  6BB3               	clrf	(___fttol@lval+3)& (0+255),b
  2348                           
  2349                           ; BSR set to: 0
  2350  001C92  0E8E               	movlw	142
  2351  001C94  0100               	movlb	0	; () banked
  2352  001C96  5FB4               	subwf	___fttol@exp1& (0+255),f,b
  2353                           
  2354                           ; BSR set to: 0
  2355  001C98  0100               	movlb	0	; () banked
  2356  001C9A  AFB4               	btfss	___fttol@exp1& (0+255),7,b
  2357  001C9C  D01A               	goto	l4357
  2358                           
  2359                           ; BSR set to: 0
  2360  001C9E  0100               	movlb	0	; () banked
  2361  001CA0  51B4               	movf	___fttol@exp1& (0+255),w,b
  2362  001CA2  0A80               	xorlw	128
  2363  001CA4  0F8F               	addlw	143
  2364  001CA6  B0D8               	btfsc	status,0,c
  2365  001CA8  D00A               	goto	l4353
  2366                           
  2367                           ; BSR set to: 0
  2368  001CAA  0E00               	movlw	0
  2369  001CAC  0100               	movlb	0	; () banked
  2370  001CAE  6FA6               	movwf	?___fttol& (0+255),b
  2371  001CB0  0E00               	movlw	0
  2372  001CB2  6FA7               	movwf	(?___fttol+1)& (0+255),b
  2373  001CB4  0E00               	movlw	0
  2374  001CB6  6FA8               	movwf	(?___fttol+2)& (0+255),b
  2375  001CB8  0E00               	movlw	0
  2376  001CBA  6FA9               	movwf	(?___fttol+3)& (0+255),b
  2377                           
  2378                           ; BSR set to: 0
  2379  001CBC  0012               	return	
  2380  001CBE                     l4353:
  2381                           
  2382                           ; BSR set to: 0
  2383  001CBE  0100               	movlb	0	; () banked
  2384  001CC0  90D8               	bcf	status,0,c
  2385  001CC2  33B3               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2386  001CC4  33B2               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2387  001CC6  33B1               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2388  001CC8  33B0               	rrcf	___fttol@lval& (0+255),f,b
  2389                           
  2390                           ; BSR set to: 0
  2391  001CCA  0100               	movlb	0	; () banked
  2392  001CCC  3FB4               	incfsz	___fttol@exp1& (0+255),f,b
  2393  001CCE  D7F7               	goto	l4353
  2394                           
  2395                           ; BSR set to: 0
  2396  001CD0  D01B               	goto	l4367
  2397  001CD2                     l4357:
  2398                           
  2399                           ; BSR set to: 0
  2400  001CD2  0E17               	movlw	23
  2401  001CD4  0100               	movlb	0	; () banked
  2402  001CD6  65B4               	cpfsgt	___fttol@exp1& (0+255),b
  2403  001CD8  D012               	goto	l4365
  2404                           
  2405                           ; BSR set to: 0
  2406  001CDA  0E00               	movlw	0
  2407  001CDC  0100               	movlb	0	; () banked
  2408  001CDE  6FA6               	movwf	?___fttol& (0+255),b
  2409  001CE0  0E00               	movlw	0
  2410  001CE2  6FA7               	movwf	(?___fttol+1)& (0+255),b
  2411  001CE4  0E00               	movlw	0
  2412  001CE6  6FA8               	movwf	(?___fttol+2)& (0+255),b
  2413  001CE8  0E00               	movlw	0
  2414  001CEA  6FA9               	movwf	(?___fttol+3)& (0+255),b
  2415                           
  2416                           ; BSR set to: 0
  2417  001CEC  0012               	return	
  2418  001CEE                     l4363:
  2419                           
  2420                           ; BSR set to: 0
  2421  001CEE  0100               	movlb	0	; () banked
  2422  001CF0  90D8               	bcf	status,0,c
  2423  001CF2  37B0               	rlcf	___fttol@lval& (0+255),f,b
  2424  001CF4  37B1               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2425  001CF6  37B2               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2426  001CF8  37B3               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2427  001CFA  0100               	movlb	0	; () banked
  2428  001CFC  07B4               	decf	___fttol@exp1& (0+255),f,b
  2429  001CFE                     l4365:
  2430                           
  2431                           ; BSR set to: 0
  2432  001CFE  0100               	movlb	0	; () banked
  2433  001D00  51B4               	movf	___fttol@exp1& (0+255),w,b
  2434  001D02  0100               	movlb	0	; () banked
  2435  001D04  A4D8               	btfss	status,2,c
  2436  001D06  D7F3               	goto	l4363
  2437  001D08                     l4367:
  2438                           
  2439                           ; BSR set to: 0
  2440  001D08  0100               	movlb	0	; () banked
  2441  001D0A  51AF               	movf	___fttol@sign1& (0+255),w,b
  2442  001D0C  0100               	movlb	0	; () banked
  2443  001D0E  B4D8               	btfsc	status,2,c
  2444  001D10  D009               	goto	l4371
  2445                           
  2446                           ; BSR set to: 0
  2447  001D12  0100               	movlb	0	; () banked
  2448  001D14  1FB3               	comf	(___fttol@lval+3)& (0+255),f,b
  2449  001D16  1FB2               	comf	(___fttol@lval+2)& (0+255),f,b
  2450  001D18  1FB1               	comf	(___fttol@lval+1)& (0+255),f,b
  2451  001D1A  6DB0               	negf	___fttol@lval& (0+255),b
  2452  001D1C  0E00               	movlw	0
  2453  001D1E  23B1               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2454  001D20  23B2               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2455  001D22  23B3               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2456  001D24                     l4371:
  2457                           
  2458                           ; BSR set to: 0
  2459  001D24  C0B0  F0A6         	movff	___fttol@lval,?___fttol
  2460  001D28  C0B1  F0A7         	movff	___fttol@lval+1,?___fttol+1
  2461  001D2C  C0B2  F0A8         	movff	___fttol@lval+2,?___fttol+2
  2462  001D30  C0B3  F0A9         	movff	___fttol@lval+3,?___fttol+3
  2463  001D34  0012               	return	
  2464  001D36                     __end_of___fttol:
  2465                           	opt stack 0
  2466                           tblptru	equ	0xFF8
  2467                           tblptrh	equ	0xFF7
  2468                           tblptrl	equ	0xFF6
  2469                           tablat	equ	0xFF5
  2470                           intcon	equ	0xFF2
  2471                           intcon2	equ	0xFF1
  2472                           postinc0	equ	0xFEE
  2473                           wreg	equ	0xFE8
  2474                           postdec1	equ	0xFE5
  2475                           fsr1l	equ	0xFE1
  2476                           status	equ	0xFD8
  2477                           
  2478 ;; *************** function ___ftmul *****************
  2479 ;; Defined at:
  2480 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  2481 ;; Parameters:    Size  Location     Type
  2482 ;;  f1              3    8[BANK0 ] float 
  2483 ;;  f2              3   11[BANK0 ] float 
  2484 ;; Auto vars:     Size  Location     Type
  2485 ;;  f3_as_produc    3   18[BANK0 ] unsigned um
  2486 ;;  sign            1   22[BANK0 ] unsigned char 
  2487 ;;  cntr            1   21[BANK0 ] unsigned char 
  2488 ;;  exp             1   17[BANK0 ] unsigned char 
  2489 ;; Return value:  Size  Location     Type
  2490 ;;                  3    8[BANK0 ] float 
  2491 ;; Registers used:
  2492 ;;		wreg, status,2, status,0, cstack
  2493 ;; Tracked objects:
  2494 ;;		On entry : 0/0
  2495 ;;		On exit  : 0/0
  2496 ;;		Unchanged: 0/0
  2497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2498 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2499 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2500 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2501 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2502 ;;Total ram usage:       15 bytes
  2503 ;; Hardware stack levels used:    1
  2504 ;; Hardware stack levels required when called:    7
  2505 ;; This function calls:
  2506 ;;		___ftpack
  2507 ;; This function is called by:
  2508 ;;		_initializePicPins
  2509 ;; This function uses a non-reentrant model
  2510 ;;
  2511                           
  2512                           	psect	text4
  2513  001948                     __ptext4:
  2514                           	opt stack 0
  2515  001948                     ___ftmul:
  2516                           	opt stack 21
  2517                           
  2518                           ; BSR set to: 0
  2519                           ;incstack = 0
  2520  001948  C08A  F08E         	movff	___ftmul@f1+2,??___ftmul
  2521  00194C  0100               	movlb	0	; () banked
  2522  00194E  6B8F               	clrf	(??___ftmul+1)& (0+255),b
  2523  001950  6B90               	clrf	(??___ftmul+2)& (0+255),b
  2524  001952  0100               	movlb	0	; () banked
  2525  001954  3589               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  2526  001956  0100               	movlb	0	; () banked
  2527  001958  378E               	rlcf	??___ftmul& (0+255),f,b
  2528  00195A  E301               	bnc	u3911
  2529  00195C  818F               	bsf	(??___ftmul+1)& (0+255),0,b
  2530  00195E                     u3911:
  2531  00195E  0100               	movlb	0	; () banked
  2532  001960  518E               	movf	??___ftmul& (0+255),w,b
  2533  001962  0100               	movlb	0	; () banked
  2534  001964  6F91               	movwf	___ftmul@exp& (0+255),b
  2535  001966  0100               	movlb	0	; () banked
  2536  001968  5191               	movf	___ftmul@exp& (0+255),w,b
  2537  00196A  A4D8               	btfss	status,2,c
  2538  00196C  D00A               	goto	l4287
  2539                           
  2540                           ; BSR set to: 0
  2541  00196E  0E00               	movlw	0
  2542  001970  0100               	movlb	0	; () banked
  2543  001972  6F88               	movwf	?___ftmul& (0+255),b
  2544  001974  0E00               	movlw	0
  2545  001976  0100               	movlb	0	; () banked
  2546  001978  6F89               	movwf	(?___ftmul+1)& (0+255),b
  2547  00197A  0E00               	movlw	0
  2548  00197C  0100               	movlb	0	; () banked
  2549  00197E  6F8A               	movwf	(?___ftmul+2)& (0+255),b
  2550                           
  2551                           ; BSR set to: 0
  2552  001980  0012               	return	
  2553  001982                     l4287:
  2554                           
  2555                           ; BSR set to: 0
  2556  001982  C08D  F08E         	movff	___ftmul@f2+2,??___ftmul
  2557  001986  0100               	movlb	0	; () banked
  2558  001988  6B8F               	clrf	(??___ftmul+1)& (0+255),b
  2559  00198A  6B90               	clrf	(??___ftmul+2)& (0+255),b
  2560  00198C  0100               	movlb	0	; () banked
  2561  00198E  358C               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  2562  001990  0100               	movlb	0	; () banked
  2563  001992  378E               	rlcf	??___ftmul& (0+255),f,b
  2564  001994  E301               	bnc	u3931
  2565  001996  818F               	bsf	(??___ftmul+1)& (0+255),0,b
  2566  001998                     u3931:
  2567  001998  0100               	movlb	0	; () banked
  2568  00199A  518E               	movf	??___ftmul& (0+255),w,b
  2569  00199C  0100               	movlb	0	; () banked
  2570  00199E  6F96               	movwf	___ftmul@sign& (0+255),b
  2571  0019A0  0100               	movlb	0	; () banked
  2572  0019A2  5196               	movf	___ftmul@sign& (0+255),w,b
  2573  0019A4  A4D8               	btfss	status,2,c
  2574  0019A6  D00A               	goto	l4293
  2575                           
  2576                           ; BSR set to: 0
  2577  0019A8  0E00               	movlw	0
  2578  0019AA  0100               	movlb	0	; () banked
  2579  0019AC  6F88               	movwf	?___ftmul& (0+255),b
  2580  0019AE  0E00               	movlw	0
  2581  0019B0  0100               	movlb	0	; () banked
  2582  0019B2  6F89               	movwf	(?___ftmul+1)& (0+255),b
  2583  0019B4  0E00               	movlw	0
  2584  0019B6  0100               	movlb	0	; () banked
  2585  0019B8  6F8A               	movwf	(?___ftmul+2)& (0+255),b
  2586                           
  2587                           ; BSR set to: 0
  2588  0019BA  0012               	return	
  2589  0019BC                     l4293:
  2590                           
  2591                           ; BSR set to: 0
  2592  0019BC  0100               	movlb	0	; () banked
  2593  0019BE  5196               	movf	___ftmul@sign& (0+255),w,b
  2594  0019C0  0F7B               	addlw	123
  2595  0019C2  0100               	movlb	0	; () banked
  2596  0019C4  2791               	addwf	___ftmul@exp& (0+255),f,b
  2597                           
  2598                           ; BSR set to: 0
  2599  0019C6  C08A  F096         	movff	___ftmul@f1+2,___ftmul@sign
  2600  0019CA  0100               	movlb	0	; () banked
  2601  0019CC  518D               	movf	(___ftmul@f2+2)& (0+255),w,b
  2602  0019CE  0100               	movlb	0	; () banked
  2603  0019D0  1B96               	xorwf	___ftmul@sign& (0+255),f,b
  2604  0019D2  0E80               	movlw	128
  2605  0019D4  0100               	movlb	0	; () banked
  2606  0019D6  1796               	andwf	___ftmul@sign& (0+255),f,b
  2607                           
  2608                           ; BSR set to: 0
  2609  0019D8  0100               	movlb	0	; () banked
  2610  0019DA  8F89               	bsf	(___ftmul@f1+1)& (0+255),7,b
  2611                           
  2612                           ; BSR set to: 0
  2613  0019DC  0100               	movlb	0	; () banked
  2614  0019DE  8F8C               	bsf	(___ftmul@f2+1)& (0+255),7,b
  2615                           
  2616                           ; BSR set to: 0
  2617  0019E0  0EFF               	movlw	255
  2618  0019E2  0100               	movlb	0	; () banked
  2619  0019E4  178B               	andwf	___ftmul@f2& (0+255),f,b
  2620  0019E6  0EFF               	movlw	255
  2621  0019E8  0100               	movlb	0	; () banked
  2622  0019EA  178C               	andwf	(___ftmul@f2+1)& (0+255),f,b
  2623  0019EC  0E00               	movlw	0
  2624  0019EE  0100               	movlb	0	; () banked
  2625  0019F0  178D               	andwf	(___ftmul@f2+2)& (0+255),f,b
  2626                           
  2627                           ; BSR set to: 0
  2628  0019F2  0E00               	movlw	0
  2629  0019F4  0100               	movlb	0	; () banked
  2630  0019F6  6F92               	movwf	___ftmul@f3_as_product& (0+255),b
  2631  0019F8  0E00               	movlw	0
  2632  0019FA  0100               	movlb	0	; () banked
  2633  0019FC  6F93               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  2634  0019FE  0E00               	movlw	0
  2635  001A00  0100               	movlb	0	; () banked
  2636  001A02  6F94               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  2637                           
  2638                           ; BSR set to: 0
  2639  001A04  0E07               	movlw	7
  2640  001A06  0100               	movlb	0	; () banked
  2641  001A08  6F95               	movwf	___ftmul@cntr& (0+255),b
  2642  001A0A                     l4307:
  2643                           
  2644                           ; BSR set to: 0
  2645  001A0A  0100               	movlb	0	; () banked
  2646  001A0C  A188               	btfss	___ftmul@f1& (0+255),0,b
  2647  001A0E  D00C               	goto	l4311
  2648                           
  2649                           ; BSR set to: 0
  2650  001A10  0100               	movlb	0	; () banked
  2651  001A12  518B               	movf	___ftmul@f2& (0+255),w,b
  2652  001A14  0100               	movlb	0	; () banked
  2653  001A16  2792               	addwf	___ftmul@f3_as_product& (0+255),f,b
  2654  001A18  0100               	movlb	0	; () banked
  2655  001A1A  518C               	movf	(___ftmul@f2+1)& (0+255),w,b
  2656  001A1C  0100               	movlb	0	; () banked
  2657  001A1E  2393               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  2658  001A20  0100               	movlb	0	; () banked
  2659  001A22  518D               	movf	(___ftmul@f2+2)& (0+255),w,b
  2660  001A24  0100               	movlb	0	; () banked
  2661  001A26  2394               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  2662  001A28                     l4311:
  2663                           
  2664                           ; BSR set to: 0
  2665  001A28  0100               	movlb	0	; () banked
  2666  001A2A  90D8               	bcf	status,0,c
  2667  001A2C  338A               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  2668  001A2E  3389               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  2669  001A30  3388               	rrcf	___ftmul@f1& (0+255),f,b
  2670  001A32  0100               	movlb	0	; () banked
  2671  001A34  90D8               	bcf	status,0,c
  2672  001A36  378B               	rlcf	___ftmul@f2& (0+255),f,b
  2673  001A38  378C               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  2674  001A3A  378D               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  2675                           
  2676                           ; BSR set to: 0
  2677  001A3C  0100               	movlb	0	; () banked
  2678  001A3E  2F95               	decfsz	___ftmul@cntr& (0+255),f,b
  2679  001A40  D7E4               	goto	l4307
  2680                           
  2681                           ; BSR set to: 0
  2682                           
  2683                           ; BSR set to: 0
  2684  001A42  0E09               	movlw	9
  2685  001A44  0100               	movlb	0	; () banked
  2686  001A46  6F95               	movwf	___ftmul@cntr& (0+255),b
  2687  001A48                     l4317:
  2688                           
  2689                           ; BSR set to: 0
  2690  001A48  0100               	movlb	0	; () banked
  2691  001A4A  A188               	btfss	___ftmul@f1& (0+255),0,b
  2692  001A4C  D00C               	goto	l4321
  2693                           
  2694                           ; BSR set to: 0
  2695  001A4E  0100               	movlb	0	; () banked
  2696  001A50  518B               	movf	___ftmul@f2& (0+255),w,b
  2697  001A52  0100               	movlb	0	; () banked
  2698  001A54  2792               	addwf	___ftmul@f3_as_product& (0+255),f,b
  2699  001A56  0100               	movlb	0	; () banked
  2700  001A58  518C               	movf	(___ftmul@f2+1)& (0+255),w,b
  2701  001A5A  0100               	movlb	0	; () banked
  2702  001A5C  2393               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  2703  001A5E  0100               	movlb	0	; () banked
  2704  001A60  518D               	movf	(___ftmul@f2+2)& (0+255),w,b
  2705  001A62  0100               	movlb	0	; () banked
  2706  001A64  2394               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  2707  001A66                     l4321:
  2708                           
  2709                           ; BSR set to: 0
  2710  001A66  0100               	movlb	0	; () banked
  2711  001A68  90D8               	bcf	status,0,c
  2712  001A6A  338A               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  2713  001A6C  3389               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  2714  001A6E  3388               	rrcf	___ftmul@f1& (0+255),f,b
  2715  001A70  0100               	movlb	0	; () banked
  2716  001A72  90D8               	bcf	status,0,c
  2717  001A74  3394               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  2718  001A76  3393               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  2719  001A78  3392               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  2720                           
  2721                           ; BSR set to: 0
  2722  001A7A  0100               	movlb	0	; () banked
  2723  001A7C  2F95               	decfsz	___ftmul@cntr& (0+255),f,b
  2724  001A7E  D7E4               	goto	l4317
  2725                           
  2726                           ; BSR set to: 0
  2727                           
  2728                           ; BSR set to: 0
  2729  001A80  C092  F080         	movff	___ftmul@f3_as_product,___ftpack@arg
  2730  001A84  C093  F081         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2731  001A88  C094  F082         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2732  001A8C  C091  F083         	movff	___ftmul@exp,___ftpack@exp
  2733  001A90  C096  F084         	movff	___ftmul@sign,___ftpack@sign
  2734  001A94  EC93  F011         	call	___ftpack	;wreg free
  2735  001A98  C080  F088         	movff	?___ftpack,?___ftmul
  2736  001A9C  C081  F089         	movff	?___ftpack+1,?___ftmul+1
  2737  001AA0  C082  F08A         	movff	?___ftpack+2,?___ftmul+2
  2738  001AA4  0012               	return	
  2739  001AA6                     __end_of___ftmul:
  2740                           	opt stack 0
  2741                           tblptru	equ	0xFF8
  2742                           tblptrh	equ	0xFF7
  2743                           tblptrl	equ	0xFF6
  2744                           tablat	equ	0xFF5
  2745                           intcon	equ	0xFF2
  2746                           intcon2	equ	0xFF1
  2747                           postinc0	equ	0xFEE
  2748                           wreg	equ	0xFE8
  2749                           postdec1	equ	0xFE5
  2750                           fsr1l	equ	0xFE1
  2751                           status	equ	0xFD8
  2752                           
  2753 ;; *************** function ___ftdiv *****************
  2754 ;; Defined at:
  2755 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  2756 ;; Parameters:    Size  Location     Type
  2757 ;;  f1              3   23[BANK0 ] float 
  2758 ;;  f2              3   26[BANK0 ] float 
  2759 ;; Auto vars:     Size  Location     Type
  2760 ;;  f3              3   33[BANK0 ] float 
  2761 ;;  sign            1   37[BANK0 ] unsigned char 
  2762 ;;  exp             1   36[BANK0 ] unsigned char 
  2763 ;;  cntr            1   32[BANK0 ] unsigned char 
  2764 ;; Return value:  Size  Location     Type
  2765 ;;                  3   23[BANK0 ] float 
  2766 ;; Registers used:
  2767 ;;		wreg, status,2, status,0, cstack
  2768 ;; Tracked objects:
  2769 ;;		On entry : 0/0
  2770 ;;		On exit  : 0/0
  2771 ;;		Unchanged: 0/0
  2772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2773 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2774 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2775 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2776 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2777 ;;Total ram usage:       15 bytes
  2778 ;; Hardware stack levels used:    1
  2779 ;; Hardware stack levels required when called:    7
  2780 ;; This function calls:
  2781 ;;		___ftpack
  2782 ;; This function is called by:
  2783 ;;		_initializePicPins
  2784 ;; This function uses a non-reentrant model
  2785 ;;
  2786                           
  2787                           	psect	text5
  2788  001AA6                     __ptext5:
  2789                           	opt stack 0
  2790  001AA6                     ___ftdiv:
  2791                           	opt stack 21
  2792                           
  2793                           ;incstack = 0
  2794  001AA6  C099  F09D         	movff	___ftdiv@f1+2,??___ftdiv
  2795  001AAA  0100               	movlb	0	; () banked
  2796  001AAC  6B9E               	clrf	(??___ftdiv+1)& (0+255),b
  2797  001AAE  6B9F               	clrf	(??___ftdiv+2)& (0+255),b
  2798  001AB0  0100               	movlb	0	; () banked
  2799  001AB2  3598               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  2800  001AB4  0100               	movlb	0	; () banked
  2801  001AB6  379D               	rlcf	??___ftdiv& (0+255),f,b
  2802  001AB8  E301               	bnc	u3861
  2803  001ABA  819E               	bsf	(??___ftdiv+1)& (0+255),0,b
  2804  001ABC                     u3861:
  2805  001ABC  0100               	movlb	0	; () banked
  2806  001ABE  519D               	movf	??___ftdiv& (0+255),w,b
  2807  001AC0  0100               	movlb	0	; () banked
  2808  001AC2  6FA4               	movwf	___ftdiv@exp& (0+255),b
  2809  001AC4  0100               	movlb	0	; () banked
  2810  001AC6  51A4               	movf	___ftdiv@exp& (0+255),w,b
  2811  001AC8  A4D8               	btfss	status,2,c
  2812  001ACA  D00A               	goto	l4241
  2813                           
  2814                           ; BSR set to: 0
  2815  001ACC  0E00               	movlw	0
  2816  001ACE  0100               	movlb	0	; () banked
  2817  001AD0  6F97               	movwf	?___ftdiv& (0+255),b
  2818  001AD2  0E00               	movlw	0
  2819  001AD4  0100               	movlb	0	; () banked
  2820  001AD6  6F98               	movwf	(?___ftdiv+1)& (0+255),b
  2821  001AD8  0E00               	movlw	0
  2822  001ADA  0100               	movlb	0	; () banked
  2823  001ADC  6F99               	movwf	(?___ftdiv+2)& (0+255),b
  2824                           
  2825                           ; BSR set to: 0
  2826  001ADE  0012               	return	
  2827  001AE0                     l4241:
  2828                           
  2829                           ; BSR set to: 0
  2830  001AE0  C09C  F09D         	movff	___ftdiv@f2+2,??___ftdiv
  2831  001AE4  0100               	movlb	0	; () banked
  2832  001AE6  6B9E               	clrf	(??___ftdiv+1)& (0+255),b
  2833  001AE8  6B9F               	clrf	(??___ftdiv+2)& (0+255),b
  2834  001AEA  0100               	movlb	0	; () banked
  2835  001AEC  359B               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  2836  001AEE  0100               	movlb	0	; () banked
  2837  001AF0  379D               	rlcf	??___ftdiv& (0+255),f,b
  2838  001AF2  E301               	bnc	u3881
  2839  001AF4  819E               	bsf	(??___ftdiv+1)& (0+255),0,b
  2840  001AF6                     u3881:
  2841  001AF6  0100               	movlb	0	; () banked
  2842  001AF8  519D               	movf	??___ftdiv& (0+255),w,b
  2843  001AFA  0100               	movlb	0	; () banked
  2844  001AFC  6FA5               	movwf	___ftdiv@sign& (0+255),b
  2845  001AFE  0100               	movlb	0	; () banked
  2846  001B00  51A5               	movf	___ftdiv@sign& (0+255),w,b
  2847  001B02  A4D8               	btfss	status,2,c
  2848  001B04  D00A               	goto	l4247
  2849                           
  2850                           ; BSR set to: 0
  2851  001B06  0E00               	movlw	0
  2852  001B08  0100               	movlb	0	; () banked
  2853  001B0A  6F97               	movwf	?___ftdiv& (0+255),b
  2854  001B0C  0E00               	movlw	0
  2855  001B0E  0100               	movlb	0	; () banked
  2856  001B10  6F98               	movwf	(?___ftdiv+1)& (0+255),b
  2857  001B12  0E00               	movlw	0
  2858  001B14  0100               	movlb	0	; () banked
  2859  001B16  6F99               	movwf	(?___ftdiv+2)& (0+255),b
  2860                           
  2861                           ; BSR set to: 0
  2862  001B18  0012               	return	
  2863  001B1A                     l4247:
  2864                           
  2865                           ; BSR set to: 0
  2866  001B1A  0E00               	movlw	0
  2867  001B1C  0100               	movlb	0	; () banked
  2868  001B1E  6FA1               	movwf	___ftdiv@f3& (0+255),b
  2869  001B20  0E00               	movlw	0
  2870  001B22  0100               	movlb	0	; () banked
  2871  001B24  6FA2               	movwf	(___ftdiv@f3+1)& (0+255),b
  2872  001B26  0E00               	movlw	0
  2873  001B28  0100               	movlb	0	; () banked
  2874  001B2A  6FA3               	movwf	(___ftdiv@f3+2)& (0+255),b
  2875                           
  2876                           ; BSR set to: 0
  2877  001B2C  0100               	movlb	0	; () banked
  2878  001B2E  51A5               	movf	___ftdiv@sign& (0+255),w,b
  2879  001B30  0F89               	addlw	137
  2880  001B32  0100               	movlb	0	; () banked
  2881  001B34  5FA4               	subwf	___ftdiv@exp& (0+255),f,b
  2882                           
  2883                           ; BSR set to: 0
  2884  001B36  C099  F0A5         	movff	___ftdiv@f1+2,___ftdiv@sign
  2885                           
  2886                           ; BSR set to: 0
  2887  001B3A  0100               	movlb	0	; () banked
  2888  001B3C  519C               	movf	(___ftdiv@f2+2)& (0+255),w,b
  2889  001B3E  0100               	movlb	0	; () banked
  2890  001B40  1BA5               	xorwf	___ftdiv@sign& (0+255),f,b
  2891                           
  2892                           ; BSR set to: 0
  2893  001B42  0E80               	movlw	128
  2894  001B44  0100               	movlb	0	; () banked
  2895  001B46  17A5               	andwf	___ftdiv@sign& (0+255),f,b
  2896                           
  2897                           ; BSR set to: 0
  2898  001B48  0100               	movlb	0	; () banked
  2899  001B4A  8F98               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  2900                           
  2901                           ; BSR set to: 0
  2902  001B4C  0EFF               	movlw	255
  2903  001B4E  0100               	movlb	0	; () banked
  2904  001B50  1797               	andwf	___ftdiv@f1& (0+255),f,b
  2905  001B52  0EFF               	movlw	255
  2906  001B54  0100               	movlb	0	; () banked
  2907  001B56  1798               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  2908  001B58  0E00               	movlw	0
  2909  001B5A  0100               	movlb	0	; () banked
  2910  001B5C  1799               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  2911                           
  2912                           ; BSR set to: 0
  2913  001B5E  0100               	movlb	0	; () banked
  2914  001B60  8F9B               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  2915                           
  2916                           ; BSR set to: 0
  2917  001B62  0EFF               	movlw	255
  2918  001B64  0100               	movlb	0	; () banked
  2919  001B66  179A               	andwf	___ftdiv@f2& (0+255),f,b
  2920  001B68  0EFF               	movlw	255
  2921  001B6A  0100               	movlb	0	; () banked
  2922  001B6C  179B               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  2923  001B6E  0E00               	movlw	0
  2924  001B70  0100               	movlb	0	; () banked
  2925  001B72  179C               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  2926                           
  2927                           ; BSR set to: 0
  2928  001B74  0E18               	movlw	24
  2929  001B76  0100               	movlb	0	; () banked
  2930  001B78  6FA0               	movwf	___ftdiv@cntr& (0+255),b
  2931  001B7A                     l4267:
  2932                           
  2933                           ; BSR set to: 0
  2934  001B7A  0100               	movlb	0	; () banked
  2935  001B7C  90D8               	bcf	status,0,c
  2936  001B7E  37A1               	rlcf	___ftdiv@f3& (0+255),f,b
  2937  001B80  37A2               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  2938  001B82  37A3               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  2939                           
  2940                           ; BSR set to: 0
  2941  001B84  0100               	movlb	0	; () banked
  2942  001B86  519A               	movf	___ftdiv@f2& (0+255),w,b
  2943  001B88  0100               	movlb	0	; () banked
  2944  001B8A  5D97               	subwf	___ftdiv@f1& (0+255),w,b
  2945  001B8C  0100               	movlb	0	; () banked
  2946  001B8E  519B               	movf	(___ftdiv@f2+1)& (0+255),w,b
  2947  001B90  0100               	movlb	0	; () banked
  2948  001B92  5998               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  2949  001B94  0100               	movlb	0	; () banked
  2950  001B96  519C               	movf	(___ftdiv@f2+2)& (0+255),w,b
  2951  001B98  0100               	movlb	0	; () banked
  2952  001B9A  5999               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  2953  001B9C  A0D8               	btfss	status,0,c
  2954  001B9E  D00E               	goto	l955
  2955                           
  2956                           ; BSR set to: 0
  2957  001BA0  0100               	movlb	0	; () banked
  2958  001BA2  519A               	movf	___ftdiv@f2& (0+255),w,b
  2959  001BA4  0100               	movlb	0	; () banked
  2960  001BA6  5F97               	subwf	___ftdiv@f1& (0+255),f,b
  2961  001BA8  0100               	movlb	0	; () banked
  2962  001BAA  519B               	movf	(___ftdiv@f2+1)& (0+255),w,b
  2963  001BAC  0100               	movlb	0	; () banked
  2964  001BAE  5B98               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  2965  001BB0  0100               	movlb	0	; () banked
  2966  001BB2  519C               	movf	(___ftdiv@f2+2)& (0+255),w,b
  2967  001BB4  0100               	movlb	0	; () banked
  2968  001BB6  5B99               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  2969                           
  2970                           ; BSR set to: 0
  2971  001BB8  0100               	movlb	0	; () banked
  2972  001BBA  81A1               	bsf	___ftdiv@f3& (0+255),0,b
  2973  001BBC                     l955:
  2974                           
  2975                           ; BSR set to: 0
  2976  001BBC  0100               	movlb	0	; () banked
  2977  001BBE  90D8               	bcf	status,0,c
  2978  001BC0  3797               	rlcf	___ftdiv@f1& (0+255),f,b
  2979  001BC2  3798               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  2980  001BC4  3799               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  2981                           
  2982                           ; BSR set to: 0
  2983  001BC6  0100               	movlb	0	; () banked
  2984  001BC8  2FA0               	decfsz	___ftdiv@cntr& (0+255),f,b
  2985  001BCA  D7D7               	goto	l4267
  2986                           
  2987                           ; BSR set to: 0
  2988                           
  2989                           ; BSR set to: 0
  2990  001BCC  C0A1  F080         	movff	___ftdiv@f3,___ftpack@arg
  2991  001BD0  C0A2  F081         	movff	___ftdiv@f3+1,___ftpack@arg+1
  2992  001BD4  C0A3  F082         	movff	___ftdiv@f3+2,___ftpack@arg+2
  2993  001BD8  C0A4  F083         	movff	___ftdiv@exp,___ftpack@exp
  2994  001BDC  C0A5  F084         	movff	___ftdiv@sign,___ftpack@sign
  2995  001BE0  EC93  F011         	call	___ftpack	;wreg free
  2996  001BE4  C080  F097         	movff	?___ftpack,?___ftdiv
  2997  001BE8  C081  F098         	movff	?___ftpack+1,?___ftdiv+1
  2998  001BEC  C082  F099         	movff	?___ftpack+2,?___ftdiv+2
  2999  001BF0  0012               	return	
  3000  001BF2                     __end_of___ftdiv:
  3001                           	opt stack 0
  3002                           tblptru	equ	0xFF8
  3003                           tblptrh	equ	0xFF7
  3004                           tblptrl	equ	0xFF6
  3005                           tablat	equ	0xFF5
  3006                           intcon	equ	0xFF2
  3007                           intcon2	equ	0xFF1
  3008                           postinc0	equ	0xFEE
  3009                           wreg	equ	0xFE8
  3010                           postdec1	equ	0xFE5
  3011                           fsr1l	equ	0xFE1
  3012                           status	equ	0xFD8
  3013                           
  3014 ;; *************** function ___ftpack *****************
  3015 ;; Defined at:
  3016 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  3017 ;; Parameters:    Size  Location     Type
  3018 ;;  arg             3    0[BANK0 ] unsigned um
  3019 ;;  exp             1    3[BANK0 ] unsigned char 
  3020 ;;  sign            1    4[BANK0 ] unsigned char 
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;		None
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  3    0[BANK0 ] float 
  3025 ;; Registers used:
  3026 ;;		wreg, status,2, status,0
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3032 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3033 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3034 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3035 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3036 ;;Total ram usage:        8 bytes
  3037 ;; Hardware stack levels used:    1
  3038 ;; Hardware stack levels required when called:    6
  3039 ;; This function calls:
  3040 ;;		Nothing
  3041 ;; This function is called by:
  3042 ;;		___ftdiv
  3043 ;;		___ftmul
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047                           	psect	text6
  3048  002326                     __ptext6:
  3049                           	opt stack 0
  3050  002326                     ___ftpack:
  3051                           	opt stack 21
  3052                           
  3053                           ;incstack = 0
  3054  002326  0100               	movlb	0	; () banked
  3055  002328  5183               	movf	___ftpack@exp& (0+255),w,b
  3056  00232A  0100               	movlb	0	; () banked
  3057  00232C  B4D8               	btfsc	status,2,c
  3058  00232E  D008               	goto	l3875
  3059                           
  3060                           ; BSR set to: 0
  3061  002330  0100               	movlb	0	; () banked
  3062  002332  5180               	movf	___ftpack@arg& (0+255),w,b
  3063  002334  0100               	movlb	0	; () banked
  3064  002336  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  3065  002338  0100               	movlb	0	; () banked
  3066  00233A  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  3067  00233C  A4D8               	btfss	status,2,c
  3068  00233E  D011               	goto	l3881
  3069  002340                     l3875:
  3070                           
  3071                           ; BSR set to: 0
  3072  002340  0E00               	movlw	0
  3073  002342  0100               	movlb	0	; () banked
  3074  002344  6F80               	movwf	?___ftpack& (0+255),b
  3075  002346  0E00               	movlw	0
  3076  002348  0100               	movlb	0	; () banked
  3077  00234A  6F81               	movwf	(?___ftpack+1)& (0+255),b
  3078  00234C  0E00               	movlw	0
  3079  00234E  0100               	movlb	0	; () banked
  3080  002350  6F82               	movwf	(?___ftpack+2)& (0+255),b
  3081                           
  3082                           ; BSR set to: 0
  3083  002352  0012               	return	
  3084  002354                     l3879:
  3085                           
  3086                           ; BSR set to: 0
  3087  002354  0100               	movlb	0	; () banked
  3088  002356  2B83               	incf	___ftpack@exp& (0+255),f,b
  3089  002358  0100               	movlb	0	; () banked
  3090  00235A  90D8               	bcf	status,0,c
  3091  00235C  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  3092  00235E  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  3093  002360  3380               	rrcf	___ftpack@arg& (0+255),f,b
  3094  002362                     l3881:
  3095                           
  3096                           ; BSR set to: 0
  3097  002362  0E00               	movlw	0
  3098  002364  0100               	movlb	0	; () banked
  3099  002366  1580               	andwf	___ftpack@arg& (0+255),w,b
  3100  002368  0100               	movlb	0	; () banked
  3101  00236A  6F85               	movwf	??___ftpack& (0+255),b
  3102  00236C  0E00               	movlw	0
  3103  00236E  0100               	movlb	0	; () banked
  3104  002370  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  3105  002372  0100               	movlb	0	; () banked
  3106  002374  6F86               	movwf	(??___ftpack+1)& (0+255),b
  3107  002376  0EFE               	movlw	254
  3108  002378  0100               	movlb	0	; () banked
  3109  00237A  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  3110  00237C  0100               	movlb	0	; () banked
  3111  00237E  6F87               	movwf	(??___ftpack+2)& (0+255),b
  3112  002380  0100               	movlb	0	; () banked
  3113  002382  5185               	movf	??___ftpack& (0+255),w,b
  3114  002384  0100               	movlb	0	; () banked
  3115  002386  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  3116  002388  0100               	movlb	0	; () banked
  3117  00238A  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  3118  00238C  B4D8               	btfsc	status,2,c
  3119  00238E  D011               	goto	l3887
  3120  002390  D7E1               	goto	l3879
  3121  002392                     l3883:
  3122                           
  3123                           ; BSR set to: 0
  3124  002392  0100               	movlb	0	; () banked
  3125  002394  2B83               	incf	___ftpack@exp& (0+255),f,b
  3126                           
  3127                           ; BSR set to: 0
  3128  002396  0E01               	movlw	1
  3129  002398  0100               	movlb	0	; () banked
  3130  00239A  2780               	addwf	___ftpack@arg& (0+255),f,b
  3131  00239C  0E00               	movlw	0
  3132  00239E  0100               	movlb	0	; () banked
  3133  0023A0  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  3134  0023A2  0E00               	movlw	0
  3135  0023A4  0100               	movlb	0	; () banked
  3136  0023A6  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  3137  0023A8  0100               	movlb	0	; () banked
  3138  0023AA  90D8               	bcf	status,0,c
  3139  0023AC  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  3140  0023AE  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  3141  0023B0  3380               	rrcf	___ftpack@arg& (0+255),f,b
  3142  0023B2                     l3887:
  3143                           
  3144                           ; BSR set to: 0
  3145  0023B2  0E00               	movlw	0
  3146  0023B4  0100               	movlb	0	; () banked
  3147  0023B6  1580               	andwf	___ftpack@arg& (0+255),w,b
  3148  0023B8  0100               	movlb	0	; () banked
  3149  0023BA  6F85               	movwf	??___ftpack& (0+255),b
  3150  0023BC  0E00               	movlw	0
  3151  0023BE  0100               	movlb	0	; () banked
  3152  0023C0  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  3153  0023C2  0100               	movlb	0	; () banked
  3154  0023C4  6F86               	movwf	(??___ftpack+1)& (0+255),b
  3155  0023C6  0EFF               	movlw	255
  3156  0023C8  0100               	movlb	0	; () banked
  3157  0023CA  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  3158  0023CC  0100               	movlb	0	; () banked
  3159  0023CE  6F87               	movwf	(??___ftpack+2)& (0+255),b
  3160  0023D0  0100               	movlb	0	; () banked
  3161  0023D2  5185               	movf	??___ftpack& (0+255),w,b
  3162  0023D4  0100               	movlb	0	; () banked
  3163  0023D6  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  3164  0023D8  0100               	movlb	0	; () banked
  3165  0023DA  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  3166  0023DC  B4D8               	btfsc	status,2,c
  3167  0023DE  D008               	goto	l3891
  3168  0023E0  D7D8               	goto	l3883
  3169  0023E2                     l3889:
  3170                           
  3171                           ; BSR set to: 0
  3172  0023E2  0100               	movlb	0	; () banked
  3173  0023E4  0783               	decf	___ftpack@exp& (0+255),f,b
  3174  0023E6  0100               	movlb	0	; () banked
  3175  0023E8  90D8               	bcf	status,0,c
  3176  0023EA  3780               	rlcf	___ftpack@arg& (0+255),f,b
  3177  0023EC  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  3178  0023EE  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  3179  0023F0                     l3891:
  3180                           
  3181                           ; BSR set to: 0
  3182  0023F0  0100               	movlb	0	; () banked
  3183  0023F2  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  3184  0023F4  D004               	goto	l897
  3185                           
  3186                           ; BSR set to: 0
  3187  0023F6  0E02               	movlw	2
  3188  0023F8  0100               	movlb	0	; () banked
  3189  0023FA  6183               	cpfslt	___ftpack@exp& (0+255),b
  3190  0023FC  D7F2               	goto	l3889
  3191  0023FE                     l897:
  3192                           
  3193                           ; BSR set to: 0
  3194  0023FE  0100               	movlb	0	; () banked
  3195  002400  B183               	btfsc	___ftpack@exp& (0+255),0,b
  3196  002402  D002               	goto	l3897
  3197                           
  3198                           ; BSR set to: 0
  3199  002404  0100               	movlb	0	; () banked
  3200  002406  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  3201  002408                     l3897:
  3202                           
  3203                           ; BSR set to: 0
  3204  002408  0100               	movlb	0	; () banked
  3205  00240A  90D8               	bcf	status,0,c
  3206  00240C  3383               	rrcf	___ftpack@exp& (0+255),f,b
  3207  00240E  0100               	movlb	0	; () banked
  3208  002410  5183               	movf	___ftpack@exp& (0+255),w,b
  3209  002412  0100               	movlb	0	; () banked
  3210  002414  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  3211                           
  3212                           ; BSR set to: 0
  3213  002416  0100               	movlb	0	; () banked
  3214  002418  5184               	movf	___ftpack@sign& (0+255),w,b
  3215  00241A  0100               	movlb	0	; () banked
  3216  00241C  B4D8               	btfsc	status,2,c
  3217  00241E  D002               	goto	l3903
  3218                           
  3219                           ; BSR set to: 0
  3220  002420  0100               	movlb	0	; () banked
  3221  002422  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  3222  002424                     l3903:
  3223                           
  3224                           ; BSR set to: 0
  3225  002424  C080  F080         	movff	___ftpack@arg,?___ftpack
  3226  002428  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  3227  00242C  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  3228  002430  0012               	return	
  3229  002432                     __end_of___ftpack:
  3230                           	opt stack 0
  3231                           tblptru	equ	0xFF8
  3232                           tblptrh	equ	0xFF7
  3233                           tblptrl	equ	0xFF6
  3234                           tablat	equ	0xFF5
  3235                           intcon	equ	0xFF2
  3236                           intcon2	equ	0xFF1
  3237                           postinc0	equ	0xFEE
  3238                           wreg	equ	0xFE8
  3239                           postdec1	equ	0xFE5
  3240                           fsr1l	equ	0xFE1
  3241                           status	equ	0xFD8
  3242                           
  3243 ;; *************** function _initializeLcdScreen *****************
  3244 ;; Defined at:
  3245 ;;		line 401 in file "main.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;		None
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;		None
  3250 ;; Return value:  Size  Location     Type
  3251 ;;                  1    wreg      void 
  3252 ;; Registers used:
  3253 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3259 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3261 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3262 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3263 ;;Total ram usage:        0 bytes
  3264 ;; Hardware stack levels used:    1
  3265 ;; Hardware stack levels required when called:   12
  3266 ;; This function calls:
  3267 ;;		_displayMainProgramLcdScreen
  3268 ;;		_initializeLcdSettings
  3269 ;; This function is called by:
  3270 ;;		_initializePicSettings
  3271 ;; This function uses a non-reentrant model
  3272 ;;
  3273                           
  3274                           	psect	text7
  3275  003800                     __ptext7:
  3276                           	opt stack 0
  3277  003800                     _initializeLcdScreen:
  3278                           	opt stack 17
  3279                           
  3280                           ;main.c: 402: initializeLcdSettings();
  3281                           
  3282                           ; BSR set to: 0
  3283                           ;incstack = 0
  3284  003800  EC11  F01A         	call	_initializeLcdSettings	;wreg free
  3285                           
  3286                           ;main.c: 403: displayMainProgramLcdScreen(0);
  3287  003804  0E00               	movlw	0
  3288  003806  0100               	movlb	0	; () banked
  3289  003808  6FAD               	movwf	(?_displayMainProgramLcdScreen+1)& (0+255),b
  3290  00380A  0E00               	movlw	0
  3291  00380C  6FAC               	movwf	?_displayMainProgramLcdScreen& (0+255),b
  3292  00380E  EC5B  F016         	call	_displayMainProgramLcdScreen	;wreg free
  3293  003812  0012               	return		;funcret
  3294  003814                     __end_of_initializeLcdScreen:
  3295                           	opt stack 0
  3296                           tblptru	equ	0xFF8
  3297                           tblptrh	equ	0xFF7
  3298                           tblptrl	equ	0xFF6
  3299                           tablat	equ	0xFF5
  3300                           intcon	equ	0xFF2
  3301                           intcon2	equ	0xFF1
  3302                           postinc0	equ	0xFEE
  3303                           wreg	equ	0xFE8
  3304                           postdec1	equ	0xFE5
  3305                           fsr1l	equ	0xFE1
  3306                           status	equ	0xFD8
  3307                           
  3308 ;; *************** function _initializeLcdSettings *****************
  3309 ;; Defined at:
  3310 ;;		line 14 in file "lcd.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;		None
  3313 ;; Auto vars:     Size  Location     Type
  3314 ;;		None
  3315 ;; Return value:  Size  Location     Type
  3316 ;;                  1    wreg      void 
  3317 ;; Registers used:
  3318 ;;		wreg, status,2, status,0, cstack
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 0/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3326 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;Total ram usage:        1 bytes
  3329 ;; Hardware stack levels used:    1
  3330 ;; Hardware stack levels required when called:    8
  3331 ;; This function calls:
  3332 ;;		_lcdInst
  3333 ;; This function is called by:
  3334 ;;		_initializeLcdScreen
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           	psect	text8
  3339  003422                     __ptext8:
  3340                           	opt stack 0
  3341  003422                     _initializeLcdSettings:
  3342                           	opt stack 20
  3343                           
  3344                           ;lcd.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  3345                           
  3346                           ;incstack = 0
  3347  003422  0E27               	movlw	39
  3348  003424  0100               	movlb	0	; () banked
  3349  003426  6F83               	movwf	??_initializeLcdSettings& (0+255),b
  3350  003428  0EF5               	movlw	245
  3351  00342A                     u9507:
  3352  00342A  2EE8               	decfsz	wreg,f,c
  3353  00342C  D7FE               	bra	u9507
  3354  00342E  2F83               	decfsz	??_initializeLcdSettings& (0+255),f,b
  3355  003430  D7FC               	bra	u9507
  3356                           
  3357                           ;lcd.c: 16: lcdInst(0b00110011);
  3358  003432  0E33               	movlw	51
  3359  003434  EC27  F01C         	call	_lcdInst
  3360                           
  3361                           ;lcd.c: 17: lcdInst(0b00110010);
  3362  003438  0E32               	movlw	50
  3363  00343A  EC27  F01C         	call	_lcdInst
  3364                           
  3365                           ;lcd.c: 18: lcdInst(0b00101000);
  3366  00343E  0E28               	movlw	40
  3367  003440  EC27  F01C         	call	_lcdInst
  3368                           
  3369                           ;lcd.c: 19: lcdInst(0b00001111);
  3370  003444  0E0F               	movlw	15
  3371  003446  EC27  F01C         	call	_lcdInst
  3372                           
  3373                           ;lcd.c: 20: lcdInst(0b00000110);
  3374  00344A  0E06               	movlw	6
  3375  00344C  EC27  F01C         	call	_lcdInst
  3376                           
  3377                           ;lcd.c: 21: lcdInst(0b00000001);
  3378  003450  0E01               	movlw	1
  3379  003452  EC27  F01C         	call	_lcdInst
  3380                           
  3381                           ;lcd.c: 22: _delay((unsigned long)((15)*(8000000/4000.0)));
  3382  003456  0E27               	movlw	39
  3383  003458  0100               	movlb	0	; () banked
  3384  00345A  6F83               	movwf	??_initializeLcdSettings& (0+255),b
  3385  00345C  0EF5               	movlw	245
  3386  00345E                     u9517:
  3387  00345E  2EE8               	decfsz	wreg,f,c
  3388  003460  D7FE               	bra	u9517
  3389  003462  2F83               	decfsz	??_initializeLcdSettings& (0+255),f,b
  3390  003464  D7FC               	bra	u9517
  3391  003466  0012               	return		;funcret
  3392  003468                     __end_of_initializeLcdSettings:
  3393                           	opt stack 0
  3394                           tblptru	equ	0xFF8
  3395                           tblptrh	equ	0xFF7
  3396                           tblptrl	equ	0xFF6
  3397                           tablat	equ	0xFF5
  3398                           intcon	equ	0xFF2
  3399                           intcon2	equ	0xFF1
  3400                           postinc0	equ	0xFEE
  3401                           wreg	equ	0xFE8
  3402                           postdec1	equ	0xFE5
  3403                           fsr1l	equ	0xFE1
  3404                           status	equ	0xFD8
  3405                           
  3406 ;; *************** function _initializeI2C *****************
  3407 ;; Defined at:
  3408 ;;		line 13 in file "I2C.c"
  3409 ;; Parameters:    Size  Location     Type
  3410 ;;  c               4   13[BANK0 ] const unsigned long 
  3411 ;; Auto vars:     Size  Location     Type
  3412 ;;		None
  3413 ;; Return value:  Size  Location     Type
  3414 ;;                  1    wreg      void 
  3415 ;; Registers used:
  3416 ;;		wreg, status,2, status,0, cstack
  3417 ;; Tracked objects:
  3418 ;;		On entry : 0/0
  3419 ;;		On exit  : 0/0
  3420 ;;		Unchanged: 0/0
  3421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3422 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3424 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3425 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3426 ;;Total ram usage:        8 bytes
  3427 ;; Hardware stack levels used:    1
  3428 ;; Hardware stack levels required when called:    7
  3429 ;; This function calls:
  3430 ;;		___lldiv
  3431 ;; This function is called by:
  3432 ;;		_initializePicSettings
  3433 ;; This function uses a non-reentrant model
  3434 ;;
  3435                           
  3436                           	psect	text9
  3437  0031D6                     __ptext9:
  3438                           	opt stack 0
  3439  0031D6                     _initializeI2C:
  3440                           	opt stack 22
  3441                           
  3442                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  3443                           
  3444                           ;incstack = 0
  3445  0031D6  0E00               	movlw	0
  3446  0031D8  6EC7               	movwf	4039,c	;volatile
  3447                           
  3448                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  3449  0031DA  0E28               	movlw	40
  3450  0031DC  6EC6               	movwf	4038,c	;volatile
  3451                           
  3452                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  3453  0031DE  0E00               	movlw	0
  3454  0031E0  6EC5               	movwf	4037,c	;volatile
  3455                           
  3456                           ;I2C.c: 19: SSPADD = (8000000/(4*c))-1;
  3457  0031E2  0E00               	movlw	0
  3458  0031E4  0100               	movlb	0	; () banked
  3459  0031E6  6F80               	movwf	___lldiv@dividend& (0+255),b
  3460  0031E8  0E12               	movlw	18
  3461  0031EA  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  3462  0031EC  0E7A               	movlw	122
  3463  0031EE  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  3464  0031F0  0E00               	movlw	0
  3465  0031F2  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  3466  0031F4  C08D  F091         	movff	initializeI2C@c,??_initializeI2C
  3467  0031F8  C08E  F092         	movff	initializeI2C@c+1,??_initializeI2C+1
  3468  0031FC  C08F  F093         	movff	initializeI2C@c+2,??_initializeI2C+2
  3469  003200  C090  F094         	movff	initializeI2C@c+3,??_initializeI2C+3
  3470  003204  0E02               	movlw	2
  3471  003206                     u4455:
  3472  003206  90D8               	bcf	status,0,c
  3473  003208  0100               	movlb	0	; () banked
  3474  00320A  3791               	rlcf	??_initializeI2C& (0+255),f,b
  3475  00320C  3792               	rlcf	(??_initializeI2C+1)& (0+255),f,b
  3476  00320E  3793               	rlcf	(??_initializeI2C+2)& (0+255),f,b
  3477  003210  3794               	rlcf	(??_initializeI2C+3)& (0+255),f,b
  3478  003212  2EE8               	decfsz	wreg,f,c
  3479  003214  D7F8               	goto	u4455
  3480  003216  C091  F084         	movff	??_initializeI2C,___lldiv@divisor
  3481  00321A  C092  F085         	movff	??_initializeI2C+1,___lldiv@divisor+1
  3482  00321E  C093  F086         	movff	??_initializeI2C+2,___lldiv@divisor+2
  3483  003222  C094  F087         	movff	??_initializeI2C+3,___lldiv@divisor+3
  3484  003226  ECF9  F014         	call	___lldiv	;wreg free
  3485  00322A  0100               	movlb	0	; () banked
  3486  00322C  0580               	decf	?___lldiv& (0+255),w,b
  3487  00322E  6EC8               	movwf	4040,c	;volatile
  3488                           
  3489                           ; BSR set to: 0
  3490                           ;I2C.c: 20: TRISC3 = 1;
  3491  003230  8694               	bsf	3988,3,c	;volatile
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;I2C.c: 21: TRISC4 = 1;
  3495  003232  8894               	bsf	3988,4,c	;volatile
  3496                           
  3497                           ; BSR set to: 0
  3498  003234  0012               	return		;funcret
  3499  003236                     __end_of_initializeI2C:
  3500                           	opt stack 0
  3501                           tblptru	equ	0xFF8
  3502                           tblptrh	equ	0xFF7
  3503                           tblptrl	equ	0xFF6
  3504                           tablat	equ	0xFF5
  3505                           intcon	equ	0xFF2
  3506                           intcon2	equ	0xFF1
  3507                           postinc0	equ	0xFEE
  3508                           wreg	equ	0xFE8
  3509                           postdec1	equ	0xFE5
  3510                           fsr1l	equ	0xFE1
  3511                           status	equ	0xFD8
  3512                           
  3513 ;; *************** function ___lldiv *****************
  3514 ;; Defined at:
  3515 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  3516 ;; Parameters:    Size  Location     Type
  3517 ;;  dividend        4    0[BANK0 ] unsigned long 
  3518 ;;  divisor         4    4[BANK0 ] unsigned long 
  3519 ;; Auto vars:     Size  Location     Type
  3520 ;;  quotient        4    8[BANK0 ] unsigned long 
  3521 ;;  counter         1   12[BANK0 ] unsigned char 
  3522 ;; Return value:  Size  Location     Type
  3523 ;;                  4    0[BANK0 ] unsigned long 
  3524 ;; Registers used:
  3525 ;;		wreg, status,2, status,0
  3526 ;; Tracked objects:
  3527 ;;		On entry : 0/0
  3528 ;;		On exit  : 0/0
  3529 ;;		Unchanged: 0/0
  3530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3531 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3532 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3533 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3534 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3535 ;;Total ram usage:       13 bytes
  3536 ;; Hardware stack levels used:    1
  3537 ;; Hardware stack levels required when called:    6
  3538 ;; This function calls:
  3539 ;;		Nothing
  3540 ;; This function is called by:
  3541 ;;		_initializeI2C
  3542 ;; This function uses a non-reentrant model
  3543 ;;
  3544                           
  3545                           	psect	text10
  3546  0029F2                     __ptext10:
  3547                           	opt stack 0
  3548  0029F2                     ___lldiv:
  3549                           	opt stack 22
  3550                           
  3551                           ; BSR set to: 0
  3552                           ;incstack = 0
  3553  0029F2  0E00               	movlw	0
  3554  0029F4  0100               	movlb	0	; () banked
  3555  0029F6  6F88               	movwf	___lldiv@quotient& (0+255),b
  3556  0029F8  0E00               	movlw	0
  3557  0029FA  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  3558  0029FC  0E00               	movlw	0
  3559  0029FE  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  3560  002A00  0E00               	movlw	0
  3561  002A02  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  3562                           
  3563                           ; BSR set to: 0
  3564  002A04  0100               	movlb	0	; () banked
  3565  002A06  5184               	movf	___lldiv@divisor& (0+255),w,b
  3566  002A08  0100               	movlb	0	; () banked
  3567  002A0A  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  3568  002A0C  0100               	movlb	0	; () banked
  3569  002A0E  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  3570  002A10  0100               	movlb	0	; () banked
  3571  002A12  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  3572  002A14  B4D8               	btfsc	status,2,c
  3573  002A16  D042               	goto	l1027
  3574                           
  3575                           ; BSR set to: 0
  3576  002A18  0E01               	movlw	1
  3577  002A1A  0100               	movlb	0	; () banked
  3578  002A1C  6F8C               	movwf	___lldiv@counter& (0+255),b
  3579  002A1E  D008               	goto	l4383
  3580  002A20                     l4381:
  3581                           
  3582                           ; BSR set to: 0
  3583  002A20  0100               	movlb	0	; () banked
  3584  002A22  90D8               	bcf	status,0,c
  3585  002A24  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  3586  002A26  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  3587  002A28  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  3588  002A2A  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  3589  002A2C  0100               	movlb	0	; () banked
  3590  002A2E  2B8C               	incf	___lldiv@counter& (0+255),f,b
  3591  002A30                     l4383:
  3592                           
  3593                           ; BSR set to: 0
  3594  002A30  0100               	movlb	0	; () banked
  3595  002A32  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  3596  002A34  D7F5               	goto	l4381
  3597  002A36                     l4385:
  3598                           
  3599                           ; BSR set to: 0
  3600  002A36  0100               	movlb	0	; () banked
  3601  002A38  90D8               	bcf	status,0,c
  3602  002A3A  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  3603  002A3C  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  3604  002A3E  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  3605  002A40  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  3606                           
  3607                           ; BSR set to: 0
  3608  002A42  0100               	movlb	0	; () banked
  3609  002A44  5184               	movf	___lldiv@divisor& (0+255),w,b
  3610  002A46  0100               	movlb	0	; () banked
  3611  002A48  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  3612  002A4A  0100               	movlb	0	; () banked
  3613  002A4C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3614  002A4E  0100               	movlb	0	; () banked
  3615  002A50  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  3616  002A52  0100               	movlb	0	; () banked
  3617  002A54  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3618  002A56  0100               	movlb	0	; () banked
  3619  002A58  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  3620  002A5A  0100               	movlb	0	; () banked
  3621  002A5C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3622  002A5E  0100               	movlb	0	; () banked
  3623  002A60  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  3624  002A62  A0D8               	btfss	status,0,c
  3625  002A64  D012               	goto	l4393
  3626                           
  3627                           ; BSR set to: 0
  3628  002A66  0100               	movlb	0	; () banked
  3629  002A68  5184               	movf	___lldiv@divisor& (0+255),w,b
  3630  002A6A  0100               	movlb	0	; () banked
  3631  002A6C  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  3632  002A6E  0100               	movlb	0	; () banked
  3633  002A70  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  3634  002A72  0100               	movlb	0	; () banked
  3635  002A74  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  3636  002A76  0100               	movlb	0	; () banked
  3637  002A78  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  3638  002A7A  0100               	movlb	0	; () banked
  3639  002A7C  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  3640  002A7E  0100               	movlb	0	; () banked
  3641  002A80  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  3642  002A82  0100               	movlb	0	; () banked
  3643  002A84  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  3644                           
  3645                           ; BSR set to: 0
  3646  002A86  0100               	movlb	0	; () banked
  3647  002A88  8188               	bsf	___lldiv@quotient& (0+255),0,b
  3648  002A8A                     l4393:
  3649                           
  3650                           ; BSR set to: 0
  3651  002A8A  0100               	movlb	0	; () banked
  3652  002A8C  90D8               	bcf	status,0,c
  3653  002A8E  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  3654  002A90  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  3655  002A92  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  3656  002A94  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  3657                           
  3658                           ; BSR set to: 0
  3659  002A96  0100               	movlb	0	; () banked
  3660  002A98  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  3661  002A9A  D7CD               	goto	l4385
  3662  002A9C                     l1027:
  3663                           
  3664                           ; BSR set to: 0
  3665  002A9C  C088  F080         	movff	___lldiv@quotient,?___lldiv
  3666  002AA0  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  3667  002AA4  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  3668  002AA8  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  3669                           
  3670                           ; BSR set to: 0
  3671  002AAC  0012               	return		;funcret
  3672  002AAE                     __end_of___lldiv:
  3673                           	opt stack 0
  3674                           tblptru	equ	0xFF8
  3675                           tblptrh	equ	0xFF7
  3676                           tblptrl	equ	0xFF6
  3677                           tablat	equ	0xFF5
  3678                           intcon	equ	0xFF2
  3679                           intcon2	equ	0xFF1
  3680                           postinc0	equ	0xFEE
  3681                           wreg	equ	0xFE8
  3682                           postdec1	equ	0xFE5
  3683                           fsr1l	equ	0xFE1
  3684                           status	equ	0xFD8
  3685                           
  3686 ;; *************** function _enterSelectedSubProgramFromMainProgram *****************
  3687 ;; Defined at:
  3688 ;;		line 422 in file "main.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;		None
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;		None
  3693 ;; Return value:  Size  Location     Type
  3694 ;;                  1    wreg      void 
  3695 ;; Registers used:
  3696 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 0/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3704 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3705 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3706 ;;Total ram usage:        2 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; Hardware stack levels required when called:   14
  3709 ;; This function calls:
  3710 ;;		_EEPROM
  3711 ;;		_displayMainProgramLcdScreen
  3712 ;;		_operation
  3713 ;;		_past_run_access
  3714 ;;		_pushBottle
  3715 ;; This function is called by:
  3716 ;;		_main
  3717 ;; This function uses a non-reentrant model
  3718 ;;
  3719                           
  3720                           	psect	text11
  3721  00338A                     __ptext11:
  3722                           	opt stack 0
  3723  00338A                     _enterSelectedSubProgramFromMainProgram:
  3724                           	opt stack 16
  3725                           
  3726                           ;main.c: 423: switch(currentMainProgramScreen){
  3727                           
  3728                           ; BSR set to: 0
  3729                           ;incstack = 0
  3730  00338A  D00C               	goto	l8731
  3731  00338C                     l8721:
  3732  00338C  EC1A  F006         	call	_operation	;wreg free
  3733                           
  3734                           ;main.c: 425: break;
  3735  003390  D020               	goto	l8733
  3736  003392                     l8723:
  3737  003392  EC7F  F01B         	call	_pushBottle	;wreg free
  3738                           
  3739                           ;main.c: 427: break;
  3740  003396  D01D               	goto	l8733
  3741  003398                     l8725:
  3742  003398  ECF7  F007         	call	_EEPROM	;wreg free
  3743                           
  3744                           ;main.c: 429: break;
  3745  00339C  D01A               	goto	l8733
  3746  00339E                     l8727:
  3747  00339E  EC70  F010         	call	_past_run_access	;wreg free
  3748                           
  3749                           ;main.c: 432: }
  3750                           
  3751                           ;main.c: 431: break;
  3752  0033A2  D017               	goto	l8733
  3753  0033A4                     l8731:
  3754  0033A4  C0EF  F0D6         	movff	_currentMainProgramScreen,??_enterSelectedSubProgramFromMainProgram
  3755  0033A8  C0F0  F0D7         	movff	_currentMainProgramScreen+1,??_enterSelectedSubProgramFromMainProgram+1
  3756                           
  3757                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3758                           ; Switch size 1, requested type "space"
  3759                           ; Number of cases is 1, Range of values is 0 to 0
  3760                           ; switch strategies available:
  3761                           ; Name         Instructions Cycles
  3762                           ; simple_byte            4     3 (average)
  3763                           ;	Chosen strategy is simple_byte
  3764  0033AC  0100               	movlb	0	; () banked
  3765  0033AE  51D7               	movf	(??_enterSelectedSubProgramFromMainProgram+1)& (0+255),w,b
  3766  0033B0  0A00               	xorlw	0	; case 0
  3767  0033B2  A4D8               	btfss	status,2,c
  3768  0033B4  D00E               	goto	l8733
  3769                           
  3770                           ; BSR set to: 0
  3771                           ; Switch size 1, requested type "space"
  3772                           ; Number of cases is 4, Range of values is 0 to 3
  3773                           ; switch strategies available:
  3774                           ; Name         Instructions Cycles
  3775                           ; simple_byte           13     7 (average)
  3776                           ;	Chosen strategy is simple_byte
  3777  0033B6  0100               	movlb	0	; () banked
  3778  0033B8  51D6               	movf	??_enterSelectedSubProgramFromMainProgram& (0+255),w,b
  3779  0033BA  0A00               	xorlw	0	; case 0
  3780  0033BC  B4D8               	btfsc	status,2,c
  3781  0033BE  D7E6               	goto	l8721
  3782  0033C0  0A01               	xorlw	1	; case 1
  3783  0033C2  B4D8               	btfsc	status,2,c
  3784  0033C4  D7E6               	goto	l8723
  3785  0033C6  0A03               	xorlw	3	; case 2
  3786  0033C8  B4D8               	btfsc	status,2,c
  3787  0033CA  D7E6               	goto	l8725
  3788  0033CC  0A01               	xorlw	1	; case 3
  3789  0033CE  B4D8               	btfsc	status,2,c
  3790  0033D0  D7E6               	goto	l8727
  3791  0033D2                     l8733:
  3792                           
  3793                           ;main.c: 433: displayMainProgramLcdScreen();
  3794  0033D2  EC5B  F016         	call	_displayMainProgramLcdScreen	;wreg free
  3795  0033D6  0012               	return		;funcret
  3796  0033D8                     __end_of_enterSelectedSubProgramFromMainProgram:
  3797                           	opt stack 0
  3798                           tblptru	equ	0xFF8
  3799                           tblptrh	equ	0xFF7
  3800                           tblptrl	equ	0xFF6
  3801                           tablat	equ	0xFF5
  3802                           intcon	equ	0xFF2
  3803                           intcon2	equ	0xFF1
  3804                           postinc0	equ	0xFEE
  3805                           wreg	equ	0xFE8
  3806                           postdec1	equ	0xFE5
  3807                           fsr1l	equ	0xFE1
  3808                           status	equ	0xFD8
  3809                           
  3810 ;; *************** function _pushBottle *****************
  3811 ;; Defined at:
  3812 ;;		line 860 in file "main.c"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;		None
  3815 ;; Auto vars:     Size  Location     Type
  3816 ;;		None
  3817 ;; Return value:  Size  Location     Type
  3818 ;;                  1    wreg      void 
  3819 ;; Registers used:
  3820 ;;		wreg, status,2, status,0, cstack
  3821 ;; Tracked objects:
  3822 ;;		On entry : 0/0
  3823 ;;		On exit  : 0/0
  3824 ;;		Unchanged: 0/0
  3825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3826 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3827 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3828 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3829 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3830 ;;Total ram usage:        2 bytes
  3831 ;; Hardware stack levels used:    1
  3832 ;; Hardware stack levels required when called:    7
  3833 ;; This function calls:
  3834 ;;		_extendSensorAreaArm
  3835 ;;		_retractSensorAreaArm
  3836 ;; This function is called by:
  3837 ;;		_enterSelectedSubProgramFromMainProgram
  3838 ;; This function uses a non-reentrant model
  3839 ;;
  3840                           
  3841                           	psect	text12
  3842  0036FE                     __ptext12:
  3843                           	opt stack 0
  3844  0036FE                     _pushBottle:
  3845                           	opt stack 22
  3846                           
  3847                           ;main.c: 861: retractSensorAreaArm();
  3848                           
  3849                           ;incstack = 0
  3850  0036FE  ECEA  F017         	call	_retractSensorAreaArm	;wreg free
  3851                           
  3852                           ;main.c: 862: _delay((unsigned long)((1000)*(8000000/4000.0)));
  3853  003702  0E0B               	movlw	11
  3854  003704  0100               	movlb	0	; () banked
  3855  003706  6F85               	movwf	(??_pushBottle+1)& (0+255),b
  3856  003708  0E26               	movlw	38
  3857  00370A  0100               	movlb	0	; () banked
  3858  00370C  6F84               	movwf	??_pushBottle& (0+255),b
  3859  00370E  0E5D               	movlw	93
  3860  003710                     u9527:
  3861  003710  2EE8               	decfsz	wreg,f,c
  3862  003712  D7FE               	bra	u9527
  3863  003714  2F84               	decfsz	??_pushBottle& (0+255),f,b
  3864  003716  D7FC               	bra	u9527
  3865  003718  2F85               	decfsz	(??_pushBottle+1)& (0+255),f,b
  3866  00371A  D7FA               	bra	u9527
  3867  00371C  D000               	nop2	
  3868                           
  3869                           ;main.c: 863: extendSensorAreaArm();
  3870  00371E  EC1E  F018         	call	_extendSensorAreaArm	;wreg free
  3871  003722  0012               	return		;funcret
  3872  003724                     __end_of_pushBottle:
  3873                           	opt stack 0
  3874                           tblptru	equ	0xFF8
  3875                           tblptrh	equ	0xFF7
  3876                           tblptrl	equ	0xFF6
  3877                           tablat	equ	0xFF5
  3878                           intcon	equ	0xFF2
  3879                           intcon2	equ	0xFF1
  3880                           postinc0	equ	0xFEE
  3881                           wreg	equ	0xFE8
  3882                           postdec1	equ	0xFE5
  3883                           fsr1l	equ	0xFE1
  3884                           status	equ	0xFD8
  3885                           
  3886 ;; *************** function _operation *****************
  3887 ;; Defined at:
  3888 ;;		line 703 in file "main.c"
  3889 ;; Parameters:    Size  Location     Type
  3890 ;;		None
  3891 ;; Auto vars:     Size  Location     Type
  3892 ;;  requiredBott    2   65[BANK0 ] int 
  3893 ;;  bottle          2   63[BANK0 ] int 
  3894 ;;  numberRotati    2   57[BANK0 ] int 
  3895 ;;  temp            1   56[BANK0 ] unsigned char 
  3896 ;;  i               2   67[BANK0 ] int 
  3897 ;;  bottle_cap      2   61[BANK0 ] int 
  3898 ;;  bottle_type     2   59[BANK0 ] int 
  3899 ;;  endingTime      2   54[BANK0 ] int 
  3900 ;;  startingTime    2   52[BANK0 ] int 
  3901 ;; Return value:  Size  Location     Type
  3902 ;;                  1    wreg      void 
  3903 ;; Registers used:
  3904 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3905 ;; Tracked objects:
  3906 ;;		On entry : 0/0
  3907 ;;		On exit  : 0/0
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3911 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3912 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3913 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;Total ram usage:       19 bytes
  3915 ;; Hardware stack levels used:    1
  3916 ;; Hardware stack levels required when called:   11
  3917 ;; This function calls:
  3918 ;;		_activateDCmotors
  3919 ;;		_capIsOnBottle
  3920 ;;		_disableDCmotors
  3921 ;;		_extendSensorAreaArm
  3922 ;;		_getCurrentTimeInSeconds
  3923 ;;		_getPressedKeypadKey
  3924 ;;		_lcdClear
  3925 ;;		_lcdInst
  3926 ;;		_moveBinServo
  3927 ;;		_printf
  3928 ;;		_retractSensorAreaArm
  3929 ;;		_saveEEPROM
  3930 ;;		_updateCurrentTime
  3931 ;; This function is called by:
  3932 ;;		_enterSelectedSubProgramFromMainProgram
  3933 ;; This function uses a non-reentrant model
  3934 ;;
  3935                           
  3936                           	psect	text13
  3937  000C34                     __ptext13:
  3938                           	opt stack 0
  3939  000C34                     _operation:
  3940                           	opt stack 18
  3941                           
  3942                           ;main.c: 704: activateDCmotors();
  3943                           
  3944                           ;incstack = 0
  3945  000C34  EC4F  F01C         	call	_activateDCmotors	;wreg free
  3946                           
  3947                           ;main.c: 706: int bottle_type = 0;
  3948  000C38  0E00               	movlw	0
  3949  000C3A  0100               	movlb	0	; () banked
  3950  000C3C  6FBC               	movwf	(operation@bottle_type+1)& (0+255),b
  3951  000C3E  0E00               	movlw	0
  3952  000C40  6FBB               	movwf	operation@bottle_type& (0+255),b
  3953                           
  3954                           ; BSR set to: 0
  3955                           ;main.c: 707: int bottle_cap = 0;
  3956  000C42  0E00               	movlw	0
  3957  000C44  0100               	movlb	0	; () banked
  3958  000C46  6FBE               	movwf	(operation@bottle_cap+1)& (0+255),b
  3959  000C48  0E00               	movlw	0
  3960  000C4A  6FBD               	movwf	operation@bottle_cap& (0+255),b
  3961                           
  3962                           ; BSR set to: 0
  3963                           ;main.c: 708: int i;
  3964                           ;main.c: 709: for (i=0;i<6;i++){
  3965  000C4C  0E00               	movlw	0
  3966  000C4E  0100               	movlb	0	; () banked
  3967  000C50  6FC4               	movwf	(operation@i+1)& (0+255),b
  3968  000C52  0E00               	movlw	0
  3969  000C54  6FC3               	movwf	operation@i& (0+255),b
  3970  000C56                     l8501:
  3971                           
  3972                           ; BSR set to: 0
  3973  000C56  0100               	movlb	0	; () banked
  3974  000C58  BFC4               	btfsc	(operation@i+1)& (0+255),7,b
  3975  000C5A  D008               	goto	l8505
  3976  000C5C  0100               	movlb	0	; () banked
  3977  000C5E  51C4               	movf	(operation@i+1)& (0+255),w,b
  3978  000C60  E118               	bnz	l8511
  3979  000C62  0E06               	movlw	6
  3980  000C64  0100               	movlb	0	; () banked
  3981  000C66  5DC3               	subwf	operation@i& (0+255),w,b
  3982  000C68  B0D8               	btfsc	status,0,c
  3983  000C6A  D013               	goto	l8511
  3984  000C6C                     l8505:
  3985                           
  3986                           ; BSR set to: 0
  3987                           ;main.c: 710: runInfo[i] = 0;
  3988  000C6C  90D8               	bcf	status,0,c
  3989  000C6E  0100               	movlb	0	; () banked
  3990  000C70  35C3               	rlcf	operation@i& (0+255),w,b
  3991  000C72  6ED9               	movwf	fsr2l,c
  3992  000C74  0100               	movlb	0	; () banked
  3993  000C76  35C4               	rlcf	(operation@i+1)& (0+255),w,b
  3994  000C78  6EDA               	movwf	fsr2h,c
  3995  000C7A  0EF1               	movlw	low _runInfo
  3996  000C7C  26D9               	addwf	fsr2l,f,c
  3997  000C7E  0E00               	movlw	high _runInfo
  3998  000C80  22DA               	addwfc	fsr2h,f,c
  3999  000C82  0E00               	movlw	0
  4000  000C84  6EDE               	movwf	postinc2,c
  4001  000C86  0E00               	movlw	0
  4002  000C88  6EDD               	movwf	postdec2,c
  4003                           
  4004                           ; BSR set to: 0
  4005  000C8A  0100               	movlb	0	; () banked
  4006  000C8C  4BC3               	infsnz	operation@i& (0+255),f,b
  4007  000C8E  2BC4               	incf	(operation@i+1)& (0+255),f,b
  4008  000C90  D7E2               	goto	l8501
  4009  000C92                     l8511:
  4010                           
  4011                           ; BSR set to: 0
  4012                           ;main.c: 711: }
  4013                           ;main.c: 712: lcdClear();
  4014  000C92  EC0B  F01B         	call	_lcdClear	;wreg free
  4015                           
  4016                           ;main.c: 713: printf("...Operating...");
  4017  000C96  0E27               	movlw	low STR_24
  4018  000C98  0100               	movlb	0	; () banked
  4019  000C9A  6F9E               	movwf	printf@f& (0+255),b
  4020  000C9C  0EFF               	movlw	high STR_24
  4021  000C9E  0100               	movlb	0	; () banked
  4022  000CA0  6F9F               	movwf	(printf@f+1)& (0+255),b
  4023  000CA2  ECEC  F019         	call	_printf	;wreg free
  4024                           
  4025                           ;main.c: 714: updateCurrentTime();
  4026  000CA6  ECAF  F017         	call	_updateCurrentTime	;wreg free
  4027                           
  4028                           ;main.c: 715: int startingTime = getCurrentTimeInSeconds();
  4029  000CAA  EC05  F011         	call	_getCurrentTimeInSeconds	;wreg free
  4030  000CAE  C0AA  F0B4         	movff	?_getCurrentTimeInSeconds,operation@startingTime
  4031  000CB2  C0AB  F0B5         	movff	?_getCurrentTimeInSeconds+1,operation@startingTime+1
  4032                           
  4033                           ;main.c: 717: lastSortedBottleTime = getCurrentTimeInSeconds();
  4034  000CB6  EC05  F011         	call	_getCurrentTimeInSeconds	;wreg free
  4035  000CBA  D11E               	goto	L1
  4036  000CBC                     l8519:
  4037                           
  4038                           ;main.c: 720: lcdInst(0b11000000);;
  4039  000CBC  0EC0               	movlw	192
  4040  000CBE  EC27  F01C         	call	_lcdInst
  4041  000CC2                     l339:
  4042  000CC2  A083               	btfss	3971,0,c	;volatile
  4043  000CC4  D7FE               	goto	l339
  4044                           
  4045                           ;main.c: 723: if (PORTDbits.RD0){
  4046  000CC6  A083               	btfss	3971,0,c	;volatile
  4047  000CC8  D11B               	goto	l8589
  4048                           
  4049                           ;main.c: 724: lcdInst(0b11000000);;
  4050  000CCA  0EC0               	movlw	192
  4051  000CCC  EC27  F01C         	call	_lcdInst
  4052                           
  4053                           ;main.c: 725: printf("??? INSIDE   ");
  4054  000CD0  0E76               	movlw	low STR_25
  4055  000CD2  0100               	movlb	0	; () banked
  4056  000CD4  6F9E               	movwf	printf@f& (0+255),b
  4057  000CD6  0EFF               	movlw	high STR_25
  4058  000CD8  0100               	movlb	0	; () banked
  4059  000CDA  6F9F               	movwf	(printf@f+1)& (0+255),b
  4060  000CDC  ECEC  F019         	call	_printf	;wreg free
  4061                           
  4062                           ;main.c: 726: _delay((unsigned long)((500)*(8000000/4000.0)));
  4063  000CE0  0E06               	movlw	6
  4064  000CE2  0100               	movlb	0	; () banked
  4065  000CE4  6FB3               	movwf	(??_operation+1)& (0+255),b
  4066  000CE6  0E13               	movlw	19
  4067  000CE8  0100               	movlb	0	; () banked
  4068  000CEA  6FB2               	movwf	??_operation& (0+255),b
  4069  000CEC  0EAD               	movlw	173
  4070  000CEE                     u9537:
  4071  000CEE  2EE8               	decfsz	wreg,f,c
  4072  000CF0  D7FE               	bra	u9537
  4073  000CF2  2FB2               	decfsz	??_operation& (0+255),f,b
  4074  000CF4  D7FC               	bra	u9537
  4075  000CF6  2FB3               	decfsz	(??_operation+1)& (0+255),f,b
  4076  000CF8  D7FA               	bra	u9537
  4077  000CFA  D000               	nop2	
  4078                           
  4079                           ;main.c: 727: retractSensorAreaArm();
  4080  000CFC  ECEA  F017         	call	_retractSensorAreaArm	;wreg free
  4081                           
  4082                           ;main.c: 728: _delay((unsigned long)((500)*(8000000/4000.0)));
  4083  000D00  0E06               	movlw	6
  4084  000D02  0100               	movlb	0	; () banked
  4085  000D04  6FB3               	movwf	(??_operation+1)& (0+255),b
  4086  000D06  0E13               	movlw	19
  4087  000D08  0100               	movlb	0	; () banked
  4088  000D0A  6FB2               	movwf	??_operation& (0+255),b
  4089  000D0C  0EAD               	movlw	173
  4090  000D0E                     u9547:
  4091  000D0E  2EE8               	decfsz	wreg,f,c
  4092  000D10  D7FE               	bra	u9547
  4093  000D12  2FB2               	decfsz	??_operation& (0+255),f,b
  4094  000D14  D7FC               	bra	u9547
  4095  000D16  2FB3               	decfsz	(??_operation+1)& (0+255),f,b
  4096  000D18  D7FA               	bra	u9547
  4097  000D1A  D000               	nop2	
  4098                           
  4099                           ;main.c: 729: if (PORTAbits.RA1 == 0){
  4100  000D1C  B280               	btfsc	3968,1,c	;volatile
  4101  000D1E  D015               	goto	l8541
  4102                           
  4103                           ;main.c: 730: lcdInst(0b11000000);;
  4104  000D20  0EC0               	movlw	192
  4105  000D22  EC27  F01C         	call	_lcdInst
  4106                           
  4107                           ;main.c: 731: printf("YOP");
  4108  000D26  0EFA               	movlw	low STR_26
  4109  000D28  0100               	movlb	0	; () banked
  4110  000D2A  6F9E               	movwf	printf@f& (0+255),b
  4111  000D2C  0EFF               	movlw	high STR_26
  4112  000D2E  0100               	movlb	0	; () banked
  4113  000D30  6F9F               	movwf	(printf@f+1)& (0+255),b
  4114  000D32  ECEC  F019         	call	_printf	;wreg free
  4115                           
  4116                           ;main.c: 732: currentBottle = 0;
  4117  000D36  0E00               	movlw	0
  4118  000D38  0100               	movlb	0	; () banked
  4119  000D3A  6FEA               	movwf	(_currentBottle+1)& (0+255),b
  4120  000D3C  0E00               	movlw	0
  4121  000D3E  6FE9               	movwf	_currentBottle& (0+255),b
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;main.c: 733: bottle_type = 0;
  4125  000D40  0E00               	movlw	0
  4126  000D42  0100               	movlb	0	; () banked
  4127  000D44  6FBC               	movwf	(operation@bottle_type+1)& (0+255),b
  4128  000D46  0E00               	movlw	0
  4129  000D48  D014               	goto	L2
  4130  000D4A                     l8541:
  4131                           
  4132                           ;main.c: 735: lcdInst(0b11000000);;
  4133  000D4A  0EC0               	movlw	192
  4134  000D4C  EC27  F01C         	call	_lcdInst
  4135                           
  4136                           ;main.c: 736: currentBottle = 1;
  4137  000D50  0E00               	movlw	0
  4138  000D52  0100               	movlb	0	; () banked
  4139  000D54  6FEA               	movwf	(_currentBottle+1)& (0+255),b
  4140  000D56  0E01               	movlw	1
  4141  000D58  6FE9               	movwf	_currentBottle& (0+255),b
  4142                           
  4143                           ; BSR set to: 0
  4144                           ;main.c: 737: printf("ESKA");
  4145  000D5A  0EF5               	movlw	low STR_27
  4146  000D5C  0100               	movlb	0	; () banked
  4147  000D5E  6F9E               	movwf	printf@f& (0+255),b
  4148  000D60  0EFF               	movlw	high STR_27
  4149  000D62  0100               	movlb	0	; () banked
  4150  000D64  6F9F               	movwf	(printf@f+1)& (0+255),b
  4151  000D66  ECEC  F019         	call	_printf	;wreg free
  4152                           
  4153                           ;main.c: 738: bottle_type = 1;
  4154  000D6A  0E00               	movlw	0
  4155  000D6C  0100               	movlb	0	; () banked
  4156  000D6E  6FBC               	movwf	(operation@bottle_type+1)& (0+255),b
  4157  000D70  0E01               	movlw	1
  4158  000D72                     L2:
  4159  000D72  6FBB               	movwf	operation@bottle_type& (0+255),b
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;main.c: 739: }
  4163                           ;main.c: 741: if (capIsOnBottle()){
  4164                           
  4165                           ; BSR set to: 0
  4166  000D74  EC57  F015         	call	_capIsOnBottle	;wreg free
  4167  000D78  0100               	movlb	0	; () banked
  4168  000D7A  51A6               	movf	?_capIsOnBottle& (0+255),w,b
  4169  000D7C  0100               	movlb	0	; () banked
  4170  000D7E  11A7               	iorwf	(?_capIsOnBottle+1)& (0+255),w,b
  4171  000D80  B4D8               	btfsc	status,2,c
  4172  000D82  D00D               	goto	l8555
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;main.c: 742: printf(" w/ Cap    ");
  4176  000D84  0ED6               	movlw	low STR_28
  4177  000D86  0100               	movlb	0	; () banked
  4178  000D88  6F9E               	movwf	printf@f& (0+255),b
  4179  000D8A  0EFF               	movlw	high STR_28
  4180  000D8C  0100               	movlb	0	; () banked
  4181  000D8E  6F9F               	movwf	(printf@f+1)& (0+255),b
  4182  000D90  ECEC  F019         	call	_printf	;wreg free
  4183                           
  4184                           ;main.c: 743: bottle_cap = 0;
  4185  000D94  0E00               	movlw	0
  4186  000D96  0100               	movlb	0	; () banked
  4187  000D98  6FBE               	movwf	(operation@bottle_cap+1)& (0+255),b
  4188  000D9A  0E00               	movlw	0
  4189  000D9C  D00C               	goto	L3
  4190  000D9E                     l8555:
  4191                           
  4192                           ; BSR set to: 0
  4193                           ;main.c: 745: printf(" w/o Cap    ");
  4194  000D9E  0EBC               	movlw	low STR_29
  4195  000DA0  0100               	movlb	0	; () banked
  4196  000DA2  6F9E               	movwf	printf@f& (0+255),b
  4197  000DA4  0EFF               	movlw	high STR_29
  4198  000DA6  0100               	movlb	0	; () banked
  4199  000DA8  6F9F               	movwf	(printf@f+1)& (0+255),b
  4200  000DAA  ECEC  F019         	call	_printf	;wreg free
  4201                           
  4202                           ;main.c: 746: bottle_cap = 1;
  4203  000DAE  0E00               	movlw	0
  4204  000DB0  0100               	movlb	0	; () banked
  4205  000DB2  6FBE               	movwf	(operation@bottle_cap+1)& (0+255),b
  4206  000DB4  0E01               	movlw	1
  4207  000DB6                     L3:
  4208  000DB6  6FBD               	movwf	operation@bottle_cap& (0+255),b
  4209                           
  4210                           ; BSR set to: 0
  4211                           ;main.c: 747: }
  4212                           ;main.c: 748: runInfo[1] += 1;
  4213                           
  4214                           ; BSR set to: 0
  4215  000DB8  0100               	movlb	0	; () banked
  4216  000DBA  4BF3               	infsnz	(_runInfo+2)& (0+255),f,b
  4217  000DBC  2BF4               	incf	(_runInfo+3)& (0+255),f,b
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;main.c: 749: int bottle = bottle_type*2 + bottle_cap + 2;
  4221  000DBE  C0BB  F0B2         	movff	operation@bottle_type,??_operation
  4222  000DC2  C0BC  F0B3         	movff	operation@bottle_type+1,??_operation+1
  4223  000DC6  90D8               	bcf	status,0,c
  4224  000DC8  0100               	movlb	0	; () banked
  4225  000DCA  37B2               	rlcf	??_operation& (0+255),f,b
  4226  000DCC  37B3               	rlcf	(??_operation+1)& (0+255),f,b
  4227  000DCE  0100               	movlb	0	; () banked
  4228  000DD0  51BD               	movf	operation@bottle_cap& (0+255),w,b
  4229  000DD2  0100               	movlb	0	; () banked
  4230  000DD4  27B2               	addwf	??_operation& (0+255),f,b
  4231  000DD6  0100               	movlb	0	; () banked
  4232  000DD8  51BE               	movf	(operation@bottle_cap+1)& (0+255),w,b
  4233  000DDA  0100               	movlb	0	; () banked
  4234  000DDC  23B3               	addwfc	(??_operation+1)& (0+255),f,b
  4235  000DDE  0E02               	movlw	2
  4236  000DE0  0100               	movlb	0	; () banked
  4237  000DE2  25B2               	addwf	??_operation& (0+255),w,b
  4238  000DE4  0100               	movlb	0	; () banked
  4239  000DE6  6FBF               	movwf	operation@bottle& (0+255),b
  4240  000DE8  0E00               	movlw	0
  4241  000DEA  0100               	movlb	0	; () banked
  4242  000DEC  21B3               	addwfc	(??_operation+1)& (0+255),w,b
  4243  000DEE  0100               	movlb	0	; () banked
  4244  000DF0  6FC0               	movwf	(operation@bottle+1)& (0+255),b
  4245                           
  4246                           ; BSR set to: 0
  4247                           ;main.c: 750: runInfo[bottle] += 1;
  4248  000DF2  90D8               	bcf	status,0,c
  4249  000DF4  0100               	movlb	0	; () banked
  4250  000DF6  35BF               	rlcf	operation@bottle& (0+255),w,b
  4251  000DF8  6ED9               	movwf	fsr2l,c
  4252  000DFA  0100               	movlb	0	; () banked
  4253  000DFC  35C0               	rlcf	(operation@bottle+1)& (0+255),w,b
  4254  000DFE  6EDA               	movwf	fsr2h,c
  4255  000E00  0EF1               	movlw	low _runInfo
  4256  000E02  26D9               	addwf	fsr2l,f,c
  4257  000E04  0E00               	movlw	high _runInfo
  4258  000E06  22DA               	addwfc	fsr2h,f,c
  4259  000E08  2ADE               	incf	postinc2,f,c
  4260  000E0A  0E00               	movlw	0
  4261  000E0C  22DD               	addwfc	postdec2,f,c
  4262                           
  4263                           ; BSR set to: 0
  4264                           ;main.c: 753: _delay((unsigned long)((1000)*(8000000/4000.0)));
  4265  000E0E  0E0B               	movlw	11
  4266  000E10  0100               	movlb	0	; () banked
  4267  000E12  6FB3               	movwf	(??_operation+1)& (0+255),b
  4268  000E14  0E26               	movlw	38
  4269  000E16  0100               	movlb	0	; () banked
  4270  000E18  6FB2               	movwf	??_operation& (0+255),b
  4271  000E1A  0E5D               	movlw	93
  4272  000E1C                     u9557:
  4273  000E1C  2EE8               	decfsz	wreg,f,c
  4274  000E1E  D7FE               	bra	u9557
  4275  000E20  2FB2               	decfsz	??_operation& (0+255),f,b
  4276  000E22  D7FC               	bra	u9557
  4277  000E24  2FB3               	decfsz	(??_operation+1)& (0+255),f,b
  4278  000E26  D7FA               	bra	u9557
  4279  000E28  D000               	nop2	
  4280                           
  4281                           ;main.c: 755: int requiredBottleBin = bottle - 2;
  4282  000E2A  0EFE               	movlw	254
  4283  000E2C  0100               	movlb	0	; () banked
  4284  000E2E  25BF               	addwf	operation@bottle& (0+255),w,b
  4285  000E30  0100               	movlb	0	; () banked
  4286  000E32  6FC1               	movwf	operation@requiredBottleBin& (0+255),b
  4287  000E34  0EFF               	movlw	255
  4288  000E36  0100               	movlb	0	; () banked
  4289  000E38  21C0               	addwfc	(operation@bottle+1)& (0+255),w,b
  4290  000E3A  0100               	movlb	0	; () banked
  4291  000E3C  6FC2               	movwf	(operation@requiredBottleBin+1)& (0+255),b
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;main.c: 756: int numberRotationsNeeded;
  4295                           ;main.c: 757: if (requiredBottleBin >= currentBottleBin){
  4296  000E3E  0100               	movlb	0	; () banked
  4297  000E40  51EB               	movf	_currentBottleBin& (0+255),w,b
  4298  000E42  0100               	movlb	0	; () banked
  4299  000E44  5DC1               	subwf	operation@requiredBottleBin& (0+255),w,b
  4300  000E46  0100               	movlb	0	; () banked
  4301  000E48  51C2               	movf	(operation@requiredBottleBin+1)& (0+255),w,b
  4302  000E4A  0A80               	xorlw	128
  4303  000E4C  0100               	movlb	0	; () banked
  4304  000E4E  6FB2               	movwf	??_operation& (0+255),b
  4305  000E50  0100               	movlb	0	; () banked
  4306  000E52  51EC               	movf	(_currentBottleBin+1)& (0+255),w,b
  4307  000E54  0A80               	xorlw	128
  4308  000E56  0100               	movlb	0	; () banked
  4309  000E58  59B2               	subwfb	??_operation& (0+255),w,b
  4310  000E5A  A0D8               	btfss	status,0,c
  4311  000E5C  D012               	goto	l8573
  4312                           
  4313                           ; BSR set to: 0
  4314                           ;main.c: 758: numberRotationsNeeded = requiredBottleBin - currentBottleBin;
  4315  000E5E  C0EB  F0B2         	movff	_currentBottleBin,??_operation
  4316  000E62  C0EC  F0B3         	movff	_currentBottleBin+1,??_operation+1
  4317  000E66  0100               	movlb	0	; () banked
  4318  000E68  1FB2               	comf	??_operation& (0+255),f,b
  4319  000E6A  1FB3               	comf	(??_operation+1)& (0+255),f,b
  4320  000E6C  4BB2               	infsnz	??_operation& (0+255),f,b
  4321  000E6E  2BB3               	incf	(??_operation+1)& (0+255),f,b
  4322  000E70  0100               	movlb	0	; () banked
  4323  000E72  51C1               	movf	operation@requiredBottleBin& (0+255),w,b
  4324  000E74  0100               	movlb	0	; () banked
  4325  000E76  25B2               	addwf	??_operation& (0+255),w,b
  4326  000E78  0100               	movlb	0	; () banked
  4327  000E7A  6FB9               	movwf	operation@numberRotationsNeeded& (0+255),b
  4328  000E7C  0100               	movlb	0	; () banked
  4329  000E7E  51C2               	movf	(operation@requiredBottleBin+1)& (0+255),w,b
  4330  000E80  D027               	goto	L4
  4331  000E82                     l8573:
  4332                           
  4333                           ; BSR set to: 0
  4334  000E82  0100               	movlb	0	; () banked
  4335  000E84  51EB               	movf	_currentBottleBin& (0+255),w,b
  4336  000E86  0100               	movlb	0	; () banked
  4337  000E88  5DC1               	subwf	operation@requiredBottleBin& (0+255),w,b
  4338  000E8A  0100               	movlb	0	; () banked
  4339  000E8C  51C2               	movf	(operation@requiredBottleBin+1)& (0+255),w,b
  4340  000E8E  0A80               	xorlw	128
  4341  000E90  0100               	movlb	0	; () banked
  4342  000E92  6FB2               	movwf	??_operation& (0+255),b
  4343  000E94  0100               	movlb	0	; () banked
  4344  000E96  51EC               	movf	(_currentBottleBin+1)& (0+255),w,b
  4345  000E98  0A80               	xorlw	128
  4346  000E9A  0100               	movlb	0	; () banked
  4347  000E9C  59B2               	subwfb	??_operation& (0+255),w,b
  4348  000E9E  B0D8               	btfsc	status,0,c
  4349  000EA0  D01B               	goto	l8577
  4350                           
  4351                           ; BSR set to: 0
  4352                           ;main.c: 760: numberRotationsNeeded = requiredBottleBin - currentBottleBin + 4;
  4353  000EA2  C0EB  F0B2         	movff	_currentBottleBin,??_operation
  4354  000EA6  C0EC  F0B3         	movff	_currentBottleBin+1,??_operation+1
  4355  000EAA  0100               	movlb	0	; () banked
  4356  000EAC  1FB2               	comf	??_operation& (0+255),f,b
  4357  000EAE  1FB3               	comf	(??_operation+1)& (0+255),f,b
  4358  000EB0  4BB2               	infsnz	??_operation& (0+255),f,b
  4359  000EB2  2BB3               	incf	(??_operation+1)& (0+255),f,b
  4360  000EB4  0100               	movlb	0	; () banked
  4361  000EB6  51C1               	movf	operation@requiredBottleBin& (0+255),w,b
  4362  000EB8  0100               	movlb	0	; () banked
  4363  000EBA  27B2               	addwf	??_operation& (0+255),f,b
  4364  000EBC  0100               	movlb	0	; () banked
  4365  000EBE  51C2               	movf	(operation@requiredBottleBin+1)& (0+255),w,b
  4366  000EC0  0100               	movlb	0	; () banked
  4367  000EC2  23B3               	addwfc	(??_operation+1)& (0+255),f,b
  4368  000EC4  0E04               	movlw	4
  4369  000EC6  0100               	movlb	0	; () banked
  4370  000EC8  25B2               	addwf	??_operation& (0+255),w,b
  4371  000ECA  0100               	movlb	0	; () banked
  4372  000ECC  6FB9               	movwf	operation@numberRotationsNeeded& (0+255),b
  4373  000ECE  0E00               	movlw	0
  4374  000ED0                     L4:
  4375  000ED0  0100               	movlb	0	; () banked
  4376  000ED2  21B3               	addwfc	(??_operation+1)& (0+255),w,b
  4377  000ED4  0100               	movlb	0	; () banked
  4378  000ED6  6FBA               	movwf	(operation@numberRotationsNeeded+1)& (0+255),b
  4379  000ED8                     l8577:
  4380                           
  4381                           ; BSR set to: 0
  4382                           ;main.c: 761: }
  4383                           ;main.c: 762: moveBinServo(numberRotationsNeeded);
  4384  000ED8  C0B9  F080         	movff	operation@numberRotationsNeeded,moveBinServo@num90Rotations
  4385  000EDC  C0BA  F081         	movff	operation@numberRotationsNeeded+1,moveBinServo@num90Rotations+1
  4386  000EE0  ECA9  F016         	call	_moveBinServo	;wreg free
  4387                           
  4388                           ;main.c: 763: currentBottleBin = requiredBottleBin;
  4389  000EE4  C0C1  F0EB         	movff	operation@requiredBottleBin,_currentBottleBin
  4390  000EE8  C0C2  F0EC         	movff	operation@requiredBottleBin+1,_currentBottleBin+1
  4391                           
  4392                           ;main.c: 764: (INTCONbits.GIE = 0);
  4393  000EEC  9EF2               	bcf	intcon,7,c	;volatile
  4394                           
  4395                           ;main.c: 765: extendSensorAreaArm();
  4396  000EEE  EC1E  F018         	call	_extendSensorAreaArm	;wreg free
  4397                           
  4398                           ;main.c: 766: (INTCONbits.GIE = 1);
  4399  000EF2  8EF2               	bsf	intcon,7,c	;volatile
  4400                           
  4401                           ;main.c: 768: lastSortedBottleTime = getCurrentTimeInSeconds();
  4402  000EF4  EC05  F011         	call	_getCurrentTimeInSeconds	;wreg free
  4403  000EF8                     L1:
  4404  000EF8  C0AA  F0ED         	movff	?_getCurrentTimeInSeconds,_lastSortedBottleTime
  4405  000EFC  C0AB  F0EE         	movff	?_getCurrentTimeInSeconds+1,_lastSortedBottleTime+1
  4406  000F00                     l8589:
  4407  000F00  0100               	movlb	0	; () banked
  4408  000F02  BFF4               	btfsc	(_runInfo+3)& (0+255),7,b
  4409  000F04  D6DB               	goto	l8519
  4410  000F06  0100               	movlb	0	; () banked
  4411  000F08  51F4               	movf	(_runInfo+3)& (0+255),w,b
  4412  000F0A  E105               	bnz	l8591
  4413  000F0C  0E0A               	movlw	10
  4414  000F0E  0100               	movlb	0	; () banked
  4415  000F10  5DF3               	subwf	(_runInfo+2)& (0+255),w,b
  4416  000F12  A0D8               	btfss	status,0,c
  4417  000F14  D6D3               	goto	l8519
  4418  000F16                     l8591:
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;main.c: 769: }
  4422                           ;main.c: 770: }
  4423                           ;main.c: 771: disableDCmotors();
  4424  000F16  EC4B  F01C         	call	_disableDCmotors	;wreg free
  4425                           
  4426                           ;main.c: 772: lcdClear();
  4427  000F1A  EC0B  F01B         	call	_lcdClear	;wreg free
  4428                           
  4429                           ;main.c: 773: printf("COMPLETED!!!     ");
  4430  000F1E  0E5C               	movlw	low STR_30
  4431  000F20  0100               	movlb	0	; () banked
  4432  000F22  6F9E               	movwf	printf@f& (0+255),b
  4433  000F24  0EFE               	movlw	high STR_30
  4434  000F26  0100               	movlb	0	; () banked
  4435  000F28  6F9F               	movwf	(printf@f+1)& (0+255),b
  4436  000F2A  ECEC  F019         	call	_printf	;wreg free
  4437                           
  4438                           ;main.c: 774: lcdInst(0b11000000);;
  4439  000F2E  0EC0               	movlw	192
  4440  000F30  EC27  F01C         	call	_lcdInst
  4441                           
  4442                           ;main.c: 775: printf("A to back       ");
  4443  000F34  0EA2               	movlw	low STR_31
  4444  000F36  0100               	movlb	0	; () banked
  4445  000F38  6F9E               	movwf	printf@f& (0+255),b
  4446  000F3A  0EFE               	movlw	high STR_31
  4447  000F3C  0100               	movlb	0	; () banked
  4448  000F3E  6F9F               	movwf	(printf@f+1)& (0+255),b
  4449  000F40  ECEC  F019         	call	_printf	;wreg free
  4450                           
  4451                           ;main.c: 776: updateCurrentTime();
  4452  000F44  ECAF  F017         	call	_updateCurrentTime	;wreg free
  4453                           
  4454                           ;main.c: 777: int endingTime = getCurrentTimeInSeconds();
  4455  000F48  EC05  F011         	call	_getCurrentTimeInSeconds	;wreg free
  4456  000F4C  C0AA  F0B6         	movff	?_getCurrentTimeInSeconds,operation@endingTime
  4457  000F50  C0AB  F0B7         	movff	?_getCurrentTimeInSeconds+1,operation@endingTime+1
  4458                           
  4459                           ;main.c: 778: runInfo[0] = endingTime - startingTime;
  4460  000F54  C0B4  F0B2         	movff	operation@startingTime,??_operation
  4461  000F58  C0B5  F0B3         	movff	operation@startingTime+1,??_operation+1
  4462  000F5C  0100               	movlb	0	; () banked
  4463  000F5E  1FB2               	comf	??_operation& (0+255),f,b
  4464  000F60  1FB3               	comf	(??_operation+1)& (0+255),f,b
  4465  000F62  4BB2               	infsnz	??_operation& (0+255),f,b
  4466  000F64  2BB3               	incf	(??_operation+1)& (0+255),f,b
  4467  000F66  0100               	movlb	0	; () banked
  4468  000F68  51B6               	movf	operation@endingTime& (0+255),w,b
  4469  000F6A  0100               	movlb	0	; () banked
  4470  000F6C  25B2               	addwf	??_operation& (0+255),w,b
  4471  000F6E  0100               	movlb	0	; () banked
  4472  000F70  6FF1               	movwf	_runInfo& (0+255),b
  4473  000F72  0100               	movlb	0	; () banked
  4474  000F74  51B7               	movf	(operation@endingTime+1)& (0+255),w,b
  4475  000F76  0100               	movlb	0	; () banked
  4476  000F78  21B3               	addwfc	(??_operation+1)& (0+255),w,b
  4477  000F7A  0100               	movlb	0	; () banked
  4478  000F7C  6FF2               	movwf	(_runInfo+1)& (0+255),b
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;main.c: 779: for (i = 0; i<7;i++){
  4482  000F7E  0E00               	movlw	0
  4483  000F80  0100               	movlb	0	; () banked
  4484  000F82  6FC4               	movwf	(operation@i+1)& (0+255),b
  4485  000F84  0E00               	movlw	0
  4486  000F86  6FC3               	movwf	operation@i& (0+255),b
  4487  000F88                     l8609:
  4488                           
  4489                           ; BSR set to: 0
  4490  000F88  0100               	movlb	0	; () banked
  4491  000F8A  BFC4               	btfsc	(operation@i+1)& (0+255),7,b
  4492  000F8C  D008               	goto	l8613
  4493  000F8E  0100               	movlb	0	; () banked
  4494  000F90  51C4               	movf	(operation@i+1)& (0+255),w,b
  4495  000F92  E11B               	bnz	l8619
  4496  000F94  0E07               	movlw	7
  4497  000F96  0100               	movlb	0	; () banked
  4498  000F98  5DC3               	subwf	operation@i& (0+255),w,b
  4499  000F9A  B0D8               	btfsc	status,0,c
  4500  000F9C  D016               	goto	l8619
  4501  000F9E                     l8613:
  4502                           
  4503                           ; BSR set to: 0
  4504                           ;main.c: 780: lastRunTime[i] = time[i];
  4505  000F9E  0EE2               	movlw	low _time
  4506  000FA0  0100               	movlb	0	; () banked
  4507  000FA2  25C3               	addwf	operation@i& (0+255),w,b
  4508  000FA4  6ED9               	movwf	fsr2l,c
  4509  000FA6  0E00               	movlw	high _time
  4510  000FA8  0100               	movlb	0	; () banked
  4511  000FAA  21C4               	addwfc	(operation@i+1)& (0+255),w,b
  4512  000FAC  6EDA               	movwf	fsr2h,c
  4513  000FAE  0EDB               	movlw	low _lastRunTime
  4514  000FB0  0100               	movlb	0	; () banked
  4515  000FB2  25C3               	addwf	operation@i& (0+255),w,b
  4516  000FB4  6EE1               	movwf	fsr1l,c
  4517  000FB6  0E00               	movlw	high _lastRunTime
  4518  000FB8  0100               	movlb	0	; () banked
  4519  000FBA  21C4               	addwfc	(operation@i+1)& (0+255),w,b
  4520  000FBC  6EE2               	movwf	fsr1h,c
  4521  000FBE  CFDF FFE7          	movff	indf2,indf1
  4522                           
  4523                           ; BSR set to: 0
  4524  000FC2  0100               	movlb	0	; () banked
  4525  000FC4  4BC3               	infsnz	operation@i& (0+255),f,b
  4526  000FC6  2BC4               	incf	(operation@i+1)& (0+255),f,b
  4527  000FC8  D7DF               	goto	l8609
  4528  000FCA                     l8619:
  4529                           
  4530                           ; BSR set to: 0
  4531                           ;main.c: 781: }
  4532                           ;main.c: 782: saveEEPROM();
  4533  000FCA  EC73  F009         	call	_saveEEPROM	;wreg free
  4534  000FCE                     l8621:
  4535                           
  4536                           ;main.c: 784: unsigned char temp = getPressedKeypadKey();
  4537  000FCE  EC25  F01B         	call	_getPressedKeypadKey	;wreg free
  4538  000FD2  0100               	movlb	0	; () banked
  4539  000FD4  6FB8               	movwf	operation@temp& (0+255),b
  4540                           
  4541                           ; BSR set to: 0
  4542                           ;main.c: 785: if (temp == keys[3]){
  4543  000FD6  0E34               	movlw	low (_keys+3)
  4544  000FD8  6EF6               	movwf	tblptrl,c
  4545  000FDA  0EFE               	movlw	high (_keys+3)
  4546  000FDC  6EF7               	movwf	tblptrh,c
  4547  000FDE                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4548  000FDE  6AF8               	clrf	tblptru,c
  4549  000FE0                     	endif
  4550  000FE0                     	if	0	;tblptru may be non-zero
  4551  000FE0                     	endif
  4552  000FE0  0008               	tblrd		*
  4553  000FE2  50F5               	movf	tablat,w,c
  4554  000FE4  0100               	movlb	0	; () banked
  4555  000FE6  19B8               	xorwf	operation@temp& (0+255),w,b
  4556  000FE8  B4D8               	btfsc	status,2,c
  4557  000FEA  0012               	return	
  4558  000FEC  D7F0               	goto	l8621
  4559  000FEE                     __end_of_operation:
  4560                           	opt stack 0
  4561                           tblptru	equ	0xFF8
  4562                           tblptrh	equ	0xFF7
  4563                           tblptrl	equ	0xFF6
  4564                           tablat	equ	0xFF5
  4565                           intcon	equ	0xFF2
  4566                           intcon2	equ	0xFF1
  4567                           postinc0	equ	0xFEE
  4568                           wreg	equ	0xFE8
  4569                           indf1	equ	0xFE7
  4570                           postdec1	equ	0xFE5
  4571                           fsr1h	equ	0xFE2
  4572                           fsr1l	equ	0xFE1
  4573                           indf2	equ	0xFDF
  4574                           postinc2	equ	0xFDE
  4575                           postdec2	equ	0xFDD
  4576                           fsr2h	equ	0xFDA
  4577                           fsr2l	equ	0xFD9
  4578                           status	equ	0xFD8
  4579                           
  4580 ;; *************** function _saveEEPROM *****************
  4581 ;; Defined at:
  4582 ;;		line 917 in file "main.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;		None
  4585 ;; Auto vars:     Size  Location     Type
  4586 ;;  i               2   12[BANK0 ] int 
  4587 ;;  temp            2   10[BANK0 ] int 
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  1    wreg      void 
  4590 ;; Registers used:
  4591 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4600 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;Total ram usage:        5 bytes
  4602 ;; Hardware stack levels used:    1
  4603 ;; Hardware stack levels required when called:    7
  4604 ;; This function calls:
  4605 ;;		_Eeprom_ReadByte
  4606 ;;		_Eeprom_WriteByte
  4607 ;;		___wmul
  4608 ;; This function is called by:
  4609 ;;		_operation
  4610 ;; This function uses a non-reentrant model
  4611 ;;
  4612                           
  4613                           	psect	text14
  4614  0012E6                     __ptext14:
  4615                           	opt stack 0
  4616  0012E6                     _saveEEPROM:
  4617                           	opt stack 21
  4618                           
  4619                           ;main.c: 918: int i;
  4620                           ;main.c: 919: int temp;
  4621                           ;main.c: 920: for (i = 0; i<13; i++){
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;incstack = 0
  4625  0012E6  0E00               	movlw	0
  4626  0012E8  0100               	movlb	0	; () banked
  4627  0012EA  6F8D               	movwf	(saveEEPROM@i+1)& (0+255),b
  4628  0012EC  0E00               	movlw	0
  4629  0012EE  6F8C               	movwf	saveEEPROM@i& (0+255),b
  4630  0012F0                     l4153:
  4631                           
  4632                           ; BSR set to: 0
  4633  0012F0  0100               	movlb	0	; () banked
  4634  0012F2  BF8D               	btfsc	(saveEEPROM@i+1)& (0+255),7,b
  4635  0012F4  D008               	goto	l4157
  4636  0012F6  0100               	movlb	0	; () banked
  4637  0012F8  518D               	movf	(saveEEPROM@i+1)& (0+255),w,b
  4638  0012FA  E140               	bnz	l4163
  4639  0012FC  0E0D               	movlw	13
  4640  0012FE  0100               	movlb	0	; () banked
  4641  001300  5D8C               	subwf	saveEEPROM@i& (0+255),w,b
  4642  001302  B0D8               	btfsc	status,0,c
  4643  001304  D03B               	goto	l4163
  4644  001306                     l4157:
  4645                           
  4646                           ; BSR set to: 0
  4647                           ;main.c: 921: temp = Eeprom_ReadByte(12*i+2*200);
  4648  001306  C08C  F080         	movff	saveEEPROM@i,___wmul@multiplier
  4649  00130A  C08D  F081         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  4650  00130E  0E00               	movlw	0
  4651  001310  0100               	movlb	0	; () banked
  4652  001312  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4653  001314  0E0C               	movlw	12
  4654  001316  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4655  001318  ECD5  F01A         	call	___wmul	;wreg free
  4656  00131C  0E90               	movlw	144
  4657  00131E  0100               	movlb	0	; () banked
  4658  001320  2580               	addwf	?___wmul& (0+255),w,b
  4659  001322  0100               	movlb	0	; () banked
  4660  001324  6F86               	movwf	Eeprom_ReadByte@address& (0+255),b
  4661  001326  0E01               	movlw	1
  4662  001328  0100               	movlb	0	; () banked
  4663  00132A  2181               	addwfc	(?___wmul+1)& (0+255),w,b
  4664  00132C  0100               	movlb	0	; () banked
  4665  00132E  6F87               	movwf	(Eeprom_ReadByte@address+1)& (0+255),b
  4666  001330  ECE9  F01B         	call	_Eeprom_ReadByte	;wreg free
  4667  001334  0100               	movlb	0	; () banked
  4668  001336  6F89               	movwf	??_saveEEPROM& (0+255),b
  4669  001338  0100               	movlb	0	; () banked
  4670  00133A  5189               	movf	??_saveEEPROM& (0+255),w,b
  4671  00133C  0100               	movlb	0	; () banked
  4672  00133E  6F8A               	movwf	saveEEPROM@temp& (0+255),b
  4673  001340  6B8B               	clrf	(saveEEPROM@temp+1)& (0+255),b
  4674                           
  4675                           ;main.c: 922: Eeprom_WriteByte(12*i+3*200,temp);
  4676  001342  C08C  F080         	movff	saveEEPROM@i,___wmul@multiplier
  4677  001346  C08D  F081         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  4678  00134A  0E00               	movlw	0
  4679  00134C  0100               	movlb	0	; () banked
  4680  00134E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4681  001350  0E0C               	movlw	12
  4682  001352  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4683  001354  ECD5  F01A         	call	___wmul	;wreg free
  4684  001358  0E58               	movlw	88
  4685  00135A  0100               	movlb	0	; () banked
  4686  00135C  2580               	addwf	?___wmul& (0+255),w,b
  4687  00135E  0100               	movlb	0	; () banked
  4688  001360  6F86               	movwf	Eeprom_WriteByte@address& (0+255),b
  4689  001362  0E02               	movlw	2
  4690  001364  0100               	movlb	0	; () banked
  4691  001366  2181               	addwfc	(?___wmul+1)& (0+255),w,b
  4692  001368  0100               	movlb	0	; () banked
  4693  00136A  6F87               	movwf	(Eeprom_WriteByte@address+1)& (0+255),b
  4694  00136C  C08A  F088         	movff	saveEEPROM@temp,Eeprom_WriteByte@data
  4695  001370  EC6B  F01B         	call	_Eeprom_WriteByte	;wreg free
  4696  001374  0100               	movlb	0	; () banked
  4697  001376  4B8C               	infsnz	saveEEPROM@i& (0+255),f,b
  4698  001378  2B8D               	incf	(saveEEPROM@i+1)& (0+255),f,b
  4699  00137A  D7BA               	goto	l4153
  4700  00137C                     l4163:
  4701                           
  4702                           ; BSR set to: 0
  4703                           ;main.c: 923: }
  4704                           ;main.c: 924: for (i = 0; i<13; i++){
  4705  00137C  0E00               	movlw	0
  4706  00137E  0100               	movlb	0	; () banked
  4707  001380  6F8D               	movwf	(saveEEPROM@i+1)& (0+255),b
  4708  001382  0E00               	movlw	0
  4709  001384  6F8C               	movwf	saveEEPROM@i& (0+255),b
  4710  001386                     l4165:
  4711                           
  4712                           ; BSR set to: 0
  4713  001386  0100               	movlb	0	; () banked
  4714  001388  BF8D               	btfsc	(saveEEPROM@i+1)& (0+255),7,b
  4715  00138A  D008               	goto	l4169
  4716  00138C  0100               	movlb	0	; () banked
  4717  00138E  518D               	movf	(saveEEPROM@i+1)& (0+255),w,b
  4718  001390  E140               	bnz	l4175
  4719  001392  0E0D               	movlw	13
  4720  001394  0100               	movlb	0	; () banked
  4721  001396  5D8C               	subwf	saveEEPROM@i& (0+255),w,b
  4722  001398  B0D8               	btfsc	status,0,c
  4723  00139A  D03B               	goto	l4175
  4724  00139C                     l4169:
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;main.c: 925: temp = Eeprom_ReadByte(12*i+1*200);
  4728  00139C  C08C  F080         	movff	saveEEPROM@i,___wmul@multiplier
  4729  0013A0  C08D  F081         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  4730  0013A4  0E00               	movlw	0
  4731  0013A6  0100               	movlb	0	; () banked
  4732  0013A8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4733  0013AA  0E0C               	movlw	12
  4734  0013AC  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4735  0013AE  ECD5  F01A         	call	___wmul	;wreg free
  4736  0013B2  0EC8               	movlw	200
  4737  0013B4  0100               	movlb	0	; () banked
  4738  0013B6  2580               	addwf	?___wmul& (0+255),w,b
  4739  0013B8  0100               	movlb	0	; () banked
  4740  0013BA  6F86               	movwf	Eeprom_ReadByte@address& (0+255),b
  4741  0013BC  0E00               	movlw	0
  4742  0013BE  0100               	movlb	0	; () banked
  4743  0013C0  2181               	addwfc	(?___wmul+1)& (0+255),w,b
  4744  0013C2  0100               	movlb	0	; () banked
  4745  0013C4  6F87               	movwf	(Eeprom_ReadByte@address+1)& (0+255),b
  4746  0013C6  ECE9  F01B         	call	_Eeprom_ReadByte	;wreg free
  4747  0013CA  0100               	movlb	0	; () banked
  4748  0013CC  6F89               	movwf	??_saveEEPROM& (0+255),b
  4749  0013CE  0100               	movlb	0	; () banked
  4750  0013D0  5189               	movf	??_saveEEPROM& (0+255),w,b
  4751  0013D2  0100               	movlb	0	; () banked
  4752  0013D4  6F8A               	movwf	saveEEPROM@temp& (0+255),b
  4753  0013D6  6B8B               	clrf	(saveEEPROM@temp+1)& (0+255),b
  4754                           
  4755                           ;main.c: 926: Eeprom_WriteByte(12*i+2*200,temp);
  4756  0013D8  C08C  F080         	movff	saveEEPROM@i,___wmul@multiplier
  4757  0013DC  C08D  F081         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  4758  0013E0  0E00               	movlw	0
  4759  0013E2  0100               	movlb	0	; () banked
  4760  0013E4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4761  0013E6  0E0C               	movlw	12
  4762  0013E8  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4763  0013EA  ECD5  F01A         	call	___wmul	;wreg free
  4764  0013EE  0E90               	movlw	144
  4765  0013F0  0100               	movlb	0	; () banked
  4766  0013F2  2580               	addwf	?___wmul& (0+255),w,b
  4767  0013F4  0100               	movlb	0	; () banked
  4768  0013F6  6F86               	movwf	Eeprom_WriteByte@address& (0+255),b
  4769  0013F8  0E01               	movlw	1
  4770  0013FA  0100               	movlb	0	; () banked
  4771  0013FC  2181               	addwfc	(?___wmul+1)& (0+255),w,b
  4772  0013FE  0100               	movlb	0	; () banked
  4773  001400  6F87               	movwf	(Eeprom_WriteByte@address+1)& (0+255),b
  4774  001402  C08A  F088         	movff	saveEEPROM@temp,Eeprom_WriteByte@data
  4775  001406  EC6B  F01B         	call	_Eeprom_WriteByte	;wreg free
  4776  00140A  0100               	movlb	0	; () banked
  4777  00140C  4B8C               	infsnz	saveEEPROM@i& (0+255),f,b
  4778  00140E  2B8D               	incf	(saveEEPROM@i+1)& (0+255),f,b
  4779  001410  D7BA               	goto	l4165
  4780  001412                     l4175:
  4781                           
  4782                           ; BSR set to: 0
  4783                           ;main.c: 927: }
  4784                           ;main.c: 928: for (i = 0; i<13; i++){
  4785  001412  0E00               	movlw	0
  4786  001414  0100               	movlb	0	; () banked
  4787  001416  6F8D               	movwf	(saveEEPROM@i+1)& (0+255),b
  4788  001418  0E00               	movlw	0
  4789  00141A  6F8C               	movwf	saveEEPROM@i& (0+255),b
  4790  00141C                     l4177:
  4791                           
  4792                           ; BSR set to: 0
  4793  00141C  0100               	movlb	0	; () banked
  4794  00141E  BF8D               	btfsc	(saveEEPROM@i+1)& (0+255),7,b
  4795  001420  D008               	goto	l4181
  4796  001422  0100               	movlb	0	; () banked
  4797  001424  518D               	movf	(saveEEPROM@i+1)& (0+255),w,b
  4798  001426  E13A               	bnz	l4187
  4799  001428  0E0D               	movlw	13
  4800  00142A  0100               	movlb	0	; () banked
  4801  00142C  5D8C               	subwf	saveEEPROM@i& (0+255),w,b
  4802  00142E  B0D8               	btfsc	status,0,c
  4803  001430  D035               	goto	l4187
  4804  001432                     l4181:
  4805                           
  4806                           ; BSR set to: 0
  4807                           ;main.c: 929: temp = Eeprom_ReadByte(12*i+0*200);
  4808  001432  C08C  F080         	movff	saveEEPROM@i,___wmul@multiplier
  4809  001436  C08D  F081         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  4810  00143A  0E00               	movlw	0
  4811  00143C  0100               	movlb	0	; () banked
  4812  00143E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4813  001440  0E0C               	movlw	12
  4814  001442  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4815  001444  ECD5  F01A         	call	___wmul	;wreg free
  4816  001448  C080  F086         	movff	?___wmul,Eeprom_ReadByte@address
  4817  00144C  C081  F087         	movff	?___wmul+1,Eeprom_ReadByte@address+1
  4818  001450  ECE9  F01B         	call	_Eeprom_ReadByte	;wreg free
  4819  001454  0100               	movlb	0	; () banked
  4820  001456  6F89               	movwf	??_saveEEPROM& (0+255),b
  4821  001458  0100               	movlb	0	; () banked
  4822  00145A  5189               	movf	??_saveEEPROM& (0+255),w,b
  4823  00145C  0100               	movlb	0	; () banked
  4824  00145E  6F8A               	movwf	saveEEPROM@temp& (0+255),b
  4825  001460  6B8B               	clrf	(saveEEPROM@temp+1)& (0+255),b
  4826                           
  4827                           ;main.c: 930: Eeprom_WriteByte(12*i+1*200,temp);
  4828  001462  C08C  F080         	movff	saveEEPROM@i,___wmul@multiplier
  4829  001466  C08D  F081         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  4830  00146A  0E00               	movlw	0
  4831  00146C  0100               	movlb	0	; () banked
  4832  00146E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4833  001470  0E0C               	movlw	12
  4834  001472  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4835  001474  ECD5  F01A         	call	___wmul	;wreg free
  4836  001478  0EC8               	movlw	200
  4837  00147A  0100               	movlb	0	; () banked
  4838  00147C  2580               	addwf	?___wmul& (0+255),w,b
  4839  00147E  0100               	movlb	0	; () banked
  4840  001480  6F86               	movwf	Eeprom_WriteByte@address& (0+255),b
  4841  001482  0E00               	movlw	0
  4842  001484  0100               	movlb	0	; () banked
  4843  001486  2181               	addwfc	(?___wmul+1)& (0+255),w,b
  4844  001488  0100               	movlb	0	; () banked
  4845  00148A  6F87               	movwf	(Eeprom_WriteByte@address+1)& (0+255),b
  4846  00148C  C08A  F088         	movff	saveEEPROM@temp,Eeprom_WriteByte@data
  4847  001490  EC6B  F01B         	call	_Eeprom_WriteByte	;wreg free
  4848  001494  0100               	movlb	0	; () banked
  4849  001496  4B8C               	infsnz	saveEEPROM@i& (0+255),f,b
  4850  001498  2B8D               	incf	(saveEEPROM@i+1)& (0+255),f,b
  4851  00149A  D7C0               	goto	l4177
  4852  00149C                     l4187:
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;main.c: 931: }
  4856                           ;main.c: 932: for (i = 0; i<6; i++){
  4857  00149C  0E00               	movlw	0
  4858  00149E  0100               	movlb	0	; () banked
  4859  0014A0  6F8D               	movwf	(saveEEPROM@i+1)& (0+255),b
  4860  0014A2  0E00               	movlw	0
  4861  0014A4  6F8C               	movwf	saveEEPROM@i& (0+255),b
  4862  0014A6                     l4189:
  4863                           
  4864                           ; BSR set to: 0
  4865  0014A6  0100               	movlb	0	; () banked
  4866  0014A8  BF8D               	btfsc	(saveEEPROM@i+1)& (0+255),7,b
  4867  0014AA  D008               	goto	l4193
  4868  0014AC  0100               	movlb	0	; () banked
  4869  0014AE  518D               	movf	(saveEEPROM@i+1)& (0+255),w,b
  4870  0014B0  E128               	bnz	l4199
  4871  0014B2  0E06               	movlw	6
  4872  0014B4  0100               	movlb	0	; () banked
  4873  0014B6  5D8C               	subwf	saveEEPROM@i& (0+255),w,b
  4874  0014B8  B0D8               	btfsc	status,0,c
  4875  0014BA  D023               	goto	l4199
  4876  0014BC                     l4193:
  4877                           
  4878                           ; BSR set to: 0
  4879                           ;main.c: 933: Eeprom_WriteByte(12*i,runInfo[i]);
  4880  0014BC  C08C  F080         	movff	saveEEPROM@i,___wmul@multiplier
  4881  0014C0  C08D  F081         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  4882  0014C4  0E00               	movlw	0
  4883  0014C6  0100               	movlb	0	; () banked
  4884  0014C8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4885  0014CA  0E0C               	movlw	12
  4886  0014CC  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4887  0014CE  ECD5  F01A         	call	___wmul	;wreg free
  4888  0014D2  C080  F086         	movff	?___wmul,Eeprom_WriteByte@address
  4889  0014D6  C081  F087         	movff	?___wmul+1,Eeprom_WriteByte@address+1
  4890  0014DA  90D8               	bcf	status,0,c
  4891  0014DC  0100               	movlb	0	; () banked
  4892  0014DE  358C               	rlcf	saveEEPROM@i& (0+255),w,b
  4893  0014E0  6ED9               	movwf	fsr2l,c
  4894  0014E2  0100               	movlb	0	; () banked
  4895  0014E4  358D               	rlcf	(saveEEPROM@i+1)& (0+255),w,b
  4896  0014E6  6EDA               	movwf	fsr2h,c
  4897  0014E8  0EF1               	movlw	low _runInfo
  4898  0014EA  26D9               	addwf	fsr2l,f,c
  4899  0014EC  0E00               	movlw	high _runInfo
  4900  0014EE  22DA               	addwfc	fsr2h,f,c
  4901  0014F0  50DF               	movf	indf2,w,c
  4902  0014F2  0100               	movlb	0	; () banked
  4903  0014F4  6F88               	movwf	Eeprom_WriteByte@data& (0+255),b
  4904  0014F6  EC6B  F01B         	call	_Eeprom_WriteByte	;wreg free
  4905  0014FA  0100               	movlb	0	; () banked
  4906  0014FC  4B8C               	infsnz	saveEEPROM@i& (0+255),f,b
  4907  0014FE  2B8D               	incf	(saveEEPROM@i+1)& (0+255),f,b
  4908  001500  D7D2               	goto	l4189
  4909  001502                     l4199:
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;main.c: 934: }
  4913                           ;main.c: 935: for (i = 0; i<7; i++){
  4914  001502  0E00               	movlw	0
  4915  001504  0100               	movlb	0	; () banked
  4916  001506  6F8D               	movwf	(saveEEPROM@i+1)& (0+255),b
  4917  001508  0E00               	movlw	0
  4918  00150A  6F8C               	movwf	saveEEPROM@i& (0+255),b
  4919  00150C                     l4201:
  4920                           
  4921                           ; BSR set to: 0
  4922  00150C  0100               	movlb	0	; () banked
  4923  00150E  BF8D               	btfsc	(saveEEPROM@i+1)& (0+255),7,b
  4924  001510  D008               	goto	l4205
  4925  001512  0100               	movlb	0	; () banked
  4926  001514  518D               	movf	(saveEEPROM@i+1)& (0+255),w,b
  4927  001516  E12B               	bnz	l428
  4928  001518  0E07               	movlw	7
  4929  00151A  0100               	movlb	0	; () banked
  4930  00151C  5D8C               	subwf	saveEEPROM@i& (0+255),w,b
  4931  00151E  B0D8               	btfsc	status,0,c
  4932  001520  0012               	return	
  4933  001522                     l4205:
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;main.c: 936: Eeprom_WriteByte(12*(6+i),lastRunTime[i]);
  4937  001522  0E06               	movlw	6
  4938  001524  0100               	movlb	0	; () banked
  4939  001526  258C               	addwf	saveEEPROM@i& (0+255),w,b
  4940  001528  0100               	movlb	0	; () banked
  4941  00152A  6F80               	movwf	___wmul@multiplier& (0+255),b
  4942  00152C  0E00               	movlw	0
  4943  00152E  0100               	movlb	0	; () banked
  4944  001530  218D               	addwfc	(saveEEPROM@i+1)& (0+255),w,b
  4945  001532  0100               	movlb	0	; () banked
  4946  001534  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4947  001536  0E00               	movlw	0
  4948  001538  0100               	movlb	0	; () banked
  4949  00153A  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4950  00153C  0E0C               	movlw	12
  4951  00153E  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4952  001540  ECD5  F01A         	call	___wmul	;wreg free
  4953  001544  C080  F086         	movff	?___wmul,Eeprom_WriteByte@address
  4954  001548  C081  F087         	movff	?___wmul+1,Eeprom_WriteByte@address+1
  4955  00154C  0EDB               	movlw	low _lastRunTime
  4956  00154E  0100               	movlb	0	; () banked
  4957  001550  258C               	addwf	saveEEPROM@i& (0+255),w,b
  4958  001552  6ED9               	movwf	fsr2l,c
  4959  001554  0E00               	movlw	high _lastRunTime
  4960  001556  0100               	movlb	0	; () banked
  4961  001558  218D               	addwfc	(saveEEPROM@i+1)& (0+255),w,b
  4962  00155A  6EDA               	movwf	fsr2h,c
  4963  00155C  50DF               	movf	indf2,w,c
  4964  00155E  0100               	movlb	0	; () banked
  4965  001560  6F88               	movwf	Eeprom_WriteByte@data& (0+255),b
  4966  001562  EC6B  F01B         	call	_Eeprom_WriteByte	;wreg free
  4967  001566  0100               	movlb	0	; () banked
  4968  001568  4B8C               	infsnz	saveEEPROM@i& (0+255),f,b
  4969  00156A  2B8D               	incf	(saveEEPROM@i+1)& (0+255),f,b
  4970  00156C  D7CF               	goto	l4201
  4971  00156E                     l428:
  4972                           
  4973                           ; BSR set to: 0
  4974  00156E  0012               	return		;funcret
  4975  001570                     __end_of_saveEEPROM:
  4976                           	opt stack 0
  4977                           tblptru	equ	0xFF8
  4978                           tblptrh	equ	0xFF7
  4979                           tblptrl	equ	0xFF6
  4980                           tablat	equ	0xFF5
  4981                           intcon	equ	0xFF2
  4982                           intcon2	equ	0xFF1
  4983                           postinc0	equ	0xFEE
  4984                           wreg	equ	0xFE8
  4985                           indf1	equ	0xFE7
  4986                           postdec1	equ	0xFE5
  4987                           fsr1h	equ	0xFE2
  4988                           fsr1l	equ	0xFE1
  4989                           indf2	equ	0xFDF
  4990                           postinc2	equ	0xFDE
  4991                           postdec2	equ	0xFDD
  4992                           fsr2h	equ	0xFDA
  4993                           fsr2l	equ	0xFD9
  4994                           status	equ	0xFD8
  4995                           
  4996 ;; *************** function _Eeprom_WriteByte *****************
  4997 ;; Defined at:
  4998 ;;		line 998 in file "main.c"
  4999 ;; Parameters:    Size  Location     Type
  5000 ;;  address         2    6[BANK0 ] unsigned int 
  5001 ;;  data            1    8[BANK0 ] unsigned char 
  5002 ;; Auto vars:     Size  Location     Type
  5003 ;;		None
  5004 ;; Return value:  Size  Location     Type
  5005 ;;                  1    wreg      void 
  5006 ;; Registers used:
  5007 ;;		wreg, status,2
  5008 ;; Tracked objects:
  5009 ;;		On entry : 0/0
  5010 ;;		On exit  : 0/0
  5011 ;;		Unchanged: 0/0
  5012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5013 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5016 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5017 ;;Total ram usage:        3 bytes
  5018 ;; Hardware stack levels used:    1
  5019 ;; Hardware stack levels required when called:    6
  5020 ;; This function calls:
  5021 ;;		Nothing
  5022 ;; This function is called by:
  5023 ;;		_saveEEPROM
  5024 ;; This function uses a non-reentrant model
  5025 ;;
  5026                           
  5027                           	psect	text15
  5028  0036D6                     __ptext15:
  5029                           	opt stack 0
  5030  0036D6                     _Eeprom_WriteByte:
  5031                           	opt stack 21
  5032                           
  5033                           ;main.c: 1001: EEADRH = (uint8_t)(address >> 8);
  5034                           
  5035                           ; BSR set to: 0
  5036                           ;incstack = 0
  5037  0036D6  0100               	movlb	0	; () banked
  5038  0036D8  5187               	movf	(Eeprom_WriteByte@address+1)& (0+255),w,b
  5039  0036DA  6EAA               	movwf	4010,c	;volatile
  5040                           
  5041                           ; BSR set to: 0
  5042                           ;main.c: 1002: EEADR = (uint8_t)address;
  5043  0036DC  C086  FFA9         	movff	Eeprom_WriteByte@address,4009	;volatile
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;main.c: 1004: EEDATA = data;
  5047  0036E0  C088  FFA8         	movff	Eeprom_WriteByte@data,4008	;volatile
  5048                           
  5049                           ; BSR set to: 0
  5050                           ;main.c: 1005: EECON1bits.EEPGD = 0;
  5051  0036E4  9EA6               	bcf	4006,7,c	;volatile
  5052                           
  5053                           ; BSR set to: 0
  5054                           ;main.c: 1006: EECON1bits.CFGS = 0;
  5055  0036E6  9CA6               	bcf	4006,6,c	;volatile
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;main.c: 1007: EECON1bits.WREN = 1;
  5059  0036E8  84A6               	bsf	4006,2,c	;volatile
  5060                           
  5061                           ;main.c: 1011: EECON2 = 0x55;
  5062  0036EA  0E55               	movlw	85
  5063  0036EC  6EA7               	movwf	4007,c	;volatile
  5064                           
  5065                           ;main.c: 1012: EECON2 = 0xAA;
  5066  0036EE  0EAA               	movlw	170
  5067  0036F0  6EA7               	movwf	4007,c	;volatile
  5068                           
  5069                           ; BSR set to: 0
  5070                           ;main.c: 1013: EECON1bits.WR = 1;
  5071  0036F2  82A6               	bsf	4006,1,c	;volatile
  5072  0036F4                     l455:
  5073  0036F4  A8A1               	btfss	4001,4,c	;volatile
  5074  0036F6  D7FE               	goto	l455
  5075                           
  5076                           ;main.c: 1019: }
  5077                           ;main.c: 1021: PIR2bits.EEIF = 0;
  5078  0036F8  98A1               	bcf	4001,4,c	;volatile
  5079                           
  5080                           ;main.c: 1022: EECON1bits.WREN = 0;
  5081  0036FA  94A6               	bcf	4006,2,c	;volatile
  5082  0036FC  0012               	return		;funcret
  5083  0036FE                     __end_of_Eeprom_WriteByte:
  5084                           	opt stack 0
  5085                           tblptru	equ	0xFF8
  5086                           tblptrh	equ	0xFF7
  5087                           tblptrl	equ	0xFF6
  5088                           tablat	equ	0xFF5
  5089                           intcon	equ	0xFF2
  5090                           intcon2	equ	0xFF1
  5091                           postinc0	equ	0xFEE
  5092                           wreg	equ	0xFE8
  5093                           indf1	equ	0xFE7
  5094                           postdec1	equ	0xFE5
  5095                           fsr1h	equ	0xFE2
  5096                           fsr1l	equ	0xFE1
  5097                           indf2	equ	0xFDF
  5098                           postinc2	equ	0xFDE
  5099                           postdec2	equ	0xFDD
  5100                           fsr2h	equ	0xFDA
  5101                           fsr2l	equ	0xFD9
  5102                           status	equ	0xFD8
  5103                           
  5104 ;; *************** function _retractSensorAreaArm *****************
  5105 ;; Defined at:
  5106 ;;		line 835 in file "main.c"
  5107 ;; Parameters:    Size  Location     Type
  5108 ;;		None
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;  i               2    2[BANK0 ] unsigned int 
  5111 ;; Return value:  Size  Location     Type
  5112 ;;                  1    wreg      void 
  5113 ;; Registers used:
  5114 ;;		wreg, status,2, status,0
  5115 ;; Tracked objects:
  5116 ;;		On entry : 0/0
  5117 ;;		On exit  : 0/0
  5118 ;;		Unchanged: 0/0
  5119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5121 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5122 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5123 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5124 ;;Total ram usage:        4 bytes
  5125 ;; Hardware stack levels used:    1
  5126 ;; Hardware stack levels required when called:    6
  5127 ;; This function calls:
  5128 ;;		Nothing
  5129 ;; This function is called by:
  5130 ;;		_operation
  5131 ;;		_pushBottle
  5132 ;; This function uses a non-reentrant model
  5133 ;;
  5134                           
  5135                           	psect	text16
  5136  002FD4                     __ptext16:
  5137                           	opt stack 0
  5138  002FD4                     _retractSensorAreaArm:
  5139                           	opt stack 22
  5140                           
  5141                           ;main.c: 836: unsigned int i;
  5142                           ;main.c: 837: for(i=0;i<20;i++){
  5143                           
  5144                           ;incstack = 0
  5145  002FD4  0E00               	movlw	0
  5146  002FD6  0100               	movlb	0	; () banked
  5147  002FD8  6F83               	movwf	(retractSensorAreaArm@i+1)& (0+255),b
  5148  002FDA  0E00               	movlw	0
  5149  002FDC  6F82               	movwf	retractSensorAreaArm@i& (0+255),b
  5150  002FDE                     l4123:
  5151                           
  5152                           ; BSR set to: 0
  5153  002FDE  0100               	movlb	0	; () banked
  5154  002FE0  5183               	movf	(retractSensorAreaArm@i+1)& (0+255),w,b
  5155  002FE2  E11D               	bnz	l4133
  5156  002FE4  0E14               	movlw	20
  5157  002FE6  0100               	movlb	0	; () banked
  5158  002FE8  5D82               	subwf	retractSensorAreaArm@i& (0+255),w,b
  5159  002FEA  B0D8               	btfsc	status,0,c
  5160  002FEC  D018               	goto	l4133
  5161                           
  5162                           ; BSR set to: 0
  5163                           ;main.c: 838: PORTCbits.RC2 = 1;
  5164                           
  5165                           ; BSR set to: 0
  5166  002FEE  8482               	bsf	3970,2,c	;volatile
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;main.c: 839: _delay((unsigned long)((2800)*(8000000/4000000.0)));
  5170  002FF0  0E08               	movlw	8
  5171  002FF2  0100               	movlb	0	; () banked
  5172  002FF4  6F80               	movwf	??_retractSensorAreaArm& (0+255),b
  5173  002FF6  0E44               	movlw	68
  5174  002FF8                     u9567:
  5175  002FF8  2EE8               	decfsz	wreg,f,c
  5176  002FFA  D7FE               	bra	u9567
  5177  002FFC  2F80               	decfsz	??_retractSensorAreaArm& (0+255),f,b
  5178  002FFE  D7FC               	bra	u9567
  5179  003000  F000               	nop	
  5180                           
  5181                           ;main.c: 840: PORTCbits.RC2 = 0;
  5182  003002  9482               	bcf	3970,2,c	;volatile
  5183                           
  5184                           ;main.c: 841: _delay((unsigned long)((17200)*(8000000/4000000.0)));
  5185  003004  0E2D               	movlw	45
  5186  003006  0100               	movlb	0	; () banked
  5187  003008  6F80               	movwf	??_retractSensorAreaArm& (0+255),b
  5188  00300A  0EAB               	movlw	171
  5189  00300C                     u9577:
  5190  00300C  2EE8               	decfsz	wreg,f,c
  5191  00300E  D7FE               	bra	u9577
  5192  003010  2F80               	decfsz	??_retractSensorAreaArm& (0+255),f,b
  5193  003012  D7FC               	bra	u9577
  5194  003014  D000               	nop2	
  5195  003016  0100               	movlb	0	; () banked
  5196  003018  4B82               	infsnz	retractSensorAreaArm@i& (0+255),f,b
  5197  00301A  2B83               	incf	(retractSensorAreaArm@i+1)& (0+255),f,b
  5198  00301C  D7E0               	goto	l4123
  5199  00301E                     l4133:
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;main.c: 842: }
  5203                           ;main.c: 843: _delay((unsigned long)((500)*(8000000/4000.0)));
  5204  00301E  0E06               	movlw	6
  5205  003020  0100               	movlb	0	; () banked
  5206  003022  6F81               	movwf	(??_retractSensorAreaArm+1)& (0+255),b
  5207  003024  0E13               	movlw	19
  5208  003026  0100               	movlb	0	; () banked
  5209  003028  6F80               	movwf	??_retractSensorAreaArm& (0+255),b
  5210  00302A  0EAD               	movlw	173
  5211  00302C                     u9587:
  5212  00302C  2EE8               	decfsz	wreg,f,c
  5213  00302E  D7FE               	bra	u9587
  5214  003030  2F80               	decfsz	??_retractSensorAreaArm& (0+255),f,b
  5215  003032  D7FC               	bra	u9587
  5216  003034  2F81               	decfsz	(??_retractSensorAreaArm+1)& (0+255),f,b
  5217  003036  D7FA               	bra	u9587
  5218  003038  D000               	nop2	
  5219  00303A  0012               	return		;funcret
  5220  00303C                     __end_of_retractSensorAreaArm:
  5221                           	opt stack 0
  5222                           tblptru	equ	0xFF8
  5223                           tblptrh	equ	0xFF7
  5224                           tblptrl	equ	0xFF6
  5225                           tablat	equ	0xFF5
  5226                           intcon	equ	0xFF2
  5227                           intcon2	equ	0xFF1
  5228                           postinc0	equ	0xFEE
  5229                           wreg	equ	0xFE8
  5230                           indf1	equ	0xFE7
  5231                           postdec1	equ	0xFE5
  5232                           fsr1h	equ	0xFE2
  5233                           fsr1l	equ	0xFE1
  5234                           indf2	equ	0xFDF
  5235                           postinc2	equ	0xFDE
  5236                           postdec2	equ	0xFDD
  5237                           fsr2h	equ	0xFDA
  5238                           fsr2l	equ	0xFD9
  5239                           status	equ	0xFD8
  5240                           
  5241 ;; *************** function _moveBinServo *****************
  5242 ;; Defined at:
  5243 ;;		line 814 in file "main.c"
  5244 ;; Parameters:    Size  Location     Type
  5245 ;;  num90Rotatio    2    0[BANK0 ] int 
  5246 ;; Auto vars:     Size  Location     Type
  5247 ;;		None
  5248 ;; Return value:  Size  Location     Type
  5249 ;;                  1    wreg      void 
  5250 ;; Registers used:
  5251 ;;		wreg, status,2, status,0
  5252 ;; Tracked objects:
  5253 ;;		On entry : 0/0
  5254 ;;		On exit  : 0/0
  5255 ;;		Unchanged: 0/0
  5256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5257 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5258 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5259 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5260 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5261 ;;Total ram usage:        4 bytes
  5262 ;; Hardware stack levels used:    1
  5263 ;; Hardware stack levels required when called:    6
  5264 ;; This function calls:
  5265 ;;		Nothing
  5266 ;; This function is called by:
  5267 ;;		_main
  5268 ;;		_operation
  5269 ;; This function uses a non-reentrant model
  5270 ;;
  5271                           
  5272                           	psect	text17
  5273  002D52                     __ptext17:
  5274                           	opt stack 0
  5275  002D52                     _moveBinServo:
  5276                           	opt stack 24
  5277                           
  5278                           ;main.c: 815: while (num90Rotations != 0){
  5279                           
  5280                           ;incstack = 0
  5281  002D52  D031               	goto	l4011
  5282  002D54                     l372:
  5283                           
  5284                           ; BSR set to: 0
  5285                           ;main.c: 816: PORTDbits.RD1 = 1;
  5286  002D54  8283               	bsf	3971,1,c	;volatile
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;main.c: 817: _delay((unsigned long)((2200)*(8000000/4000000.0)));
  5290  002D56  0E06               	movlw	6
  5291  002D58  0100               	movlb	0	; () banked
  5292  002D5A  6F82               	movwf	??_moveBinServo& (0+255),b
  5293  002D5C  0EB5               	movlw	181
  5294  002D5E                     u9597:
  5295  002D5E  2EE8               	decfsz	wreg,f,c
  5296  002D60  D7FE               	bra	u9597
  5297  002D62  2F82               	decfsz	??_moveBinServo& (0+255),f,b
  5298  002D64  D7FC               	bra	u9597
  5299  002D66  D000               	nop2	
  5300                           
  5301                           ;main.c: 818: PORTDbits.RD1 = 0;
  5302  002D68  9283               	bcf	3971,1,c	;volatile
  5303                           
  5304                           ;main.c: 819: _delay((unsigned long)((17800)*(8000000/4000000.0)));
  5305  002D6A  0E2F               	movlw	47
  5306  002D6C  0100               	movlb	0	; () banked
  5307  002D6E  6F82               	movwf	??_moveBinServo& (0+255),b
  5308  002D70  0E3A               	movlw	58
  5309  002D72                     u9607:
  5310  002D72  2EE8               	decfsz	wreg,f,c
  5311  002D74  D7FE               	bra	u9607
  5312  002D76  2F82               	decfsz	??_moveBinServo& (0+255),f,b
  5313  002D78  D7FC               	bra	u9607
  5314  002D7A  F000               	nop	
  5315                           
  5316                           ;main.c: 820: if (PORTAbits.RA0 == 0){
  5317  002D7C  A080               	btfss	3968,0,c	;volatile
  5318  002D7E  D015               	goto	l4007
  5319  002D80  D01A               	goto	l4011
  5320  002D82                     l375:
  5321                           
  5322                           ;main.c: 822: PORTDbits.RD1 = 1;
  5323  002D82  8283               	bsf	3971,1,c	;volatile
  5324                           
  5325                           ;main.c: 823: _delay((unsigned long)((2200)*(8000000/4000000.0)));
  5326  002D84  0E06               	movlw	6
  5327  002D86  0100               	movlb	0	; () banked
  5328  002D88  6F82               	movwf	??_moveBinServo& (0+255),b
  5329  002D8A  0EB5               	movlw	181
  5330  002D8C                     u9617:
  5331  002D8C  2EE8               	decfsz	wreg,f,c
  5332  002D8E  D7FE               	bra	u9617
  5333  002D90  2F82               	decfsz	??_moveBinServo& (0+255),f,b
  5334  002D92  D7FC               	bra	u9617
  5335  002D94  D000               	nop2	
  5336                           
  5337                           ;main.c: 824: PORTDbits.RD1 = 0;
  5338  002D96  9283               	bcf	3971,1,c	;volatile
  5339                           
  5340                           ;main.c: 825: _delay((unsigned long)((17800)*(8000000/4000000.0)));
  5341  002D98  0E2F               	movlw	47
  5342  002D9A  0100               	movlb	0	; () banked
  5343  002D9C  6F82               	movwf	??_moveBinServo& (0+255),b
  5344  002D9E  0E3A               	movlw	58
  5345  002DA0                     u9627:
  5346  002DA0  2EE8               	decfsz	wreg,f,c
  5347  002DA2  D7FE               	bra	u9627
  5348  002DA4  2F82               	decfsz	??_moveBinServo& (0+255),f,b
  5349  002DA6  D7FC               	bra	u9627
  5350  002DA8  F000               	nop	
  5351  002DAA                     l4007:
  5352  002DAA  A080               	btfss	3968,0,c	;volatile
  5353  002DAC  D7EA               	goto	l375
  5354                           
  5355                           ;main.c: 826: }
  5356                           ;main.c: 827: num90Rotations -= 1;
  5357  002DAE  0100               	movlb	0	; () banked
  5358  002DB0  0780               	decf	moveBinServo@num90Rotations& (0+255),f,b
  5359  002DB2  A0D8               	btfss	status,0,c
  5360  002DB4  0781               	decf	(moveBinServo@num90Rotations+1)& (0+255),f,b
  5361  002DB6                     l4011:
  5362  002DB6  0100               	movlb	0	; () banked
  5363  002DB8  5180               	movf	moveBinServo@num90Rotations& (0+255),w,b
  5364  002DBA  0100               	movlb	0	; () banked
  5365  002DBC  1181               	iorwf	(moveBinServo@num90Rotations+1)& (0+255),w,b
  5366  002DBE  A4D8               	btfss	status,2,c
  5367  002DC0  D7C9               	goto	l372
  5368                           
  5369                           ; BSR set to: 0
  5370                           ;main.c: 830: }
  5371                           ;main.c: 831: }
  5372                           ;main.c: 832: _delay((unsigned long)((300)*(8000000/4000.0)));
  5373                           
  5374                           ; BSR set to: 0
  5375  002DC2  0E04               	movlw	4
  5376  002DC4  0100               	movlb	0	; () banked
  5377  002DC6  6F83               	movwf	(??_moveBinServo+1)& (0+255),b
  5378  002DC8  0E0C               	movlw	12
  5379  002DCA  0100               	movlb	0	; () banked
  5380  002DCC  6F82               	movwf	??_moveBinServo& (0+255),b
  5381  002DCE  0E33               	movlw	51
  5382  002DD0                     u9637:
  5383  002DD0  2EE8               	decfsz	wreg,f,c
  5384  002DD2  D7FE               	bra	u9637
  5385  002DD4  2F82               	decfsz	??_moveBinServo& (0+255),f,b
  5386  002DD6  D7FC               	bra	u9637
  5387  002DD8  2F83               	decfsz	(??_moveBinServo+1)& (0+255),f,b
  5388  002DDA  D7FA               	bra	u9637
  5389  002DDC  D000               	nop2	
  5390  002DDE  0012               	return		;funcret
  5391  002DE0                     __end_of_moveBinServo:
  5392                           	opt stack 0
  5393                           tblptru	equ	0xFF8
  5394                           tblptrh	equ	0xFF7
  5395                           tblptrl	equ	0xFF6
  5396                           tablat	equ	0xFF5
  5397                           intcon	equ	0xFF2
  5398                           intcon2	equ	0xFF1
  5399                           postinc0	equ	0xFEE
  5400                           wreg	equ	0xFE8
  5401                           indf1	equ	0xFE7
  5402                           postdec1	equ	0xFE5
  5403                           fsr1h	equ	0xFE2
  5404                           fsr1l	equ	0xFE1
  5405                           indf2	equ	0xFDF
  5406                           postinc2	equ	0xFDE
  5407                           postdec2	equ	0xFDD
  5408                           fsr2h	equ	0xFDA
  5409                           fsr2l	equ	0xFD9
  5410                           status	equ	0xFD8
  5411                           
  5412 ;; *************** function _getCurrentTimeInSeconds *****************
  5413 ;; Defined at:
  5414 ;;		line 478 in file "main.c"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;		None
  5417 ;; Auto vars:     Size  Location     Type
  5418 ;;  str             2   48[BANK0 ] unsigned char [2]
  5419 ;;  currentTime     2   44[BANK0 ] int 
  5420 ;; Return value:  Size  Location     Type
  5421 ;;                  2   42[BANK0 ] int 
  5422 ;; Registers used:
  5423 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5424 ;; Tracked objects:
  5425 ;;		On entry : 0/0
  5426 ;;		On exit  : 0/0
  5427 ;;		Unchanged: 0/0
  5428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5429 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5430 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5432 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5433 ;;Total ram usage:        8 bytes
  5434 ;; Hardware stack levels used:    1
  5435 ;; Hardware stack levels required when called:   10
  5436 ;; This function calls:
  5437 ;;		___wmul
  5438 ;;		_atoi
  5439 ;;		_sprintf
  5440 ;; This function is called by:
  5441 ;;		_operation
  5442 ;;		_timeIsStillLeft
  5443 ;; This function uses a non-reentrant model
  5444 ;;
  5445                           
  5446                           	psect	text18
  5447  00220A                     __ptext18:
  5448                           	opt stack 0
  5449  00220A                     _getCurrentTimeInSeconds:
  5450                           	opt stack 18
  5451                           
  5452                           ;main.c: 479: int currentTime = 0;
  5453                           
  5454                           ;incstack = 0
  5455  00220A  0E00               	movlw	0
  5456  00220C  0100               	movlb	0	; () banked
  5457  00220E  6FAD               	movwf	(getCurrentTimeInSeconds@currentTime+1)& (0+255),b
  5458  002210  0E00               	movlw	0
  5459  002212  6FAC               	movwf	getCurrentTimeInSeconds@currentTime& (0+255),b
  5460                           
  5461                           ; BSR set to: 0
  5462                           ;main.c: 480: char str[2];
  5463                           ;main.c: 481: sprintf(str, "%02x",time[0]);
  5464  002214  0EB0               	movlw	low getCurrentTimeInSeconds@str
  5465  002216  0100               	movlb	0	; () banked
  5466  002218  6F9E               	movwf	sprintf@wh& (0+255),b
  5467  00221A  0E00               	movlw	high getCurrentTimeInSeconds@str
  5468  00221C  0100               	movlb	0	; () banked
  5469  00221E  6F9F               	movwf	(sprintf@wh+1)& (0+255),b
  5470  002220  0E71               	movlw	low (STR_2+10)
  5471  002222  0100               	movlb	0	; () banked
  5472  002224  6FA0               	movwf	sprintf@f& (0+255),b
  5473  002226  0EFF               	movlw	high (STR_2+10)
  5474  002228  0100               	movlb	0	; () banked
  5475  00222A  6FA1               	movwf	(sprintf@f+1)& (0+255),b
  5476  00222C  C0E2  F0A2         	movff	_time,?_sprintf+4
  5477  002230  0100               	movlb	0	; () banked
  5478  002232  6BA3               	clrf	(?_sprintf+5)& (0+255),b
  5479  002234  EC73  F019         	call	_sprintf	;wreg free
  5480                           
  5481                           ;main.c: 482: currentTime += atoi(str);
  5482  002238  0EB0               	movlw	low getCurrentTimeInSeconds@str
  5483  00223A  0100               	movlb	0	; () banked
  5484  00223C  6F86               	movwf	atoi@s& (0+255),b
  5485  00223E  0E00               	movlw	high getCurrentTimeInSeconds@str
  5486  002240  0100               	movlb	0	; () banked
  5487  002242  6F87               	movwf	(atoi@s+1)& (0+255),b
  5488  002244  EC0D  F014         	call	_atoi	;wreg free
  5489  002248  0100               	movlb	0	; () banked
  5490  00224A  5186               	movf	?_atoi& (0+255),w,b
  5491  00224C  0100               	movlb	0	; () banked
  5492  00224E  27AC               	addwf	getCurrentTimeInSeconds@currentTime& (0+255),f,b
  5493  002250  0100               	movlb	0	; () banked
  5494  002252  5187               	movf	(?_atoi+1)& (0+255),w,b
  5495  002254  0100               	movlb	0	; () banked
  5496  002256  23AD               	addwfc	(getCurrentTimeInSeconds@currentTime+1)& (0+255),f,b
  5497                           
  5498                           ; BSR set to: 0
  5499                           ;main.c: 483: sprintf(str, "%02x",time[1]);
  5500  002258  0EB0               	movlw	low getCurrentTimeInSeconds@str
  5501  00225A  0100               	movlb	0	; () banked
  5502  00225C  6F9E               	movwf	sprintf@wh& (0+255),b
  5503  00225E  0E00               	movlw	high getCurrentTimeInSeconds@str
  5504  002260  0100               	movlb	0	; () banked
  5505  002262  6F9F               	movwf	(sprintf@wh+1)& (0+255),b
  5506  002264  0E71               	movlw	low (STR_2+10)
  5507  002266  0100               	movlb	0	; () banked
  5508  002268  6FA0               	movwf	sprintf@f& (0+255),b
  5509  00226A  0EFF               	movlw	high (STR_2+10)
  5510  00226C  0100               	movlb	0	; () banked
  5511  00226E  6FA1               	movwf	(sprintf@f+1)& (0+255),b
  5512  002270  C0E3  F0A2         	movff	_time+1,?_sprintf+4
  5513  002274  0100               	movlb	0	; () banked
  5514  002276  6BA3               	clrf	(?_sprintf+5)& (0+255),b
  5515  002278  EC73  F019         	call	_sprintf	;wreg free
  5516                           
  5517                           ;main.c: 484: currentTime += atoi(str)*60;
  5518  00227C  0EB0               	movlw	low getCurrentTimeInSeconds@str
  5519  00227E  0100               	movlb	0	; () banked
  5520  002280  6F86               	movwf	atoi@s& (0+255),b
  5521  002282  0E00               	movlw	high getCurrentTimeInSeconds@str
  5522  002284  0100               	movlb	0	; () banked
  5523  002286  6F87               	movwf	(atoi@s+1)& (0+255),b
  5524  002288  EC0D  F014         	call	_atoi	;wreg free
  5525  00228C  C086  F0AE         	movff	?_atoi,_getCurrentTimeInSeconds$1724
  5526  002290  C087  F0AF         	movff	?_atoi+1,_getCurrentTimeInSeconds$1724+1
  5527                           
  5528                           ;main.c: 484: currentTime += atoi(str)*60;
  5529  002294  C0AE  F080         	movff	_getCurrentTimeInSeconds$1724,___wmul@multiplier
  5530  002298  C0AF  F081         	movff	_getCurrentTimeInSeconds$1724+1,___wmul@multiplier+1
  5531  00229C  0E00               	movlw	0
  5532  00229E  0100               	movlb	0	; () banked
  5533  0022A0  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5534  0022A2  0E3C               	movlw	60
  5535  0022A4  6F82               	movwf	___wmul@multiplicand& (0+255),b
  5536  0022A6  ECD5  F01A         	call	___wmul	;wreg free
  5537  0022AA  0100               	movlb	0	; () banked
  5538  0022AC  5180               	movf	?___wmul& (0+255),w,b
  5539  0022AE  0100               	movlb	0	; () banked
  5540  0022B0  27AC               	addwf	getCurrentTimeInSeconds@currentTime& (0+255),f,b
  5541  0022B2  0100               	movlb	0	; () banked
  5542  0022B4  5181               	movf	(?___wmul+1)& (0+255),w,b
  5543  0022B6  0100               	movlb	0	; () banked
  5544  0022B8  23AD               	addwfc	(getCurrentTimeInSeconds@currentTime+1)& (0+255),f,b
  5545                           
  5546                           ; BSR set to: 0
  5547                           ;main.c: 485: sprintf(str, "%02x",time[2]);
  5548  0022BA  0EB0               	movlw	low getCurrentTimeInSeconds@str
  5549  0022BC  0100               	movlb	0	; () banked
  5550  0022BE  6F9E               	movwf	sprintf@wh& (0+255),b
  5551  0022C0  0E00               	movlw	high getCurrentTimeInSeconds@str
  5552  0022C2  0100               	movlb	0	; () banked
  5553  0022C4  6F9F               	movwf	(sprintf@wh+1)& (0+255),b
  5554  0022C6  0E71               	movlw	low (STR_2+10)
  5555  0022C8  0100               	movlb	0	; () banked
  5556  0022CA  6FA0               	movwf	sprintf@f& (0+255),b
  5557  0022CC  0EFF               	movlw	high (STR_2+10)
  5558  0022CE  0100               	movlb	0	; () banked
  5559  0022D0  6FA1               	movwf	(sprintf@f+1)& (0+255),b
  5560  0022D2  C0E4  F0A2         	movff	_time+2,?_sprintf+4
  5561  0022D6  0100               	movlb	0	; () banked
  5562  0022D8  6BA3               	clrf	(?_sprintf+5)& (0+255),b
  5563  0022DA  EC73  F019         	call	_sprintf	;wreg free
  5564                           
  5565                           ;main.c: 486: currentTime += atoi(str)*3600;
  5566  0022DE  0EB0               	movlw	low getCurrentTimeInSeconds@str
  5567  0022E0  0100               	movlb	0	; () banked
  5568  0022E2  6F86               	movwf	atoi@s& (0+255),b
  5569  0022E4  0E00               	movlw	high getCurrentTimeInSeconds@str
  5570  0022E6  0100               	movlb	0	; () banked
  5571  0022E8  6F87               	movwf	(atoi@s+1)& (0+255),b
  5572  0022EA  EC0D  F014         	call	_atoi	;wreg free
  5573  0022EE  C086  F0AE         	movff	?_atoi,_getCurrentTimeInSeconds$1724
  5574  0022F2  C087  F0AF         	movff	?_atoi+1,_getCurrentTimeInSeconds$1724+1
  5575                           
  5576                           ;main.c: 486: currentTime += atoi(str)*3600;
  5577  0022F6  C0AE  F080         	movff	_getCurrentTimeInSeconds$1724,___wmul@multiplier
  5578  0022FA  C0AF  F081         	movff	_getCurrentTimeInSeconds$1724+1,___wmul@multiplier+1
  5579  0022FE  0E0E               	movlw	14
  5580  002300  0100               	movlb	0	; () banked
  5581  002302  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5582  002304  0E10               	movlw	16
  5583  002306  6F82               	movwf	___wmul@multiplicand& (0+255),b
  5584  002308  ECD5  F01A         	call	___wmul	;wreg free
  5585  00230C  0100               	movlb	0	; () banked
  5586  00230E  5180               	movf	?___wmul& (0+255),w,b
  5587  002310  0100               	movlb	0	; () banked
  5588  002312  27AC               	addwf	getCurrentTimeInSeconds@currentTime& (0+255),f,b
  5589  002314  0100               	movlb	0	; () banked
  5590  002316  5181               	movf	(?___wmul+1)& (0+255),w,b
  5591  002318  0100               	movlb	0	; () banked
  5592  00231A  23AD               	addwfc	(getCurrentTimeInSeconds@currentTime+1)& (0+255),f,b
  5593                           
  5594                           ; BSR set to: 0
  5595                           ;main.c: 487: return currentTime;
  5596  00231C  C0AC  F0AA         	movff	getCurrentTimeInSeconds@currentTime,?_getCurrentTimeInSeconds
  5597  002320  C0AD  F0AB         	movff	getCurrentTimeInSeconds@currentTime+1,?_getCurrentTimeInSeconds+1
  5598  002324  0012               	return	
  5599  002326                     __end_of_getCurrentTimeInSeconds:
  5600                           	opt stack 0
  5601                           tblptru	equ	0xFF8
  5602                           tblptrh	equ	0xFF7
  5603                           tblptrl	equ	0xFF6
  5604                           tablat	equ	0xFF5
  5605                           intcon	equ	0xFF2
  5606                           intcon2	equ	0xFF1
  5607                           postinc0	equ	0xFEE
  5608                           wreg	equ	0xFE8
  5609                           indf1	equ	0xFE7
  5610                           postdec1	equ	0xFE5
  5611                           fsr1h	equ	0xFE2
  5612                           fsr1l	equ	0xFE1
  5613                           indf2	equ	0xFDF
  5614                           postinc2	equ	0xFDE
  5615                           postdec2	equ	0xFDD
  5616                           fsr2h	equ	0xFDA
  5617                           fsr2l	equ	0xFD9
  5618                           status	equ	0xFD8
  5619                           
  5620 ;; *************** function _sprintf *****************
  5621 ;; Defined at:
  5622 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprintf.c"
  5623 ;; Parameters:    Size  Location     Type
  5624 ;;  wh              2   30[BANK0 ] PTR unsigned char 
  5625 ;;		 -> getCurrentTimeInSeconds@str(2), 
  5626 ;;  f               2   32[BANK0 ] PTR const unsigned char 
  5627 ;;		 -> STR_5(5), STR_4(5), STR_3(5), 
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;  pb              4   38[BANK0 ] struct __prbuf
  5630 ;;  ap              2   36[BANK0 ] PTR void [1]
  5631 ;;		 -> ?_sprintf(2), ?_printf(2), 
  5632 ;; Return value:  Size  Location     Type
  5633 ;;                  2   30[BANK0 ] int 
  5634 ;; Registers used:
  5635 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5636 ;; Tracked objects:
  5637 ;;		On entry : 0/0
  5638 ;;		On exit  : 0/0
  5639 ;;		Unchanged: 0/0
  5640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5641 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5642 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5644 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5645 ;;Total ram usage:       12 bytes
  5646 ;; Hardware stack levels used:    1
  5647 ;; Hardware stack levels required when called:    9
  5648 ;; This function calls:
  5649 ;;		__doprnt
  5650 ;; This function is called by:
  5651 ;;		_getCurrentTimeInSeconds
  5652 ;; This function uses a non-reentrant model
  5653 ;;
  5654                           
  5655                           	psect	text19
  5656  0032E6                     __ptext19:
  5657                           	opt stack 0
  5658  0032E6                     _sprintf:
  5659                           	opt stack 18
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;incstack = 0
  5663  0032E6  C09E  F0A6         	movff	sprintf@wh,sprintf@pb
  5664  0032EA  C09F  F0A7         	movff	sprintf@wh+1,sprintf@pb+1
  5665  0032EE  0E00               	movlw	0
  5666  0032F0  0100               	movlb	0	; () banked
  5667  0032F2  6FA8               	movwf	(sprintf@pb+2)& (0+255),b
  5668  0032F4  0E00               	movlw	0
  5669  0032F6  0100               	movlb	0	; () banked
  5670  0032F8  6FA9               	movwf	(sprintf@pb+3)& (0+255),b
  5671  0032FA  0EA2               	movlw	low (?_sprintf+4)
  5672  0032FC  0100               	movlb	0	; () banked
  5673  0032FE  6FA4               	movwf	sprintf@ap& (0+255),b
  5674  003300  0E00               	movlw	high (?_sprintf+4)
  5675  003302  0100               	movlb	0	; () banked
  5676  003304  6FA5               	movwf	(sprintf@ap+1)& (0+255),b
  5677                           
  5678                           ; BSR set to: 0
  5679  003306  0EA6               	movlw	low sprintf@pb
  5680  003308  0100               	movlb	0	; () banked
  5681  00330A  6F8C               	movwf	__doprnt@pb& (0+255),b
  5682  00330C  0E00               	movlw	high sprintf@pb
  5683  00330E  0100               	movlb	0	; () banked
  5684  003310  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  5685  003312  C0A0  F08E         	movff	sprintf@f,__doprnt@f
  5686  003316  C0A1  F08F         	movff	sprintf@f+1,__doprnt@f+1
  5687  00331A  0EA4               	movlw	low sprintf@ap
  5688  00331C  0100               	movlb	0	; () banked
  5689  00331E  6F90               	movwf	__doprnt@ap& (0+255),b
  5690  003320  0E00               	movlw	high sprintf@ap
  5691  003322  0100               	movlb	0	; () banked
  5692  003324  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  5693  003326  EC09  F000         	call	__doprnt	;wreg free
  5694  00332A  C0A6  FFD9         	movff	sprintf@pb,fsr2l
  5695  00332E  C0A7  FFDA         	movff	sprintf@pb+1,fsr2h
  5696  003332  0E00               	movlw	0
  5697  003334  6EDF               	movwf	indf2,c
  5698  003336  0012               	return	
  5699  003338                     __end_of_sprintf:
  5700                           	opt stack 0
  5701                           tblptru	equ	0xFF8
  5702                           tblptrh	equ	0xFF7
  5703                           tblptrl	equ	0xFF6
  5704                           tablat	equ	0xFF5
  5705                           intcon	equ	0xFF2
  5706                           intcon2	equ	0xFF1
  5707                           postinc0	equ	0xFEE
  5708                           wreg	equ	0xFE8
  5709                           indf1	equ	0xFE7
  5710                           postdec1	equ	0xFE5
  5711                           fsr1h	equ	0xFE2
  5712                           fsr1l	equ	0xFE1
  5713                           indf2	equ	0xFDF
  5714                           postinc2	equ	0xFDE
  5715                           postdec2	equ	0xFDD
  5716                           fsr2h	equ	0xFDA
  5717                           fsr2l	equ	0xFD9
  5718                           status	equ	0xFD8
  5719                           
  5720 ;; *************** function _atoi *****************
  5721 ;; Defined at:
  5722 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\atoi.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;  s               2    6[BANK0 ] PTR const unsigned char 
  5725 ;;		 -> getCurrentTimeInSeconds@str(2), 
  5726 ;; Auto vars:     Size  Location     Type
  5727 ;;  a               2   11[BANK0 ] int 
  5728 ;;  sign            1   10[BANK0 ] unsigned char 
  5729 ;; Return value:  Size  Location     Type
  5730 ;;                  2    6[BANK0 ] int 
  5731 ;; Registers used:
  5732 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5733 ;; Tracked objects:
  5734 ;;		On entry : 0/0
  5735 ;;		On exit  : 0/0
  5736 ;;		Unchanged: 0/0
  5737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5738 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5739 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5740 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5741 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;Total ram usage:        7 bytes
  5743 ;; Hardware stack levels used:    1
  5744 ;; Hardware stack levels required when called:    7
  5745 ;; This function calls:
  5746 ;;		___wmul
  5747 ;;		_isdigit
  5748 ;; This function is called by:
  5749 ;;		_getCurrentTimeInSeconds
  5750 ;; This function uses a non-reentrant model
  5751 ;;
  5752                           
  5753                           	psect	text20
  5754  00281A                     __ptext20:
  5755                           	opt stack 0
  5756  00281A                     _atoi:
  5757                           	opt stack 20
  5758                           
  5759                           ;incstack = 0
  5760  00281A  D003               	goto	l3761
  5761  00281C                     l3759:
  5762  00281C  0100               	movlb	0	; () banked
  5763  00281E  4B86               	infsnz	atoi@s& (0+255),f,b
  5764  002820  2B87               	incf	(atoi@s+1)& (0+255),f,b
  5765  002822                     l3761:
  5766  002822  C086  FFD9         	movff	atoi@s,fsr2l
  5767  002826  C087  FFDA         	movff	atoi@s+1,fsr2h
  5768  00282A  0E20               	movlw	32
  5769  00282C  18DE               	xorwf	postinc2,w,c
  5770  00282E  B4D8               	btfsc	status,2,c
  5771  002830  D7F5               	goto	l3759
  5772  002832  C086  FFD9         	movff	atoi@s,fsr2l
  5773  002836  C087  FFDA         	movff	atoi@s+1,fsr2h
  5774  00283A  0E09               	movlw	9
  5775  00283C  18DE               	xorwf	postinc2,w,c
  5776  00283E  B4D8               	btfsc	status,2,c
  5777  002840  D7ED               	goto	l3759
  5778  002842  0E00               	movlw	0
  5779  002844  0100               	movlb	0	; () banked
  5780  002846  6F8C               	movwf	(atoi@a+1)& (0+255),b
  5781  002848  0E00               	movlw	0
  5782  00284A  6F8B               	movwf	atoi@a& (0+255),b
  5783  00284C  0E00               	movlw	0
  5784  00284E  0100               	movlb	0	; () banked
  5785  002850  6F8A               	movwf	atoi@sign& (0+255),b
  5786                           
  5787                           ; BSR set to: 0
  5788  002852  C086  FFD9         	movff	atoi@s,fsr2l
  5789  002856  C087  FFDA         	movff	atoi@s+1,fsr2h
  5790  00285A  0E2D               	movlw	45
  5791  00285C  18DE               	xorwf	postinc2,w,c
  5792  00285E  A4D8               	btfss	status,2,c
  5793  002860  D003               	goto	l3771
  5794                           
  5795                           ; BSR set to: 0
  5796  002862  0100               	movlb	0	; () banked
  5797  002864  2B8A               	incf	atoi@sign& (0+255),f,b
  5798  002866  D02E               	goto	l3777
  5799  002868                     l3771:
  5800                           
  5801                           ; BSR set to: 0
  5802  002868  C086  FFD9         	movff	atoi@s,fsr2l
  5803  00286C  C087  FFDA         	movff	atoi@s+1,fsr2h
  5804  002870  0E2B               	movlw	43
  5805  002872  18DE               	xorwf	postinc2,w,c
  5806  002874  A4D8               	btfss	status,2,c
  5807  002876  D029               	goto	l3779
  5808  002878  D025               	goto	l3777
  5809  00287A                     l3775:
  5810  00287A  C08B  F080         	movff	atoi@a,___wmul@multiplier
  5811  00287E  C08C  F081         	movff	atoi@a+1,___wmul@multiplier+1
  5812  002882  0E00               	movlw	0
  5813  002884  0100               	movlb	0	; () banked
  5814  002886  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5815  002888  0E0A               	movlw	10
  5816  00288A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  5817  00288C  ECD5  F01A         	call	___wmul	;wreg free
  5818  002890  C086  FFD9         	movff	atoi@s,fsr2l
  5819  002894  C087  FFDA         	movff	atoi@s+1,fsr2h
  5820  002898  50DF               	movf	indf2,w,c
  5821  00289A  0100               	movlb	0	; () banked
  5822  00289C  6F88               	movwf	??_atoi& (0+255),b
  5823  00289E  6B89               	clrf	(??_atoi+1)& (0+255),b
  5824  0028A0  0100               	movlb	0	; () banked
  5825  0028A2  5180               	movf	?___wmul& (0+255),w,b
  5826  0028A4  0100               	movlb	0	; () banked
  5827  0028A6  2788               	addwf	??_atoi& (0+255),f,b
  5828  0028A8  0100               	movlb	0	; () banked
  5829  0028AA  5181               	movf	(?___wmul+1)& (0+255),w,b
  5830  0028AC  0100               	movlb	0	; () banked
  5831  0028AE  2389               	addwfc	(??_atoi+1)& (0+255),f,b
  5832  0028B0  0ED0               	movlw	208
  5833  0028B2  0100               	movlb	0	; () banked
  5834  0028B4  2588               	addwf	??_atoi& (0+255),w,b
  5835  0028B6  0100               	movlb	0	; () banked
  5836  0028B8  6F8B               	movwf	atoi@a& (0+255),b
  5837  0028BA  0EFF               	movlw	255
  5838  0028BC  0100               	movlb	0	; () banked
  5839  0028BE  2189               	addwfc	(??_atoi+1)& (0+255),w,b
  5840  0028C0  0100               	movlb	0	; () banked
  5841  0028C2  6F8C               	movwf	(atoi@a+1)& (0+255),b
  5842  0028C4                     l3777:
  5843                           
  5844                           ; BSR set to: 0
  5845  0028C4  0100               	movlb	0	; () banked
  5846  0028C6  4B86               	infsnz	atoi@s& (0+255),f,b
  5847  0028C8  2B87               	incf	(atoi@s+1)& (0+255),f,b
  5848  0028CA                     l3779:
  5849                           
  5850                           ; BSR set to: 0
  5851  0028CA  C086  FFD9         	movff	atoi@s,fsr2l
  5852  0028CE  C087  FFDA         	movff	atoi@s+1,fsr2h
  5853  0028D2  50DF               	movf	indf2,w,c
  5854  0028D4  EC56  F01B         	call	_isdigit
  5855  0028D8  B0D8               	btfsc	status,0,c
  5856  0028DA  D7CF               	goto	l3775
  5857  0028DC  0100               	movlb	0	; () banked
  5858  0028DE  518A               	movf	atoi@sign& (0+255),w,b
  5859  0028E0  0100               	movlb	0	; () banked
  5860  0028E2  B4D8               	btfsc	status,2,c
  5861  0028E4  D00E               	goto	l830
  5862                           
  5863                           ; BSR set to: 0
  5864  0028E6  C08B  F088         	movff	atoi@a,??_atoi
  5865  0028EA  C08C  F089         	movff	atoi@a+1,??_atoi+1
  5866  0028EE  0100               	movlb	0	; () banked
  5867  0028F0  1F88               	comf	??_atoi& (0+255),f,b
  5868  0028F2  1F89               	comf	(??_atoi+1)& (0+255),f,b
  5869  0028F4  4B88               	infsnz	??_atoi& (0+255),f,b
  5870  0028F6  2B89               	incf	(??_atoi+1)& (0+255),f,b
  5871  0028F8  C088  F086         	movff	??_atoi,?_atoi
  5872  0028FC  C089  F087         	movff	??_atoi+1,?_atoi+1
  5873  002900  0012               	return	
  5874  002902                     l830:
  5875                           
  5876                           ; BSR set to: 0
  5877  002902  C08B  F086         	movff	atoi@a,?_atoi
  5878  002906  C08C  F087         	movff	atoi@a+1,?_atoi+1
  5879                           
  5880                           ; BSR set to: 0
  5881  00290A  0012               	return		;funcret
  5882  00290C                     __end_of_atoi:
  5883                           	opt stack 0
  5884                           tblptru	equ	0xFF8
  5885                           tblptrh	equ	0xFF7
  5886                           tblptrl	equ	0xFF6
  5887                           tablat	equ	0xFF5
  5888                           intcon	equ	0xFF2
  5889                           intcon2	equ	0xFF1
  5890                           postinc0	equ	0xFEE
  5891                           wreg	equ	0xFE8
  5892                           indf1	equ	0xFE7
  5893                           postdec1	equ	0xFE5
  5894                           fsr1h	equ	0xFE2
  5895                           fsr1l	equ	0xFE1
  5896                           indf2	equ	0xFDF
  5897                           postinc2	equ	0xFDE
  5898                           postdec2	equ	0xFDD
  5899                           fsr2h	equ	0xFDA
  5900                           fsr2l	equ	0xFD9
  5901                           status	equ	0xFD8
  5902                           
  5903 ;; *************** function _extendSensorAreaArm *****************
  5904 ;; Defined at:
  5905 ;;		line 847 in file "main.c"
  5906 ;; Parameters:    Size  Location     Type
  5907 ;;		None
  5908 ;; Auto vars:     Size  Location     Type
  5909 ;;  i               2    2[BANK0 ] unsigned int 
  5910 ;; Return value:  Size  Location     Type
  5911 ;;                  1    wreg      void 
  5912 ;; Registers used:
  5913 ;;		wreg, status,2, status,0
  5914 ;; Tracked objects:
  5915 ;;		On entry : 0/0
  5916 ;;		On exit  : 0/0
  5917 ;;		Unchanged: 0/0
  5918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5920 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5921 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5922 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5923 ;;Total ram usage:        4 bytes
  5924 ;; Hardware stack levels used:    1
  5925 ;; Hardware stack levels required when called:    6
  5926 ;; This function calls:
  5927 ;;		Nothing
  5928 ;; This function is called by:
  5929 ;;		_operation
  5930 ;;		_pushBottle
  5931 ;; This function uses a non-reentrant model
  5932 ;;
  5933                           
  5934                           	psect	text21
  5935  00303C                     __ptext21:
  5936                           	opt stack 0
  5937  00303C                     _extendSensorAreaArm:
  5938                           	opt stack 22
  5939                           
  5940                           ;main.c: 848: unsigned int i;
  5941                           ;main.c: 849: for(i=0;i<20;i++){
  5942                           
  5943                           ; BSR set to: 0
  5944                           ;incstack = 0
  5945  00303C  0E00               	movlw	0
  5946  00303E  0100               	movlb	0	; () banked
  5947  003040  6F83               	movwf	(extendSensorAreaArm@i+1)& (0+255),b
  5948  003042  0E00               	movlw	0
  5949  003044  6F82               	movwf	extendSensorAreaArm@i& (0+255),b
  5950  003046                     l4137:
  5951                           
  5952                           ; BSR set to: 0
  5953  003046  0100               	movlb	0	; () banked
  5954  003048  5183               	movf	(extendSensorAreaArm@i+1)& (0+255),w,b
  5955  00304A  E11D               	bnz	l4147
  5956  00304C  0E14               	movlw	20
  5957  00304E  0100               	movlb	0	; () banked
  5958  003050  5D82               	subwf	extendSensorAreaArm@i& (0+255),w,b
  5959  003052  B0D8               	btfsc	status,0,c
  5960  003054  D018               	goto	l4147
  5961                           
  5962                           ; BSR set to: 0
  5963                           ;main.c: 850: PORTCbits.RC2 = 1;
  5964                           
  5965                           ; BSR set to: 0
  5966  003056  8482               	bsf	3970,2,c	;volatile
  5967                           
  5968                           ; BSR set to: 0
  5969                           ;main.c: 851: _delay((unsigned long)((1800)*(8000000/4000000.0)));
  5970  003058  0E05               	movlw	5
  5971  00305A  0100               	movlb	0	; () banked
  5972  00305C  6F80               	movwf	??_extendSensorAreaArm& (0+255),b
  5973  00305E  0EAB               	movlw	171
  5974  003060                     u9647:
  5975  003060  2EE8               	decfsz	wreg,f,c
  5976  003062  D7FE               	bra	u9647
  5977  003064  2F80               	decfsz	??_extendSensorAreaArm& (0+255),f,b
  5978  003066  D7FC               	bra	u9647
  5979  003068  D000               	nop2	
  5980                           
  5981                           ;main.c: 852: PORTCbits.RC2 = 0;
  5982  00306A  9482               	bcf	3970,2,c	;volatile
  5983                           
  5984                           ;main.c: 853: _delay((unsigned long)((18200)*(8000000/4000000.0)));
  5985  00306C  0E30               	movlw	48
  5986  00306E  0100               	movlb	0	; () banked
  5987  003070  6F80               	movwf	??_extendSensorAreaArm& (0+255),b
  5988  003072  0E44               	movlw	68
  5989  003074                     u9657:
  5990  003074  2EE8               	decfsz	wreg,f,c
  5991  003076  D7FE               	bra	u9657
  5992  003078  2F80               	decfsz	??_extendSensorAreaArm& (0+255),f,b
  5993  00307A  D7FC               	bra	u9657
  5994  00307C  F000               	nop	
  5995  00307E  0100               	movlb	0	; () banked
  5996  003080  4B82               	infsnz	extendSensorAreaArm@i& (0+255),f,b
  5997  003082  2B83               	incf	(extendSensorAreaArm@i+1)& (0+255),f,b
  5998  003084  D7E0               	goto	l4137
  5999  003086                     l4147:
  6000                           
  6001                           ; BSR set to: 0
  6002                           ;main.c: 854: }
  6003                           ;main.c: 855: _delay((unsigned long)((500)*(8000000/4000.0)));
  6004  003086  0E06               	movlw	6
  6005  003088  0100               	movlb	0	; () banked
  6006  00308A  6F81               	movwf	(??_extendSensorAreaArm+1)& (0+255),b
  6007  00308C  0E13               	movlw	19
  6008  00308E  0100               	movlb	0	; () banked
  6009  003090  6F80               	movwf	??_extendSensorAreaArm& (0+255),b
  6010  003092  0EAD               	movlw	173
  6011  003094                     u9667:
  6012  003094  2EE8               	decfsz	wreg,f,c
  6013  003096  D7FE               	bra	u9667
  6014  003098  2F80               	decfsz	??_extendSensorAreaArm& (0+255),f,b
  6015  00309A  D7FC               	bra	u9667
  6016  00309C  2F81               	decfsz	(??_extendSensorAreaArm+1)& (0+255),f,b
  6017  00309E  D7FA               	bra	u9667
  6018  0030A0  D000               	nop2	
  6019  0030A2  0012               	return		;funcret
  6020  0030A4                     __end_of_extendSensorAreaArm:
  6021                           	opt stack 0
  6022                           tblptru	equ	0xFF8
  6023                           tblptrh	equ	0xFF7
  6024                           tblptrl	equ	0xFF6
  6025                           tablat	equ	0xFF5
  6026                           intcon	equ	0xFF2
  6027                           intcon2	equ	0xFF1
  6028                           postinc0	equ	0xFEE
  6029                           wreg	equ	0xFE8
  6030                           indf1	equ	0xFE7
  6031                           postdec1	equ	0xFE5
  6032                           fsr1h	equ	0xFE2
  6033                           fsr1l	equ	0xFE1
  6034                           indf2	equ	0xFDF
  6035                           postinc2	equ	0xFDE
  6036                           postdec2	equ	0xFDD
  6037                           fsr2h	equ	0xFDA
  6038                           fsr2l	equ	0xFD9
  6039                           status	equ	0xFD8
  6040                           
  6041 ;; *************** function _disableDCmotors *****************
  6042 ;; Defined at:
  6043 ;;		line 797 in file "main.c"
  6044 ;; Parameters:    Size  Location     Type
  6045 ;;		None
  6046 ;; Auto vars:     Size  Location     Type
  6047 ;;		None
  6048 ;; Return value:  Size  Location     Type
  6049 ;;                  1    wreg      void 
  6050 ;; Registers used:
  6051 ;;		None
  6052 ;; Tracked objects:
  6053 ;;		On entry : 0/0
  6054 ;;		On exit  : 0/0
  6055 ;;		Unchanged: 0/0
  6056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6061 ;;Total ram usage:        0 bytes
  6062 ;; Hardware stack levels used:    1
  6063 ;; Hardware stack levels required when called:    6
  6064 ;; This function calls:
  6065 ;;		Nothing
  6066 ;; This function is called by:
  6067 ;;		_operation
  6068 ;; This function uses a non-reentrant model
  6069 ;;
  6070                           
  6071                           	psect	text22
  6072  003896                     __ptext22:
  6073                           	opt stack 0
  6074  003896                     _disableDCmotors:
  6075                           	opt stack 22
  6076                           
  6077                           ;main.c: 798: (INTCONbits.GIE = 0);
  6078                           
  6079                           ;incstack = 0
  6080  003896  9EF2               	bcf	intcon,7,c	;volatile
  6081                           
  6082                           ;main.c: 799: TMR0IE = 1;
  6083  003898  8AF2               	bsf	intcon,5,c	;volatile
  6084                           
  6085                           ;main.c: 800: TMR1IE = 0;
  6086  00389A  909D               	bcf	3997,0,c	;volatile
  6087  00389C  0012               	return		;funcret
  6088  00389E                     __end_of_disableDCmotors:
  6089                           	opt stack 0
  6090                           tblptru	equ	0xFF8
  6091                           tblptrh	equ	0xFF7
  6092                           tblptrl	equ	0xFF6
  6093                           tablat	equ	0xFF5
  6094                           intcon	equ	0xFF2
  6095                           intcon2	equ	0xFF1
  6096                           postinc0	equ	0xFEE
  6097                           wreg	equ	0xFE8
  6098                           indf1	equ	0xFE7
  6099                           postdec1	equ	0xFE5
  6100                           fsr1h	equ	0xFE2
  6101                           fsr1l	equ	0xFE1
  6102                           indf2	equ	0xFDF
  6103                           postinc2	equ	0xFDE
  6104                           postdec2	equ	0xFDD
  6105                           fsr2h	equ	0xFDA
  6106                           fsr2l	equ	0xFD9
  6107                           status	equ	0xFD8
  6108                           
  6109 ;; *************** function _capIsOnBottle *****************
  6110 ;; Defined at:
  6111 ;;		line 490 in file "main.c"
  6112 ;; Parameters:    Size  Location     Type
  6113 ;;		None
  6114 ;; Auto vars:     Size  Location     Type
  6115 ;;  i               2   48[BANK0 ] int 
  6116 ;;  rgbc            4   40[BANK0 ] unsigned char [4]
  6117 ;;  v2              2   46[BANK0 ] int 
  6118 ;;  v1              2   44[BANK0 ] int 
  6119 ;; Return value:  Size  Location     Type
  6120 ;;                  2   38[BANK0 ] int 
  6121 ;; Registers used:
  6122 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6123 ;; Tracked objects:
  6124 ;;		On entry : 0/0
  6125 ;;		On exit  : 0/0
  6126 ;;		Unchanged: 0/0
  6127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6128 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6129 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6131 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6132 ;;Total ram usage:       12 bytes
  6133 ;; Hardware stack levels used:    1
  6134 ;; Hardware stack levels required when called:    9
  6135 ;; This function calls:
  6136 ;;		_setMultiplexerToSensor
  6137 ;;		_storeRgbSensorInputIntegerValuesInto
  6138 ;; This function is called by:
  6139 ;;		_operation
  6140 ;; This function uses a non-reentrant model
  6141 ;;
  6142                           
  6143                           	psect	text23
  6144  002AAE                     __ptext23:
  6145                           	opt stack 0
  6146  002AAE                     _capIsOnBottle:
  6147                           	opt stack 19
  6148                           
  6149                           ;main.c: 491: unsigned char rgbc[4];
  6150                           ;main.c: 492: int v1, v2;
  6151                           ;main.c: 494: for (int i = 0; i < 4; i++){
  6152                           
  6153                           ;incstack = 0
  6154  002AAE  0E00               	movlw	0
  6155  002AB0  0100               	movlb	0	; () banked
  6156  002AB2  6FB1               	movwf	(capIsOnBottle@i+1)& (0+255),b
  6157  002AB4  0E00               	movlw	0
  6158  002AB6  6FB0               	movwf	capIsOnBottle@i& (0+255),b
  6159  002AB8                     l4077:
  6160                           
  6161                           ; BSR set to: 0
  6162  002AB8  0100               	movlb	0	; () banked
  6163  002ABA  BFB1               	btfsc	(capIsOnBottle@i+1)& (0+255),7,b
  6164  002ABC  D008               	goto	l4081
  6165  002ABE  0100               	movlb	0	; () banked
  6166  002AC0  51B1               	movf	(capIsOnBottle@i+1)& (0+255),w,b
  6167  002AC2  E113               	bnz	l4087
  6168  002AC4  0E04               	movlw	4
  6169  002AC6  0100               	movlb	0	; () banked
  6170  002AC8  5DB0               	subwf	capIsOnBottle@i& (0+255),w,b
  6171  002ACA  B0D8               	btfsc	status,0,c
  6172  002ACC  D00E               	goto	l4087
  6173  002ACE                     l4081:
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;main.c: 495: rgbc[i] = 0;
  6177  002ACE  0EA8               	movlw	low capIsOnBottle@rgbc
  6178  002AD0  0100               	movlb	0	; () banked
  6179  002AD2  25B0               	addwf	capIsOnBottle@i& (0+255),w,b
  6180  002AD4  6ED9               	movwf	fsr2l,c
  6181  002AD6  0E00               	movlw	high capIsOnBottle@rgbc
  6182  002AD8  0100               	movlb	0	; () banked
  6183  002ADA  21B1               	addwfc	(capIsOnBottle@i+1)& (0+255),w,b
  6184  002ADC  6EDA               	movwf	fsr2h,c
  6185  002ADE  0E00               	movlw	0
  6186  002AE0  6EDF               	movwf	indf2,c
  6187                           
  6188                           ; BSR set to: 0
  6189  002AE2  0100               	movlb	0	; () banked
  6190  002AE4  4BB0               	infsnz	capIsOnBottle@i& (0+255),f,b
  6191  002AE6  2BB1               	incf	(capIsOnBottle@i+1)& (0+255),f,b
  6192  002AE8  D7E7               	goto	l4077
  6193  002AEA                     l4087:
  6194                           
  6195                           ; BSR set to: 0
  6196                           ;main.c: 496: }
  6197                           ;main.c: 498: setMultiplexerToSensor(2);
  6198  002AEA  0E00               	movlw	0
  6199  002AEC  0100               	movlb	0	; () banked
  6200  002AEE  6F84               	movwf	(setMultiplexerToSensor@num+1)& (0+255),b
  6201  002AF0  0E02               	movlw	2
  6202  002AF2  6F83               	movwf	setMultiplexerToSensor@num& (0+255),b
  6203  002AF4  EC32  F017         	call	_setMultiplexerToSensor	;wreg free
  6204                           
  6205                           ;main.c: 499: v1 = storeRgbSensorInputIntegerValuesInto(&rgbc, 2);
  6206  002AF8  0EA8               	movlw	low capIsOnBottle@rgbc
  6207  002AFA  0100               	movlb	0	; () banked
  6208  002AFC  6F8E               	movwf	storeRgbSensorInputIntegerValuesInto@colorValues& (0+255),b
  6209  002AFE  0E00               	movlw	high capIsOnBottle@rgbc
  6210  002B00  0100               	movlb	0	; () banked
  6211  002B02  6F8F               	movwf	(storeRgbSensorInputIntegerValuesInto@colorValues+1)& (0+255),b
  6212  002B04  0E00               	movlw	0
  6213  002B06  0100               	movlb	0	; () banked
  6214  002B08  6F91               	movwf	(storeRgbSensorInputIntegerValuesInto@sensorNum+1)& (0+255),b
  6215  002B0A  0E02               	movlw	2
  6216  002B0C  6F90               	movwf	storeRgbSensorInputIntegerValuesInto@sensorNum& (0+255),b
  6217  002B0E  EC19  F012         	call	_storeRgbSensorInputIntegerValuesInto	;wreg free
  6218  002B12  C08E  F0AC         	movff	?_storeRgbSensorInputIntegerValuesInto,capIsOnBottle@v1
  6219  002B16  C08F  F0AD         	movff	?_storeRgbSensorInputIntegerValuesInto+1,capIsOnBottle@v1+1
  6220                           
  6221                           ;main.c: 501: setMultiplexerToSensor(1);
  6222  002B1A  0E00               	movlw	0
  6223  002B1C  0100               	movlb	0	; () banked
  6224  002B1E  6F84               	movwf	(setMultiplexerToSensor@num+1)& (0+255),b
  6225  002B20  0E01               	movlw	1
  6226  002B22  6F83               	movwf	setMultiplexerToSensor@num& (0+255),b
  6227  002B24  EC32  F017         	call	_setMultiplexerToSensor	;wreg free
  6228                           
  6229                           ;main.c: 502: v2 = storeRgbSensorInputIntegerValuesInto(&rgbc, 1);
  6230  002B28  0EA8               	movlw	low capIsOnBottle@rgbc
  6231  002B2A  0100               	movlb	0	; () banked
  6232  002B2C  6F8E               	movwf	storeRgbSensorInputIntegerValuesInto@colorValues& (0+255),b
  6233  002B2E  0E00               	movlw	high capIsOnBottle@rgbc
  6234  002B30  0100               	movlb	0	; () banked
  6235  002B32  6F8F               	movwf	(storeRgbSensorInputIntegerValuesInto@colorValues+1)& (0+255),b
  6236  002B34  0E00               	movlw	0
  6237  002B36  0100               	movlb	0	; () banked
  6238  002B38  6F91               	movwf	(storeRgbSensorInputIntegerValuesInto@sensorNum+1)& (0+255),b
  6239  002B3A  0E01               	movlw	1
  6240  002B3C  6F90               	movwf	storeRgbSensorInputIntegerValuesInto@sensorNum& (0+255),b
  6241  002B3E  EC19  F012         	call	_storeRgbSensorInputIntegerValuesInto	;wreg free
  6242  002B42  C08E  F0AE         	movff	?_storeRgbSensorInputIntegerValuesInto,capIsOnBottle@v2
  6243  002B46  C08F  F0AF         	movff	?_storeRgbSensorInputIntegerValuesInto+1,capIsOnBottle@v2+1
  6244                           
  6245                           ;main.c: 506: return v1 | v2;
  6246  002B4A  0100               	movlb	0	; () banked
  6247  002B4C  51AE               	movf	capIsOnBottle@v2& (0+255),w,b
  6248  002B4E  0100               	movlb	0	; () banked
  6249  002B50  11AC               	iorwf	capIsOnBottle@v1& (0+255),w,b
  6250  002B52  0100               	movlb	0	; () banked
  6251  002B54  6FA6               	movwf	?_capIsOnBottle& (0+255),b
  6252  002B56  0100               	movlb	0	; () banked
  6253  002B58  51AF               	movf	(capIsOnBottle@v2+1)& (0+255),w,b
  6254  002B5A  0100               	movlb	0	; () banked
  6255  002B5C  11AD               	iorwf	(capIsOnBottle@v1+1)& (0+255),w,b
  6256  002B5E  0100               	movlb	0	; () banked
  6257  002B60  6FA7               	movwf	(?_capIsOnBottle+1)& (0+255),b
  6258  002B62  0012               	return	
  6259  002B64                     __end_of_capIsOnBottle:
  6260                           	opt stack 0
  6261                           tblptru	equ	0xFF8
  6262                           tblptrh	equ	0xFF7
  6263                           tblptrl	equ	0xFF6
  6264                           tablat	equ	0xFF5
  6265                           intcon	equ	0xFF2
  6266                           intcon2	equ	0xFF1
  6267                           postinc0	equ	0xFEE
  6268                           wreg	equ	0xFE8
  6269                           indf1	equ	0xFE7
  6270                           postdec1	equ	0xFE5
  6271                           fsr1h	equ	0xFE2
  6272                           fsr1l	equ	0xFE1
  6273                           indf2	equ	0xFDF
  6274                           postinc2	equ	0xFDE
  6275                           postdec2	equ	0xFDD
  6276                           fsr2h	equ	0xFDA
  6277                           fsr2l	equ	0xFD9
  6278                           status	equ	0xFD8
  6279                           
  6280 ;; *************** function _storeRgbSensorInputIntegerValuesInto *****************
  6281 ;; Defined at:
  6282 ;;		line 527 in file "main.c"
  6283 ;; Parameters:    Size  Location     Type
  6284 ;;  colorValues     2   14[BANK0 ] PTR PTR unsigned char 
  6285 ;;		 -> capIsOnBottle@rgbc(4), 
  6286 ;;  sensorNum       2   16[BANK0 ] int 
  6287 ;; Auto vars:     Size  Location     Type
  6288 ;;  colorValue      4   34[BANK0 ] unsigned char [4]
  6289 ;;  clear           2   32[BANK0 ] unsigned char [2]
  6290 ;;  blue            2   30[BANK0 ] unsigned char [2]
  6291 ;;  green           2   28[BANK0 ] unsigned char [2]
  6292 ;;  red             2   26[BANK0 ] unsigned char [2]
  6293 ;;  c1              2   24[BANK0 ] int 
  6294 ;;  b1              2   22[BANK0 ] int 
  6295 ;;  g1              2   20[BANK0 ] int 
  6296 ;;  r1              2   18[BANK0 ] int 
  6297 ;; Return value:  Size  Location     Type
  6298 ;;                  2   14[BANK0 ] int 
  6299 ;; Registers used:
  6300 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6301 ;; Tracked objects:
  6302 ;;		On entry : 0/0
  6303 ;;		On exit  : 0/0
  6304 ;;		Unchanged: 0/0
  6305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6306 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6307 ;;      Locals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6309 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6310 ;;Total ram usage:       24 bytes
  6311 ;; Hardware stack levels used:    1
  6312 ;; Hardware stack levels required when called:    8
  6313 ;; This function calls:
  6314 ;;		_I2C_Master_Read
  6315 ;;		_I2C_Master_Start
  6316 ;;		_I2C_Master_Stop
  6317 ;;		_I2C_Master_Write
  6318 ;;		_analyzeRgbcForSensor
  6319 ;; This function is called by:
  6320 ;;		_capIsOnBottle
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324                           	psect	text24
  6325  002432                     __ptext24:
  6326                           	opt stack 0
  6327  002432                     _storeRgbSensorInputIntegerValuesInto:
  6328                           	opt stack 19
  6329                           
  6330                           ;main.c: 529: I2C_Master_Start();
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;incstack = 0
  6334  002432  EC57  F01C         	call	_I2C_Master_Start	;wreg free
  6335                           
  6336                           ;main.c: 530: I2C_Master_Write(0b01010010);
  6337  002436  0E00               	movlw	0
  6338  002438  0100               	movlb	0	; () banked
  6339  00243A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6340  00243C  0E52               	movlw	82
  6341  00243E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6342  002440  EC41  F01C         	call	_I2C_Master_Write	;wreg free
  6343                           
  6344                           ;main.c: 531: I2C_Master_Write(0b10000000);
  6345  002444  0E00               	movlw	0
  6346  002446  0100               	movlb	0	; () banked
  6347  002448  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6348  00244A  0E80               	movlw	128
  6349  00244C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6350  00244E  EC41  F01C         	call	_I2C_Master_Write	;wreg free
  6351                           
  6352                           ;main.c: 532: I2C_Master_Write(0b00000011);
  6353  002452  0E00               	movlw	0
  6354  002454  0100               	movlb	0	; () banked
  6355  002456  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6356  002458  0E03               	movlw	3
  6357  00245A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6358  00245C  EC41  F01C         	call	_I2C_Master_Write	;wreg free
  6359                           
  6360                           ;main.c: 533: I2C_Master_Stop();
  6361  002460  EC53  F01C         	call	_I2C_Master_Stop	;wreg free
  6362                           
  6363                           ;main.c: 536: I2C_Master_Start();
  6364  002464  EC57  F01C         	call	_I2C_Master_Start	;wreg free
  6365                           
  6366                           ;main.c: 537: I2C_Master_Write(0b01010010);
  6367  002468  0E00               	movlw	0
  6368  00246A  0100               	movlb	0	; () banked
  6369  00246C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6370  00246E  0E52               	movlw	82
  6371  002470  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6372  002472  EC41  F01C         	call	_I2C_Master_Write	;wreg free
  6373                           
  6374                           ;main.c: 538: I2C_Master_Write(0b10110100);
  6375  002476  0E00               	movlw	0
  6376  002478  0100               	movlb	0	; () banked
  6377  00247A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6378  00247C  0EB4               	movlw	180
  6379  00247E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6380  002480  EC41  F01C         	call	_I2C_Master_Write	;wreg free
  6381                           
  6382                           ;main.c: 539: I2C_Master_Start();
  6383  002484  EC57  F01C         	call	_I2C_Master_Start	;wreg free
  6384                           
  6385                           ;main.c: 540: I2C_Master_Write(0b01010011);
  6386  002488  0E00               	movlw	0
  6387  00248A  0100               	movlb	0	; () banked
  6388  00248C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6389  00248E  0E53               	movlw	83
  6390  002490  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6391  002492  EC41  F01C         	call	_I2C_Master_Write	;wreg free
  6392                           
  6393                           ;main.c: 542: unsigned char red[2];
  6394                           ;main.c: 543: unsigned char green[2];
  6395                           ;main.c: 544: unsigned char blue[2];
  6396                           ;main.c: 545: unsigned char clear[2];
  6397                           ;main.c: 547: clear[1] = I2C_Master_Read(1);
  6398  002496  0E01               	movlw	1
  6399  002498  EC3F  F01B         	call	_I2C_Master_Read
  6400  00249C  0100               	movlb	0	; () banked
  6401  00249E  6FA1               	movwf	(storeRgbSensorInputIntegerValuesInto@clear+1)& (0+255),b
  6402                           
  6403                           ;main.c: 548: clear[0] = I2C_Master_Read(1);
  6404  0024A0  0E01               	movlw	1
  6405  0024A2  EC3F  F01B         	call	_I2C_Master_Read
  6406  0024A6  0100               	movlb	0	; () banked
  6407  0024A8  6FA0               	movwf	storeRgbSensorInputIntegerValuesInto@clear& (0+255),b
  6408                           
  6409                           ;main.c: 550: red[1] = I2C_Master_Read(1);
  6410  0024AA  0E01               	movlw	1
  6411  0024AC  EC3F  F01B         	call	_I2C_Master_Read
  6412  0024B0  0100               	movlb	0	; () banked
  6413  0024B2  6F9B               	movwf	(storeRgbSensorInputIntegerValuesInto@red+1)& (0+255),b
  6414                           
  6415                           ;main.c: 551: red[0] = I2C_Master_Read(1);
  6416  0024B4  0E01               	movlw	1
  6417  0024B6  EC3F  F01B         	call	_I2C_Master_Read
  6418  0024BA  0100               	movlb	0	; () banked
  6419  0024BC  6F9A               	movwf	storeRgbSensorInputIntegerValuesInto@red& (0+255),b
  6420                           
  6421                           ;main.c: 553: green[1] = I2C_Master_Read(1);
  6422  0024BE  0E01               	movlw	1
  6423  0024C0  EC3F  F01B         	call	_I2C_Master_Read
  6424  0024C4  0100               	movlb	0	; () banked
  6425  0024C6  6F9D               	movwf	(storeRgbSensorInputIntegerValuesInto@green+1)& (0+255),b
  6426                           
  6427                           ;main.c: 554: green[0] = I2C_Master_Read(1);
  6428  0024C8  0E01               	movlw	1
  6429  0024CA  EC3F  F01B         	call	_I2C_Master_Read
  6430  0024CE  0100               	movlb	0	; () banked
  6431  0024D0  6F9C               	movwf	storeRgbSensorInputIntegerValuesInto@green& (0+255),b
  6432                           
  6433                           ;main.c: 556: blue[1] = I2C_Master_Read(1);
  6434  0024D2  0E01               	movlw	1
  6435  0024D4  EC3F  F01B         	call	_I2C_Master_Read
  6436  0024D8  0100               	movlb	0	; () banked
  6437  0024DA  6F9F               	movwf	(storeRgbSensorInputIntegerValuesInto@blue+1)& (0+255),b
  6438                           
  6439                           ;main.c: 557: blue[0] = I2C_Master_Read(0);
  6440  0024DC  0E00               	movlw	0
  6441  0024DE  EC3F  F01B         	call	_I2C_Master_Read
  6442  0024E2  0100               	movlb	0	; () banked
  6443  0024E4  6F9E               	movwf	storeRgbSensorInputIntegerValuesInto@blue& (0+255),b
  6444                           
  6445                           ;main.c: 560: unsigned char colorValue[4];
  6446                           ;main.c: 561: I2C_Master_Stop();
  6447  0024E6  EC53  F01C         	call	_I2C_Master_Stop	;wreg free
  6448                           
  6449                           ;main.c: 562: colorValue[0] = (red[0]<<8) | red[1];
  6450  0024EA  C09B  F0A2         	movff	storeRgbSensorInputIntegerValuesInto@red+1,storeRgbSensorInputIntegerValuesInto@c
      +                          olorValue
  6451                           
  6452                           ;main.c: 563: colorValue[1] = (green[0]<<8) | green[1];
  6453  0024EE  C09D  F0A3         	movff	storeRgbSensorInputIntegerValuesInto@green+1,storeRgbSensorInputIntegerValuesInto
      +                          @colorValue+1
  6454                           
  6455                           ;main.c: 564: colorValue[2] = (blue[0]<<8) | blue[1];
  6456  0024F2  C09F  F0A4         	movff	storeRgbSensorInputIntegerValuesInto@blue+1,storeRgbSensorInputIntegerValuesInto@
      +                          colorValue+2
  6457                           
  6458                           ;main.c: 565: colorValue[3] = (clear[0]<<8) | clear[1];
  6459  0024F6  C0A1  F0A5         	movff	storeRgbSensorInputIntegerValuesInto@clear+1,storeRgbSensorInputIntegerValuesInto
      +                          @colorValue+3
  6460                           
  6461                           ;main.c: 567: int r1 = colorValue[0], g1 = colorValue[1], b1 = colorValue[2], c1 =colorV
      +                          alue[3];
  6462  0024FA  C0A2  F092         	movff	storeRgbSensorInputIntegerValuesInto@colorValue,storeRgbSensorInputIntegerValuesI
      +                          nto@r1
  6463  0024FE  0100               	movlb	0	; () banked
  6464  002500  6B93               	clrf	(storeRgbSensorInputIntegerValuesInto@r1+1)& (0+255),b
  6465                           
  6466                           ; BSR set to: 0
  6467  002502  C0A3  F094         	movff	storeRgbSensorInputIntegerValuesInto@colorValue+1,storeRgbSensorInputIntegerValue
      +                          sInto@g1
  6468  002506  0100               	movlb	0	; () banked
  6469  002508  6B95               	clrf	(storeRgbSensorInputIntegerValuesInto@g1+1)& (0+255),b
  6470                           
  6471                           ; BSR set to: 0
  6472  00250A  C0A4  F096         	movff	storeRgbSensorInputIntegerValuesInto@colorValue+2,storeRgbSensorInputIntegerValue
      +                          sInto@b1
  6473  00250E  0100               	movlb	0	; () banked
  6474  002510  6B97               	clrf	(storeRgbSensorInputIntegerValuesInto@b1+1)& (0+255),b
  6475                           
  6476                           ; BSR set to: 0
  6477  002512  C0A5  F098         	movff	storeRgbSensorInputIntegerValuesInto@colorValue+3,storeRgbSensorInputIntegerValue
      +                          sInto@c1
  6478  002516  0100               	movlb	0	; () banked
  6479  002518  6B99               	clrf	(storeRgbSensorInputIntegerValuesInto@c1+1)& (0+255),b
  6480                           
  6481                           ; BSR set to: 0
  6482                           ;main.c: 572: return analyzeRgbcForSensor(sensorNum, colorValue);
  6483  00251A  C090  F080         	movff	storeRgbSensorInputIntegerValuesInto@sensorNum,analyzeRgbcForSensor@sensorNum
  6484  00251E  C091  F081         	movff	storeRgbSensorInputIntegerValuesInto@sensorNum+1,analyzeRgbcForSensor@sensorNum+1
  6485  002522  0EA2               	movlw	low storeRgbSensorInputIntegerValuesInto@colorValue
  6486  002524  0100               	movlb	0	; () banked
  6487  002526  6F82               	movwf	analyzeRgbcForSensor@rgbc& (0+255),b
  6488  002528  0E00               	movlw	high storeRgbSensorInputIntegerValuesInto@colorValue
  6489  00252A  0100               	movlb	0	; () banked
  6490  00252C  6F83               	movwf	(analyzeRgbcForSensor@rgbc+1)& (0+255),b
  6491  00252E  ECB8  F00A         	call	_analyzeRgbcForSensor	;wreg free
  6492  002532  C080  F08E         	movff	?_analyzeRgbcForSensor,?_storeRgbSensorInputIntegerValuesInto
  6493  002536  C081  F08F         	movff	?_analyzeRgbcForSensor+1,?_storeRgbSensorInputIntegerValuesInto+1
  6494  00253A  0012               	return	
  6495  00253C                     __end_of_storeRgbSensorInputIntegerValuesInto:
  6496                           	opt stack 0
  6497                           tblptru	equ	0xFF8
  6498                           tblptrh	equ	0xFF7
  6499                           tblptrl	equ	0xFF6
  6500                           tablat	equ	0xFF5
  6501                           intcon	equ	0xFF2
  6502                           intcon2	equ	0xFF1
  6503                           postinc0	equ	0xFEE
  6504                           wreg	equ	0xFE8
  6505                           indf1	equ	0xFE7
  6506                           postdec1	equ	0xFE5
  6507                           fsr1h	equ	0xFE2
  6508                           fsr1l	equ	0xFE1
  6509                           indf2	equ	0xFDF
  6510                           postinc2	equ	0xFDE
  6511                           postdec2	equ	0xFDD
  6512                           fsr2h	equ	0xFDA
  6513                           fsr2l	equ	0xFD9
  6514                           status	equ	0xFD8
  6515                           
  6516 ;; *************** function _analyzeRgbcForSensor *****************
  6517 ;; Defined at:
  6518 ;;		line 589 in file "main.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;  sensorNum       2    0[BANK0 ] int 
  6521 ;;  rgbc            2    2[BANK0 ] PTR unsigned char 
  6522 ;;		 -> storeRgbSensorInputIntegerValuesInto@colorValue(4), 
  6523 ;; Auto vars:     Size  Location     Type
  6524 ;;  g1              2   12[BANK0 ] int 
  6525 ;;  r1              2   10[BANK0 ] int 
  6526 ;;  c1              2    8[BANK0 ] int 
  6527 ;;  b1              2    6[BANK0 ] int 
  6528 ;; Return value:  Size  Location     Type
  6529 ;;                  2    0[BANK0 ] int 
  6530 ;; Registers used:
  6531 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6532 ;; Tracked objects:
  6533 ;;		On entry : 0/0
  6534 ;;		On exit  : 0/0
  6535 ;;		Unchanged: 0/0
  6536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6537 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6538 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6539 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6540 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6541 ;;Total ram usage:       14 bytes
  6542 ;; Hardware stack levels used:    1
  6543 ;; Hardware stack levels required when called:    6
  6544 ;; This function calls:
  6545 ;;		Nothing
  6546 ;; This function is called by:
  6547 ;;		_storeRgbSensorInputIntegerValuesInto
  6548 ;; This function uses a non-reentrant model
  6549 ;;
  6550                           
  6551                           	psect	text25
  6552  001570                     __ptext25:
  6553                           	opt stack 0
  6554  001570                     _analyzeRgbcForSensor:
  6555                           	opt stack 20
  6556                           
  6557                           ;main.c: 590: int r1 = rgbc[0], g1 = rgbc[1], b1 = rgbc[2], c1 =rgbc[3];
  6558                           
  6559                           ;incstack = 0
  6560  001570  C082  FFD9         	movff	analyzeRgbcForSensor@rgbc,fsr2l
  6561  001574  C083  FFDA         	movff	analyzeRgbcForSensor@rgbc+1,fsr2h
  6562  001578  50DF               	movf	indf2,w,c
  6563  00157A  0100               	movlb	0	; () banked
  6564  00157C  6F84               	movwf	??_analyzeRgbcForSensor& (0+255),b
  6565  00157E  0100               	movlb	0	; () banked
  6566  001580  5184               	movf	??_analyzeRgbcForSensor& (0+255),w,b
  6567  001582  0100               	movlb	0	; () banked
  6568  001584  6F8A               	movwf	analyzeRgbcForSensor@r1& (0+255),b
  6569  001586  6B8B               	clrf	(analyzeRgbcForSensor@r1+1)& (0+255),b
  6570  001588  0100               	movlb	0	; () banked
  6571  00158A  EE20 F001          	lfsr	2,1
  6572  00158E  5182               	movf	analyzeRgbcForSensor@rgbc& (0+255),w,b
  6573  001590  26D9               	addwf	fsr2l,f,c
  6574  001592  5183               	movf	(analyzeRgbcForSensor@rgbc+1)& (0+255),w,b
  6575  001594  22DA               	addwfc	fsr2h,f,c
  6576  001596  50DF               	movf	indf2,w,c
  6577  001598  0100               	movlb	0	; () banked
  6578  00159A  6F84               	movwf	??_analyzeRgbcForSensor& (0+255),b
  6579  00159C  0100               	movlb	0	; () banked
  6580  00159E  5184               	movf	??_analyzeRgbcForSensor& (0+255),w,b
  6581  0015A0  0100               	movlb	0	; () banked
  6582  0015A2  6F8C               	movwf	analyzeRgbcForSensor@g1& (0+255),b
  6583  0015A4  6B8D               	clrf	(analyzeRgbcForSensor@g1+1)& (0+255),b
  6584  0015A6  0100               	movlb	0	; () banked
  6585  0015A8  EE20 F002          	lfsr	2,2
  6586  0015AC  5182               	movf	analyzeRgbcForSensor@rgbc& (0+255),w,b
  6587  0015AE  26D9               	addwf	fsr2l,f,c
  6588  0015B0  5183               	movf	(analyzeRgbcForSensor@rgbc+1)& (0+255),w,b
  6589  0015B2  22DA               	addwfc	fsr2h,f,c
  6590  0015B4  50DF               	movf	indf2,w,c
  6591  0015B6  0100               	movlb	0	; () banked
  6592  0015B8  6F84               	movwf	??_analyzeRgbcForSensor& (0+255),b
  6593  0015BA  0100               	movlb	0	; () banked
  6594  0015BC  5184               	movf	??_analyzeRgbcForSensor& (0+255),w,b
  6595  0015BE  0100               	movlb	0	; () banked
  6596  0015C0  6F86               	movwf	analyzeRgbcForSensor@b1& (0+255),b
  6597  0015C2  6B87               	clrf	(analyzeRgbcForSensor@b1+1)& (0+255),b
  6598  0015C4  0100               	movlb	0	; () banked
  6599  0015C6  EE20 F003          	lfsr	2,3
  6600  0015CA  5182               	movf	analyzeRgbcForSensor@rgbc& (0+255),w,b
  6601  0015CC  26D9               	addwf	fsr2l,f,c
  6602  0015CE  5183               	movf	(analyzeRgbcForSensor@rgbc+1)& (0+255),w,b
  6603  0015D0  22DA               	addwfc	fsr2h,f,c
  6604  0015D2  50DF               	movf	indf2,w,c
  6605  0015D4  0100               	movlb	0	; () banked
  6606  0015D6  6F84               	movwf	??_analyzeRgbcForSensor& (0+255),b
  6607  0015D8  0100               	movlb	0	; () banked
  6608  0015DA  5184               	movf	??_analyzeRgbcForSensor& (0+255),w,b
  6609  0015DC  0100               	movlb	0	; () banked
  6610  0015DE  6F88               	movwf	analyzeRgbcForSensor@c1& (0+255),b
  6611  0015E0  6B89               	clrf	(analyzeRgbcForSensor@c1+1)& (0+255),b
  6612                           
  6613                           ; BSR set to: 0
  6614                           ;main.c: 595: if (sensorNum == 2){
  6615  0015E2  0E02               	movlw	2
  6616  0015E4  0100               	movlb	0	; () banked
  6617  0015E6  1980               	xorwf	analyzeRgbcForSensor@sensorNum& (0+255),w,b
  6618  0015E8  0100               	movlb	0	; () banked
  6619  0015EA  1181               	iorwf	(analyzeRgbcForSensor@sensorNum+1)& (0+255),w,b
  6620  0015EC  A4D8               	btfss	status,2,c
  6621  0015EE  D06B               	goto	l3641
  6622                           
  6623                           ; BSR set to: 0
  6624                           ;main.c: 596: if (r1 > 190 && g1 > 100 && b1 > 100 && c1 > 100 && currentBottle == 1){
  6625  0015F0  0100               	movlb	0	; () banked
  6626  0015F2  BF8B               	btfsc	(analyzeRgbcForSensor@r1+1)& (0+255),7,b
  6627  0015F4  D035               	goto	l3623
  6628  0015F6  0100               	movlb	0	; () banked
  6629  0015F8  518B               	movf	(analyzeRgbcForSensor@r1+1)& (0+255),w,b
  6630  0015FA  E105               	bnz	u3080
  6631  0015FC  0EBF               	movlw	191
  6632  0015FE  0100               	movlb	0	; () banked
  6633  001600  5D8A               	subwf	analyzeRgbcForSensor@r1& (0+255),w,b
  6634  001602  A0D8               	btfss	status,0,c
  6635  001604  D02D               	goto	l3623
  6636  001606                     u3080:
  6637                           
  6638                           ; BSR set to: 0
  6639  001606  0100               	movlb	0	; () banked
  6640  001608  BF8D               	btfsc	(analyzeRgbcForSensor@g1+1)& (0+255),7,b
  6641  00160A  D02A               	goto	l3623
  6642  00160C  0100               	movlb	0	; () banked
  6643  00160E  518D               	movf	(analyzeRgbcForSensor@g1+1)& (0+255),w,b
  6644  001610  E105               	bnz	u3090
  6645  001612  0E65               	movlw	101
  6646  001614  0100               	movlb	0	; () banked
  6647  001616  5D8C               	subwf	analyzeRgbcForSensor@g1& (0+255),w,b
  6648  001618  A0D8               	btfss	status,0,c
  6649  00161A  D022               	goto	l3623
  6650  00161C                     u3090:
  6651                           
  6652                           ; BSR set to: 0
  6653  00161C  0100               	movlb	0	; () banked
  6654  00161E  BF87               	btfsc	(analyzeRgbcForSensor@b1+1)& (0+255),7,b
  6655  001620  D01F               	goto	l3623
  6656  001622  0100               	movlb	0	; () banked
  6657  001624  5187               	movf	(analyzeRgbcForSensor@b1+1)& (0+255),w,b
  6658  001626  E105               	bnz	u3100
  6659  001628  0E65               	movlw	101
  6660  00162A  0100               	movlb	0	; () banked
  6661  00162C  5D86               	subwf	analyzeRgbcForSensor@b1& (0+255),w,b
  6662  00162E  A0D8               	btfss	status,0,c
  6663  001630  D017               	goto	l3623
  6664  001632                     u3100:
  6665                           
  6666                           ; BSR set to: 0
  6667  001632  0100               	movlb	0	; () banked
  6668  001634  BF89               	btfsc	(analyzeRgbcForSensor@c1+1)& (0+255),7,b
  6669  001636  D014               	goto	l3623
  6670  001638  0100               	movlb	0	; () banked
  6671  00163A  5189               	movf	(analyzeRgbcForSensor@c1+1)& (0+255),w,b
  6672  00163C  E105               	bnz	u3110
  6673  00163E  0E65               	movlw	101
  6674  001640  0100               	movlb	0	; () banked
  6675  001642  5D88               	subwf	analyzeRgbcForSensor@c1& (0+255),w,b
  6676  001644  A0D8               	btfss	status,0,c
  6677  001646  D00C               	goto	l3623
  6678  001648                     u3110:
  6679                           
  6680                           ; BSR set to: 0
  6681  001648  0100               	movlb	0	; () banked
  6682  00164A  05E9               	decf	_currentBottle& (0+255),w,b
  6683  00164C  0100               	movlb	0	; () banked
  6684  00164E  11EA               	iorwf	(_currentBottle+1)& (0+255),w,b
  6685  001650  A4D8               	btfss	status,2,c
  6686  001652  D006               	goto	l3623
  6687                           
  6688                           ; BSR set to: 0
  6689                           ;main.c: 597: return 1;
  6690  001654  0E00               	movlw	0
  6691  001656  0100               	movlb	0	; () banked
  6692  001658  6F81               	movwf	(?_analyzeRgbcForSensor+1)& (0+255),b
  6693  00165A  0E01               	movlw	1
  6694  00165C  6F80               	movwf	?_analyzeRgbcForSensor& (0+255),b
  6695                           
  6696                           ; BSR set to: 0
  6697                           ;main.c: 598: }else if (r1 > 100 && g1 < 100 && c1 < 170 && currentBottle == 0){
  6698                           
  6699                           ; BSR set to: 0
  6700  00165E  0012               	return	
  6701  001660                     l3623:
  6702                           
  6703                           ; BSR set to: 0
  6704  001660  0100               	movlb	0	; () banked
  6705  001662  BF8B               	btfsc	(analyzeRgbcForSensor@r1+1)& (0+255),7,b
  6706  001664  D02A               	goto	l3637
  6707  001666  0100               	movlb	0	; () banked
  6708  001668  518B               	movf	(analyzeRgbcForSensor@r1+1)& (0+255),w,b
  6709  00166A  E105               	bnz	u3130
  6710  00166C  0E65               	movlw	101
  6711  00166E  0100               	movlb	0	; () banked
  6712  001670  5D8A               	subwf	analyzeRgbcForSensor@r1& (0+255),w,b
  6713  001672  A0D8               	btfss	status,0,c
  6714  001674  D022               	goto	l3637
  6715  001676                     u3130:
  6716                           
  6717                           ; BSR set to: 0
  6718  001676  0100               	movlb	0	; () banked
  6719  001678  BF8D               	btfsc	(analyzeRgbcForSensor@g1+1)& (0+255),7,b
  6720  00167A  D008               	goto	l3627
  6721  00167C  0100               	movlb	0	; () banked
  6722  00167E  518D               	movf	(analyzeRgbcForSensor@g1+1)& (0+255),w,b
  6723  001680  E11C               	bnz	l3637
  6724  001682  0E64               	movlw	100
  6725  001684  0100               	movlb	0	; () banked
  6726  001686  5D8C               	subwf	analyzeRgbcForSensor@g1& (0+255),w,b
  6727  001688  B0D8               	btfsc	status,0,c
  6728  00168A  D017               	goto	l3637
  6729  00168C                     l3627:
  6730                           
  6731                           ; BSR set to: 0
  6732  00168C  0100               	movlb	0	; () banked
  6733  00168E  BF89               	btfsc	(analyzeRgbcForSensor@c1+1)& (0+255),7,b
  6734  001690  D008               	goto	l3629
  6735  001692  0100               	movlb	0	; () banked
  6736  001694  5189               	movf	(analyzeRgbcForSensor@c1+1)& (0+255),w,b
  6737  001696  E111               	bnz	l3637
  6738  001698  0EAA               	movlw	170
  6739  00169A  0100               	movlb	0	; () banked
  6740  00169C  5D88               	subwf	analyzeRgbcForSensor@c1& (0+255),w,b
  6741  00169E  B0D8               	btfsc	status,0,c
  6742  0016A0  D00C               	goto	l3637
  6743  0016A2                     l3629:
  6744                           
  6745                           ; BSR set to: 0
  6746  0016A2  0100               	movlb	0	; () banked
  6747  0016A4  51E9               	movf	_currentBottle& (0+255),w,b
  6748  0016A6  0100               	movlb	0	; () banked
  6749  0016A8  11EA               	iorwf	(_currentBottle+1)& (0+255),w,b
  6750  0016AA  A4D8               	btfss	status,2,c
  6751  0016AC  D006               	goto	l3637
  6752                           
  6753                           ; BSR set to: 0
  6754                           ;main.c: 599: return 1;
  6755  0016AE  0E00               	movlw	0
  6756  0016B0  0100               	movlb	0	; () banked
  6757  0016B2  6F81               	movwf	(?_analyzeRgbcForSensor+1)& (0+255),b
  6758  0016B4  0E01               	movlw	1
  6759  0016B6  6F80               	movwf	?_analyzeRgbcForSensor& (0+255),b
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;main.c: 600: }else{
  6763                           
  6764                           ; BSR set to: 0
  6765  0016B8  0012               	return	
  6766  0016BA                     l3637:
  6767                           
  6768                           ; BSR set to: 0
  6769                           ;main.c: 601: return 0;
  6770  0016BA  0E00               	movlw	0
  6771  0016BC  0100               	movlb	0	; () banked
  6772  0016BE  6F81               	movwf	(?_analyzeRgbcForSensor+1)& (0+255),b
  6773  0016C0  0E00               	movlw	0
  6774  0016C2  6F80               	movwf	?_analyzeRgbcForSensor& (0+255),b
  6775                           
  6776                           ; BSR set to: 0
  6777                           ;main.c: 602: }
  6778                           ;main.c: 603: }else if (sensorNum == 1){
  6779                           
  6780                           ; BSR set to: 0
  6781                           
  6782                           ; BSR set to: 0
  6783  0016C4  0012               	return	
  6784  0016C6                     l3641:
  6785                           
  6786                           ; BSR set to: 0
  6787  0016C6  0100               	movlb	0	; () banked
  6788  0016C8  0580               	decf	analyzeRgbcForSensor@sensorNum& (0+255),w,b
  6789  0016CA  0100               	movlb	0	; () banked
  6790  0016CC  1181               	iorwf	(analyzeRgbcForSensor@sensorNum+1)& (0+255),w,b
  6791  0016CE  A4D8               	btfss	status,2,c
  6792  0016D0  0012               	return	
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;main.c: 604: if (((r1 > 80 && b1+g1 < 260 && c1 > 70) | (r1 < 120 && g1 > 180 && c1 > 8
      +                          0)) && currentBottle == 0){
  6796  0016D2  0100               	movlb	0	; () banked
  6797  0016D4  BF8B               	btfsc	(analyzeRgbcForSensor@r1+1)& (0+255),7,b
  6798  0016D6  D02A               	goto	l3649
  6799  0016D8  0100               	movlb	0	; () banked
  6800  0016DA  518B               	movf	(analyzeRgbcForSensor@r1+1)& (0+255),w,b
  6801  0016DC  E105               	bnz	u3180
  6802  0016DE  0E51               	movlw	81
  6803  0016E0  0100               	movlb	0	; () banked
  6804  0016E2  5D8A               	subwf	analyzeRgbcForSensor@r1& (0+255),w,b
  6805  0016E4  A0D8               	btfss	status,0,c
  6806  0016E6  D022               	goto	l3649
  6807  0016E8                     u3180:
  6808                           
  6809                           ; BSR set to: 0
  6810  0016E8  0100               	movlb	0	; () banked
  6811  0016EA  518C               	movf	analyzeRgbcForSensor@g1& (0+255),w,b
  6812  0016EC  0100               	movlb	0	; () banked
  6813  0016EE  2586               	addwf	analyzeRgbcForSensor@b1& (0+255),w,b
  6814  0016F0  0100               	movlb	0	; () banked
  6815  0016F2  6F84               	movwf	??_analyzeRgbcForSensor& (0+255),b
  6816  0016F4  0100               	movlb	0	; () banked
  6817  0016F6  518D               	movf	(analyzeRgbcForSensor@g1+1)& (0+255),w,b
  6818  0016F8  0100               	movlb	0	; () banked
  6819  0016FA  2187               	addwfc	(analyzeRgbcForSensor@b1+1)& (0+255),w,b
  6820  0016FC  0100               	movlb	0	; () banked
  6821  0016FE  6F85               	movwf	(??_analyzeRgbcForSensor+1)& (0+255),b
  6822  001700  0100               	movlb	0	; () banked
  6823  001702  BF85               	btfsc	(??_analyzeRgbcForSensor+1)& (0+255),7,b
  6824  001704  D008               	goto	l3647
  6825  001706  0E04               	movlw	4
  6826  001708  0100               	movlb	0	; () banked
  6827  00170A  5D84               	subwf	??_analyzeRgbcForSensor& (0+255),w,b
  6828  00170C  0E01               	movlw	1
  6829  00170E  0100               	movlb	0	; () banked
  6830  001710  5985               	subwfb	(??_analyzeRgbcForSensor+1)& (0+255),w,b
  6831  001712  B0D8               	btfsc	status,0,c
  6832  001714  D00B               	goto	l3649
  6833  001716                     l3647:
  6834                           
  6835                           ; BSR set to: 0
  6836  001716  0100               	movlb	0	; () banked
  6837  001718  BF89               	btfsc	(analyzeRgbcForSensor@c1+1)& (0+255),7,b
  6838  00171A  D008               	goto	l3649
  6839  00171C  0100               	movlb	0	; () banked
  6840  00171E  5189               	movf	(analyzeRgbcForSensor@c1+1)& (0+255),w,b
  6841  001720  E126               	bnz	l3655
  6842  001722  0E47               	movlw	71
  6843  001724  0100               	movlb	0	; () banked
  6844  001726  5D88               	subwf	analyzeRgbcForSensor@c1& (0+255),w,b
  6845  001728  B0D8               	btfsc	status,0,c
  6846  00172A  D021               	goto	l3655
  6847  00172C                     l3649:
  6848                           
  6849                           ; BSR set to: 0
  6850  00172C  0100               	movlb	0	; () banked
  6851  00172E  BF8B               	btfsc	(analyzeRgbcForSensor@r1+1)& (0+255),7,b
  6852  001730  D008               	goto	l3651
  6853  001732  0100               	movlb	0	; () banked
  6854  001734  518B               	movf	(analyzeRgbcForSensor@r1+1)& (0+255),w,b
  6855  001736  E127               	bnz	l3663
  6856  001738  0E78               	movlw	120
  6857  00173A  0100               	movlb	0	; () banked
  6858  00173C  5D8A               	subwf	analyzeRgbcForSensor@r1& (0+255),w,b
  6859  00173E  B0D8               	btfsc	status,0,c
  6860  001740  D022               	goto	l3663
  6861  001742                     l3651:
  6862                           
  6863                           ; BSR set to: 0
  6864  001742  0100               	movlb	0	; () banked
  6865  001744  BF8D               	btfsc	(analyzeRgbcForSensor@g1+1)& (0+255),7,b
  6866  001746  D01F               	goto	l3663
  6867  001748  0100               	movlb	0	; () banked
  6868  00174A  518D               	movf	(analyzeRgbcForSensor@g1+1)& (0+255),w,b
  6869  00174C  E105               	bnz	u3220
  6870  00174E  0EB5               	movlw	181
  6871  001750  0100               	movlb	0	; () banked
  6872  001752  5D8C               	subwf	analyzeRgbcForSensor@g1& (0+255),w,b
  6873  001754  A0D8               	btfss	status,0,c
  6874  001756  D017               	goto	l3663
  6875  001758                     u3220:
  6876                           
  6877                           ; BSR set to: 0
  6878  001758  0100               	movlb	0	; () banked
  6879  00175A  BF89               	btfsc	(analyzeRgbcForSensor@c1+1)& (0+255),7,b
  6880  00175C  D014               	goto	l3663
  6881  00175E  0100               	movlb	0	; () banked
  6882  001760  5189               	movf	(analyzeRgbcForSensor@c1+1)& (0+255),w,b
  6883  001762  E105               	bnz	l3655
  6884  001764  0E51               	movlw	81
  6885  001766  0100               	movlb	0	; () banked
  6886  001768  5D88               	subwf	analyzeRgbcForSensor@c1& (0+255),w,b
  6887  00176A  A0D8               	btfss	status,0,c
  6888  00176C  D00C               	goto	l3663
  6889  00176E                     l3655:
  6890                           
  6891                           ; BSR set to: 0
  6892  00176E  0100               	movlb	0	; () banked
  6893  001770  51E9               	movf	_currentBottle& (0+255),w,b
  6894  001772  0100               	movlb	0	; () banked
  6895  001774  11EA               	iorwf	(_currentBottle+1)& (0+255),w,b
  6896  001776  A4D8               	btfss	status,2,c
  6897  001778  D006               	goto	l3663
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;main.c: 605: return 1;
  6901  00177A  0E00               	movlw	0
  6902  00177C  0100               	movlb	0	; () banked
  6903  00177E  6F81               	movwf	(?_analyzeRgbcForSensor+1)& (0+255),b
  6904  001780  0E01               	movlw	1
  6905  001782  6F80               	movwf	?_analyzeRgbcForSensor& (0+255),b
  6906                           
  6907                           ; BSR set to: 0
  6908                           ;main.c: 606: }else if (r1+g1+b1 < 350 && currentBottle == 1){
  6909                           
  6910                           ; BSR set to: 0
  6911  001784  0012               	return	
  6912  001786                     l3663:
  6913                           
  6914                           ; BSR set to: 0
  6915  001786  0100               	movlb	0	; () banked
  6916  001788  518C               	movf	analyzeRgbcForSensor@g1& (0+255),w,b
  6917  00178A  0100               	movlb	0	; () banked
  6918  00178C  258A               	addwf	analyzeRgbcForSensor@r1& (0+255),w,b
  6919  00178E  0100               	movlb	0	; () banked
  6920  001790  6F84               	movwf	??_analyzeRgbcForSensor& (0+255),b
  6921  001792  0100               	movlb	0	; () banked
  6922  001794  518D               	movf	(analyzeRgbcForSensor@g1+1)& (0+255),w,b
  6923  001796  0100               	movlb	0	; () banked
  6924  001798  218B               	addwfc	(analyzeRgbcForSensor@r1+1)& (0+255),w,b
  6925  00179A  0100               	movlb	0	; () banked
  6926  00179C  6F85               	movwf	(??_analyzeRgbcForSensor+1)& (0+255),b
  6927  00179E  0100               	movlb	0	; () banked
  6928  0017A0  5186               	movf	analyzeRgbcForSensor@b1& (0+255),w,b
  6929  0017A2  0100               	movlb	0	; () banked
  6930  0017A4  2784               	addwf	??_analyzeRgbcForSensor& (0+255),f,b
  6931  0017A6  0100               	movlb	0	; () banked
  6932  0017A8  5187               	movf	(analyzeRgbcForSensor@b1+1)& (0+255),w,b
  6933  0017AA  0100               	movlb	0	; () banked
  6934  0017AC  2385               	addwfc	(??_analyzeRgbcForSensor+1)& (0+255),f,b
  6935  0017AE  0100               	movlb	0	; () banked
  6936  0017B0  BF85               	btfsc	(??_analyzeRgbcForSensor+1)& (0+255),7,b
  6937  0017B2  D008               	goto	l3665
  6938  0017B4  0E5E               	movlw	94
  6939  0017B6  0100               	movlb	0	; () banked
  6940  0017B8  5D84               	subwf	??_analyzeRgbcForSensor& (0+255),w,b
  6941  0017BA  0E01               	movlw	1
  6942  0017BC  0100               	movlb	0	; () banked
  6943  0017BE  5985               	subwfb	(??_analyzeRgbcForSensor+1)& (0+255),w,b
  6944  0017C0  B0D8               	btfsc	status,0,c
  6945  0017C2  D00C               	goto	l3673
  6946  0017C4                     l3665:
  6947                           
  6948                           ; BSR set to: 0
  6949  0017C4  0100               	movlb	0	; () banked
  6950  0017C6  05E9               	decf	_currentBottle& (0+255),w,b
  6951  0017C8  0100               	movlb	0	; () banked
  6952  0017CA  11EA               	iorwf	(_currentBottle+1)& (0+255),w,b
  6953  0017CC  A4D8               	btfss	status,2,c
  6954  0017CE  D006               	goto	l3673
  6955                           
  6956                           ; BSR set to: 0
  6957                           ;main.c: 607: return 1;
  6958  0017D0  0E00               	movlw	0
  6959  0017D2  0100               	movlb	0	; () banked
  6960  0017D4  6F81               	movwf	(?_analyzeRgbcForSensor+1)& (0+255),b
  6961  0017D6  0E01               	movlw	1
  6962  0017D8  6F80               	movwf	?_analyzeRgbcForSensor& (0+255),b
  6963                           
  6964                           ; BSR set to: 0
  6965                           ;main.c: 608: }else{
  6966                           
  6967                           ; BSR set to: 0
  6968  0017DA  0012               	return	
  6969  0017DC                     l3673:
  6970                           
  6971                           ; BSR set to: 0
  6972                           ;main.c: 609: return 0;
  6973  0017DC  0E00               	movlw	0
  6974  0017DE  0100               	movlb	0	; () banked
  6975  0017E0  6F81               	movwf	(?_analyzeRgbcForSensor+1)& (0+255),b
  6976  0017E2  0E00               	movlw	0
  6977  0017E4  6F80               	movwf	?_analyzeRgbcForSensor& (0+255),b
  6978                           
  6979                           ; BSR set to: 0
  6980                           
  6981                           ; BSR set to: 0
  6982                           
  6983                           ; BSR set to: 0
  6984                           
  6985                           ; BSR set to: 0
  6986  0017E6  0012               	return	
  6987  0017E8                     __end_of_analyzeRgbcForSensor:
  6988                           	opt stack 0
  6989                           tblptru	equ	0xFF8
  6990                           tblptrh	equ	0xFF7
  6991                           tblptrl	equ	0xFF6
  6992                           tablat	equ	0xFF5
  6993                           intcon	equ	0xFF2
  6994                           intcon2	equ	0xFF1
  6995                           postinc0	equ	0xFEE
  6996                           wreg	equ	0xFE8
  6997                           indf1	equ	0xFE7
  6998                           postdec1	equ	0xFE5
  6999                           fsr1h	equ	0xFE2
  7000                           fsr1l	equ	0xFE1
  7001                           indf2	equ	0xFDF
  7002                           postinc2	equ	0xFDE
  7003                           postdec2	equ	0xFDD
  7004                           fsr2h	equ	0xFDA
  7005                           fsr2l	equ	0xFD9
  7006                           status	equ	0xFD8
  7007                           
  7008 ;; *************** function _setMultiplexerToSensor *****************
  7009 ;; Defined at:
  7010 ;;		line 509 in file "main.c"
  7011 ;; Parameters:    Size  Location     Type
  7012 ;;  num             2    3[BANK0 ] int 
  7013 ;; Auto vars:     Size  Location     Type
  7014 ;;		None
  7015 ;; Return value:  Size  Location     Type
  7016 ;;                  1    wreg      void 
  7017 ;; Registers used:
  7018 ;;		wreg, status,2, status,0, cstack
  7019 ;; Tracked objects:
  7020 ;;		On entry : 0/0
  7021 ;;		On exit  : 0/0
  7022 ;;		Unchanged: 0/0
  7023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7024 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7027 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7028 ;;Total ram usage:        2 bytes
  7029 ;; Hardware stack levels used:    1
  7030 ;; Hardware stack levels required when called:    8
  7031 ;; This function calls:
  7032 ;;		_I2C_Master_Start
  7033 ;;		_I2C_Master_Stop
  7034 ;;		_I2C_Master_Write
  7035 ;; This function is called by:
  7036 ;;		_capIsOnBottle
  7037 ;; This function uses a non-reentrant model
  7038 ;;
  7039                           
  7040                           	psect	text26
  7041  002E64                     __ptext26:
  7042                           	opt stack 0
  7043  002E64                     _setMultiplexerToSensor:
  7044                           	opt stack 19
  7045                           
  7046                           ;main.c: 510: if (num == 1){
  7047                           
  7048                           ; BSR set to: 0
  7049                           ;incstack = 0
  7050  002E64  0100               	movlb	0	; () banked
  7051  002E66  0583               	decf	setMultiplexerToSensor@num& (0+255),w,b
  7052  002E68  0100               	movlb	0	; () banked
  7053  002E6A  1184               	iorwf	(setMultiplexerToSensor@num+1)& (0+255),w,b
  7054  002E6C  A4D8               	btfss	status,2,c
  7055  002E6E  D01A               	goto	l3789
  7056                           
  7057                           ; BSR set to: 0
  7058                           ;main.c: 512: I2C_Master_Start();
  7059  002E70  EC57  F01C         	call	_I2C_Master_Start	;wreg free
  7060                           
  7061                           ;main.c: 513: I2C_Master_Write(0b11100000);
  7062  002E74  0E00               	movlw	0
  7063  002E76  0100               	movlb	0	; () banked
  7064  002E78  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7065  002E7A  0EE0               	movlw	224
  7066  002E7C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7067  002E7E  EC41  F01C         	call	_I2C_Master_Write	;wreg free
  7068                           
  7069                           ;main.c: 514: I2C_Master_Write(0b10000000);
  7070  002E82  0E00               	movlw	0
  7071  002E84  0100               	movlb	0	; () banked
  7072  002E86  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7073  002E88  0E80               	movlw	128
  7074  002E8A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7075  002E8C  EC41  F01C         	call	_I2C_Master_Write	;wreg free
  7076                           
  7077                           ;main.c: 515: I2C_Master_Write(0b10000000);
  7078  002E90  0E00               	movlw	0
  7079  002E92  0100               	movlb	0	; () banked
  7080  002E94  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7081  002E96  0E80               	movlw	128
  7082  002E98  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7083  002E9A  EC41  F01C         	call	_I2C_Master_Write	;wreg free
  7084                           
  7085                           ;main.c: 516: I2C_Master_Stop();
  7086  002E9E  EC53  F01C         	call	_I2C_Master_Stop	;wreg free
  7087                           
  7088                           ;main.c: 517: }else if (num == 2){
  7089  002EA2  0012               	return	
  7090  002EA4                     l3789:
  7091  002EA4  0E02               	movlw	2
  7092  002EA6  0100               	movlb	0	; () banked
  7093  002EA8  1983               	xorwf	setMultiplexerToSensor@num& (0+255),w,b
  7094  002EAA  0100               	movlb	0	; () banked
  7095  002EAC  1184               	iorwf	(setMultiplexerToSensor@num+1)& (0+255),w,b
  7096  002EAE  A4D8               	btfss	status,2,c
  7097  002EB0  0012               	return	
  7098                           
  7099                           ; BSR set to: 0
  7100                           ;main.c: 519: I2C_Master_Start();
  7101  002EB2  EC57  F01C         	call	_I2C_Master_Start	;wreg free
  7102                           
  7103                           ;main.c: 520: I2C_Master_Write(0b11100000);
  7104  002EB6  0E00               	movlw	0
  7105  002EB8  0100               	movlb	0	; () banked
  7106  002EBA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7107  002EBC  0EE0               	movlw	224
  7108  002EBE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7109  002EC0  EC41  F01C         	call	_I2C_Master_Write	;wreg free
  7110                           
  7111                           ;main.c: 521: I2C_Master_Write(0b10000000);
  7112  002EC4  0E00               	movlw	0
  7113  002EC6  0100               	movlb	0	; () banked
  7114  002EC8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7115  002ECA  0E80               	movlw	128
  7116  002ECC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7117  002ECE  EC41  F01C         	call	_I2C_Master_Write	;wreg free
  7118                           
  7119                           ;main.c: 522: I2C_Master_Write(0b00000100);
  7120  002ED2  0E00               	movlw	0
  7121  002ED4  0100               	movlb	0	; () banked
  7122  002ED6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7123  002ED8  0E04               	movlw	4
  7124  002EDA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7125  002EDC  EC41  F01C         	call	_I2C_Master_Write	;wreg free
  7126                           
  7127                           ;main.c: 523: I2C_Master_Stop();
  7128  002EE0  EC53  F01C         	call	_I2C_Master_Stop	;wreg free
  7129  002EE4  0012               	return	
  7130  002EE6                     __end_of_setMultiplexerToSensor:
  7131                           	opt stack 0
  7132                           tblptru	equ	0xFF8
  7133                           tblptrh	equ	0xFF7
  7134                           tblptrl	equ	0xFF6
  7135                           tablat	equ	0xFF5
  7136                           intcon	equ	0xFF2
  7137                           intcon2	equ	0xFF1
  7138                           postinc0	equ	0xFEE
  7139                           wreg	equ	0xFE8
  7140                           indf1	equ	0xFE7
  7141                           postdec1	equ	0xFE5
  7142                           fsr1h	equ	0xFE2
  7143                           fsr1l	equ	0xFE1
  7144                           indf2	equ	0xFDF
  7145                           postinc2	equ	0xFDE
  7146                           postdec2	equ	0xFDD
  7147                           fsr2h	equ	0xFDA
  7148                           fsr2l	equ	0xFD9
  7149                           status	equ	0xFD8
  7150                           
  7151 ;; *************** function _activateDCmotors *****************
  7152 ;; Defined at:
  7153 ;;		line 791 in file "main.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;		None
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;		None
  7158 ;; Return value:  Size  Location     Type
  7159 ;;                  1    wreg      void 
  7160 ;; Registers used:
  7161 ;;		None
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7171 ;;Total ram usage:        0 bytes
  7172 ;; Hardware stack levels used:    1
  7173 ;; Hardware stack levels required when called:    6
  7174 ;; This function calls:
  7175 ;;		Nothing
  7176 ;; This function is called by:
  7177 ;;		_operation
  7178 ;; This function uses a non-reentrant model
  7179 ;;
  7180                           
  7181                           	psect	text27
  7182  00389E                     __ptext27:
  7183                           	opt stack 0
  7184  00389E                     _activateDCmotors:
  7185                           	opt stack 22
  7186                           
  7187                           ;main.c: 792: TMR0IE = 0;
  7188                           
  7189                           ;incstack = 0
  7190  00389E  9AF2               	bcf	intcon,5,c	;volatile
  7191                           
  7192                           ;main.c: 793: TMR1IE = 1;
  7193  0038A0  809D               	bsf	3997,0,c	;volatile
  7194                           
  7195                           ;main.c: 794: (INTCONbits.GIE = 1);
  7196  0038A2  8EF2               	bsf	intcon,7,c	;volatile
  7197  0038A4  0012               	return		;funcret
  7198  0038A6                     __end_of_activateDCmotors:
  7199                           	opt stack 0
  7200                           tblptru	equ	0xFF8
  7201                           tblptrh	equ	0xFF7
  7202                           tblptrl	equ	0xFF6
  7203                           tablat	equ	0xFF5
  7204                           intcon	equ	0xFF2
  7205                           intcon2	equ	0xFF1
  7206                           postinc0	equ	0xFEE
  7207                           wreg	equ	0xFE8
  7208                           indf1	equ	0xFE7
  7209                           postdec1	equ	0xFE5
  7210                           fsr1h	equ	0xFE2
  7211                           fsr1l	equ	0xFE1
  7212                           indf2	equ	0xFDF
  7213                           postinc2	equ	0xFDE
  7214                           postdec2	equ	0xFDD
  7215                           fsr2h	equ	0xFDA
  7216                           fsr2l	equ	0xFD9
  7217                           status	equ	0xFD8
  7218                           
  7219 ;; *************** function _displayMainProgramLcdScreen *****************
  7220 ;; Defined at:
  7221 ;;		line 614 in file "main.c"
  7222 ;; Parameters:    Size  Location     Type
  7223 ;;		None
  7224 ;; Auto vars:     Size  Location     Type
  7225 ;;		None
  7226 ;; Return value:  Size  Location     Type
  7227 ;;                  1    wreg      void 
  7228 ;; Registers used:
  7229 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7230 ;; Tracked objects:
  7231 ;;		On entry : 0/0
  7232 ;;		On exit  : 0/0
  7233 ;;		Unchanged: 0/0
  7234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7235 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7236 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7237 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7238 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7239 ;;Total ram usage:        4 bytes
  7240 ;; Hardware stack levels used:    1
  7241 ;; Hardware stack levels required when called:   11
  7242 ;; This function calls:
  7243 ;;		_lcdClear
  7244 ;;		_lcdInst
  7245 ;;		_printTime
  7246 ;;		_printf
  7247 ;;		_toggleRTCBasedOnCurrentMainProgramScreen
  7248 ;;		_updateCurrentTime
  7249 ;; This function is called by:
  7250 ;;		_main
  7251 ;;		_initializeLcdScreen
  7252 ;;		_enterSelectedSubProgramFromMainProgram
  7253 ;; This function uses a non-reentrant model
  7254 ;;
  7255                           
  7256                           	psect	text28
  7257  002CB6                     __ptext28:
  7258                           	opt stack 0
  7259  002CB6                     _displayMainProgramLcdScreen:
  7260                           	opt stack 17
  7261                           
  7262                           ;main.c: 615: lcdClear();
  7263                           
  7264                           ;incstack = 0
  7265  002CB6  EC0B  F01B         	call	_lcdClear	;wreg free
  7266                           
  7267                           ;main.c: 616: switch(currentMainProgramScreen){
  7268  002CBA  D026               	goto	l8243
  7269  002CBC                     l8231:
  7270                           
  7271                           ;main.c: 618: lcdClear();
  7272  002CBC  EC0B  F01B         	call	_lcdClear	;wreg free
  7273                           
  7274                           ;main.c: 619: printf("Begin Sorting");
  7275  002CC0  0E92               	movlw	low STR_6
  7276  002CC2  0100               	movlb	0	; () banked
  7277  002CC4  6F9E               	movwf	printf@f& (0+255),b
  7278  002CC6  0EFF               	movlw	high STR_6
  7279  002CC8  0100               	movlb	0	; () banked
  7280  002CCA  6F9F               	movwf	(printf@f+1)& (0+255),b
  7281  002CCC  ECEC  F019         	call	_printf	;wreg free
  7282                           
  7283                           ;main.c: 620: break;
  7284  002CD0  D032               	goto	l8245
  7285  002CD2                     l8233:
  7286                           
  7287                           ;main.c: 622: updateCurrentTime();
  7288  002CD2  ECAF  F017         	call	_updateCurrentTime	;wreg free
  7289                           
  7290                           ;main.c: 623: printTime();
  7291  002CD6  EC1B  F019         	call	_printTime	;wreg free
  7292                           
  7293                           ;main.c: 624: break;
  7294  002CDA  D02D               	goto	l8245
  7295  002CDC                     l8237:
  7296                           
  7297                           ;main.c: 626: lcdClear();
  7298  002CDC  EC0B  F01B         	call	_lcdClear	;wreg free
  7299                           
  7300                           ;main.c: 627: printf("Access EEPROM");
  7301  002CE0  0E84               	movlw	low STR_7
  7302  002CE2  0100               	movlb	0	; () banked
  7303  002CE4  6F9E               	movwf	printf@f& (0+255),b
  7304  002CE6  0EFF               	movlw	high STR_7
  7305  002CE8  0100               	movlb	0	; () banked
  7306  002CEA  6F9F               	movwf	(printf@f+1)& (0+255),b
  7307  002CEC  ECEC  F019         	call	_printf	;wreg free
  7308                           
  7309                           ;main.c: 628: break;
  7310  002CF0  D022               	goto	l8245
  7311  002CF2                     l8239:
  7312                           
  7313                           ;main.c: 630: lcdClear();
  7314  002CF2  EC0B  F01B         	call	_lcdClear	;wreg free
  7315                           
  7316                           ;main.c: 631: printf("Access Last Run ");
  7317  002CF6  0EB3               	movlw	low STR_8
  7318  002CF8  0100               	movlb	0	; () banked
  7319  002CFA  6F9E               	movwf	printf@f& (0+255),b
  7320  002CFC  0EFE               	movlw	high STR_8
  7321  002CFE  0100               	movlb	0	; () banked
  7322  002D00  6F9F               	movwf	(printf@f+1)& (0+255),b
  7323  002D02  ECEC  F019         	call	_printf	;wreg free
  7324                           
  7325                           ;main.c: 633: }
  7326                           
  7327                           ;main.c: 632: break;
  7328  002D06  D017               	goto	l8245
  7329  002D08                     l8243:
  7330  002D08  C0EF  F0AE         	movff	_currentMainProgramScreen,??_displayMainProgramLcdScreen
  7331  002D0C  C0F0  F0AF         	movff	_currentMainProgramScreen+1,??_displayMainProgramLcdScreen+1
  7332                           
  7333                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7334                           ; Switch size 1, requested type "space"
  7335                           ; Number of cases is 1, Range of values is 0 to 0
  7336                           ; switch strategies available:
  7337                           ; Name         Instructions Cycles
  7338                           ; simple_byte            4     3 (average)
  7339                           ;	Chosen strategy is simple_byte
  7340  002D10  0100               	movlb	0	; () banked
  7341  002D12  51AF               	movf	(??_displayMainProgramLcdScreen+1)& (0+255),w,b
  7342  002D14  0A00               	xorlw	0	; case 0
  7343  002D16  A4D8               	btfss	status,2,c
  7344  002D18  D00E               	goto	l8245
  7345                           
  7346                           ; BSR set to: 0
  7347                           ; Switch size 1, requested type "space"
  7348                           ; Number of cases is 4, Range of values is 0 to 3
  7349                           ; switch strategies available:
  7350                           ; Name         Instructions Cycles
  7351                           ; simple_byte           13     7 (average)
  7352                           ;	Chosen strategy is simple_byte
  7353  002D1A  0100               	movlb	0	; () banked
  7354  002D1C  51AE               	movf	??_displayMainProgramLcdScreen& (0+255),w,b
  7355  002D1E  0A00               	xorlw	0	; case 0
  7356  002D20  B4D8               	btfsc	status,2,c
  7357  002D22  D7CC               	goto	l8231
  7358  002D24  0A01               	xorlw	1	; case 1
  7359  002D26  B4D8               	btfsc	status,2,c
  7360  002D28  D7D4               	goto	l8233
  7361  002D2A  0A03               	xorlw	3	; case 2
  7362  002D2C  B4D8               	btfsc	status,2,c
  7363  002D2E  D7D6               	goto	l8237
  7364  002D30  0A01               	xorlw	1	; case 3
  7365  002D32  B4D8               	btfsc	status,2,c
  7366  002D34  D7DE               	goto	l8239
  7367  002D36                     l8245:
  7368                           
  7369                           ;main.c: 634: lcdInst(0b11000000);;
  7370  002D36  0EC0               	movlw	192
  7371  002D38  EC27  F01C         	call	_lcdInst
  7372                           
  7373                           ;main.c: 635: printf("<4  Start: A  6>");
  7374  002D3C  0ED5               	movlw	low STR_9
  7375  002D3E  0100               	movlb	0	; () banked
  7376  002D40  6F9E               	movwf	printf@f& (0+255),b
  7377  002D42  0EFE               	movlw	high STR_9
  7378  002D44  0100               	movlb	0	; () banked
  7379  002D46  6F9F               	movwf	(printf@f+1)& (0+255),b
  7380  002D48  ECEC  F019         	call	_printf	;wreg free
  7381                           
  7382                           ;main.c: 636: toggleRTCBasedOnCurrentMainProgramScreen();
  7383  002D4C  EC14  F01C         	call	_toggleRTCBasedOnCurrentMainProgramScreen	;wreg free
  7384  002D50  0012               	return		;funcret
  7385  002D52                     __end_of_displayMainProgramLcdScreen:
  7386                           	opt stack 0
  7387                           tblptru	equ	0xFF8
  7388                           tblptrh	equ	0xFF7
  7389                           tblptrl	equ	0xFF6
  7390                           tablat	equ	0xFF5
  7391                           intcon	equ	0xFF2
  7392                           intcon2	equ	0xFF1
  7393                           postinc0	equ	0xFEE
  7394                           wreg	equ	0xFE8
  7395                           indf1	equ	0xFE7
  7396                           postdec1	equ	0xFE5
  7397                           fsr1h	equ	0xFE2
  7398                           fsr1l	equ	0xFE1
  7399                           indf2	equ	0xFDF
  7400                           postinc2	equ	0xFDE
  7401                           postdec2	equ	0xFDD
  7402                           fsr2h	equ	0xFDA
  7403                           fsr2l	equ	0xFD9
  7404                           status	equ	0xFD8
  7405                           
  7406 ;; *************** function _updateCurrentTime *****************
  7407 ;; Defined at:
  7408 ;;		line 461 in file "main.c"
  7409 ;; Parameters:    Size  Location     Type
  7410 ;;		None
  7411 ;; Auto vars:     Size  Location     Type
  7412 ;;  i               1    3[BANK0 ] unsigned char 
  7413 ;; Return value:  Size  Location     Type
  7414 ;;                  1    wreg      void 
  7415 ;; Registers used:
  7416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7417 ;; Tracked objects:
  7418 ;;		On entry : 0/0
  7419 ;;		On exit  : 0/0
  7420 ;;		Unchanged: 0/0
  7421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7423 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7425 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7426 ;;Total ram usage:        1 bytes
  7427 ;; Hardware stack levels used:    1
  7428 ;; Hardware stack levels required when called:    8
  7429 ;; This function calls:
  7430 ;;		_I2C_Master_Read
  7431 ;;		_I2C_Master_Start
  7432 ;;		_I2C_Master_Stop
  7433 ;;		_I2C_Master_Write
  7434 ;; This function is called by:
  7435 ;;		_displayMainProgramLcdScreen
  7436 ;;		_operation
  7437 ;; This function uses a non-reentrant model
  7438 ;;
  7439                           
  7440                           	psect	text29
  7441  002F5E                     __ptext29:
  7442                           	opt stack 0
  7443  002F5E                     _updateCurrentTime:
  7444                           	opt stack 19
  7445                           
  7446                           ;main.c: 463: I2C_Master_Start();
  7447                           
  7448                           ;incstack = 0
  7449  002F5E  EC57  F01C         	call	_I2C_Master_Start	;wreg free
  7450                           
  7451                           ;main.c: 464: I2C_Master_Write(0b11010000);
  7452  002F62  0E00               	movlw	0
  7453  002F64  0100               	movlb	0	; () banked
  7454  002F66  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7455  002F68  0ED0               	movlw	208
  7456  002F6A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7457  002F6C  EC41  F01C         	call	_I2C_Master_Write	;wreg free
  7458                           
  7459                           ;main.c: 465: I2C_Master_Write(0x00);
  7460  002F70  0E00               	movlw	0
  7461  002F72  0100               	movlb	0	; () banked
  7462  002F74  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7463  002F76  0E00               	movlw	0
  7464  002F78  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7465  002F7A  EC41  F01C         	call	_I2C_Master_Write	;wreg free
  7466                           
  7467                           ;main.c: 466: I2C_Master_Stop();
  7468  002F7E  EC53  F01C         	call	_I2C_Master_Stop	;wreg free
  7469                           
  7470                           ;main.c: 469: I2C_Master_Start();
  7471  002F82  EC57  F01C         	call	_I2C_Master_Start	;wreg free
  7472                           
  7473                           ;main.c: 470: I2C_Master_Write(0b11010001);
  7474  002F86  0E00               	movlw	0
  7475  002F88  0100               	movlb	0	; () banked
  7476  002F8A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7477  002F8C  0ED1               	movlw	209
  7478  002F8E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7479  002F90  EC41  F01C         	call	_I2C_Master_Write	;wreg free
  7480                           
  7481                           ;main.c: 471: for(unsigned char i=0;i<0x06;i++){
  7482  002F94  0E00               	movlw	0
  7483  002F96  0100               	movlb	0	; () banked
  7484  002F98  6F83               	movwf	updateCurrentTime@i& (0+255),b
  7485  002F9A                     l3737:
  7486                           
  7487                           ; BSR set to: 0
  7488  002F9A  0E05               	movlw	5
  7489  002F9C  0100               	movlb	0	; () banked
  7490  002F9E  6583               	cpfsgt	updateCurrentTime@i& (0+255),b
  7491  002FA0  D001               	goto	l3741
  7492  002FA2  D010               	goto	l3747
  7493  002FA4                     l3741:
  7494                           
  7495                           ; BSR set to: 0
  7496                           ;main.c: 472: time[i] = I2C_Master_Read(1);
  7497  002FA4  0100               	movlb	0	; () banked
  7498  002FA6  5183               	movf	updateCurrentTime@i& (0+255),w,b
  7499  002FA8  0D01               	mullw	1
  7500  002FAA  0EE2               	movlw	low _time
  7501  002FAC  24F3               	addwf	prodl,w,c
  7502  002FAE  6ED9               	movwf	fsr2l,c
  7503  002FB0  0E00               	movlw	high _time
  7504  002FB2  20F4               	addwfc	prodh,w,c
  7505  002FB4  6EDA               	movwf	fsr2h,c
  7506  002FB6  0E01               	movlw	1
  7507  002FB8  EC3F  F01B         	call	_I2C_Master_Read
  7508  002FBC  6EDF               	movwf	indf2,c
  7509  002FBE  0100               	movlb	0	; () banked
  7510  002FC0  2B83               	incf	updateCurrentTime@i& (0+255),f,b
  7511  002FC2  D7EB               	goto	l3737
  7512  002FC4                     l3747:
  7513                           
  7514                           ; BSR set to: 0
  7515                           ;main.c: 473: }
  7516                           ;main.c: 474: time[6] = I2C_Master_Read(0);
  7517  002FC4  0E00               	movlw	0
  7518  002FC6  EC3F  F01B         	call	_I2C_Master_Read
  7519  002FCA  0100               	movlb	0	; () banked
  7520  002FCC  6FE8               	movwf	(_time+6)& (0+255),b
  7521                           
  7522                           ;main.c: 475: I2C_Master_Stop();
  7523  002FCE  EC53  F01C         	call	_I2C_Master_Stop	;wreg free
  7524  002FD2  0012               	return		;funcret
  7525  002FD4                     __end_of_updateCurrentTime:
  7526                           	opt stack 0
  7527                           tblptru	equ	0xFF8
  7528                           tblptrh	equ	0xFF7
  7529                           tblptrl	equ	0xFF6
  7530                           tablat	equ	0xFF5
  7531                           prodh	equ	0xFF4
  7532                           prodl	equ	0xFF3
  7533                           intcon	equ	0xFF2
  7534                           intcon2	equ	0xFF1
  7535                           postinc0	equ	0xFEE
  7536                           wreg	equ	0xFE8
  7537                           indf1	equ	0xFE7
  7538                           postdec1	equ	0xFE5
  7539                           fsr1h	equ	0xFE2
  7540                           fsr1l	equ	0xFE1
  7541                           indf2	equ	0xFDF
  7542                           postinc2	equ	0xFDE
  7543                           postdec2	equ	0xFDD
  7544                           fsr2h	equ	0xFDA
  7545                           fsr2l	equ	0xFD9
  7546                           status	equ	0xFD8
  7547                           
  7548 ;; *************** function _I2C_Master_Write *****************
  7549 ;; Defined at:
  7550 ;;		line 47 in file "I2C.c"
  7551 ;; Parameters:    Size  Location     Type
  7552 ;;  d               2    1[BANK0 ] unsigned int 
  7553 ;; Auto vars:     Size  Location     Type
  7554 ;;		None
  7555 ;; Return value:  Size  Location     Type
  7556 ;;                  1    wreg      void 
  7557 ;; Registers used:
  7558 ;;		wreg, status,2, status,0, cstack
  7559 ;; Tracked objects:
  7560 ;;		On entry : 0/0
  7561 ;;		On exit  : 0/0
  7562 ;;		Unchanged: 0/0
  7563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7564 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7567 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7568 ;;Total ram usage:        2 bytes
  7569 ;; Hardware stack levels used:    1
  7570 ;; Hardware stack levels required when called:    7
  7571 ;; This function calls:
  7572 ;;		_I2C_Master_Wait
  7573 ;; This function is called by:
  7574 ;;		_updateCurrentTime
  7575 ;;		_setMultiplexerToSensor
  7576 ;;		_storeRgbSensorInputIntegerValuesInto
  7577 ;; This function uses a non-reentrant model
  7578 ;;
  7579                           
  7580                           	psect	text30
  7581  003882                     __ptext30:
  7582                           	opt stack 0
  7583  003882                     _I2C_Master_Write:
  7584                           	opt stack 19
  7585                           
  7586                           ;I2C.c: 49: I2C_Master_Wait();
  7587                           
  7588                           ;incstack = 0
  7589  003882  EC0A  F01C         	call	_I2C_Master_Wait	;wreg free
  7590                           
  7591                           ;I2C.c: 50: SSPBUF = d;
  7592  003886  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  7593  00388A  0012               	return		;funcret
  7594  00388C                     __end_of_I2C_Master_Write:
  7595                           	opt stack 0
  7596                           tblptru	equ	0xFF8
  7597                           tblptrh	equ	0xFF7
  7598                           tblptrl	equ	0xFF6
  7599                           tablat	equ	0xFF5
  7600                           prodh	equ	0xFF4
  7601                           prodl	equ	0xFF3
  7602                           intcon	equ	0xFF2
  7603                           intcon2	equ	0xFF1
  7604                           postinc0	equ	0xFEE
  7605                           wreg	equ	0xFE8
  7606                           indf1	equ	0xFE7
  7607                           postdec1	equ	0xFE5
  7608                           fsr1h	equ	0xFE2
  7609                           fsr1l	equ	0xFE1
  7610                           indf2	equ	0xFDF
  7611                           postinc2	equ	0xFDE
  7612                           postdec2	equ	0xFDD
  7613                           fsr2h	equ	0xFDA
  7614                           fsr2l	equ	0xFD9
  7615                           status	equ	0xFD8
  7616                           
  7617 ;; *************** function _I2C_Master_Stop *****************
  7618 ;; Defined at:
  7619 ;;		line 41 in file "I2C.c"
  7620 ;; Parameters:    Size  Location     Type
  7621 ;;		None
  7622 ;; Auto vars:     Size  Location     Type
  7623 ;;		None
  7624 ;; Return value:  Size  Location     Type
  7625 ;;                  2  126[None  ] int 
  7626 ;; Registers used:
  7627 ;;		wreg, status,2, status,0, cstack
  7628 ;; Tracked objects:
  7629 ;;		On entry : 0/0
  7630 ;;		On exit  : 0/0
  7631 ;;		Unchanged: 0/0
  7632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7634 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7636 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7637 ;;Total ram usage:        0 bytes
  7638 ;; Hardware stack levels used:    1
  7639 ;; Hardware stack levels required when called:    7
  7640 ;; This function calls:
  7641 ;;		_I2C_Master_Wait
  7642 ;; This function is called by:
  7643 ;;		_updateCurrentTime
  7644 ;;		_setMultiplexerToSensor
  7645 ;;		_storeRgbSensorInputIntegerValuesInto
  7646 ;; This function uses a non-reentrant model
  7647 ;;
  7648                           
  7649                           	psect	text31
  7650  0038A6                     __ptext31:
  7651                           	opt stack 0
  7652  0038A6                     _I2C_Master_Stop:
  7653                           	opt stack 19
  7654                           
  7655                           ;I2C.c: 43: I2C_Master_Wait();
  7656                           
  7657                           ;incstack = 0
  7658  0038A6  EC0A  F01C         	call	_I2C_Master_Wait	;wreg free
  7659                           
  7660                           ;I2C.c: 44: PEN = 1;
  7661  0038AA  84C5               	bsf	4037,2,c	;volatile
  7662  0038AC  0012               	return		;funcret
  7663  0038AE                     __end_of_I2C_Master_Stop:
  7664                           	opt stack 0
  7665                           tblptru	equ	0xFF8
  7666                           tblptrh	equ	0xFF7
  7667                           tblptrl	equ	0xFF6
  7668                           tablat	equ	0xFF5
  7669                           prodh	equ	0xFF4
  7670                           prodl	equ	0xFF3
  7671                           intcon	equ	0xFF2
  7672                           intcon2	equ	0xFF1
  7673                           postinc0	equ	0xFEE
  7674                           wreg	equ	0xFE8
  7675                           indf1	equ	0xFE7
  7676                           postdec1	equ	0xFE5
  7677                           fsr1h	equ	0xFE2
  7678                           fsr1l	equ	0xFE1
  7679                           indf2	equ	0xFDF
  7680                           postinc2	equ	0xFDE
  7681                           postdec2	equ	0xFDD
  7682                           fsr2h	equ	0xFDA
  7683                           fsr2l	equ	0xFD9
  7684                           status	equ	0xFD8
  7685                           
  7686 ;; *************** function _I2C_Master_Start *****************
  7687 ;; Defined at:
  7688 ;;		line 29 in file "I2C.c"
  7689 ;; Parameters:    Size  Location     Type
  7690 ;;		None
  7691 ;; Auto vars:     Size  Location     Type
  7692 ;;		None
  7693 ;; Return value:  Size  Location     Type
  7694 ;;                  2  122[None  ] int 
  7695 ;; Registers used:
  7696 ;;		wreg, status,2, status,0, cstack
  7697 ;; Tracked objects:
  7698 ;;		On entry : 0/0
  7699 ;;		On exit  : 0/0
  7700 ;;		Unchanged: 0/0
  7701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7705 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7706 ;;Total ram usage:        0 bytes
  7707 ;; Hardware stack levels used:    1
  7708 ;; Hardware stack levels required when called:    7
  7709 ;; This function calls:
  7710 ;;		_I2C_Master_Wait
  7711 ;; This function is called by:
  7712 ;;		_updateCurrentTime
  7713 ;;		_setMultiplexerToSensor
  7714 ;;		_storeRgbSensorInputIntegerValuesInto
  7715 ;; This function uses a non-reentrant model
  7716 ;;
  7717                           
  7718                           	psect	text32
  7719  0038AE                     __ptext32:
  7720                           	opt stack 0
  7721  0038AE                     _I2C_Master_Start:
  7722                           	opt stack 19
  7723                           
  7724                           ;I2C.c: 31: I2C_Master_Wait();
  7725                           
  7726                           ;incstack = 0
  7727  0038AE  EC0A  F01C         	call	_I2C_Master_Wait	;wreg free
  7728                           
  7729                           ;I2C.c: 32: SEN = 1;
  7730  0038B2  80C5               	bsf	4037,0,c	;volatile
  7731  0038B4  0012               	return		;funcret
  7732  0038B6                     __end_of_I2C_Master_Start:
  7733                           	opt stack 0
  7734                           tblptru	equ	0xFF8
  7735                           tblptrh	equ	0xFF7
  7736                           tblptrl	equ	0xFF6
  7737                           tablat	equ	0xFF5
  7738                           prodh	equ	0xFF4
  7739                           prodl	equ	0xFF3
  7740                           intcon	equ	0xFF2
  7741                           intcon2	equ	0xFF1
  7742                           postinc0	equ	0xFEE
  7743                           wreg	equ	0xFE8
  7744                           indf1	equ	0xFE7
  7745                           postdec1	equ	0xFE5
  7746                           fsr1h	equ	0xFE2
  7747                           fsr1l	equ	0xFE1
  7748                           indf2	equ	0xFDF
  7749                           postinc2	equ	0xFDE
  7750                           postdec2	equ	0xFDD
  7751                           fsr2h	equ	0xFDA
  7752                           fsr2l	equ	0xFD9
  7753                           status	equ	0xFD8
  7754                           
  7755 ;; *************** function _I2C_Master_Read *****************
  7756 ;; Defined at:
  7757 ;;		line 53 in file "I2C.c"
  7758 ;; Parameters:    Size  Location     Type
  7759 ;;  a               1    wreg     unsigned char 
  7760 ;; Auto vars:     Size  Location     Type
  7761 ;;  a               1    1[BANK0 ] unsigned char 
  7762 ;;  temp            1    2[BANK0 ] unsigned char 
  7763 ;; Return value:  Size  Location     Type
  7764 ;;                  1    wreg      unsigned char 
  7765 ;; Registers used:
  7766 ;;		wreg, status,2, status,0, cstack
  7767 ;; Tracked objects:
  7768 ;;		On entry : 0/0
  7769 ;;		On exit  : 0/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7773 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7775 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7776 ;;Total ram usage:        2 bytes
  7777 ;; Hardware stack levels used:    1
  7778 ;; Hardware stack levels required when called:    7
  7779 ;; This function calls:
  7780 ;;		_I2C_Master_Wait
  7781 ;; This function is called by:
  7782 ;;		_updateCurrentTime
  7783 ;;		_storeRgbSensorInputIntegerValuesInto
  7784 ;; This function uses a non-reentrant model
  7785 ;;
  7786                           
  7787                           	psect	text33
  7788  00367E                     __ptext33:
  7789                           	opt stack 0
  7790  00367E                     _I2C_Master_Read:
  7791                           	opt stack 19
  7792                           
  7793                           ;incstack = 0
  7794                           ;I2C_Master_Read@a stored from wreg
  7795  00367E  0100               	movlb	0	; () banked
  7796  003680  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  7797                           
  7798                           ;I2C.c: 55: unsigned char temp;
  7799                           ;I2C.c: 56: I2C_Master_Wait();
  7800  003682  EC0A  F01C         	call	_I2C_Master_Wait	;wreg free
  7801                           
  7802                           ;I2C.c: 57: RCEN = 1;
  7803  003686  86C5               	bsf	4037,3,c	;volatile
  7804                           
  7805                           ;I2C.c: 58: I2C_Master_Wait();
  7806  003688  EC0A  F01C         	call	_I2C_Master_Wait	;wreg free
  7807                           
  7808                           ;I2C.c: 59: temp = SSPBUF;
  7809  00368C  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  7810                           
  7811                           ;I2C.c: 60: I2C_Master_Wait();
  7812  003690  EC0A  F01C         	call	_I2C_Master_Wait	;wreg free
  7813                           
  7814                           ;I2C.c: 61: ACKDT = (a)?0:1;
  7815  003694  0100               	movlb	0	; () banked
  7816  003696  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  7817  003698  0100               	movlb	0	; () banked
  7818  00369A  A4D8               	btfss	status,2,c
  7819  00369C  D002               	goto	u3050
  7820  00369E  8AC5               	bsf	4037,5,c	;volatile
  7821  0036A0  D001               	goto	l3597
  7822  0036A2                     u3050:
  7823  0036A2  9AC5               	bcf	4037,5,c	;volatile
  7824  0036A4                     l3597:
  7825                           
  7826                           ;I2C.c: 62: ACKEN = 1;
  7827  0036A4  88C5               	bsf	4037,4,c	;volatile
  7828                           
  7829                           ;I2C.c: 63: return temp;
  7830  0036A6  0100               	movlb	0	; () banked
  7831  0036A8  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  7832  0036AA  0012               	return	
  7833  0036AC                     __end_of_I2C_Master_Read:
  7834                           	opt stack 0
  7835                           tblptru	equ	0xFF8
  7836                           tblptrh	equ	0xFF7
  7837                           tblptrl	equ	0xFF6
  7838                           tablat	equ	0xFF5
  7839                           prodh	equ	0xFF4
  7840                           prodl	equ	0xFF3
  7841                           intcon	equ	0xFF2
  7842                           intcon2	equ	0xFF1
  7843                           postinc0	equ	0xFEE
  7844                           wreg	equ	0xFE8
  7845                           indf1	equ	0xFE7
  7846                           postdec1	equ	0xFE5
  7847                           fsr1h	equ	0xFE2
  7848                           fsr1l	equ	0xFE1
  7849                           indf2	equ	0xFDF
  7850                           postinc2	equ	0xFDE
  7851                           postdec2	equ	0xFDD
  7852                           fsr2h	equ	0xFDA
  7853                           fsr2l	equ	0xFD9
  7854                           status	equ	0xFD8
  7855                           
  7856 ;; *************** function _I2C_Master_Wait *****************
  7857 ;; Defined at:
  7858 ;;		line 24 in file "I2C.c"
  7859 ;; Parameters:    Size  Location     Type
  7860 ;;		None
  7861 ;; Auto vars:     Size  Location     Type
  7862 ;;		None
  7863 ;; Return value:  Size  Location     Type
  7864 ;;                  1    wreg      void 
  7865 ;; Registers used:
  7866 ;;		wreg, status,2, status,0
  7867 ;; Tracked objects:
  7868 ;;		On entry : 0/0
  7869 ;;		On exit  : 0/0
  7870 ;;		Unchanged: 0/0
  7871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7874 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7875 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7876 ;;Total ram usage:        1 bytes
  7877 ;; Hardware stack levels used:    1
  7878 ;; Hardware stack levels required when called:    6
  7879 ;; This function calls:
  7880 ;;		Nothing
  7881 ;; This function is called by:
  7882 ;;		_I2C_Master_Start
  7883 ;;		_I2C_Master_Stop
  7884 ;;		_I2C_Master_Write
  7885 ;;		_I2C_Master_Read
  7886 ;;		_I2C_Master_RepeatedStart
  7887 ;; This function uses a non-reentrant model
  7888 ;;
  7889                           
  7890                           	psect	text34
  7891  003814                     __ptext34:
  7892                           	opt stack 0
  7893  003814                     _I2C_Master_Wait:
  7894                           	opt stack 19
  7895  003814                     l519:
  7896  003814  B4C7               	btfsc	4039,2,c	;volatile
  7897  003816  D7FE               	goto	l519
  7898  003818  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  7899  00381C  0E1F               	movlw	31
  7900  00381E  0100               	movlb	0	; () banked
  7901  003820  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  7902  003822  B4D8               	btfsc	status,2,c
  7903  003824  0012               	return	
  7904  003826  D7F6               	goto	l519
  7905  003828                     __end_of_I2C_Master_Wait:
  7906                           	opt stack 0
  7907                           tblptru	equ	0xFF8
  7908                           tblptrh	equ	0xFF7
  7909                           tblptrl	equ	0xFF6
  7910                           tablat	equ	0xFF5
  7911                           prodh	equ	0xFF4
  7912                           prodl	equ	0xFF3
  7913                           intcon	equ	0xFF2
  7914                           intcon2	equ	0xFF1
  7915                           postinc0	equ	0xFEE
  7916                           wreg	equ	0xFE8
  7917                           indf1	equ	0xFE7
  7918                           postdec1	equ	0xFE5
  7919                           fsr1h	equ	0xFE2
  7920                           fsr1l	equ	0xFE1
  7921                           indf2	equ	0xFDF
  7922                           postinc2	equ	0xFDE
  7923                           postdec2	equ	0xFDD
  7924                           fsr2h	equ	0xFDA
  7925                           fsr2l	equ	0xFD9
  7926                           status	equ	0xFD8
  7927                           
  7928 ;; *************** function _toggleRTCBasedOnCurrentMainProgramScreen *****************
  7929 ;; Defined at:
  7930 ;;		line 452 in file "main.c"
  7931 ;; Parameters:    Size  Location     Type
  7932 ;;		None
  7933 ;; Auto vars:     Size  Location     Type
  7934 ;;		None
  7935 ;; Return value:  Size  Location     Type
  7936 ;;                  1    wreg      void 
  7937 ;; Registers used:
  7938 ;;		wreg, status,2, status,0
  7939 ;; Tracked objects:
  7940 ;;		On entry : 0/0
  7941 ;;		On exit  : 0/0
  7942 ;;		Unchanged: 0/0
  7943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7947 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7948 ;;Total ram usage:        0 bytes
  7949 ;; Hardware stack levels used:    1
  7950 ;; Hardware stack levels required when called:    6
  7951 ;; This function calls:
  7952 ;;		Nothing
  7953 ;; This function is called by:
  7954 ;;		_displayMainProgramLcdScreen
  7955 ;; This function uses a non-reentrant model
  7956 ;;
  7957                           
  7958                           	psect	text35
  7959  003828                     __ptext35:
  7960                           	opt stack 0
  7961  003828                     _toggleRTCBasedOnCurrentMainProgramScreen:
  7962                           	opt stack 21
  7963                           
  7964                           ;main.c: 453: if (currentMainProgramScreen == 1){
  7965                           
  7966                           ; BSR set to: 0
  7967                           ;incstack = 0
  7968  003828  0100               	movlb	0	; () banked
  7969  00382A  05EF               	decf	_currentMainProgramScreen& (0+255),w,b
  7970  00382C  0100               	movlb	0	; () banked
  7971  00382E  11F0               	iorwf	(_currentMainProgramScreen+1)& (0+255),w,b
  7972  003830  A4D8               	btfss	status,2,c
  7973  003832  D002               	goto	l260
  7974                           
  7975                           ; BSR set to: 0
  7976                           ;main.c: 454: (INTCONbits.GIE = 1);
  7977  003834  8EF2               	bsf	intcon,7,c	;volatile
  7978                           
  7979                           ;main.c: 455: }else{
  7980  003836  0012               	return	
  7981  003838                     l260:
  7982                           
  7983                           ; BSR set to: 0
  7984                           ;main.c: 456: (INTCONbits.GIE = 0);
  7985  003838  9EF2               	bcf	intcon,7,c	;volatile
  7986  00383A  0012               	return	
  7987  00383C                     __end_of_toggleRTCBasedOnCurrentMainProgramScreen:
  7988                           	opt stack 0
  7989                           tblptru	equ	0xFF8
  7990                           tblptrh	equ	0xFF7
  7991                           tblptrl	equ	0xFF6
  7992                           tablat	equ	0xFF5
  7993                           prodh	equ	0xFF4
  7994                           prodl	equ	0xFF3
  7995                           intcon	equ	0xFF2
  7996                           intcon2	equ	0xFF1
  7997                           postinc0	equ	0xFEE
  7998                           wreg	equ	0xFE8
  7999                           indf1	equ	0xFE7
  8000                           postdec1	equ	0xFE5
  8001                           fsr1h	equ	0xFE2
  8002                           fsr1l	equ	0xFE1
  8003                           indf2	equ	0xFDF
  8004                           postinc2	equ	0xFDE
  8005                           postdec2	equ	0xFDD
  8006                           fsr2h	equ	0xFDA
  8007                           fsr2l	equ	0xFD9
  8008                           status	equ	0xFD8
  8009                           
  8010 ;; *************** function _printTime *****************
  8011 ;; Defined at:
  8012 ;;		line 416 in file "main.c"
  8013 ;; Parameters:    Size  Location     Type
  8014 ;;		None
  8015 ;; Auto vars:     Size  Location     Type
  8016 ;;		None
  8017 ;; Return value:  Size  Location     Type
  8018 ;;                  1    wreg      void 
  8019 ;; Registers used:
  8020 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8021 ;; Tracked objects:
  8022 ;;		On entry : 0/0
  8023 ;;		On exit  : 0/0
  8024 ;;		Unchanged: 0/0
  8025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8027 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8029 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8030 ;;Total ram usage:        0 bytes
  8031 ;; Hardware stack levels used:    1
  8032 ;; Hardware stack levels required when called:   10
  8033 ;; This function calls:
  8034 ;;		_lcdInst
  8035 ;;		_printf
  8036 ;; This function is called by:
  8037 ;;		_displayMainProgramLcdScreen
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           	psect	text36
  8042  003236                     __ptext36:
  8043                           	opt stack 0
  8044  003236                     _printTime:
  8045                           	opt stack 17
  8046                           
  8047                           ;main.c: 417: lcdInst(0b10000000);
  8048                           
  8049                           ; BSR set to: 0
  8050                           ;incstack = 0
  8051  003236  0E80               	movlw	128
  8052  003238  EC27  F01C         	call	_lcdInst
  8053                           
  8054                           ;main.c: 418: printf("%02x/%02x   ", time[5],time[4]);
  8055  00323C  0EC9               	movlw	low STR_1
  8056  00323E  0100               	movlb	0	; () banked
  8057  003240  6F9E               	movwf	printf@f& (0+255),b
  8058  003242  0EFF               	movlw	high STR_1
  8059  003244  0100               	movlb	0	; () banked
  8060  003246  6F9F               	movwf	(printf@f+1)& (0+255),b
  8061  003248  C0E7  F0A0         	movff	_time+5,?_printf+2
  8062  00324C  0100               	movlb	0	; () banked
  8063  00324E  6BA1               	clrf	(?_printf+3)& (0+255),b
  8064  003250  C0E6  F0A2         	movff	_time+4,?_printf+4
  8065  003254  0100               	movlb	0	; () banked
  8066  003256  6BA3               	clrf	(?_printf+5)& (0+255),b
  8067  003258  ECEC  F019         	call	_printf	;wreg free
  8068                           
  8069                           ;main.c: 419: printf("%02x:%02x:%02x", time[2]+1,time[1],time[0]);
  8070  00325C  0E67               	movlw	low STR_2
  8071  00325E  0100               	movlb	0	; () banked
  8072  003260  6F9E               	movwf	printf@f& (0+255),b
  8073  003262  0EFF               	movlw	high STR_2
  8074  003264  0100               	movlb	0	; () banked
  8075  003266  6F9F               	movwf	(printf@f+1)& (0+255),b
  8076  003268  0E01               	movlw	1
  8077  00326A  0100               	movlb	0	; () banked
  8078  00326C  25E4               	addwf	(_time+2)& (0+255),w,b
  8079  00326E  0100               	movlb	0	; () banked
  8080  003270  6FA0               	movwf	(?_printf+2)& (0+255),b
  8081  003272  0100               	movlb	0	; () banked
  8082  003274  6BA1               	clrf	(?_printf+3)& (0+255),b
  8083  003276  0E00               	movlw	0
  8084  003278  23A1               	addwfc	(?_printf+3)& (0+255),f,b
  8085  00327A  C0E3  F0A2         	movff	_time+1,?_printf+4
  8086  00327E  0100               	movlb	0	; () banked
  8087  003280  6BA3               	clrf	(?_printf+5)& (0+255),b
  8088  003282  C0E2  F0A4         	movff	_time,?_printf+6
  8089  003286  0100               	movlb	0	; () banked
  8090  003288  6BA5               	clrf	(?_printf+7)& (0+255),b
  8091  00328A  ECEC  F019         	call	_printf	;wreg free
  8092  00328E  0012               	return		;funcret
  8093  003290                     __end_of_printTime:
  8094                           	opt stack 0
  8095                           tblptru	equ	0xFF8
  8096                           tblptrh	equ	0xFF7
  8097                           tblptrl	equ	0xFF6
  8098                           tablat	equ	0xFF5
  8099                           prodh	equ	0xFF4
  8100                           prodl	equ	0xFF3
  8101                           intcon	equ	0xFF2
  8102                           intcon2	equ	0xFF1
  8103                           postinc0	equ	0xFEE
  8104                           wreg	equ	0xFE8
  8105                           indf1	equ	0xFE7
  8106                           postdec1	equ	0xFE5
  8107                           fsr1h	equ	0xFE2
  8108                           fsr1l	equ	0xFE1
  8109                           indf2	equ	0xFDF
  8110                           postinc2	equ	0xFDE
  8111                           postdec2	equ	0xFDD
  8112                           fsr2h	equ	0xFDA
  8113                           fsr2l	equ	0xFD9
  8114                           status	equ	0xFD8
  8115                           
  8116 ;; *************** function _EEPROM *****************
  8117 ;; Defined at:
  8118 ;;		line 881 in file "main.c"
  8119 ;; Parameters:    Size  Location     Type
  8120 ;;		None
  8121 ;; Auto vars:     Size  Location     Type
  8122 ;;  timeStorage    14   55[BANK0 ] int [7]
  8123 ;;  storage        12   69[BANK0 ] int [6]
  8124 ;;  i               2   84[BANK0 ] int 
  8125 ;;  temp            1   81[BANK0 ] unsigned char 
  8126 ;;  screen_state    2   82[BANK0 ] int 
  8127 ;; Return value:  Size  Location     Type
  8128 ;;                  1    wreg      void 
  8129 ;; Registers used:
  8130 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8131 ;; Tracked objects:
  8132 ;;		On entry : 0/0
  8133 ;;		On exit  : 0/0
  8134 ;;		Unchanged: 0/0
  8135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8137 ;;      Locals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8138 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8139 ;;      Totals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8140 ;;Total ram usage:       33 bytes
  8141 ;; Hardware stack levels used:    1
  8142 ;; Hardware stack levels required when called:   13
  8143 ;; This function calls:
  8144 ;;		_cycleProgramScreenLeft
  8145 ;;		_cycleProgramScreenRight
  8146 ;;		_getEEPROM
  8147 ;;		_getPressedKeypadKey
  8148 ;;		_past_run_access
  8149 ;;		_update_eeprom_screen_state
  8150 ;; This function is called by:
  8151 ;;		_enterSelectedSubProgramFromMainProgram
  8152 ;; This function uses a non-reentrant model
  8153 ;;
  8154                           
  8155                           	psect	text37
  8156  000FEE                     __ptext37:
  8157                           	opt stack 0
  8158  000FEE                     _EEPROM:
  8159                           	opt stack 16
  8160                           
  8161                           ;main.c: 882: int screen_state = 0;
  8162                           
  8163                           ;incstack = 0
  8164  000FEE  0E00               	movlw	0
  8165  000FF0  0100               	movlb	0	; () banked
  8166  000FF2  6FD3               	movwf	(EEPROM@screen_state+1)& (0+255),b
  8167  000FF4  0E00               	movlw	0
  8168  000FF6  6FD2               	movwf	EEPROM@screen_state& (0+255),b
  8169                           
  8170                           ; BSR set to: 0
  8171                           ;main.c: 883: update_eeprom_screen_state(screen_state);
  8172  000FF8  C0D2  F0AC         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  8173  000FFC  C0D3  F0AD         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  8174  001000  EC09  F016         	call	_update_eeprom_screen_state	;wreg free
  8175  001004                     l8631:
  8176                           
  8177                           ;main.c: 886: unsigned char temp = getPressedKeypadKey();
  8178  001004  EC25  F01B         	call	_getPressedKeypadKey	;wreg free
  8179  001008  0100               	movlb	0	; () banked
  8180  00100A  6FD1               	movwf	EEPROM@temp& (0+255),b
  8181                           
  8182                           ; BSR set to: 0
  8183                           ;main.c: 887: if (temp == keys[ENTER]){
  8184  00100C  0E56               	movlw	low _ENTER
  8185  00100E  6EF6               	movwf	tblptrl,c
  8186  001010                     	if	1	;There is more than 1 active tblptr byte
  8187  001010  0EFE               	movlw	high _ENTER
  8188  001012  6EF7               	movwf	tblptrh,c
  8189  001014                     	endif
  8190  001014                     	if	1	;There are 3 active tblptr bytes
  8191  001014  0E00               	movlw	low (_ENTER shr (0+16))
  8192  001016  6EF8               	movwf	tblptru,c
  8193  001018                     	endif
  8194  001018  0009               	tblrd		*+
  8195  00101A  CFF5 F0B5          	movff	tablat,??_EEPROM
  8196  00101E  0009               	tblrd		*+
  8197  001020  CFF5 F0B6          	movff	tablat,??_EEPROM+1
  8198  001024  0E31               	movlw	low _keys
  8199  001026  0100               	movlb	0	; () banked
  8200  001028  25B5               	addwf	??_EEPROM& (0+255),w,b
  8201  00102A  6EF6               	movwf	tblptrl,c
  8202  00102C  0EFE               	movlw	high _keys
  8203  00102E  21B6               	addwfc	(??_EEPROM+1)& (0+255),w,b
  8204  001030  6EF7               	movwf	tblptrh,c
  8205  001032                     	if	1	;There are 3 active tblptr bytes
  8206  001032  6AF8               	clrf	tblptru,c
  8207  001034  0E00               	movlw	low (__mediumconst shr (0+16))
  8208  001036  22F8               	addwfc	tblptru,f,c
  8209  001038                     	endif
  8210  001038  0008               	tblrd		*
  8211  00103A  50F5               	movf	tablat,w,c
  8212  00103C  0100               	movlb	0	; () banked
  8213  00103E  19D1               	xorwf	EEPROM@temp& (0+255),w,b
  8214  001040  A4D8               	btfss	status,2,c
  8215  001042  D0CB               	goto	l8689
  8216                           
  8217                           ; BSR set to: 0
  8218                           ;main.c: 888: int storage[6], timeStorage[7], i;
  8219                           ;main.c: 889: for (i = 0; i <6; i++){
  8220  001044  0E00               	movlw	0
  8221  001046  0100               	movlb	0	; () banked
  8222  001048  6FD5               	movwf	(EEPROM@i+1)& (0+255),b
  8223  00104A  0E00               	movlw	0
  8224  00104C  6FD4               	movwf	EEPROM@i& (0+255),b
  8225  00104E                     l8637:
  8226                           
  8227                           ; BSR set to: 0
  8228  00104E  0100               	movlb	0	; () banked
  8229  001050  BFD5               	btfsc	(EEPROM@i+1)& (0+255),7,b
  8230  001052  D008               	goto	l8641
  8231  001054  0100               	movlb	0	; () banked
  8232  001056  51D5               	movf	(EEPROM@i+1)& (0+255),w,b
  8233  001058  E123               	bnz	l8647
  8234  00105A  0E06               	movlw	6
  8235  00105C  0100               	movlb	0	; () banked
  8236  00105E  5DD4               	subwf	EEPROM@i& (0+255),w,b
  8237  001060  B0D8               	btfsc	status,0,c
  8238  001062  D01E               	goto	l8647
  8239  001064                     l8641:
  8240                           
  8241                           ; BSR set to: 0
  8242                           ;main.c: 890: storage[i] = runInfo[i];
  8243  001064  90D8               	bcf	status,0,c
  8244  001066  0100               	movlb	0	; () banked
  8245  001068  35D4               	rlcf	EEPROM@i& (0+255),w,b
  8246  00106A  6ED9               	movwf	fsr2l,c
  8247  00106C  0100               	movlb	0	; () banked
  8248  00106E  35D5               	rlcf	(EEPROM@i+1)& (0+255),w,b
  8249  001070  6EDA               	movwf	fsr2h,c
  8250  001072  0EF1               	movlw	low _runInfo
  8251  001074  26D9               	addwf	fsr2l,f,c
  8252  001076  0E00               	movlw	high _runInfo
  8253  001078  22DA               	addwfc	fsr2h,f,c
  8254  00107A  90D8               	bcf	status,0,c
  8255  00107C  0100               	movlb	0	; () banked
  8256  00107E  35D4               	rlcf	EEPROM@i& (0+255),w,b
  8257  001080  6EE1               	movwf	fsr1l,c
  8258  001082  0100               	movlb	0	; () banked
  8259  001084  35D5               	rlcf	(EEPROM@i+1)& (0+255),w,b
  8260  001086  6EE2               	movwf	fsr1h,c
  8261  001088  0EC5               	movlw	low EEPROM@storage
  8262  00108A  26E1               	addwf	fsr1l,f,c
  8263  00108C  0E00               	movlw	high EEPROM@storage
  8264  00108E  22E2               	addwfc	fsr1h,f,c
  8265  001090  CFDE FFE6          	movff	postinc2,postinc1
  8266  001094  CFDD FFE5          	movff	postdec2,postdec1
  8267                           
  8268                           ; BSR set to: 0
  8269  001098  0100               	movlb	0	; () banked
  8270  00109A  4BD4               	infsnz	EEPROM@i& (0+255),f,b
  8271  00109C  2BD5               	incf	(EEPROM@i+1)& (0+255),f,b
  8272  00109E  D7D7               	goto	l8637
  8273  0010A0                     l8647:
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;main.c: 891: }
  8277                           ;main.c: 892: for (i = 0; i<7; i++){
  8278  0010A0  0E00               	movlw	0
  8279  0010A2  0100               	movlb	0	; () banked
  8280  0010A4  6FD5               	movwf	(EEPROM@i+1)& (0+255),b
  8281  0010A6  0E00               	movlw	0
  8282  0010A8  6FD4               	movwf	EEPROM@i& (0+255),b
  8283  0010AA                     l8649:
  8284                           
  8285                           ; BSR set to: 0
  8286  0010AA  0100               	movlb	0	; () banked
  8287  0010AC  BFD5               	btfsc	(EEPROM@i+1)& (0+255),7,b
  8288  0010AE  D008               	goto	l8653
  8289  0010B0  0100               	movlb	0	; () banked
  8290  0010B2  51D5               	movf	(EEPROM@i+1)& (0+255),w,b
  8291  0010B4  E124               	bnz	l8659
  8292  0010B6  0E07               	movlw	7
  8293  0010B8  0100               	movlb	0	; () banked
  8294  0010BA  5DD4               	subwf	EEPROM@i& (0+255),w,b
  8295  0010BC  B0D8               	btfsc	status,0,c
  8296  0010BE  D01F               	goto	l8659
  8297  0010C0                     l8653:
  8298                           
  8299                           ; BSR set to: 0
  8300                           ;main.c: 893: timeStorage[i] = lastRunTime[i];
  8301  0010C0  0EDB               	movlw	low _lastRunTime
  8302  0010C2  0100               	movlb	0	; () banked
  8303  0010C4  25D4               	addwf	EEPROM@i& (0+255),w,b
  8304  0010C6  6ED9               	movwf	fsr2l,c
  8305  0010C8  0E00               	movlw	high _lastRunTime
  8306  0010CA  0100               	movlb	0	; () banked
  8307  0010CC  21D5               	addwfc	(EEPROM@i+1)& (0+255),w,b
  8308  0010CE  6EDA               	movwf	fsr2h,c
  8309  0010D0  50DF               	movf	indf2,w,c
  8310  0010D2  0100               	movlb	0	; () banked
  8311  0010D4  6FB5               	movwf	??_EEPROM& (0+255),b
  8312  0010D6  6BB6               	clrf	(??_EEPROM+1)& (0+255),b
  8313  0010D8  90D8               	bcf	status,0,c
  8314  0010DA  0100               	movlb	0	; () banked
  8315  0010DC  35D4               	rlcf	EEPROM@i& (0+255),w,b
  8316  0010DE  6ED9               	movwf	fsr2l,c
  8317  0010E0  0100               	movlb	0	; () banked
  8318  0010E2  35D5               	rlcf	(EEPROM@i+1)& (0+255),w,b
  8319  0010E4  6EDA               	movwf	fsr2h,c
  8320  0010E6  0EB7               	movlw	low EEPROM@timeStorage
  8321  0010E8  26D9               	addwf	fsr2l,f,c
  8322  0010EA  0E00               	movlw	high EEPROM@timeStorage
  8323  0010EC  22DA               	addwfc	fsr2h,f,c
  8324  0010EE  C0B5  FFDE         	movff	??_EEPROM,postinc2
  8325  0010F2  C0B6  FFDD         	movff	??_EEPROM+1,postdec2
  8326                           
  8327                           ; BSR set to: 0
  8328  0010F6  0100               	movlb	0	; () banked
  8329  0010F8  4BD4               	infsnz	EEPROM@i& (0+255),f,b
  8330  0010FA  2BD5               	incf	(EEPROM@i+1)& (0+255),f,b
  8331  0010FC  D7D6               	goto	l8649
  8332  0010FE                     l8659:
  8333                           
  8334                           ; BSR set to: 0
  8335                           ;main.c: 894: }
  8336                           ;main.c: 895: getEEPROM(screen_state);
  8337  0010FE  C0D2  F088         	movff	EEPROM@screen_state,getEEPROM@num
  8338  001102  C0D3  F089         	movff	EEPROM@screen_state+1,getEEPROM@num+1
  8339  001106  ECD6  F00F         	call	_getEEPROM	;wreg free
  8340                           
  8341                           ;main.c: 896: past_run_access();
  8342  00110A  EC70  F010         	call	_past_run_access	;wreg free
  8343                           
  8344                           ;main.c: 897: update_eeprom_screen_state(screen_state);
  8345  00110E  C0D2  F0AC         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  8346  001112  C0D3  F0AD         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  8347  001116  EC09  F016         	call	_update_eeprom_screen_state	;wreg free
  8348                           
  8349                           ;main.c: 898: for (i = 0; i <6; i++){
  8350  00111A  0E00               	movlw	0
  8351  00111C  0100               	movlb	0	; () banked
  8352  00111E  6FD5               	movwf	(EEPROM@i+1)& (0+255),b
  8353  001120  0E00               	movlw	0
  8354  001122  6FD4               	movwf	EEPROM@i& (0+255),b
  8355  001124                     l8667:
  8356                           
  8357                           ; BSR set to: 0
  8358  001124  0100               	movlb	0	; () banked
  8359  001126  BFD5               	btfsc	(EEPROM@i+1)& (0+255),7,b
  8360  001128  D008               	goto	l8671
  8361  00112A  0100               	movlb	0	; () banked
  8362  00112C  51D5               	movf	(EEPROM@i+1)& (0+255),w,b
  8363  00112E  E123               	bnz	l8677
  8364  001130  0E06               	movlw	6
  8365  001132  0100               	movlb	0	; () banked
  8366  001134  5DD4               	subwf	EEPROM@i& (0+255),w,b
  8367  001136  B0D8               	btfsc	status,0,c
  8368  001138  D01E               	goto	l8677
  8369  00113A                     l8671:
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;main.c: 899: runInfo[i] = storage[i];
  8373  00113A  90D8               	bcf	status,0,c
  8374  00113C  0100               	movlb	0	; () banked
  8375  00113E  35D4               	rlcf	EEPROM@i& (0+255),w,b
  8376  001140  6ED9               	movwf	fsr2l,c
  8377  001142  0100               	movlb	0	; () banked
  8378  001144  35D5               	rlcf	(EEPROM@i+1)& (0+255),w,b
  8379  001146  6EDA               	movwf	fsr2h,c
  8380  001148  0EC5               	movlw	low EEPROM@storage
  8381  00114A  26D9               	addwf	fsr2l,f,c
  8382  00114C  0E00               	movlw	high EEPROM@storage
  8383  00114E  22DA               	addwfc	fsr2h,f,c
  8384  001150  90D8               	bcf	status,0,c
  8385  001152  0100               	movlb	0	; () banked
  8386  001154  35D4               	rlcf	EEPROM@i& (0+255),w,b
  8387  001156  6EE1               	movwf	fsr1l,c
  8388  001158  0100               	movlb	0	; () banked
  8389  00115A  35D5               	rlcf	(EEPROM@i+1)& (0+255),w,b
  8390  00115C  6EE2               	movwf	fsr1h,c
  8391  00115E  0EF1               	movlw	low _runInfo
  8392  001160  26E1               	addwf	fsr1l,f,c
  8393  001162  0E00               	movlw	high _runInfo
  8394  001164  22E2               	addwfc	fsr1h,f,c
  8395  001166  CFDE FFE6          	movff	postinc2,postinc1
  8396  00116A  CFDD FFE5          	movff	postdec2,postdec1
  8397                           
  8398                           ; BSR set to: 0
  8399  00116E  0100               	movlb	0	; () banked
  8400  001170  4BD4               	infsnz	EEPROM@i& (0+255),f,b
  8401  001172  2BD5               	incf	(EEPROM@i+1)& (0+255),f,b
  8402  001174  D7D7               	goto	l8667
  8403  001176                     l8677:
  8404                           
  8405                           ; BSR set to: 0
  8406                           ;main.c: 900: }
  8407                           ;main.c: 901: for (i = 0; i<7; i++){
  8408  001176  0E00               	movlw	0
  8409  001178  0100               	movlb	0	; () banked
  8410  00117A  6FD5               	movwf	(EEPROM@i+1)& (0+255),b
  8411  00117C  0E00               	movlw	0
  8412  00117E  6FD4               	movwf	EEPROM@i& (0+255),b
  8413                           
  8414                           ; BSR set to: 0
  8415  001180  0100               	movlb	0	; () banked
  8416  001182  BFD5               	btfsc	(EEPROM@i+1)& (0+255),7,b
  8417  001184  D00A               	goto	l8683
  8418  001186  0100               	movlb	0	; () banked
  8419  001188  51D5               	movf	(EEPROM@i+1)& (0+255),w,b
  8420  00118A  E106               	bnz	u9340
  8421  00118C  0E07               	movlw	7
  8422  00118E  0100               	movlb	0	; () banked
  8423  001190  5DD4               	subwf	EEPROM@i& (0+255),w,b
  8424  001192  B0D8               	btfsc	status,0,c
  8425  001194  D737               	goto	l8631
  8426  001196  D001               	goto	l8683
  8427  001198                     u9340:
  8428                           
  8429                           ; BSR set to: 0
  8430  001198  D735               	goto	l8631
  8431  00119A                     l8683:
  8432                           
  8433                           ; BSR set to: 0
  8434                           ;main.c: 902: lastRunTime[i] = timeStorage[i];
  8435  00119A  90D8               	bcf	status,0,c
  8436  00119C  0100               	movlb	0	; () banked
  8437  00119E  35D4               	rlcf	EEPROM@i& (0+255),w,b
  8438  0011A0  6ED9               	movwf	fsr2l,c
  8439  0011A2  0100               	movlb	0	; () banked
  8440  0011A4  35D5               	rlcf	(EEPROM@i+1)& (0+255),w,b
  8441  0011A6  6EDA               	movwf	fsr2h,c
  8442  0011A8  0EB7               	movlw	low EEPROM@timeStorage
  8443  0011AA  26D9               	addwf	fsr2l,f,c
  8444  0011AC  0E00               	movlw	high EEPROM@timeStorage
  8445  0011AE  22DA               	addwfc	fsr2h,f,c
  8446  0011B0  0EDB               	movlw	low _lastRunTime
  8447  0011B2  0100               	movlb	0	; () banked
  8448  0011B4  25D4               	addwf	EEPROM@i& (0+255),w,b
  8449  0011B6  6EE1               	movwf	fsr1l,c
  8450  0011B8  0E00               	movlw	high _lastRunTime
  8451  0011BA  0100               	movlb	0	; () banked
  8452  0011BC  21D5               	addwfc	(EEPROM@i+1)& (0+255),w,b
  8453  0011BE  6EE2               	movwf	fsr1h,c
  8454  0011C0  CFDF FFE7          	movff	indf2,indf1
  8455                           
  8456                           ; BSR set to: 0
  8457  0011C4  0100               	movlb	0	; () banked
  8458  0011C6  4BD4               	infsnz	EEPROM@i& (0+255),f,b
  8459  0011C8  2BD5               	incf	(EEPROM@i+1)& (0+255),f,b
  8460                           
  8461                           ; BSR set to: 0
  8462  0011CA  0100               	movlb	0	; () banked
  8463  0011CC  BFD5               	btfsc	(EEPROM@i+1)& (0+255),7,b
  8464  0011CE  D7E5               	goto	l8683
  8465  0011D0  0100               	movlb	0	; () banked
  8466  0011D2  51D5               	movf	(EEPROM@i+1)& (0+255),w,b
  8467  0011D4  E101               	bnz	u9350
  8468  0011D6  D7DA               	goto	L5
  8469  0011D8                     u9350:
  8470                           
  8471                           ; BSR set to: 0
  8472                           ;main.c: 903: }
  8473                           ;main.c: 904: }else if (temp == keys[BACK]){
  8474  0011D8  D715               	goto	l8631
  8475  0011DA                     l8689:
  8476                           
  8477                           ; BSR set to: 0
  8478  0011DA  0E54               	movlw	low _BACK
  8479  0011DC  6EF6               	movwf	tblptrl,c
  8480  0011DE                     	if	1	;There is more than 1 active tblptr byte
  8481  0011DE  0EFE               	movlw	high _BACK
  8482  0011E0  6EF7               	movwf	tblptrh,c
  8483  0011E2                     	endif
  8484  0011E2                     	if	1	;There are 3 active tblptr bytes
  8485  0011E2  0E00               	movlw	low (_BACK shr (0+16))
  8486  0011E4  6EF8               	movwf	tblptru,c
  8487  0011E6                     	endif
  8488  0011E6  0009               	tblrd		*+
  8489  0011E8  CFF5 F0B5          	movff	tablat,??_EEPROM
  8490  0011EC  0009               	tblrd		*+
  8491  0011EE  CFF5 F0B6          	movff	tablat,??_EEPROM+1
  8492  0011F2  0E31               	movlw	low _keys
  8493  0011F4  0100               	movlb	0	; () banked
  8494  0011F6  25B5               	addwf	??_EEPROM& (0+255),w,b
  8495  0011F8  6EF6               	movwf	tblptrl,c
  8496  0011FA  0EFE               	movlw	high _keys
  8497  0011FC  21B6               	addwfc	(??_EEPROM+1)& (0+255),w,b
  8498  0011FE  6EF7               	movwf	tblptrh,c
  8499  001200                     	if	1	;There are 3 active tblptr bytes
  8500  001200  6AF8               	clrf	tblptru,c
  8501  001202  0E00               	movlw	low (__mediumconst shr (0+16))
  8502  001204  22F8               	addwfc	tblptru,f,c
  8503  001206                     	endif
  8504  001206  0008               	tblrd		*
  8505  001208  50F5               	movf	tablat,w,c
  8506  00120A  0100               	movlb	0	; () banked
  8507  00120C  19D1               	xorwf	EEPROM@temp& (0+255),w,b
  8508  00120E  B4D8               	btfsc	status,2,c
  8509  001210  0012               	return	
  8510                           
  8511                           ; BSR set to: 0
  8512                           
  8513                           ; BSR set to: 0
  8514                           
  8515                           ; BSR set to: 0
  8516                           ;main.c: 906: }else if (temp == keys[LEFT]){
  8517                           
  8518                           ; BSR set to: 0
  8519                           ;main.c: 905: break;
  8520  001212  0E58               	movlw	low _LEFT
  8521  001214  6EF6               	movwf	tblptrl,c
  8522  001216                     	if	1	;There is more than 1 active tblptr byte
  8523  001216  0EFE               	movlw	high _LEFT
  8524  001218  6EF7               	movwf	tblptrh,c
  8525  00121A                     	endif
  8526  00121A                     	if	1	;There are 3 active tblptr bytes
  8527  00121A  0E00               	movlw	low (_LEFT shr (0+16))
  8528  00121C  6EF8               	movwf	tblptru,c
  8529  00121E                     	endif
  8530  00121E  0009               	tblrd		*+
  8531  001220  CFF5 F0B5          	movff	tablat,??_EEPROM
  8532  001224  0009               	tblrd		*+
  8533  001226  CFF5 F0B6          	movff	tablat,??_EEPROM+1
  8534  00122A  0E31               	movlw	low _keys
  8535  00122C  0100               	movlb	0	; () banked
  8536  00122E  25B5               	addwf	??_EEPROM& (0+255),w,b
  8537  001230  6EF6               	movwf	tblptrl,c
  8538  001232  0EFE               	movlw	high _keys
  8539  001234  21B6               	addwfc	(??_EEPROM+1)& (0+255),w,b
  8540  001236  6EF7               	movwf	tblptrh,c
  8541  001238                     	if	1	;There are 3 active tblptr bytes
  8542  001238  6AF8               	clrf	tblptru,c
  8543  00123A  0E00               	movlw	low (__mediumconst shr (0+16))
  8544  00123C  22F8               	addwfc	tblptru,f,c
  8545  00123E                     	endif
  8546  00123E  0008               	tblrd		*
  8547  001240  50F5               	movf	tablat,w,c
  8548  001242  0100               	movlb	0	; () banked
  8549  001244  19D1               	xorwf	EEPROM@temp& (0+255),w,b
  8550  001246  A4D8               	btfss	status,2,c
  8551  001248  D019               	goto	l8701
  8552                           
  8553                           ; BSR set to: 0
  8554                           ;main.c: 907: cycleProgramScreenLeft(&screen_state,0,3);
  8555  00124A  0ED2               	movlw	low EEPROM@screen_state
  8556  00124C  0100               	movlb	0	; () banked
  8557  00124E  6F80               	movwf	cycleProgramScreenLeft@programScreen& (0+255),b
  8558  001250  0E00               	movlw	high EEPROM@screen_state
  8559  001252  0100               	movlb	0	; () banked
  8560  001254  6F81               	movwf	(cycleProgramScreenLeft@programScreen+1)& (0+255),b
  8561  001256  0E00               	movlw	0
  8562  001258  0100               	movlb	0	; () banked
  8563  00125A  6F83               	movwf	(cycleProgramScreenLeft@min+1)& (0+255),b
  8564  00125C  0E00               	movlw	0
  8565  00125E  6F82               	movwf	cycleProgramScreenLeft@min& (0+255),b
  8566  001260  0E00               	movlw	0
  8567  001262  0100               	movlb	0	; () banked
  8568  001264  6F85               	movwf	(cycleProgramScreenLeft@max+1)& (0+255),b
  8569  001266  0E03               	movlw	3
  8570  001268  6F84               	movwf	cycleProgramScreenLeft@max& (0+255),b
  8571  00126A  ECB7  F01A         	call	_cycleProgramScreenLeft	;wreg free
  8572                           
  8573                           ;main.c: 908: update_eeprom_screen_state(screen_state);
  8574  00126E  C0D2  F0AC         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  8575  001272  C0D3  F0AD         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  8576  001276  EC09  F016         	call	_update_eeprom_screen_state	;wreg free
  8577                           
  8578                           ;main.c: 909: }else if (temp == keys[RIGHT]){
  8579  00127A  D6C4               	goto	l8631
  8580  00127C                     l8701:
  8581  00127C  0E5A               	movlw	low _RIGHT
  8582  00127E  6EF6               	movwf	tblptrl,c
  8583  001280                     	if	1	;There is more than 1 active tblptr byte
  8584  001280  0EFE               	movlw	high _RIGHT
  8585  001282  6EF7               	movwf	tblptrh,c
  8586  001284                     	endif
  8587  001284                     	if	1	;There are 3 active tblptr bytes
  8588  001284  0E00               	movlw	low (_RIGHT shr (0+16))
  8589  001286  6EF8               	movwf	tblptru,c
  8590  001288                     	endif
  8591  001288  0009               	tblrd		*+
  8592  00128A  CFF5 F0B5          	movff	tablat,??_EEPROM
  8593  00128E  0009               	tblrd		*+
  8594  001290  CFF5 F0B6          	movff	tablat,??_EEPROM+1
  8595  001294  0E31               	movlw	low _keys
  8596  001296  0100               	movlb	0	; () banked
  8597  001298  25B5               	addwf	??_EEPROM& (0+255),w,b
  8598  00129A  6EF6               	movwf	tblptrl,c
  8599  00129C  0EFE               	movlw	high _keys
  8600  00129E  21B6               	addwfc	(??_EEPROM+1)& (0+255),w,b
  8601  0012A0  6EF7               	movwf	tblptrh,c
  8602  0012A2                     	if	1	;There are 3 active tblptr bytes
  8603  0012A2  6AF8               	clrf	tblptru,c
  8604  0012A4  0E00               	movlw	low (__mediumconst shr (0+16))
  8605  0012A6  22F8               	addwfc	tblptru,f,c
  8606  0012A8                     	endif
  8607  0012A8  0008               	tblrd		*
  8608  0012AA  50F5               	movf	tablat,w,c
  8609  0012AC  0100               	movlb	0	; () banked
  8610  0012AE  19D1               	xorwf	EEPROM@temp& (0+255),w,b
  8611  0012B0  A4D8               	btfss	status,2,c
  8612  0012B2  D6A8               	goto	l8631
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;main.c: 910: cycleProgramScreenRight(&screen_state,0,3);
  8616  0012B4  0ED2               	movlw	low EEPROM@screen_state
  8617  0012B6  0100               	movlb	0	; () banked
  8618  0012B8  6F80               	movwf	cycleProgramScreenRight@programScreen& (0+255),b
  8619  0012BA  0E00               	movlw	high EEPROM@screen_state
  8620  0012BC  0100               	movlb	0	; () banked
  8621  0012BE  6F81               	movwf	(cycleProgramScreenRight@programScreen+1)& (0+255),b
  8622  0012C0  0E00               	movlw	0
  8623  0012C2  0100               	movlb	0	; () banked
  8624  0012C4  6F83               	movwf	(cycleProgramScreenRight@min+1)& (0+255),b
  8625  0012C6  0E00               	movlw	0
  8626  0012C8  6F82               	movwf	cycleProgramScreenRight@min& (0+255),b
  8627  0012CA  0E00               	movlw	0
  8628  0012CC  0100               	movlb	0	; () banked
  8629  0012CE  6F85               	movwf	(cycleProgramScreenRight@max+1)& (0+255),b
  8630  0012D0  0E03               	movlw	3
  8631  0012D2  6F84               	movwf	cycleProgramScreenRight@max& (0+255),b
  8632  0012D4  EC99  F01A         	call	_cycleProgramScreenRight	;wreg free
  8633                           
  8634                           ;main.c: 911: update_eeprom_screen_state(screen_state);
  8635  0012D8  C0D2  F0AC         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  8636  0012DC  C0D3  F0AD         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  8637  0012E0  EC09  F016         	call	_update_eeprom_screen_state	;wreg free
  8638  0012E4  D68F               	goto	l8631
  8639  0012E6                     __end_of_EEPROM:
  8640                           	opt stack 0
  8641                           tblptru	equ	0xFF8
  8642                           tblptrh	equ	0xFF7
  8643                           tblptrl	equ	0xFF6
  8644                           tablat	equ	0xFF5
  8645                           prodh	equ	0xFF4
  8646                           prodl	equ	0xFF3
  8647                           intcon	equ	0xFF2
  8648                           intcon2	equ	0xFF1
  8649                           postinc0	equ	0xFEE
  8650                           wreg	equ	0xFE8
  8651                           indf1	equ	0xFE7
  8652                           postinc1	equ	0xFE6
  8653                           postdec1	equ	0xFE5
  8654                           fsr1h	equ	0xFE2
  8655                           fsr1l	equ	0xFE1
  8656                           indf2	equ	0xFDF
  8657                           postinc2	equ	0xFDE
  8658                           postdec2	equ	0xFDD
  8659                           fsr2h	equ	0xFDA
  8660                           fsr2l	equ	0xFD9
  8661                           status	equ	0xFD8
  8662                           
  8663 ;; *************** function _update_eeprom_screen_state *****************
  8664 ;; Defined at:
  8665 ;;		line 640 in file "main.c"
  8666 ;; Parameters:    Size  Location     Type
  8667 ;;  num             2   44[BANK0 ] int 
  8668 ;; Auto vars:     Size  Location     Type
  8669 ;;		None
  8670 ;; Return value:  Size  Location     Type
  8671 ;;                  1    wreg      void 
  8672 ;; Registers used:
  8673 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8674 ;; Tracked objects:
  8675 ;;		On entry : 0/0
  8676 ;;		On exit  : 0/0
  8677 ;;		Unchanged: 0/0
  8678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8679 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8681 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8682 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8683 ;;Total ram usage:        4 bytes
  8684 ;; Hardware stack levels used:    1
  8685 ;; Hardware stack levels required when called:   11
  8686 ;; This function calls:
  8687 ;;		_lcdClear
  8688 ;;		_lcdInst
  8689 ;;		_printf
  8690 ;; This function is called by:
  8691 ;;		_EEPROM
  8692 ;; This function uses a non-reentrant model
  8693 ;;
  8694                           
  8695                           	psect	text38
  8696  002C12                     __ptext38:
  8697                           	opt stack 0
  8698  002C12                     _update_eeprom_screen_state:
  8699                           	opt stack 17
  8700                           
  8701                           ;main.c: 641: lcdClear();
  8702                           
  8703                           ;incstack = 0
  8704  002C12  EC0B  F01B         	call	_lcdClear	;wreg free
  8705                           
  8706                           ;main.c: 642: switch(num){
  8707  002C16  D02C               	goto	l8313
  8708  002C18                     l8303:
  8709                           
  8710                           ;main.c: 644: lcdClear();
  8711  002C18  EC0B  F01B         	call	_lcdClear	;wreg free
  8712                           
  8713                           ;main.c: 645: printf("Recent Run");
  8714  002C1C  0EE2               	movlw	low STR_10
  8715  002C1E  0100               	movlb	0	; () banked
  8716  002C20  6F9E               	movwf	printf@f& (0+255),b
  8717  002C22  0EFF               	movlw	high STR_10
  8718  002C24  0100               	movlb	0	; () banked
  8719  002C26  6F9F               	movwf	(printf@f+1)& (0+255),b
  8720  002C28  ECEC  F019         	call	_printf	;wreg free
  8721                           
  8722                           ;main.c: 646: break;
  8723  002C2C  D038               	goto	l8315
  8724  002C2E                     l8305:
  8725                           
  8726                           ;main.c: 648: lcdClear();
  8727  002C2E  EC0B  F01B         	call	_lcdClear	;wreg free
  8728                           
  8729                           ;main.c: 649: printf("   Past Run 2  ");
  8730  002C32  0EF7               	movlw	low STR_11
  8731  002C34  0100               	movlb	0	; () banked
  8732  002C36  6F9E               	movwf	printf@f& (0+255),b
  8733  002C38  0EFE               	movlw	high STR_11
  8734  002C3A  0100               	movlb	0	; () banked
  8735  002C3C  6F9F               	movwf	(printf@f+1)& (0+255),b
  8736  002C3E  ECEC  F019         	call	_printf	;wreg free
  8737                           
  8738                           ;main.c: 650: break;
  8739  002C42  D02D               	goto	l8315
  8740  002C44                     l8307:
  8741                           
  8742                           ;main.c: 652: lcdClear();
  8743  002C44  EC0B  F01B         	call	_lcdClear	;wreg free
  8744                           
  8745                           ;main.c: 653: printf("   Past Run 3  ");
  8746  002C48  0E07               	movlw	low STR_12
  8747  002C4A  0100               	movlb	0	; () banked
  8748  002C4C  6F9E               	movwf	printf@f& (0+255),b
  8749  002C4E  0EFF               	movlw	high STR_12
  8750  002C50  0100               	movlb	0	; () banked
  8751  002C52  6F9F               	movwf	(printf@f+1)& (0+255),b
  8752  002C54  ECEC  F019         	call	_printf	;wreg free
  8753                           
  8754                           ;main.c: 654: break;
  8755  002C58  D022               	goto	l8315
  8756  002C5A                     l8309:
  8757                           
  8758                           ;main.c: 656: lcdClear();
  8759  002C5A  EC0B  F01B         	call	_lcdClear	;wreg free
  8760                           
  8761                           ;main.c: 657: printf("   Past Run 4  ");
  8762  002C5E  0E17               	movlw	low STR_13
  8763  002C60  0100               	movlb	0	; () banked
  8764  002C62  6F9E               	movwf	printf@f& (0+255),b
  8765  002C64  0EFF               	movlw	high STR_13
  8766  002C66  0100               	movlb	0	; () banked
  8767  002C68  6F9F               	movwf	(printf@f+1)& (0+255),b
  8768  002C6A  ECEC  F019         	call	_printf	;wreg free
  8769                           
  8770                           ;main.c: 659: }
  8771                           
  8772                           ;main.c: 658: break;
  8773  002C6E  D017               	goto	l8315
  8774  002C70                     l8313:
  8775  002C70  C0AC  F0AE         	movff	update_eeprom_screen_state@num,??_update_eeprom_screen_state
  8776  002C74  C0AD  F0AF         	movff	update_eeprom_screen_state@num+1,??_update_eeprom_screen_state+1
  8777                           
  8778                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8779                           ; Switch size 1, requested type "space"
  8780                           ; Number of cases is 1, Range of values is 0 to 0
  8781                           ; switch strategies available:
  8782                           ; Name         Instructions Cycles
  8783                           ; simple_byte            4     3 (average)
  8784                           ;	Chosen strategy is simple_byte
  8785  002C78  0100               	movlb	0	; () banked
  8786  002C7A  51AF               	movf	(??_update_eeprom_screen_state+1)& (0+255),w,b
  8787  002C7C  0A00               	xorlw	0	; case 0
  8788  002C7E  A4D8               	btfss	status,2,c
  8789  002C80  D00E               	goto	l8315
  8790                           
  8791                           ; BSR set to: 0
  8792                           ; Switch size 1, requested type "space"
  8793                           ; Number of cases is 4, Range of values is 0 to 3
  8794                           ; switch strategies available:
  8795                           ; Name         Instructions Cycles
  8796                           ; simple_byte           13     7 (average)
  8797                           ;	Chosen strategy is simple_byte
  8798  002C82  0100               	movlb	0	; () banked
  8799  002C84  51AE               	movf	??_update_eeprom_screen_state& (0+255),w,b
  8800  002C86  0A00               	xorlw	0	; case 0
  8801  002C88  B4D8               	btfsc	status,2,c
  8802  002C8A  D7C6               	goto	l8303
  8803  002C8C  0A01               	xorlw	1	; case 1
  8804  002C8E  B4D8               	btfsc	status,2,c
  8805  002C90  D7CE               	goto	l8305
  8806  002C92  0A03               	xorlw	3	; case 2
  8807  002C94  B4D8               	btfsc	status,2,c
  8808  002C96  D7D6               	goto	l8307
  8809  002C98  0A01               	xorlw	1	; case 3
  8810  002C9A  B4D8               	btfsc	status,2,c
  8811  002C9C  D7DE               	goto	l8309
  8812  002C9E                     l8315:
  8813                           
  8814                           ;main.c: 660: lcdInst(0b11000000);;
  8815  002C9E  0EC0               	movlw	192
  8816  002CA0  EC27  F01C         	call	_lcdInst
  8817                           
  8818                           ;main.c: 661: printf("<4  Nav: A/1  6>");
  8819  002CA4  0EC4               	movlw	low STR_14
  8820  002CA6  0100               	movlb	0	; () banked
  8821  002CA8  6F9E               	movwf	printf@f& (0+255),b
  8822  002CAA  0EFE               	movlw	high STR_14
  8823  002CAC  0100               	movlb	0	; () banked
  8824  002CAE  6F9F               	movwf	(printf@f+1)& (0+255),b
  8825  002CB0  ECEC  F019         	call	_printf	;wreg free
  8826  002CB4  0012               	return		;funcret
  8827  002CB6                     __end_of_update_eeprom_screen_state:
  8828                           	opt stack 0
  8829                           tblptru	equ	0xFF8
  8830                           tblptrh	equ	0xFF7
  8831                           tblptrl	equ	0xFF6
  8832                           tablat	equ	0xFF5
  8833                           prodh	equ	0xFF4
  8834                           prodl	equ	0xFF3
  8835                           intcon	equ	0xFF2
  8836                           intcon2	equ	0xFF1
  8837                           postinc0	equ	0xFEE
  8838                           wreg	equ	0xFE8
  8839                           indf1	equ	0xFE7
  8840                           postinc1	equ	0xFE6
  8841                           postdec1	equ	0xFE5
  8842                           fsr1h	equ	0xFE2
  8843                           fsr1l	equ	0xFE1
  8844                           indf2	equ	0xFDF
  8845                           postinc2	equ	0xFDE
  8846                           postdec2	equ	0xFDD
  8847                           fsr2h	equ	0xFDA
  8848                           fsr2l	equ	0xFD9
  8849                           status	equ	0xFD8
  8850                           
  8851 ;; *************** function _past_run_access *****************
  8852 ;; Defined at:
  8853 ;;		line 952 in file "main.c"
  8854 ;; Parameters:    Size  Location     Type
  8855 ;;		None
  8856 ;; Auto vars:     Size  Location     Type
  8857 ;;  temp            1   50[BANK0 ] unsigned char 
  8858 ;;  screen_state    2   51[BANK0 ] int 
  8859 ;; Return value:  Size  Location     Type
  8860 ;;                  1    wreg      void 
  8861 ;; Registers used:
  8862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8863 ;; Tracked objects:
  8864 ;;		On entry : 0/0
  8865 ;;		On exit  : 0/0
  8866 ;;		Unchanged: 0/0
  8867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8869 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8870 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8871 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8872 ;;Total ram usage:        5 bytes
  8873 ;; Hardware stack levels used:    1
  8874 ;; Hardware stack levels required when called:   12
  8875 ;; This function calls:
  8876 ;;		_cycleProgramScreenLeft
  8877 ;;		_cycleProgramScreenRight
  8878 ;;		_getPressedKeypadKey
  8879 ;;		_update_past_run_screen_state
  8880 ;; This function is called by:
  8881 ;;		_enterSelectedSubProgramFromMainProgram
  8882 ;;		_EEPROM
  8883 ;; This function uses a non-reentrant model
  8884 ;;
  8885                           
  8886                           	psect	text39
  8887  0020E0                     __ptext39:
  8888                           	opt stack 0
  8889  0020E0                     _past_run_access:
  8890                           	opt stack 17
  8891                           
  8892                           ;main.c: 953: int screen_state = 6;
  8893                           
  8894                           ;incstack = 0
  8895  0020E0  0E00               	movlw	0
  8896  0020E2  0100               	movlb	0	; () banked
  8897  0020E4  6FB4               	movwf	(past_run_access@screen_state+1)& (0+255),b
  8898  0020E6  0E06               	movlw	6
  8899  0020E8  6FB3               	movwf	past_run_access@screen_state& (0+255),b
  8900                           
  8901                           ; BSR set to: 0
  8902                           ;main.c: 954: update_past_run_screen_state(screen_state);
  8903  0020EA  C0B3  F0AC         	movff	past_run_access@screen_state,update_past_run_screen_state@num
  8904  0020EE  C0B4  F0AD         	movff	past_run_access@screen_state+1,update_past_run_screen_state@num+1
  8905  0020F2  ECF4  F00B         	call	_update_past_run_screen_state	;wreg free
  8906  0020F6                     l8259:
  8907                           
  8908                           ;main.c: 956: unsigned char temp = getPressedKeypadKey();
  8909  0020F6  EC25  F01B         	call	_getPressedKeypadKey	;wreg free
  8910  0020FA  0100               	movlb	0	; () banked
  8911  0020FC  6FB2               	movwf	past_run_access@temp& (0+255),b
  8912                           
  8913                           ; BSR set to: 0
  8914                           ;main.c: 957: if (temp == keys[BACK]){
  8915  0020FE  0E54               	movlw	low _BACK
  8916  002100  6EF6               	movwf	tblptrl,c
  8917  002102                     	if	1	;There is more than 1 active tblptr byte
  8918  002102  0EFE               	movlw	high _BACK
  8919  002104  6EF7               	movwf	tblptrh,c
  8920  002106                     	endif
  8921  002106                     	if	1	;There are 3 active tblptr bytes
  8922  002106  0E00               	movlw	low (_BACK shr (0+16))
  8923  002108  6EF8               	movwf	tblptru,c
  8924  00210A                     	endif
  8925  00210A  0009               	tblrd		*+
  8926  00210C  CFF5 F0B0          	movff	tablat,??_past_run_access
  8927  002110  0009               	tblrd		*+
  8928  002112  CFF5 F0B1          	movff	tablat,??_past_run_access+1
  8929  002116  0E31               	movlw	low _keys
  8930  002118  0100               	movlb	0	; () banked
  8931  00211A  25B0               	addwf	??_past_run_access& (0+255),w,b
  8932  00211C  6EF6               	movwf	tblptrl,c
  8933  00211E  0EFE               	movlw	high _keys
  8934  002120  21B1               	addwfc	(??_past_run_access+1)& (0+255),w,b
  8935  002122  6EF7               	movwf	tblptrh,c
  8936  002124                     	if	1	;There are 3 active tblptr bytes
  8937  002124  6AF8               	clrf	tblptru,c
  8938  002126  0E00               	movlw	low (__mediumconst shr (0+16))
  8939  002128  22F8               	addwfc	tblptru,f,c
  8940  00212A                     	endif
  8941  00212A  0008               	tblrd		*
  8942  00212C  50F5               	movf	tablat,w,c
  8943  00212E  0100               	movlb	0	; () banked
  8944  002130  19B2               	xorwf	past_run_access@temp& (0+255),w,b
  8945  002132  B4D8               	btfsc	status,2,c
  8946  002134  0012               	return	
  8947                           
  8948                           ; BSR set to: 0
  8949                           
  8950                           ; BSR set to: 0
  8951                           
  8952                           ; BSR set to: 0
  8953                           ;main.c: 959: }else if (temp == keys[LEFT]){
  8954                           
  8955                           ; BSR set to: 0
  8956                           ;main.c: 958: break;
  8957  002136  0E58               	movlw	low _LEFT
  8958  002138  6EF6               	movwf	tblptrl,c
  8959  00213A                     	if	1	;There is more than 1 active tblptr byte
  8960  00213A  0EFE               	movlw	high _LEFT
  8961  00213C  6EF7               	movwf	tblptrh,c
  8962  00213E                     	endif
  8963  00213E                     	if	1	;There are 3 active tblptr bytes
  8964  00213E  0E00               	movlw	low (_LEFT shr (0+16))
  8965  002140  6EF8               	movwf	tblptru,c
  8966  002142                     	endif
  8967  002142  0009               	tblrd		*+
  8968  002144  CFF5 F0B0          	movff	tablat,??_past_run_access
  8969  002148  0009               	tblrd		*+
  8970  00214A  CFF5 F0B1          	movff	tablat,??_past_run_access+1
  8971  00214E  0E31               	movlw	low _keys
  8972  002150  0100               	movlb	0	; () banked
  8973  002152  25B0               	addwf	??_past_run_access& (0+255),w,b
  8974  002154  6EF6               	movwf	tblptrl,c
  8975  002156  0EFE               	movlw	high _keys
  8976  002158  21B1               	addwfc	(??_past_run_access+1)& (0+255),w,b
  8977  00215A  6EF7               	movwf	tblptrh,c
  8978  00215C                     	if	1	;There are 3 active tblptr bytes
  8979  00215C  6AF8               	clrf	tblptru,c
  8980  00215E  0E00               	movlw	low (__mediumconst shr (0+16))
  8981  002160  22F8               	addwfc	tblptru,f,c
  8982  002162                     	endif
  8983  002162  0008               	tblrd		*
  8984  002164  50F5               	movf	tablat,w,c
  8985  002166  0100               	movlb	0	; () banked
  8986  002168  19B2               	xorwf	past_run_access@temp& (0+255),w,b
  8987  00216A  A4D8               	btfss	status,2,c
  8988  00216C  D019               	goto	l8273
  8989                           
  8990                           ; BSR set to: 0
  8991                           ;main.c: 960: cycleProgramScreenLeft(&screen_state,0,6);
  8992  00216E  0EB3               	movlw	low past_run_access@screen_state
  8993  002170  0100               	movlb	0	; () banked
  8994  002172  6F80               	movwf	cycleProgramScreenLeft@programScreen& (0+255),b
  8995  002174  0E00               	movlw	high past_run_access@screen_state
  8996  002176  0100               	movlb	0	; () banked
  8997  002178  6F81               	movwf	(cycleProgramScreenLeft@programScreen+1)& (0+255),b
  8998  00217A  0E00               	movlw	0
  8999  00217C  0100               	movlb	0	; () banked
  9000  00217E  6F83               	movwf	(cycleProgramScreenLeft@min+1)& (0+255),b
  9001  002180  0E00               	movlw	0
  9002  002182  6F82               	movwf	cycleProgramScreenLeft@min& (0+255),b
  9003  002184  0E00               	movlw	0
  9004  002186  0100               	movlb	0	; () banked
  9005  002188  6F85               	movwf	(cycleProgramScreenLeft@max+1)& (0+255),b
  9006  00218A  0E06               	movlw	6
  9007  00218C  6F84               	movwf	cycleProgramScreenLeft@max& (0+255),b
  9008  00218E  ECB7  F01A         	call	_cycleProgramScreenLeft	;wreg free
  9009                           
  9010                           ;main.c: 961: update_past_run_screen_state(screen_state);
  9011  002192  C0B3  F0AC         	movff	past_run_access@screen_state,update_past_run_screen_state@num
  9012  002196  C0B4  F0AD         	movff	past_run_access@screen_state+1,update_past_run_screen_state@num+1
  9013  00219A  ECF4  F00B         	call	_update_past_run_screen_state	;wreg free
  9014                           
  9015                           ;main.c: 962: }else if (temp == keys[RIGHT]){
  9016  00219E  D7AB               	goto	l8259
  9017  0021A0                     l8273:
  9018  0021A0  0E5A               	movlw	low _RIGHT
  9019  0021A2  6EF6               	movwf	tblptrl,c
  9020  0021A4                     	if	1	;There is more than 1 active tblptr byte
  9021  0021A4  0EFE               	movlw	high _RIGHT
  9022  0021A6  6EF7               	movwf	tblptrh,c
  9023  0021A8                     	endif
  9024  0021A8                     	if	1	;There are 3 active tblptr bytes
  9025  0021A8  0E00               	movlw	low (_RIGHT shr (0+16))
  9026  0021AA  6EF8               	movwf	tblptru,c
  9027  0021AC                     	endif
  9028  0021AC  0009               	tblrd		*+
  9029  0021AE  CFF5 F0B0          	movff	tablat,??_past_run_access
  9030  0021B2  0009               	tblrd		*+
  9031  0021B4  CFF5 F0B1          	movff	tablat,??_past_run_access+1
  9032  0021B8  0E31               	movlw	low _keys
  9033  0021BA  0100               	movlb	0	; () banked
  9034  0021BC  25B0               	addwf	??_past_run_access& (0+255),w,b
  9035  0021BE  6EF6               	movwf	tblptrl,c
  9036  0021C0  0EFE               	movlw	high _keys
  9037  0021C2  21B1               	addwfc	(??_past_run_access+1)& (0+255),w,b
  9038  0021C4  6EF7               	movwf	tblptrh,c
  9039  0021C6                     	if	1	;There are 3 active tblptr bytes
  9040  0021C6  6AF8               	clrf	tblptru,c
  9041  0021C8  0E00               	movlw	low (__mediumconst shr (0+16))
  9042  0021CA  22F8               	addwfc	tblptru,f,c
  9043  0021CC                     	endif
  9044  0021CC  0008               	tblrd		*
  9045  0021CE  50F5               	movf	tablat,w,c
  9046  0021D0  0100               	movlb	0	; () banked
  9047  0021D2  19B2               	xorwf	past_run_access@temp& (0+255),w,b
  9048  0021D4  A4D8               	btfss	status,2,c
  9049  0021D6  D78F               	goto	l8259
  9050                           
  9051                           ; BSR set to: 0
  9052                           ;main.c: 963: cycleProgramScreenRight(&screen_state,0,6);
  9053  0021D8  0EB3               	movlw	low past_run_access@screen_state
  9054  0021DA  0100               	movlb	0	; () banked
  9055  0021DC  6F80               	movwf	cycleProgramScreenRight@programScreen& (0+255),b
  9056  0021DE  0E00               	movlw	high past_run_access@screen_state
  9057  0021E0  0100               	movlb	0	; () banked
  9058  0021E2  6F81               	movwf	(cycleProgramScreenRight@programScreen+1)& (0+255),b
  9059  0021E4  0E00               	movlw	0
  9060  0021E6  0100               	movlb	0	; () banked
  9061  0021E8  6F83               	movwf	(cycleProgramScreenRight@min+1)& (0+255),b
  9062  0021EA  0E00               	movlw	0
  9063  0021EC  6F82               	movwf	cycleProgramScreenRight@min& (0+255),b
  9064  0021EE  0E00               	movlw	0
  9065  0021F0  0100               	movlb	0	; () banked
  9066  0021F2  6F85               	movwf	(cycleProgramScreenRight@max+1)& (0+255),b
  9067  0021F4  0E06               	movlw	6
  9068  0021F6  6F84               	movwf	cycleProgramScreenRight@max& (0+255),b
  9069  0021F8  EC99  F01A         	call	_cycleProgramScreenRight	;wreg free
  9070                           
  9071                           ;main.c: 964: update_past_run_screen_state(screen_state);
  9072  0021FC  C0B3  F0AC         	movff	past_run_access@screen_state,update_past_run_screen_state@num
  9073  002200  C0B4  F0AD         	movff	past_run_access@screen_state+1,update_past_run_screen_state@num+1
  9074  002204  ECF4  F00B         	call	_update_past_run_screen_state	;wreg free
  9075  002208  D776               	goto	l8259
  9076  00220A                     __end_of_past_run_access:
  9077                           	opt stack 0
  9078                           tblptru	equ	0xFF8
  9079                           tblptrh	equ	0xFF7
  9080                           tblptrl	equ	0xFF6
  9081                           tablat	equ	0xFF5
  9082                           prodh	equ	0xFF4
  9083                           prodl	equ	0xFF3
  9084                           intcon	equ	0xFF2
  9085                           intcon2	equ	0xFF1
  9086                           postinc0	equ	0xFEE
  9087                           wreg	equ	0xFE8
  9088                           indf1	equ	0xFE7
  9089                           postinc1	equ	0xFE6
  9090                           postdec1	equ	0xFE5
  9091                           fsr1h	equ	0xFE2
  9092                           fsr1l	equ	0xFE1
  9093                           indf2	equ	0xFDF
  9094                           postinc2	equ	0xFDE
  9095                           postdec2	equ	0xFDD
  9096                           fsr2h	equ	0xFDA
  9097                           fsr2l	equ	0xFD9
  9098                           status	equ	0xFD8
  9099                           
  9100 ;; *************** function _update_past_run_screen_state *****************
  9101 ;; Defined at:
  9102 ;;		line 665 in file "main.c"
  9103 ;; Parameters:    Size  Location     Type
  9104 ;;  num             2   44[BANK0 ] int 
  9105 ;; Auto vars:     Size  Location     Type
  9106 ;;		None
  9107 ;; Return value:  Size  Location     Type
  9108 ;;                  1    wreg      void 
  9109 ;; Registers used:
  9110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9111 ;; Tracked objects:
  9112 ;;		On entry : 0/0
  9113 ;;		On exit  : 0/0
  9114 ;;		Unchanged: 0/0
  9115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9116 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9118 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9119 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9120 ;;Total ram usage:        4 bytes
  9121 ;; Hardware stack levels used:    1
  9122 ;; Hardware stack levels required when called:   11
  9123 ;; This function calls:
  9124 ;;		_lcdClear
  9125 ;;		_lcdInst
  9126 ;;		_printf
  9127 ;; This function is called by:
  9128 ;;		_past_run_access
  9129 ;; This function uses a non-reentrant model
  9130 ;;
  9131                           
  9132                           	psect	text40
  9133  0017E8                     __ptext40:
  9134                           	opt stack 0
  9135  0017E8                     _update_past_run_screen_state:
  9136                           	opt stack 17
  9137                           
  9138                           ;main.c: 666: lcdClear();
  9139                           
  9140                           ;incstack = 0
  9141  0017E8  EC0B  F01B         	call	_lcdClear	;wreg free
  9142                           
  9143                           ;main.c: 667: switch(num){
  9144  0017EC  D081               	goto	l8219
  9145  0017EE                     l8203:
  9146                           
  9147                           ;main.c: 669: lcdClear();
  9148  0017EE  EC0B  F01B         	call	_lcdClear	;wreg free
  9149                           
  9150                           ;main.c: 670: printf("Time taken: %is", runInfo[0]);
  9151  0017F2  0E57               	movlw	low STR_15
  9152  0017F4  0100               	movlb	0	; () banked
  9153  0017F6  6F9E               	movwf	printf@f& (0+255),b
  9154  0017F8  0EFF               	movlw	high STR_15
  9155  0017FA  0100               	movlb	0	; () banked
  9156  0017FC  6F9F               	movwf	(printf@f+1)& (0+255),b
  9157  0017FE  C0F1  F0A0         	movff	_runInfo,?_printf+2
  9158  001802  C0F2  F0A1         	movff	_runInfo+1,?_printf+3
  9159  001806  ECEC  F019         	call	_printf	;wreg free
  9160                           
  9161                           ;main.c: 671: break;
  9162  00180A  D092               	goto	l8221
  9163  00180C                     l8205:
  9164                           
  9165                           ;main.c: 673: lcdClear();
  9166  00180C  EC0B  F01B         	call	_lcdClear	;wreg free
  9167                           
  9168                           ;main.c: 674: printf("# Bottles: %i", runInfo[1]);
  9169  001810  0EAE               	movlw	low STR_16
  9170  001812  0100               	movlb	0	; () banked
  9171  001814  6F9E               	movwf	printf@f& (0+255),b
  9172  001816  0EFF               	movlw	high STR_16
  9173  001818  0100               	movlb	0	; () banked
  9174  00181A  6F9F               	movwf	(printf@f+1)& (0+255),b
  9175  00181C  C0F3  F0A0         	movff	_runInfo+2,?_printf+2
  9176  001820  C0F4  F0A1         	movff	_runInfo+3,?_printf+3
  9177  001824  ECEC  F019         	call	_printf	;wreg free
  9178                           
  9179                           ;main.c: 675: break;
  9180  001828  D083               	goto	l8221
  9181  00182A                     l8207:
  9182                           
  9183                           ;main.c: 677: lcdClear();
  9184  00182A  EC0B  F01B         	call	_lcdClear	;wreg free
  9185                           
  9186                           ;main.c: 678: printf("Yop w/Cap: %i", runInfo[2]);
  9187  00182E  0EA0               	movlw	low STR_17
  9188  001830  0100               	movlb	0	; () banked
  9189  001832  6F9E               	movwf	printf@f& (0+255),b
  9190  001834  0EFF               	movlw	high STR_17
  9191  001836  0100               	movlb	0	; () banked
  9192  001838  6F9F               	movwf	(printf@f+1)& (0+255),b
  9193  00183A  C0F5  F0A0         	movff	_runInfo+4,?_printf+2
  9194  00183E  C0F6  F0A1         	movff	_runInfo+5,?_printf+3
  9195  001842  ECEC  F019         	call	_printf	;wreg free
  9196                           
  9197                           ;main.c: 679: break;
  9198  001846  D074               	goto	l8221
  9199  001848                     l8209:
  9200                           
  9201                           ;main.c: 681: lcdClear();
  9202  001848  EC0B  F01B         	call	_lcdClear	;wreg free
  9203                           
  9204                           ;main.c: 682: printf("Yop w/o Cap: %i", runInfo[3]);
  9205  00184C  0E47               	movlw	low STR_18
  9206  00184E  0100               	movlb	0	; () banked
  9207  001850  6F9E               	movwf	printf@f& (0+255),b
  9208  001852  0EFF               	movlw	high STR_18
  9209  001854  0100               	movlb	0	; () banked
  9210  001856  6F9F               	movwf	(printf@f+1)& (0+255),b
  9211  001858  C0F7  F0A0         	movff	_runInfo+6,?_printf+2
  9212  00185C  C0F8  F0A1         	movff	_runInfo+7,?_printf+3
  9213  001860  ECEC  F019         	call	_printf	;wreg free
  9214                           
  9215                           ;main.c: 683: break;
  9216  001864  D065               	goto	l8221
  9217  001866                     l8211:
  9218                           
  9219                           ;main.c: 685: lcdClear();
  9220  001866  EC0B  F01B         	call	_lcdClear	;wreg free
  9221                           
  9222                           ;main.c: 686: printf("Eska w/ Cap: %i", runInfo[4]);
  9223  00186A  0E37               	movlw	low STR_19
  9224  00186C  0100               	movlb	0	; () banked
  9225  00186E  6F9E               	movwf	printf@f& (0+255),b
  9226  001870  0EFF               	movlw	high STR_19
  9227  001872  0100               	movlb	0	; () banked
  9228  001874  6F9F               	movwf	(printf@f+1)& (0+255),b
  9229  001876  C0F9  F0A0         	movff	_runInfo+8,?_printf+2
  9230  00187A  C0FA  F0A1         	movff	_runInfo+9,?_printf+3
  9231  00187E  ECEC  F019         	call	_printf	;wreg free
  9232                           
  9233                           ;main.c: 687: break;
  9234  001882  D056               	goto	l8221
  9235  001884                     l8213:
  9236                           
  9237                           ;main.c: 689: lcdClear();
  9238  001884  EC0B  F01B         	call	_lcdClear	;wreg free
  9239                           
  9240                           ;main.c: 690: printf("Eska w/o Cap: %i", runInfo[5]);
  9241  001888  0EE6               	movlw	low STR_20
  9242  00188A  0100               	movlb	0	; () banked
  9243  00188C  6F9E               	movwf	printf@f& (0+255),b
  9244  00188E  0EFE               	movlw	high STR_20
  9245  001890  0100               	movlb	0	; () banked
  9246  001892  6F9F               	movwf	(printf@f+1)& (0+255),b
  9247  001894  C0FB  F0A0         	movff	_runInfo+10,?_printf+2
  9248  001898  C0FC  F0A1         	movff	_runInfo+11,?_printf+3
  9249  00189C  ECEC  F019         	call	_printf	;wreg free
  9250                           
  9251                           ;main.c: 691: break;
  9252  0018A0  D047               	goto	l8221
  9253  0018A2                     l8215:
  9254                           
  9255                           ;main.c: 693: lcdClear();
  9256  0018A2  EC0B  F01B         	call	_lcdClear	;wreg free
  9257                           
  9258                           ;main.c: 694: printf("%02x/%02x   ", lastRunTime[5], lastRunTime[4]);
  9259  0018A6  0EC9               	movlw	low STR_1
  9260  0018A8  0100               	movlb	0	; () banked
  9261  0018AA  6F9E               	movwf	printf@f& (0+255),b
  9262  0018AC  0EFF               	movlw	high STR_1
  9263  0018AE  0100               	movlb	0	; () banked
  9264  0018B0  6F9F               	movwf	(printf@f+1)& (0+255),b
  9265  0018B2  C0E0  F0A0         	movff	_lastRunTime+5,?_printf+2
  9266  0018B6  0100               	movlb	0	; () banked
  9267  0018B8  6BA1               	clrf	(?_printf+3)& (0+255),b
  9268  0018BA  C0DF  F0A2         	movff	_lastRunTime+4,?_printf+4
  9269  0018BE  0100               	movlb	0	; () banked
  9270  0018C0  6BA3               	clrf	(?_printf+5)& (0+255),b
  9271  0018C2  ECEC  F019         	call	_printf	;wreg free
  9272                           
  9273                           ;main.c: 695: printf("%02x:%02x:%02x", lastRunTime[2], lastRunTime[1], lastRunTime[0]);
  9274  0018C6  0E67               	movlw	low STR_2
  9275  0018C8  0100               	movlb	0	; () banked
  9276  0018CA  6F9E               	movwf	printf@f& (0+255),b
  9277  0018CC  0EFF               	movlw	high STR_2
  9278  0018CE  0100               	movlb	0	; () banked
  9279  0018D0  6F9F               	movwf	(printf@f+1)& (0+255),b
  9280  0018D2  C0DD  F0A0         	movff	_lastRunTime+2,?_printf+2
  9281  0018D6  0100               	movlb	0	; () banked
  9282  0018D8  6BA1               	clrf	(?_printf+3)& (0+255),b
  9283  0018DA  C0DC  F0A2         	movff	_lastRunTime+1,?_printf+4
  9284  0018DE  0100               	movlb	0	; () banked
  9285  0018E0  6BA3               	clrf	(?_printf+5)& (0+255),b
  9286  0018E2  C0DB  F0A4         	movff	_lastRunTime,?_printf+6
  9287  0018E6  0100               	movlb	0	; () banked
  9288  0018E8  6BA5               	clrf	(?_printf+7)& (0+255),b
  9289  0018EA  ECEC  F019         	call	_printf	;wreg free
  9290                           
  9291                           ;main.c: 697: }
  9292                           
  9293                           ;main.c: 696: break;
  9294  0018EE  D020               	goto	l8221
  9295  0018F0                     l8219:
  9296  0018F0  C0AC  F0AE         	movff	update_past_run_screen_state@num,??_update_past_run_screen_state
  9297  0018F4  C0AD  F0AF         	movff	update_past_run_screen_state@num+1,??_update_past_run_screen_state+1
  9298                           
  9299                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9300                           ; Switch size 1, requested type "space"
  9301                           ; Number of cases is 1, Range of values is 0 to 0
  9302                           ; switch strategies available:
  9303                           ; Name         Instructions Cycles
  9304                           ; simple_byte            4     3 (average)
  9305                           ;	Chosen strategy is simple_byte
  9306  0018F8  0100               	movlb	0	; () banked
  9307  0018FA  51AF               	movf	(??_update_past_run_screen_state+1)& (0+255),w,b
  9308  0018FC  0A00               	xorlw	0	; case 0
  9309  0018FE  A4D8               	btfss	status,2,c
  9310  001900  D017               	goto	l8221
  9311                           
  9312                           ; BSR set to: 0
  9313                           ; Switch size 1, requested type "space"
  9314                           ; Number of cases is 7, Range of values is 0 to 6
  9315                           ; switch strategies available:
  9316                           ; Name         Instructions Cycles
  9317                           ; simple_byte           22    12 (average)
  9318                           ;	Chosen strategy is simple_byte
  9319  001902  0100               	movlb	0	; () banked
  9320  001904  51AE               	movf	??_update_past_run_screen_state& (0+255),w,b
  9321  001906  0A00               	xorlw	0	; case 0
  9322  001908  B4D8               	btfsc	status,2,c
  9323  00190A  D771               	goto	l8203
  9324  00190C  0A01               	xorlw	1	; case 1
  9325  00190E  B4D8               	btfsc	status,2,c
  9326  001910  D77D               	goto	l8205
  9327  001912  0A03               	xorlw	3	; case 2
  9328  001914  B4D8               	btfsc	status,2,c
  9329  001916  D789               	goto	l8207
  9330  001918  0A01               	xorlw	1	; case 3
  9331  00191A  B4D8               	btfsc	status,2,c
  9332  00191C  D795               	goto	l8209
  9333  00191E  0A07               	xorlw	7	; case 4
  9334  001920  B4D8               	btfsc	status,2,c
  9335  001922  D7A1               	goto	l8211
  9336  001924  0A01               	xorlw	1	; case 5
  9337  001926  B4D8               	btfsc	status,2,c
  9338  001928  D7AD               	goto	l8213
  9339  00192A  0A03               	xorlw	3	; case 6
  9340  00192C  B4D8               	btfsc	status,2,c
  9341  00192E  D7B9               	goto	l8215
  9342  001930                     l8221:
  9343                           
  9344                           ;main.c: 698: lcdInst(0b11000000);;
  9345  001930  0EC0               	movlw	192
  9346  001932  EC27  F01C         	call	_lcdInst
  9347                           
  9348                           ;main.c: 699: printf("<4  Back:  1  6> ");
  9349  001936  0E6E               	movlw	low STR_23
  9350  001938  0100               	movlb	0	; () banked
  9351  00193A  6F9E               	movwf	printf@f& (0+255),b
  9352  00193C  0EFE               	movlw	high STR_23
  9353  00193E  0100               	movlb	0	; () banked
  9354  001940  6F9F               	movwf	(printf@f+1)& (0+255),b
  9355  001942  ECEC  F019         	call	_printf	;wreg free
  9356  001946  0012               	return		;funcret
  9357  001948                     __end_of_update_past_run_screen_state:
  9358                           	opt stack 0
  9359                           tblptru	equ	0xFF8
  9360                           tblptrh	equ	0xFF7
  9361                           tblptrl	equ	0xFF6
  9362                           tablat	equ	0xFF5
  9363                           prodh	equ	0xFF4
  9364                           prodl	equ	0xFF3
  9365                           intcon	equ	0xFF2
  9366                           intcon2	equ	0xFF1
  9367                           postinc0	equ	0xFEE
  9368                           wreg	equ	0xFE8
  9369                           indf1	equ	0xFE7
  9370                           postinc1	equ	0xFE6
  9371                           postdec1	equ	0xFE5
  9372                           fsr1h	equ	0xFE2
  9373                           fsr1l	equ	0xFE1
  9374                           indf2	equ	0xFDF
  9375                           postinc2	equ	0xFDE
  9376                           postdec2	equ	0xFDD
  9377                           fsr2h	equ	0xFDA
  9378                           fsr2l	equ	0xFD9
  9379                           status	equ	0xFD8
  9380                           
  9381 ;; *************** function _lcdClear *****************
  9382 ;; Defined at:
  9383 ;;		line 35 in file "lcd.c"
  9384 ;; Parameters:    Size  Location     Type
  9385 ;;		None
  9386 ;; Auto vars:     Size  Location     Type
  9387 ;;		None
  9388 ;; Return value:  Size  Location     Type
  9389 ;;                  2  140[None  ] int 
  9390 ;; Registers used:
  9391 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9392 ;; Tracked objects:
  9393 ;;		On entry : 0/0
  9394 ;;		On exit  : 0/0
  9395 ;;		Unchanged: 0/0
  9396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9398 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9400 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9401 ;;Total ram usage:        0 bytes
  9402 ;; Hardware stack levels used:    1
  9403 ;; Hardware stack levels required when called:   10
  9404 ;; This function calls:
  9405 ;;		_lcdInst
  9406 ;;		_printf
  9407 ;; This function is called by:
  9408 ;;		_displayMainProgramLcdScreen
  9409 ;;		_update_eeprom_screen_state
  9410 ;;		_update_past_run_screen_state
  9411 ;;		_operation
  9412 ;; This function uses a non-reentrant model
  9413 ;;
  9414                           
  9415                           	psect	text41
  9416  003616                     __ptext41:
  9417                           	opt stack 0
  9418  003616                     _lcdClear:
  9419                           	opt stack 17
  9420                           
  9421                           ;lcd.c: 36: lcdInst(0b10000000);
  9422                           
  9423                           ;incstack = 0
  9424  003616  0E80               	movlw	128
  9425  003618  EC27  F01C         	call	_lcdInst
  9426                           
  9427                           ;lcd.c: 37: printf("                ");
  9428  00361C  0E91               	movlw	low STR_33
  9429  00361E  0100               	movlb	0	; () banked
  9430  003620  6F9E               	movwf	printf@f& (0+255),b
  9431  003622  0EFE               	movlw	high STR_33
  9432  003624  0100               	movlb	0	; () banked
  9433  003626  6F9F               	movwf	(printf@f+1)& (0+255),b
  9434  003628  ECEC  F019         	call	_printf	;wreg free
  9435                           
  9436                           ;lcd.c: 38: lcdInst(0b11000000);
  9437  00362C  0EC0               	movlw	192
  9438  00362E  EC27  F01C         	call	_lcdInst
  9439                           
  9440                           ;lcd.c: 39: printf("                ");
  9441  003632  0E91               	movlw	low STR_33
  9442  003634  0100               	movlb	0	; () banked
  9443  003636  6F9E               	movwf	printf@f& (0+255),b
  9444  003638  0EFE               	movlw	high STR_33
  9445  00363A  0100               	movlb	0	; () banked
  9446  00363C  6F9F               	movwf	(printf@f+1)& (0+255),b
  9447  00363E  ECEC  F019         	call	_printf	;wreg free
  9448                           
  9449                           ;lcd.c: 40: lcdInst(0b10000000);
  9450  003642  0E80               	movlw	128
  9451  003644  EC27  F01C         	call	_lcdInst
  9452  003648  0012               	return		;funcret
  9453  00364A                     __end_of_lcdClear:
  9454                           	opt stack 0
  9455                           tblptru	equ	0xFF8
  9456                           tblptrh	equ	0xFF7
  9457                           tblptrl	equ	0xFF6
  9458                           tablat	equ	0xFF5
  9459                           prodh	equ	0xFF4
  9460                           prodl	equ	0xFF3
  9461                           intcon	equ	0xFF2
  9462                           intcon2	equ	0xFF1
  9463                           postinc0	equ	0xFEE
  9464                           wreg	equ	0xFE8
  9465                           indf1	equ	0xFE7
  9466                           postinc1	equ	0xFE6
  9467                           postdec1	equ	0xFE5
  9468                           fsr1h	equ	0xFE2
  9469                           fsr1l	equ	0xFE1
  9470                           indf2	equ	0xFDF
  9471                           postinc2	equ	0xFDE
  9472                           postdec2	equ	0xFDD
  9473                           fsr2h	equ	0xFDA
  9474                           fsr2l	equ	0xFD9
  9475                           status	equ	0xFD8
  9476                           
  9477 ;; *************** function _printf *****************
  9478 ;; Defined at:
  9479 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
  9480 ;; Parameters:    Size  Location     Type
  9481 ;;  f               2   30[BANK0 ] PTR const unsigned char 
  9482 ;;		 -> STR_34(17), STR_33(17), STR_32(8), STR_31(17), 
  9483 ;;		 -> STR_30(18), STR_29(13), STR_28(12), STR_27(5), 
  9484 ;;		 -> STR_26(4), STR_25(14), STR_24(16), STR_23(18), 
  9485 ;;		 -> STR_22(15), STR_21(13), STR_20(17), STR_19(16), 
  9486 ;;		 -> STR_18(16), STR_17(14), STR_16(14), STR_15(16), 
  9487 ;;		 -> STR_14(17), STR_13(16), STR_12(16), STR_11(16), 
  9488 ;;		 -> STR_10(11), STR_9(17), STR_8(17), STR_7(14), 
  9489 ;;		 -> STR_6(14), STR_2(15), STR_1(13), 
  9490 ;; Auto vars:     Size  Location     Type
  9491 ;;  pb              4   40[BANK0 ] struct __prbuf
  9492 ;;  ap              2   38[BANK0 ] PTR void [1]
  9493 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
  9494 ;; Return value:  Size  Location     Type
  9495 ;;                  2   30[BANK0 ] int 
  9496 ;; Registers used:
  9497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9498 ;; Tracked objects:
  9499 ;;		On entry : 0/0
  9500 ;;		On exit  : 0/0
  9501 ;;		Unchanged: 0/0
  9502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9503 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9504 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9506 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9507 ;;Total ram usage:       14 bytes
  9508 ;; Hardware stack levels used:    1
  9509 ;; Hardware stack levels required when called:    9
  9510 ;; This function calls:
  9511 ;;		__doprnt
  9512 ;; This function is called by:
  9513 ;;		_printTime
  9514 ;;		_displayMainProgramLcdScreen
  9515 ;;		_update_eeprom_screen_state
  9516 ;;		_update_past_run_screen_state
  9517 ;;		_operation
  9518 ;;		_lcdClear
  9519 ;;		_timeIsStillLeft
  9520 ;; This function uses a non-reentrant model
  9521 ;;
  9522                           
  9523                           	psect	text42
  9524  0033D8                     __ptext42:
  9525                           	opt stack 0
  9526  0033D8                     _printf:
  9527                           	opt stack 18
  9528                           
  9529                           ;incstack = 0
  9530  0033D8  0E00               	movlw	0
  9531  0033DA  0100               	movlb	0	; () banked
  9532  0033DC  6FA8               	movwf	printf@pb& (0+255),b
  9533  0033DE  0E00               	movlw	0
  9534  0033E0  0100               	movlb	0	; () banked
  9535  0033E2  6FA9               	movwf	(printf@pb+1)& (0+255),b
  9536  0033E4  0EEA               	movlw	low _putch
  9537  0033E6  0100               	movlb	0	; () banked
  9538  0033E8  6FAA               	movwf	(printf@pb+2)& (0+255),b
  9539  0033EA  0E37               	movlw	high _putch
  9540  0033EC  0100               	movlb	0	; () banked
  9541  0033EE  6FAB               	movwf	(printf@pb+3)& (0+255),b
  9542  0033F0  0EA0               	movlw	low (?_printf+2)
  9543  0033F2  0100               	movlb	0	; () banked
  9544  0033F4  6FA6               	movwf	printf@ap& (0+255),b
  9545  0033F6  0E00               	movlw	high (?_printf+2)
  9546  0033F8  0100               	movlb	0	; () banked
  9547  0033FA  6FA7               	movwf	(printf@ap+1)& (0+255),b
  9548                           
  9549                           ; BSR set to: 0
  9550                           ;	Return value of _printf is never used
  9551  0033FC  0EA8               	movlw	low printf@pb
  9552  0033FE  0100               	movlb	0	; () banked
  9553  003400  6F8C               	movwf	__doprnt@pb& (0+255),b
  9554  003402  0E00               	movlw	high printf@pb
  9555  003404  0100               	movlb	0	; () banked
  9556  003406  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  9557  003408  C09E  F08E         	movff	printf@f,__doprnt@f
  9558  00340C  C09F  F08F         	movff	printf@f+1,__doprnt@f+1
  9559  003410  0EA6               	movlw	low printf@ap
  9560  003412  0100               	movlb	0	; () banked
  9561  003414  6F90               	movwf	__doprnt@ap& (0+255),b
  9562  003416  0E00               	movlw	high printf@ap
  9563  003418  0100               	movlb	0	; () banked
  9564  00341A  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  9565  00341C  EC09  F000         	call	__doprnt	;wreg free
  9566  003420  0012               	return	
  9567  003422                     __end_of_printf:
  9568                           	opt stack 0
  9569                           tblptru	equ	0xFF8
  9570                           tblptrh	equ	0xFF7
  9571                           tblptrl	equ	0xFF6
  9572                           tablat	equ	0xFF5
  9573                           prodh	equ	0xFF4
  9574                           prodl	equ	0xFF3
  9575                           intcon	equ	0xFF2
  9576                           intcon2	equ	0xFF1
  9577                           postinc0	equ	0xFEE
  9578                           wreg	equ	0xFE8
  9579                           indf1	equ	0xFE7
  9580                           postinc1	equ	0xFE6
  9581                           postdec1	equ	0xFE5
  9582                           fsr1h	equ	0xFE2
  9583                           fsr1l	equ	0xFE1
  9584                           indf2	equ	0xFDF
  9585                           postinc2	equ	0xFDE
  9586                           postdec2	equ	0xFDD
  9587                           fsr2h	equ	0xFDA
  9588                           fsr2l	equ	0xFD9
  9589                           status	equ	0xFD8
  9590                           
  9591 ;; *************** function __doprnt *****************
  9592 ;; Defined at:
  9593 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  9594 ;; Parameters:    Size  Location     Type
  9595 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
  9596 ;;		 -> sprintf@pb(4), printf@pb(4), 
  9597 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  9598 ;;		 -> STR_34(17), STR_33(17), STR_32(8), STR_31(17), 
  9599 ;;		 -> STR_30(18), STR_29(13), STR_28(12), STR_27(5), 
  9600 ;;		 -> STR_26(4), STR_25(14), STR_24(16), STR_23(18), 
  9601 ;;		 -> STR_22(15), STR_21(13), STR_20(17), STR_19(16), 
  9602 ;;		 -> STR_18(16), STR_17(14), STR_16(14), STR_15(16), 
  9603 ;;		 -> STR_14(17), STR_13(16), STR_12(16), STR_11(16), 
  9604 ;;		 -> STR_10(11), STR_9(17), STR_8(17), STR_7(14), 
  9605 ;;		 -> STR_6(14), STR_5(5), STR_4(5), STR_3(5), 
  9606 ;;		 -> STR_2(15), STR_1(13), 
  9607 ;;  ap              2   16[BANK0 ] PTR PTR void 
  9608 ;;		 -> sprintf@ap(2), printf@ap(2), 
  9609 ;; Auto vars:     Size  Location     Type
  9610 ;;  idx             1   22[BANK0 ] unsigned char 
  9611 ;;  tmpval          4    0        struct .
  9612 ;;  cp              3    0        PTR const unsigned char 
  9613 ;;  width           2   27[BANK0 ] int 
  9614 ;;  val             2   24[BANK0 ] unsigned int 
  9615 ;;  len             2    0        unsigned int 
  9616 ;;  c               1   29[BANK0 ] char 
  9617 ;;  flag            1   26[BANK0 ] unsigned char 
  9618 ;;  prec            1   23[BANK0 ] char 
  9619 ;; Return value:  Size  Location     Type
  9620 ;;                  2   12[BANK0 ] int 
  9621 ;; Registers used:
  9622 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9623 ;; Tracked objects:
  9624 ;;		On entry : 0/0
  9625 ;;		On exit  : 0/0
  9626 ;;		Unchanged: 0/0
  9627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9628 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9629 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9630 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9631 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9632 ;;Total ram usage:       18 bytes
  9633 ;; Hardware stack levels used:    1
  9634 ;; Hardware stack levels required when called:    8
  9635 ;; This function calls:
  9636 ;;		Absolute function
  9637 ;;		___lwdiv
  9638 ;;		___lwmod
  9639 ;;		___wmul
  9640 ;;		_isdigit
  9641 ;;		_putch
  9642 ;; This function is called by:
  9643 ;;		_printf
  9644 ;;		_sprintf
  9645 ;; This function uses a non-reentrant model
  9646 ;;
  9647                           
  9648                           	psect	text43
  9649  000012                     __ptext43:
  9650                           	opt stack 0
  9651  000012                     __doprnt:
  9652                           	opt stack 18
  9653                           
  9654                           ;doprnt.c: 499: signed char c;
  9655                           ;doprnt.c: 501: int width;
  9656                           ;doprnt.c: 506: signed char prec;
  9657                           ;doprnt.c: 508: unsigned char flag;
  9658                           ;doprnt.c: 523: union {
  9659                           ;doprnt.c: 524: unsigned long vd;
  9660                           ;doprnt.c: 525: double integ;
  9661                           ;doprnt.c: 526: } tmpval;
  9662                           ;doprnt.c: 528: unsigned int val;
  9663                           ;doprnt.c: 529: unsigned len;
  9664                           ;doprnt.c: 530: const char * cp;
  9665                           ;doprnt.c: 536: while(c = *f++) {
  9666                           
  9667                           ;incstack = 0
  9668  000012  D324               	goto	l8167
  9669  000014                     l8009:
  9670                           
  9671                           ;doprnt.c: 538: if(c != '%')
  9672  000014  0E25               	movlw	37
  9673  000016  0100               	movlb	0	; () banked
  9674  000018  199D               	xorwf	__doprnt@c& (0+255),w,b
  9675  00001A  B4D8               	btfsc	status,2,c
  9676  00001C  D03A               	goto	l8019
  9677                           
  9678                           ; BSR set to: 0
  9679                           ;doprnt.c: 540: {
  9680                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  9681  00001E  0100               	movlb	0	; () banked
  9682  000020  EE20 F002          	lfsr	2,2
  9683  000024  518C               	movf	__doprnt@pb& (0+255),w,b
  9684  000026  26D9               	addwf	fsr2l,f,c
  9685  000028  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  9686  00002A  22DA               	addwfc	fsr2h,f,c
  9687  00002C  50DE               	movf	postinc2,w,c
  9688  00002E  10DE               	iorwf	postinc2,w,c
  9689  000030  B4D8               	btfsc	status,2,c
  9690  000032  D019               	goto	l8015
  9691                           
  9692                           ; BSR set to: 0
  9693  000034  0100               	movlb	0	; () banked
  9694  000036  EE20 F002          	lfsr	2,2
  9695  00003A  518C               	movf	__doprnt@pb& (0+255),w,b
  9696  00003C  26D9               	addwf	fsr2l,f,c
  9697  00003E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  9698  000040  22DA               	addwfc	fsr2h,f,c
  9699  000042  CFDE F092          	movff	postinc2,??__doprnt
  9700  000046  CFDD F093          	movff	postdec2,??__doprnt+1
  9701  00004A  D801               	call	u8448
  9702  00004C  D307               	goto	l8167
  9703  00004E                     u8448:
  9704  00004E  0005               	push	
  9705  000050  6EFA               	movwf	pclath,c
  9706  000052  0100               	movlb	0	; () banked
  9707  000054  5192               	movf	??__doprnt& (0+255),w,b
  9708  000056  6EFD               	movwf	tosl,c
  9709  000058  5193               	movf	(??__doprnt+1)& (0+255),w,b
  9710  00005A  6EFE               	movwf	tosh,c
  9711  00005C  6AFF               	clrf	tosu,c
  9712  00005E  50FA               	movf	pclath,w,c
  9713  000060  0100               	movlb	0	; () banked
  9714  000062  519D               	movf	__doprnt@c& (0+255),w,b
  9715  000064  0012               	return		;indir
  9716  000066                     l8015:
  9717  000066  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  9718  00006A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  9719  00006E  CFDE F092          	movff	postinc2,??__doprnt
  9720  000072  CFDD F093          	movff	postdec2,??__doprnt+1
  9721  000076  C092  FFD9         	movff	??__doprnt,fsr2l
  9722  00007A  C093  FFDA         	movff	??__doprnt+1,fsr2h
  9723  00007E  C09D  FFDF         	movff	__doprnt@c,indf2
  9724  000082  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  9725  000086  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  9726  00008A  2ADE               	incf	postinc2,f,c
  9727  00008C  0E00               	movlw	0
  9728  00008E  22DD               	addwfc	postdec2,f,c
  9729                           
  9730                           ;doprnt.c: 542: continue;
  9731  000090  D2E5               	goto	l8167
  9732  000092                     l8019:
  9733                           
  9734                           ;doprnt.c: 543: }
  9735                           ;doprnt.c: 546: width = 0;
  9736  000092  0E00               	movlw	0
  9737  000094  0100               	movlb	0	; () banked
  9738  000096  6F9C               	movwf	(__doprnt@width+1)& (0+255),b
  9739  000098  0E00               	movlw	0
  9740  00009A  6F9B               	movwf	__doprnt@width& (0+255),b
  9741                           
  9742                           ;doprnt.c: 548: flag = 0;
  9743  00009C  0E00               	movlw	0
  9744  00009E  0100               	movlb	0	; () banked
  9745  0000A0  6F9A               	movwf	__doprnt@flag& (0+255),b
  9746                           
  9747                           ; BSR set to: 0
  9748                           ;doprnt.c: 551: switch(*f) {
  9749                           
  9750                           ;doprnt.c: 550: for(;;) {
  9751  0000A2  D005               	goto	l8025
  9752  0000A4                     l8021:
  9753                           
  9754                           ;doprnt.c: 580: flag |= 0x04;
  9755  0000A4  0100               	movlb	0	; () banked
  9756  0000A6  859A               	bsf	__doprnt@flag& (0+255),2,b
  9757                           
  9758                           ;doprnt.c: 581: f++;
  9759  0000A8  0100               	movlb	0	; () banked
  9760  0000AA  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  9761  0000AC  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  9762  0000AE                     l8025:
  9763  0000AE  C08E  FFF6         	movff	__doprnt@f,tblptrl
  9764  0000B2  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  9765  0000B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9766  0000B6  6AF8               	clrf	tblptru,c
  9767  0000B8                     	endif
  9768  0000B8                     	if	0	;tblptru may be non-zero
  9769  0000B8                     	endif
  9770  0000B8  0008               	tblrd		*
  9771  0000BA  50F5               	movf	tablat,w,c
  9772                           
  9773                           ; Switch size 1, requested type "space"
  9774                           ; Number of cases is 1, Range of values is 48 to 48
  9775                           ; switch strategies available:
  9776                           ; Name         Instructions Cycles
  9777                           ; simple_byte            4     3 (average)
  9778                           ;	Chosen strategy is simple_byte
  9779  0000BC  0A30               	xorlw	48	; case 48
  9780  0000BE  B4D8               	btfsc	status,2,c
  9781  0000C0  D7F1               	goto	l8021
  9782                           
  9783                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9784                           
  9785                           ;doprnt.c: 586: }
  9786                           
  9787                           ;doprnt.c: 585: break;
  9788  0000C2  C08E  FFF6         	movff	__doprnt@f,tblptrl
  9789  0000C6  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  9790  0000CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9791  0000CA  6AF8               	clrf	tblptru,c
  9792  0000CC                     	endif
  9793  0000CC                     	if	0	;tblptru may be non-zero
  9794  0000CC                     	endif
  9795  0000CC  0008               	tblrd		*
  9796  0000CE  50F5               	movf	tablat,w,c
  9797  0000D0  EC56  F01B         	call	_isdigit
  9798  0000D4  A0D8               	btfss	status,0,c
  9799  0000D6  D046               	goto	l8043
  9800                           
  9801                           ;doprnt.c: 598: width = 0;
  9802  0000D8  0E00               	movlw	0
  9803  0000DA  0100               	movlb	0	; () banked
  9804  0000DC  6F9C               	movwf	(__doprnt@width+1)& (0+255),b
  9805  0000DE  0E00               	movlw	0
  9806  0000E0  6F9B               	movwf	__doprnt@width& (0+255),b
  9807  0000E2                     l8031:
  9808                           
  9809                           ;doprnt.c: 600: width *= 10;
  9810  0000E2  C09B  F080         	movff	__doprnt@width,___wmul@multiplier
  9811  0000E6  C09C  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
  9812  0000EA  0E00               	movlw	0
  9813  0000EC  0100               	movlb	0	; () banked
  9814  0000EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  9815  0000F0  0E0A               	movlw	10
  9816  0000F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
  9817  0000F4  ECD5  F01A         	call	___wmul	;wreg free
  9818  0000F8  C080  F09B         	movff	?___wmul,__doprnt@width
  9819  0000FC  C081  F09C         	movff	?___wmul+1,__doprnt@width+1
  9820                           
  9821                           ;doprnt.c: 601: width += *f++ - '0';
  9822  000100  0ED0               	movlw	208
  9823  000102  0100               	movlb	0	; () banked
  9824  000104  6F92               	movwf	??__doprnt& (0+255),b
  9825  000106  0EFF               	movlw	255
  9826  000108  0100               	movlb	0	; () banked
  9827  00010A  6F93               	movwf	(??__doprnt+1)& (0+255),b
  9828  00010C  C08E  FFF6         	movff	__doprnt@f,tblptrl
  9829  000110  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  9830  000114                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9831  000114  6AF8               	clrf	tblptru,c
  9832  000116                     	endif
  9833  000116                     	if	0	;tblptru may be non-zero
  9834  000116                     	endif
  9835  000116  0008               	tblrd		*
  9836  000118  50F5               	movf	tablat,w,c
  9837  00011A  0100               	movlb	0	; () banked
  9838  00011C  6F94               	movwf	(??__doprnt+2)& (0+255),b
  9839  00011E  6B95               	clrf	(??__doprnt+3)& (0+255),b
  9840  000120  0100               	movlb	0	; () banked
  9841  000122  5192               	movf	??__doprnt& (0+255),w,b
  9842  000124  0100               	movlb	0	; () banked
  9843  000126  2794               	addwf	(??__doprnt+2)& (0+255),f,b
  9844  000128  0100               	movlb	0	; () banked
  9845  00012A  5193               	movf	(??__doprnt+1)& (0+255),w,b
  9846  00012C  0100               	movlb	0	; () banked
  9847  00012E  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
  9848  000130  0100               	movlb	0	; () banked
  9849  000132  5194               	movf	(??__doprnt+2)& (0+255),w,b
  9850  000134  0100               	movlb	0	; () banked
  9851  000136  279B               	addwf	__doprnt@width& (0+255),f,b
  9852  000138  0100               	movlb	0	; () banked
  9853  00013A  5195               	movf	(??__doprnt+3)& (0+255),w,b
  9854  00013C  0100               	movlb	0	; () banked
  9855  00013E  239C               	addwfc	(__doprnt@width+1)& (0+255),f,b
  9856                           
  9857                           ; BSR set to: 0
  9858  000140  0100               	movlb	0	; () banked
  9859  000142  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  9860  000144  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  9861                           
  9862                           ; BSR set to: 0
  9863                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9864  000146  C08E  FFF6         	movff	__doprnt@f,tblptrl
  9865  00014A  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  9866  00014E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9867  00014E  6AF8               	clrf	tblptru,c
  9868  000150                     	endif
  9869  000150                     	if	0	;tblptru may be non-zero
  9870  000150                     	endif
  9871  000150  0008               	tblrd		*
  9872  000152  50F5               	movf	tablat,w,c
  9873  000154  EC56  F01B         	call	_isdigit
  9874  000158  A0D8               	btfss	status,0,c
  9875  00015A  D004               	goto	l8043
  9876  00015C  D7C2               	goto	l8031
  9877  00015E                     l8039:
  9878                           
  9879                           ;doprnt.c: 721: flag |= 0x80;
  9880  00015E  0100               	movlb	0	; () banked
  9881  000160  8F9A               	bsf	__doprnt@flag& (0+255),7,b
  9882                           
  9883                           ;doprnt.c: 723: break;
  9884  000162  D01A               	goto	l610
  9885  000164                     l8043:
  9886  000164  C08E  FFF6         	movff	__doprnt@f,tblptrl
  9887  000168  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  9888  00016C  0100               	movlb	0	; () banked
  9889  00016E  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  9890  000170  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  9891  000172                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9892  000172  6AF8               	clrf	tblptru,c
  9893  000174                     	endif
  9894  000174                     	if	0	;tblptru may be non-zero
  9895  000174                     	endif
  9896  000174  0008               	tblrd		*
  9897  000176  CFF5 F09D          	movff	tablat,__doprnt@c
  9898  00017A  0100               	movlb	0	; () banked
  9899  00017C  519D               	movf	__doprnt@c& (0+255),w,b
  9900                           
  9901                           ; Switch size 1, requested type "space"
  9902                           ; Number of cases is 4, Range of values is 0 to 120
  9903                           ; switch strategies available:
  9904                           ; Name         Instructions Cycles
  9905                           ; simple_byte           13     7 (average)
  9906                           ;	Chosen strategy is simple_byte
  9907  00017E  0A00               	xorlw	0	; case 0
  9908  000180  B4D8               	btfsc	status,2,c
  9909  000182  D27B               	goto	l8169
  9910  000184  0A64               	xorlw	100	; case 100
  9911  000186  B4D8               	btfsc	status,2,c
  9912  000188  D007               	goto	l610
  9913  00018A  0A0D               	xorlw	13	; case 105
  9914  00018C  B4D8               	btfsc	status,2,c
  9915  00018E  D004               	goto	l610
  9916  000190  0A11               	xorlw	17	; case 120
  9917  000192  B4D8               	btfsc	status,2,c
  9918  000194  D7E4               	goto	l8039
  9919  000196  D262               	goto	l8167
  9920  000198                     l610:
  9921                           
  9922                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  9923  000198  0100               	movlb	0	; () banked
  9924  00019A  BF9A               	btfsc	__doprnt@flag& (0+255),7,b
  9925  00019C  D020               	goto	l8053
  9926                           
  9927                           ; BSR set to: 0
  9928                           ;doprnt.c: 1253: {
  9929                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  9930  00019E  C090  FFD9         	movff	__doprnt@ap,fsr2l
  9931  0001A2  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  9932  0001A6  CFDF F092          	movff	indf2,??__doprnt
  9933  0001AA  0E02               	movlw	2
  9934  0001AC  26DE               	addwf	postinc2,f,c
  9935  0001AE  CFDF F093          	movff	indf2,??__doprnt+1
  9936  0001B2  0E00               	movlw	0
  9937  0001B4  22DD               	addwfc	postdec2,f,c
  9938  0001B6  C092  FFD9         	movff	??__doprnt,fsr2l
  9939  0001BA  C093  FFDA         	movff	??__doprnt+1,fsr2h
  9940  0001BE  CFDE F098          	movff	postinc2,__doprnt@val
  9941  0001C2  CFDD F099          	movff	postdec2,__doprnt@val+1
  9942                           
  9943                           ; BSR set to: 0
  9944                           ;doprnt.c: 1261: if((int)val < 0) {
  9945  0001C6  0100               	movlb	0	; () banked
  9946  0001C8  AF99               	btfss	(__doprnt@val+1)& (0+255),7,b
  9947  0001CA  D060               	goto	l8085
  9948                           
  9949                           ; BSR set to: 0
  9950                           ;doprnt.c: 1262: flag |= 0x03;
  9951  0001CC  0E03               	movlw	3
  9952  0001CE  0100               	movlb	0	; () banked
  9953  0001D0  139A               	iorwf	__doprnt@flag& (0+255),f,b
  9954                           
  9955                           ; BSR set to: 0
  9956                           ;doprnt.c: 1263: val = -val;
  9957  0001D2  0100               	movlb	0	; () banked
  9958  0001D4  6D98               	negf	__doprnt@val& (0+255),b
  9959  0001D6  1F99               	comf	(__doprnt@val+1)& (0+255),f,b
  9960  0001D8  B0D8               	btfsc	status,0,c
  9961  0001DA  2B99               	incf	(__doprnt@val+1)& (0+255),f,b
  9962                           
  9963                           ; BSR set to: 0
  9964                           ;doprnt.c: 1264: }
  9965                           ;doprnt.c: 1266: }
  9966  0001DC  D057               	goto	l8085
  9967  0001DE                     l8053:
  9968                           
  9969                           ; BSR set to: 0
  9970                           ;doprnt.c: 1268: else
  9971                           ;doprnt.c: 1273: {
  9972                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  9973  0001DE  C090  FFD9         	movff	__doprnt@ap,fsr2l
  9974  0001E2  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  9975  0001E6  CFDF F092          	movff	indf2,??__doprnt
  9976  0001EA  0E02               	movlw	2
  9977  0001EC  26DE               	addwf	postinc2,f,c
  9978  0001EE  CFDF F093          	movff	indf2,??__doprnt+1
  9979  0001F2  0E00               	movlw	0
  9980  0001F4  22DD               	addwfc	postdec2,f,c
  9981  0001F6  C092  FFD9         	movff	??__doprnt,fsr2l
  9982  0001FA  C093  FFDA         	movff	??__doprnt+1,fsr2h
  9983  0001FE  CFDE F098          	movff	postinc2,__doprnt@val
  9984  000202  CFDD F099          	movff	postdec2,__doprnt@val+1
  9985                           
  9986                           ; BSR set to: 0
  9987                           ;doprnt.c: 1287: }
  9988                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  9989  000206  D042               	goto	l8085
  9990  000208                     l8055:
  9991                           
  9992                           ; BSR set to: 0
  9993                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  9994  000208  0E01               	movlw	1
  9995  00020A  0100               	movlb	0	; () banked
  9996  00020C  6F9D               	movwf	__doprnt@c& (0+255),b
  9997  00020E                     l8057:
  9998                           
  9999                           ; BSR set to: 0
 10000  00020E  0E05               	movlw	5
 10001  000210  0100               	movlb	0	; () banked
 10002  000212  199D               	xorwf	__doprnt@c& (0+255),w,b
 10003  000214  B4D8               	btfsc	status,2,c
 10004  000216  D043               	goto	l8087
 10005                           
 10006                           ; BSR set to: 0
 10007                           ;doprnt.c: 1306: if(val < dpowers[c])
 10008                           
 10009                           ; BSR set to: 0
 10010                           
 10011                           ; BSR set to: 0
 10012  000218  0100               	movlb	0	; () banked
 10013  00021A  519D               	movf	__doprnt@c& (0+255),w,b
 10014  00021C  0D02               	mullw	2
 10015  00021E  0E42               	movlw	low _dpowers
 10016  000220  24F3               	addwf	prodl,w,c
 10017  000222  6EF6               	movwf	tblptrl,c
 10018  000224  0EFE               	movlw	high _dpowers
 10019  000226  20F4               	addwfc	prodh,w,c
 10020  000228  6EF7               	movwf	tblptrh,c
 10021  00022A                     	if	1	;There are 3 active tblptr bytes
 10022  00022A  6AF8               	clrf	tblptru,c
 10023  00022C  0E00               	movlw	low (__mediumconst shr (0+16))
 10024  00022E  22F8               	addwfc	tblptru,f,c
 10025  000230                     	endif
 10026  000230  0009               	tblrd		*+
 10027  000232  50F5               	movf	tablat,w,c
 10028  000234  0100               	movlb	0	; () banked
 10029  000236  5D98               	subwf	__doprnt@val& (0+255),w,b
 10030  000238  0009               	tblrd		*+
 10031  00023A  50F5               	movf	tablat,w,c
 10032  00023C  0100               	movlb	0	; () banked
 10033  00023E  5999               	subwfb	(__doprnt@val+1)& (0+255),w,b
 10034  000240  A0D8               	btfss	status,0,c
 10035  000242  D02D               	goto	l8087
 10036                           
 10037                           ; BSR set to: 0
 10038                           
 10039                           ; BSR set to: 0
 10040                           
 10041                           ; BSR set to: 0
 10042                           ;doprnt.c: 1307: break;
 10043  000244  0100               	movlb	0	; () banked
 10044  000246  2B9D               	incf	__doprnt@c& (0+255),f,b
 10045  000248  D7E2               	goto	l8057
 10046  00024A                     l8069:
 10047                           
 10048                           ; BSR set to: 0
 10049                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10050  00024A  0E01               	movlw	1
 10051  00024C  0100               	movlb	0	; () banked
 10052  00024E  6F9D               	movwf	__doprnt@c& (0+255),b
 10053  000250                     l8071:
 10054                           
 10055                           ; BSR set to: 0
 10056  000250  0E04               	movlw	4
 10057  000252  0100               	movlb	0	; () banked
 10058  000254  199D               	xorwf	__doprnt@c& (0+255),w,b
 10059  000256  B4D8               	btfsc	status,2,c
 10060  000258  D022               	goto	l8087
 10061                           
 10062                           ; BSR set to: 0
 10063                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10064                           
 10065                           ; BSR set to: 0
 10066                           
 10067                           ; BSR set to: 0
 10068  00025A  0100               	movlb	0	; () banked
 10069  00025C  519D               	movf	__doprnt@c& (0+255),w,b
 10070  00025E  0D02               	mullw	2
 10071  000260  0E4C               	movlw	low _hexpowers
 10072  000262  24F3               	addwf	prodl,w,c
 10073  000264  6EF6               	movwf	tblptrl,c
 10074  000266  0EFE               	movlw	high _hexpowers
 10075  000268  20F4               	addwfc	prodh,w,c
 10076  00026A  6EF7               	movwf	tblptrh,c
 10077  00026C                     	if	1	;There are 3 active tblptr bytes
 10078  00026C  6AF8               	clrf	tblptru,c
 10079  00026E  0E00               	movlw	low (__mediumconst shr (0+16))
 10080  000270  22F8               	addwfc	tblptru,f,c
 10081  000272                     	endif
 10082  000272  0009               	tblrd		*+
 10083  000274  50F5               	movf	tablat,w,c
 10084  000276  0100               	movlb	0	; () banked
 10085  000278  5D98               	subwf	__doprnt@val& (0+255),w,b
 10086  00027A  0009               	tblrd		*+
 10087  00027C  50F5               	movf	tablat,w,c
 10088  00027E  0100               	movlb	0	; () banked
 10089  000280  5999               	subwfb	(__doprnt@val+1)& (0+255),w,b
 10090  000282  A0D8               	btfss	status,0,c
 10091  000284  D00C               	goto	l8087
 10092                           
 10093                           ; BSR set to: 0
 10094                           
 10095                           ; BSR set to: 0
 10096                           
 10097                           ; BSR set to: 0
 10098                           ;doprnt.c: 1318: break;
 10099  000286  0100               	movlb	0	; () banked
 10100  000288  2B9D               	incf	__doprnt@c& (0+255),f,b
 10101  00028A  D7E2               	goto	l8071
 10102  00028C                     l8085:
 10103                           
 10104                           ; BSR set to: 0
 10105  00028C  0100               	movlb	0	; () banked
 10106  00028E  519A               	movf	__doprnt@flag& (0+255),w,b
 10107  000290  0B80               	andlw	128
 10108                           
 10109                           ; Switch size 1, requested type "space"
 10110                           ; Number of cases is 2, Range of values is 0 to 128
 10111                           ; switch strategies available:
 10112                           ; Name         Instructions Cycles
 10113                           ; simple_byte            7     4 (average)
 10114                           ;	Chosen strategy is simple_byte
 10115  000292  0A00               	xorlw	0	; case 0
 10116  000294  B4D8               	btfsc	status,2,c
 10117  000296  D7B8               	goto	l8055
 10118  000298  0A80               	xorlw	128	; case 128
 10119  00029A  B4D8               	btfsc	status,2,c
 10120  00029C  D7D6               	goto	l8069
 10121  00029E                     l8087:
 10122                           
 10123                           ; BSR set to: 0
 10124                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10125  00029E  0100               	movlb	0	; () banked
 10126  0002A0  519B               	movf	__doprnt@width& (0+255),w,b
 10127  0002A2  0100               	movlb	0	; () banked
 10128  0002A4  119C               	iorwf	(__doprnt@width+1)& (0+255),w,b
 10129  0002A6  B4D8               	btfsc	status,2,c
 10130  0002A8  D00B               	goto	l8093
 10131                           
 10132                           ; BSR set to: 0
 10133  0002AA  C09A  F092         	movff	__doprnt@flag,??__doprnt
 10134  0002AE  0E03               	movlw	3
 10135  0002B0  0100               	movlb	0	; () banked
 10136  0002B2  1792               	andwf	??__doprnt& (0+255),f,b
 10137  0002B4  B4D8               	btfsc	status,2,c
 10138  0002B6  D004               	goto	l8093
 10139                           
 10140                           ; BSR set to: 0
 10141                           ;doprnt.c: 1346: width--;
 10142  0002B8  0100               	movlb	0	; () banked
 10143  0002BA  079B               	decf	__doprnt@width& (0+255),f,b
 10144  0002BC  A0D8               	btfss	status,0,c
 10145  0002BE  079C               	decf	(__doprnt@width+1)& (0+255),f,b
 10146  0002C0                     l8093:
 10147                           
 10148                           ; BSR set to: 0
 10149                           ;doprnt.c: 1381: if(width > c)
 10150  0002C0  0E80               	movlw	128
 10151  0002C2  0100               	movlb	0	; () banked
 10152  0002C4  BF9D               	btfsc	__doprnt@c& (0+255),7,b
 10153  0002C6  0E7F               	movlw	127
 10154  0002C8  0100               	movlb	0	; () banked
 10155  0002CA  6F92               	movwf	??__doprnt& (0+255),b
 10156  0002CC  0100               	movlb	0	; () banked
 10157  0002CE  519B               	movf	__doprnt@width& (0+255),w,b
 10158  0002D0  0100               	movlb	0	; () banked
 10159  0002D2  5D9D               	subwf	__doprnt@c& (0+255),w,b
 10160  0002D4  0100               	movlb	0	; () banked
 10161  0002D6  519C               	movf	(__doprnt@width+1)& (0+255),w,b
 10162  0002D8  0A80               	xorlw	128
 10163  0002DA  0100               	movlb	0	; () banked
 10164  0002DC  5992               	subwfb	??__doprnt& (0+255),w,b
 10165  0002DE  B0D8               	btfsc	status,0,c
 10166  0002E0  D00B               	goto	l8097
 10167                           
 10168                           ; BSR set to: 0
 10169                           ;doprnt.c: 1382: width -= c;
 10170  0002E2  0100               	movlb	0	; () banked
 10171  0002E4  519D               	movf	__doprnt@c& (0+255),w,b
 10172  0002E6  0100               	movlb	0	; () banked
 10173  0002E8  5F9B               	subwf	__doprnt@width& (0+255),f,b
 10174  0002EA  0E00               	movlw	0
 10175  0002EC  0100               	movlb	0	; () banked
 10176  0002EE  BF9D               	btfsc	__doprnt@c& (0+255),7,b
 10177  0002F0  0EFF               	movlw	255
 10178  0002F2  0100               	movlb	0	; () banked
 10179  0002F4  5B9C               	subwfb	(__doprnt@width+1)& (0+255),f,b
 10180  0002F6  D005               	goto	l8099
 10181  0002F8                     l8097:
 10182                           
 10183                           ; BSR set to: 0
 10184                           ;doprnt.c: 1383: else
 10185                           ;doprnt.c: 1384: width = 0;
 10186  0002F8  0E00               	movlw	0
 10187  0002FA  0100               	movlb	0	; () banked
 10188  0002FC  6F9C               	movwf	(__doprnt@width+1)& (0+255),b
 10189  0002FE  0E00               	movlw	0
 10190  000300  6F9B               	movwf	__doprnt@width& (0+255),b
 10191  000302                     l8099:
 10192                           
 10193                           ; BSR set to: 0
 10194                           ;doprnt.c: 1387: if(flag & 0x04) {
 10195  000302  0100               	movlb	0	; () banked
 10196  000304  A59A               	btfss	__doprnt@flag& (0+255),2,b
 10197  000306  D082               	goto	l8123
 10198                           
 10199                           ; BSR set to: 0
 10200                           ;doprnt.c: 1392: if(flag & 0x03)
 10201  000308  C09A  F092         	movff	__doprnt@flag,??__doprnt
 10202  00030C  0E03               	movlw	3
 10203  00030E  0100               	movlb	0	; () banked
 10204  000310  1792               	andwf	??__doprnt& (0+255),f,b
 10205  000312  B4D8               	btfsc	status,2,c
 10206  000314  D038               	goto	l8111
 10207                           
 10208                           ; BSR set to: 0
 10209                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 10210  000316  0100               	movlb	0	; () banked
 10211  000318  EE20 F002          	lfsr	2,2
 10212  00031C  518C               	movf	__doprnt@pb& (0+255),w,b
 10213  00031E  26D9               	addwf	fsr2l,f,c
 10214  000320  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 10215  000322  22DA               	addwfc	fsr2h,f,c
 10216  000324  50DE               	movf	postinc2,w,c
 10217  000326  10DE               	iorwf	postinc2,w,c
 10218  000328  B4D8               	btfsc	status,2,c
 10219  00032A  D018               	goto	l8107
 10220                           
 10221                           ; BSR set to: 0
 10222  00032C  0100               	movlb	0	; () banked
 10223  00032E  EE20 F002          	lfsr	2,2
 10224  000332  518C               	movf	__doprnt@pb& (0+255),w,b
 10225  000334  26D9               	addwf	fsr2l,f,c
 10226  000336  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 10227  000338  22DA               	addwfc	fsr2h,f,c
 10228  00033A  CFDE F092          	movff	postinc2,??__doprnt
 10229  00033E  CFDD F093          	movff	postdec2,??__doprnt+1
 10230  000342  D801               	call	u8618
 10231  000344  D020               	goto	l8111
 10232  000346                     u8618:
 10233  000346  0005               	push	
 10234  000348  6EFA               	movwf	pclath,c
 10235  00034A  0100               	movlb	0	; () banked
 10236  00034C  5192               	movf	??__doprnt& (0+255),w,b
 10237  00034E  6EFD               	movwf	tosl,c
 10238  000350  5193               	movf	(??__doprnt+1)& (0+255),w,b
 10239  000352  6EFE               	movwf	tosh,c
 10240  000354  6AFF               	clrf	tosu,c
 10241  000356  50FA               	movf	pclath,w,c
 10242  000358  0E2D               	movlw	45
 10243  00035A  0012               	return		;indir
 10244  00035C                     l8107:
 10245  00035C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 10246  000360  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 10247  000364  CFDE F092          	movff	postinc2,??__doprnt
 10248  000368  CFDD F093          	movff	postdec2,??__doprnt+1
 10249  00036C  C092  FFD9         	movff	??__doprnt,fsr2l
 10250  000370  C093  FFDA         	movff	??__doprnt+1,fsr2h
 10251  000374  0E2D               	movlw	45
 10252  000376  6EDF               	movwf	indf2,c
 10253  000378  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 10254  00037C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 10255  000380  2ADE               	incf	postinc2,f,c
 10256  000382  0E00               	movlw	0
 10257  000384  22DD               	addwfc	postdec2,f,c
 10258  000386                     l8111:
 10259                           
 10260                           ;doprnt.c: 1415: if(width)
 10261  000386  0100               	movlb	0	; () banked
 10262  000388  519B               	movf	__doprnt@width& (0+255),w,b
 10263  00038A  0100               	movlb	0	; () banked
 10264  00038C  119C               	iorwf	(__doprnt@width+1)& (0+255),w,b
 10265  00038E  B4D8               	btfsc	status,2,c
 10266  000390  D0C4               	goto	l8145
 10267                           
 10268                           ; BSR set to: 0
 10269                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 10270                           
 10271                           ; BSR set to: 0
 10272                           
 10273                           ;doprnt.c: 1416: do
 10274  000392  0100               	movlb	0	; () banked
 10275  000394  EE20 F002          	lfsr	2,2
 10276  000398  518C               	movf	__doprnt@pb& (0+255),w,b
 10277  00039A  26D9               	addwf	fsr2l,f,c
 10278  00039C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 10279  00039E  22DA               	addwfc	fsr2h,f,c
 10280  0003A0  50DE               	movf	postinc2,w,c
 10281  0003A2  10DE               	iorwf	postinc2,w,c
 10282  0003A4  B4D8               	btfsc	status,2,c
 10283  0003A6  D018               	goto	l8117
 10284                           
 10285                           ; BSR set to: 0
 10286  0003A8  0100               	movlb	0	; () banked
 10287  0003AA  EE20 F002          	lfsr	2,2
 10288  0003AE  518C               	movf	__doprnt@pb& (0+255),w,b
 10289  0003B0  26D9               	addwf	fsr2l,f,c
 10290  0003B2  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 10291  0003B4  22DA               	addwfc	fsr2h,f,c
 10292  0003B6  CFDE F092          	movff	postinc2,??__doprnt
 10293  0003BA  CFDD F093          	movff	postdec2,??__doprnt+1
 10294  0003BE  D801               	call	u8648
 10295  0003C0  D020               	goto	l8121
 10296  0003C2                     u8648:
 10297  0003C2  0005               	push	
 10298  0003C4  6EFA               	movwf	pclath,c
 10299  0003C6  0100               	movlb	0	; () banked
 10300  0003C8  5192               	movf	??__doprnt& (0+255),w,b
 10301  0003CA  6EFD               	movwf	tosl,c
 10302  0003CC  5193               	movf	(??__doprnt+1)& (0+255),w,b
 10303  0003CE  6EFE               	movwf	tosh,c
 10304  0003D0  6AFF               	clrf	tosu,c
 10305  0003D2  50FA               	movf	pclath,w,c
 10306  0003D4  0E30               	movlw	48
 10307  0003D6  0012               	return		;indir
 10308  0003D8                     l8117:
 10309  0003D8  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 10310  0003DC  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 10311  0003E0  CFDE F092          	movff	postinc2,??__doprnt
 10312  0003E4  CFDD F093          	movff	postdec2,??__doprnt+1
 10313  0003E8  C092  FFD9         	movff	??__doprnt,fsr2l
 10314  0003EC  C093  FFDA         	movff	??__doprnt+1,fsr2h
 10315  0003F0  0E30               	movlw	48
 10316  0003F2  6EDF               	movwf	indf2,c
 10317  0003F4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 10318  0003F8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 10319  0003FC  2ADE               	incf	postinc2,f,c
 10320  0003FE  0E00               	movlw	0
 10321  000400  22DD               	addwfc	postdec2,f,c
 10322  000402                     l8121:
 10323                           
 10324                           ;doprnt.c: 1418: while(--width);
 10325  000402  0100               	movlb	0	; () banked
 10326  000404  079B               	decf	__doprnt@width& (0+255),f,b
 10327  000406  A0D8               	btfss	status,0,c
 10328  000408  079C               	decf	(__doprnt@width+1)& (0+255),f,b
 10329  00040A  D7BD               	goto	l8111
 10330  00040C                     l8123:
 10331                           
 10332                           ; BSR set to: 0
 10333                           ;doprnt.c: 1422: {
 10334                           ;doprnt.c: 1424: if(width
 10335                           ;doprnt.c: 1428: )
 10336  00040C  0100               	movlb	0	; () banked
 10337  00040E  519B               	movf	__doprnt@width& (0+255),w,b
 10338  000410  0100               	movlb	0	; () banked
 10339  000412  119C               	iorwf	(__doprnt@width+1)& (0+255),w,b
 10340  000414  B4D8               	btfsc	status,2,c
 10341  000416  D042               	goto	l8135
 10342  000418                     l8125:
 10343                           
 10344                           ; BSR set to: 0
 10345                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 10346  000418  0100               	movlb	0	; () banked
 10347  00041A  EE20 F002          	lfsr	2,2
 10348  00041E  518C               	movf	__doprnt@pb& (0+255),w,b
 10349  000420  26D9               	addwf	fsr2l,f,c
 10350  000422  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 10351  000424  22DA               	addwfc	fsr2h,f,c
 10352  000426  50DE               	movf	postinc2,w,c
 10353  000428  10DE               	iorwf	postinc2,w,c
 10354  00042A  B4D8               	btfsc	status,2,c
 10355  00042C  D018               	goto	l8129
 10356                           
 10357                           ; BSR set to: 0
 10358  00042E  0100               	movlb	0	; () banked
 10359  000430  EE20 F002          	lfsr	2,2
 10360  000434  518C               	movf	__doprnt@pb& (0+255),w,b
 10361  000436  26D9               	addwf	fsr2l,f,c
 10362  000438  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 10363  00043A  22DA               	addwfc	fsr2h,f,c
 10364  00043C  CFDE F092          	movff	postinc2,??__doprnt
 10365  000440  CFDD F093          	movff	postdec2,??__doprnt+1
 10366  000444  D801               	call	u8688
 10367  000446  D020               	goto	l8133
 10368  000448                     u8688:
 10369  000448  0005               	push	
 10370  00044A  6EFA               	movwf	pclath,c
 10371  00044C  0100               	movlb	0	; () banked
 10372  00044E  5192               	movf	??__doprnt& (0+255),w,b
 10373  000450  6EFD               	movwf	tosl,c
 10374  000452  5193               	movf	(??__doprnt+1)& (0+255),w,b
 10375  000454  6EFE               	movwf	tosh,c
 10376  000456  6AFF               	clrf	tosu,c
 10377  000458  50FA               	movf	pclath,w,c
 10378  00045A  0E20               	movlw	32
 10379  00045C  0012               	return		;indir
 10380  00045E                     l8129:
 10381  00045E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 10382  000462  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 10383  000466  CFDE F092          	movff	postinc2,??__doprnt
 10384  00046A  CFDD F093          	movff	postdec2,??__doprnt+1
 10385  00046E  C092  FFD9         	movff	??__doprnt,fsr2l
 10386  000472  C093  FFDA         	movff	??__doprnt+1,fsr2h
 10387  000476  0E20               	movlw	32
 10388  000478  6EDF               	movwf	indf2,c
 10389  00047A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 10390  00047E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 10391  000482  2ADE               	incf	postinc2,f,c
 10392  000484  0E00               	movlw	0
 10393  000486  22DD               	addwfc	postdec2,f,c
 10394  000488                     l8133:
 10395                           
 10396                           ;doprnt.c: 1431: while(--width);
 10397  000488  0100               	movlb	0	; () banked
 10398  00048A  079B               	decf	__doprnt@width& (0+255),f,b
 10399  00048C  A0D8               	btfss	status,0,c
 10400  00048E  079C               	decf	(__doprnt@width+1)& (0+255),f,b
 10401  000490  0100               	movlb	0	; () banked
 10402  000492  519B               	movf	__doprnt@width& (0+255),w,b
 10403  000494  0100               	movlb	0	; () banked
 10404  000496  119C               	iorwf	(__doprnt@width+1)& (0+255),w,b
 10405  000498  A4D8               	btfss	status,2,c
 10406  00049A  D7BE               	goto	l8125
 10407  00049C                     l8135:
 10408                           
 10409                           ; BSR set to: 0
 10410                           ;doprnt.c: 1438: if(flag & 0x03)
 10411  00049C  C09A  F092         	movff	__doprnt@flag,??__doprnt
 10412  0004A0  0E03               	movlw	3
 10413  0004A2  0100               	movlb	0	; () banked
 10414  0004A4  1792               	andwf	??__doprnt& (0+255),f,b
 10415  0004A6  B4D8               	btfsc	status,2,c
 10416  0004A8  D038               	goto	l8145
 10417                           
 10418                           ; BSR set to: 0
 10419                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 10420  0004AA  0100               	movlb	0	; () banked
 10421  0004AC  EE20 F002          	lfsr	2,2
 10422  0004B0  518C               	movf	__doprnt@pb& (0+255),w,b
 10423  0004B2  26D9               	addwf	fsr2l,f,c
 10424  0004B4  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 10425  0004B6  22DA               	addwfc	fsr2h,f,c
 10426  0004B8  50DE               	movf	postinc2,w,c
 10427  0004BA  10DE               	iorwf	postinc2,w,c
 10428  0004BC  B4D8               	btfsc	status,2,c
 10429  0004BE  D018               	goto	l8141
 10430                           
 10431                           ; BSR set to: 0
 10432  0004C0  0100               	movlb	0	; () banked
 10433  0004C2  EE20 F002          	lfsr	2,2
 10434  0004C6  518C               	movf	__doprnt@pb& (0+255),w,b
 10435  0004C8  26D9               	addwf	fsr2l,f,c
 10436  0004CA  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 10437  0004CC  22DA               	addwfc	fsr2h,f,c
 10438  0004CE  CFDE F092          	movff	postinc2,??__doprnt
 10439  0004D2  CFDD F093          	movff	postdec2,??__doprnt+1
 10440  0004D6  D801               	call	u8728
 10441  0004D8  D020               	goto	l8145
 10442  0004DA                     u8728:
 10443  0004DA  0005               	push	
 10444  0004DC  6EFA               	movwf	pclath,c
 10445  0004DE  0100               	movlb	0	; () banked
 10446  0004E0  5192               	movf	??__doprnt& (0+255),w,b
 10447  0004E2  6EFD               	movwf	tosl,c
 10448  0004E4  5193               	movf	(??__doprnt+1)& (0+255),w,b
 10449  0004E6  6EFE               	movwf	tosh,c
 10450  0004E8  6AFF               	clrf	tosu,c
 10451  0004EA  50FA               	movf	pclath,w,c
 10452  0004EC  0E2D               	movlw	45
 10453  0004EE  0012               	return		;indir
 10454  0004F0                     l8141:
 10455  0004F0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 10456  0004F4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 10457  0004F8  CFDE F092          	movff	postinc2,??__doprnt
 10458  0004FC  CFDD F093          	movff	postdec2,??__doprnt+1
 10459  000500  C092  FFD9         	movff	??__doprnt,fsr2l
 10460  000504  C093  FFDA         	movff	??__doprnt+1,fsr2h
 10461  000508  0E2D               	movlw	45
 10462  00050A  6EDF               	movwf	indf2,c
 10463  00050C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 10464  000510  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 10465  000514  2ADE               	incf	postinc2,f,c
 10466  000516  0E00               	movlw	0
 10467  000518  22DD               	addwfc	postdec2,f,c
 10468  00051A                     l8145:
 10469                           
 10470                           ;doprnt.c: 1469: }
 10471                           ;doprnt.c: 1472: prec = c;
 10472  00051A  C09D  F097         	movff	__doprnt@c,__doprnt@prec
 10473                           
 10474                           ;doprnt.c: 1474: while(prec--) {
 10475  00051E  D098               	goto	l8165
 10476  000520                     l8147:
 10477                           
 10478                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10479  000520  0100               	movlb	0	; () banked
 10480  000522  5197               	movf	__doprnt@prec& (0+255),w,b
 10481  000524  0D02               	mullw	2
 10482  000526  0E42               	movlw	low _dpowers
 10483  000528  24F3               	addwf	prodl,w,c
 10484  00052A  6EF6               	movwf	tblptrl,c
 10485  00052C  0EFE               	movlw	high _dpowers
 10486  00052E  20F4               	addwfc	prodh,w,c
 10487  000530  6EF7               	movwf	tblptrh,c
 10488  000532                     	if	1	;There are 3 active tblptr bytes
 10489  000532  6AF8               	clrf	tblptru,c
 10490  000534  0E00               	movlw	low (__mediumconst shr (0+16))
 10491  000536  22F8               	addwfc	tblptru,f,c
 10492  000538                     	endif
 10493  000538  0009               	tblrd		*+
 10494  00053A  CFF5 F082          	movff	tablat,___lwdiv@divisor
 10495  00053E  000A               	tblrd		*-
 10496  000540  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 10497  000544  C098  F080         	movff	__doprnt@val,___lwdiv@dividend
 10498  000548  C099  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
 10499  00054C  EC73  F017         	call	___lwdiv
 10500  000550  C080  F087         	movff	?___lwdiv,___lwmod@dividend
 10501  000554  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
 10502  000558  0E00               	movlw	0
 10503  00055A  0100               	movlb	0	; () banked
 10504  00055C  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
 10505  00055E  0E0A               	movlw	10
 10506  000560  6F89               	movwf	___lwmod@divisor& (0+255),b
 10507  000562  ECBA  F018         	call	___lwmod	;wreg free
 10508  000566  0100               	movlb	0	; () banked
 10509  000568  5187               	movf	?___lwmod& (0+255),w,b
 10510  00056A  0F30               	addlw	48
 10511  00056C  0100               	movlb	0	; () banked
 10512  00056E  6F9D               	movwf	__doprnt@c& (0+255),b
 10513                           
 10514                           ;doprnt.c: 1491: break;
 10515  000570  D036               	goto	l8157
 10516  000572                     l8149:
 10517                           
 10518                           ; BSR set to: 0
 10519                           ;doprnt.c: 1499: {
 10520                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10521  000572  C098  F080         	movff	__doprnt@val,___lwdiv@dividend
 10522  000576  C099  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
 10523  00057A  0100               	movlb	0	; () banked
 10524  00057C  5197               	movf	__doprnt@prec& (0+255),w,b
 10525  00057E  0D02               	mullw	2
 10526  000580  0E4C               	movlw	low _hexpowers
 10527  000582  24F3               	addwf	prodl,w,c
 10528  000584  6EF6               	movwf	tblptrl,c
 10529  000586  0EFE               	movlw	high _hexpowers
 10530  000588  20F4               	addwfc	prodh,w,c
 10531  00058A  6EF7               	movwf	tblptrh,c
 10532  00058C                     	if	1	;There are 3 active tblptr bytes
 10533  00058C  6AF8               	clrf	tblptru,c
 10534  00058E  0E00               	movlw	low (__mediumconst shr (0+16))
 10535  000590  22F8               	addwfc	tblptru,f,c
 10536  000592                     	endif
 10537  000592  0009               	tblrd		*+
 10538  000594  CFF5 F082          	movff	tablat,___lwdiv@divisor
 10539  000598  000A               	tblrd		*-
 10540  00059A  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
 10541  00059E  EC73  F017         	call	___lwdiv	;wreg free
 10542  0005A2  0100               	movlb	0	; () banked
 10543  0005A4  5180               	movf	?___lwdiv& (0+255),w,b
 10544  0005A6  0B0F               	andlw	15
 10545  0005A8  0100               	movlb	0	; () banked
 10546  0005AA  6F96               	movwf	__doprnt@idx& (0+255),b
 10547                           
 10548                           ; BSR set to: 0
 10549                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 10550  0005AC  0100               	movlb	0	; () banked
 10551  0005AE  5196               	movf	__doprnt@idx& (0+255),w,b
 10552  0005B0  0D01               	mullw	1
 10553  0005B2  0E80               	movlw	low STR_35
 10554  0005B4  24F3               	addwf	prodl,w,c
 10555  0005B6  6EF6               	movwf	tblptrl,c
 10556  0005B8  0EFE               	movlw	high STR_35
 10557  0005BA  20F4               	addwfc	prodh,w,c
 10558  0005BC  6EF7               	movwf	tblptrh,c
 10559  0005BE                     	if	1	;There are 3 active tblptr bytes
 10560  0005BE  6AF8               	clrf	tblptru,c
 10561  0005C0  0E00               	movlw	low (__mediumconst shr (0+16))
 10562  0005C2  22F8               	addwfc	tblptru,f,c
 10563  0005C4                     	endif
 10564  0005C4  0008               	tblrd		*
 10565  0005C6  CFF5 F09D          	movff	tablat,__doprnt@c
 10566                           
 10567                           ; BSR set to: 0
 10568                           ;doprnt.c: 1523: }
 10569                           
 10570                           ;doprnt.c: 1508: }
 10571                           ;doprnt.c: 1510: break;
 10572  0005CA  D009               	goto	l8157
 10573  0005CC                     l8155:
 10574  0005CC  0100               	movlb	0	; () banked
 10575  0005CE  519A               	movf	__doprnt@flag& (0+255),w,b
 10576  0005D0  0B80               	andlw	128
 10577                           
 10578                           ; Switch size 1, requested type "space"
 10579                           ; Number of cases is 2, Range of values is 0 to 128
 10580                           ; switch strategies available:
 10581                           ; Name         Instructions Cycles
 10582                           ; simple_byte            7     4 (average)
 10583                           ;	Chosen strategy is simple_byte
 10584  0005D2  0A00               	xorlw	0	; case 0
 10585  0005D4  B4D8               	btfsc	status,2,c
 10586  0005D6  D7A4               	goto	l8147
 10587  0005D8  0A80               	xorlw	128	; case 128
 10588  0005DA  B4D8               	btfsc	status,2,c
 10589  0005DC  D7CA               	goto	l8149
 10590  0005DE                     l8157:
 10591                           
 10592                           ; BSR set to: 0
 10593                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 10594  0005DE  0100               	movlb	0	; () banked
 10595  0005E0  EE20 F002          	lfsr	2,2
 10596  0005E4  518C               	movf	__doprnt@pb& (0+255),w,b
 10597  0005E6  26D9               	addwf	fsr2l,f,c
 10598  0005E8  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 10599  0005EA  22DA               	addwfc	fsr2h,f,c
 10600  0005EC  50DE               	movf	postinc2,w,c
 10601  0005EE  10DE               	iorwf	postinc2,w,c
 10602  0005F0  B4D8               	btfsc	status,2,c
 10603  0005F2  D019               	goto	l8161
 10604                           
 10605                           ; BSR set to: 0
 10606  0005F4  0100               	movlb	0	; () banked
 10607  0005F6  EE20 F002          	lfsr	2,2
 10608  0005FA  518C               	movf	__doprnt@pb& (0+255),w,b
 10609  0005FC  26D9               	addwf	fsr2l,f,c
 10610  0005FE  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
 10611  000600  22DA               	addwfc	fsr2h,f,c
 10612  000602  CFDE F092          	movff	postinc2,??__doprnt
 10613  000606  CFDD F093          	movff	postdec2,??__doprnt+1
 10614  00060A  D801               	call	u8748
 10615  00060C  D021               	goto	l8165
 10616  00060E                     u8748:
 10617  00060E  0005               	push	
 10618  000610  6EFA               	movwf	pclath,c
 10619  000612  0100               	movlb	0	; () banked
 10620  000614  5192               	movf	??__doprnt& (0+255),w,b
 10621  000616  6EFD               	movwf	tosl,c
 10622  000618  5193               	movf	(??__doprnt+1)& (0+255),w,b
 10623  00061A  6EFE               	movwf	tosh,c
 10624  00061C  6AFF               	clrf	tosu,c
 10625  00061E  50FA               	movf	pclath,w,c
 10626  000620  0100               	movlb	0	; () banked
 10627  000622  519D               	movf	__doprnt@c& (0+255),w,b
 10628  000624  0012               	return		;indir
 10629  000626                     l8161:
 10630  000626  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 10631  00062A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 10632  00062E  CFDE F092          	movff	postinc2,??__doprnt
 10633  000632  CFDD F093          	movff	postdec2,??__doprnt+1
 10634  000636  C092  FFD9         	movff	??__doprnt,fsr2l
 10635  00063A  C093  FFDA         	movff	??__doprnt+1,fsr2h
 10636  00063E  C09D  FFDF         	movff	__doprnt@c,indf2
 10637  000642  C08C  FFD9         	movff	__doprnt@pb,fsr2l
 10638  000646  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
 10639  00064A  2ADE               	incf	postinc2,f,c
 10640  00064C  0E00               	movlw	0
 10641  00064E  22DD               	addwfc	postdec2,f,c
 10642  000650                     l8165:
 10643  000650  0100               	movlb	0	; () banked
 10644  000652  0797               	decf	__doprnt@prec& (0+255),f,b
 10645  000654  0100               	movlb	0	; () banked
 10646  000656  2997               	incf	__doprnt@prec& (0+255),w,b
 10647  000658  A4D8               	btfss	status,2,c
 10648  00065A  D7B8               	goto	l8155
 10649  00065C                     l8167:
 10650  00065C  C08E  FFF6         	movff	__doprnt@f,tblptrl
 10651  000660  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
 10652  000664  0100               	movlb	0	; () banked
 10653  000666  4B8E               	infsnz	__doprnt@f& (0+255),f,b
 10654  000668  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
 10655  00066A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 10656  00066A  6AF8               	clrf	tblptru,c
 10657  00066C                     	endif
 10658  00066C                     	if	0	;tblptru may be non-zero
 10659  00066C                     	endif
 10660  00066C  0008               	tblrd		*
 10661  00066E  CFF5 F09D          	movff	tablat,__doprnt@c
 10662  000672  0100               	movlb	0	; () banked
 10663  000674  519D               	movf	__doprnt@c& (0+255),w,b
 10664  000676  A4D8               	btfss	status,2,c
 10665  000678  D4CD               	goto	l8009
 10666  00067A                     l8169:
 10667                           
 10668                           ;doprnt.c: 1540: return 0;
 10669  00067A  0E00               	movlw	0
 10670  00067C  0100               	movlb	0	; () banked
 10671  00067E  6F8D               	movwf	(?__doprnt+1)& (0+255),b
 10672  000680  0E00               	movlw	0
 10673  000682  6F8C               	movwf	?__doprnt& (0+255),b
 10674  000684  0012               	return	
 10675  000686                     __end_of__doprnt:
 10676                           	opt stack 0
 10677                           tosu	equ	0xFFF
 10678                           tosh	equ	0xFFE
 10679                           tosl	equ	0xFFD
 10680                           pclath	equ	0xFFA
 10681                           tblptru	equ	0xFF8
 10682                           tblptrh	equ	0xFF7
 10683                           tblptrl	equ	0xFF6
 10684                           tablat	equ	0xFF5
 10685                           prodh	equ	0xFF4
 10686                           prodl	equ	0xFF3
 10687                           intcon	equ	0xFF2
 10688                           intcon2	equ	0xFF1
 10689                           postinc0	equ	0xFEE
 10690                           wreg	equ	0xFE8
 10691                           indf1	equ	0xFE7
 10692                           postinc1	equ	0xFE6
 10693                           postdec1	equ	0xFE5
 10694                           fsr1h	equ	0xFE2
 10695                           fsr1l	equ	0xFE1
 10696                           indf2	equ	0xFDF
 10697                           postinc2	equ	0xFDE
 10698                           postdec2	equ	0xFDD
 10699                           fsr2h	equ	0xFDA
 10700                           fsr2l	equ	0xFD9
 10701                           status	equ	0xFD8
 10702                           
 10703 ;; *************** function _putch *****************
 10704 ;; Defined at:
 10705 ;;		line 30 in file "lcd.c"
 10706 ;; Parameters:    Size  Location     Type
 10707 ;;  data            1    wreg     unsigned char 
 10708 ;; Auto vars:     Size  Location     Type
 10709 ;;  data            1    2[BANK0 ] unsigned char 
 10710 ;; Return value:  Size  Location     Type
 10711 ;;                  1    wreg      void 
 10712 ;; Registers used:
 10713 ;;		wreg, status,2, status,0, cstack
 10714 ;; Tracked objects:
 10715 ;;		On entry : 0/0
 10716 ;;		On exit  : 0/0
 10717 ;;		Unchanged: 0/0
 10718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10720 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10722 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10723 ;;Total ram usage:        1 bytes
 10724 ;; Hardware stack levels used:    1
 10725 ;; Hardware stack levels required when called:    7
 10726 ;; This function calls:
 10727 ;;		_lcdNibble
 10728 ;; This function is called by:
 10729 ;;		_printf
 10730 ;;		__doprnt
 10731 ;;		i2__doprnt
 10732 ;; This function uses a non-reentrant model
 10733 ;;
 10734                           
 10735                           	psect	text44
 10736  0037EA                     __ptext44:
 10737                           	opt stack 0
 10738  0037EA                     _putch:
 10739                           	opt stack 0
 10740                           
 10741                           ; BSR set to: 0
 10742                           ;Skip over the trampoline to the duplicate function for level 2
 10743  0037EA  B251               	btfsc	btemp,1,c
 10744  0037EC  EF35  F01C         	goto	i2_putch
 10745  0037F0                     _putch$intlevel0:
 10746                           	opt stack 18
 10747                           
 10748                           ;incstack = 0
 10749                           ;putch@data stored from wreg
 10750  0037F0  0100               	movlb	0	; () banked
 10751  0037F2  6F82               	movwf	putch@data& (0+255),b
 10752                           
 10753                           ;lcd.c: 31: LATDbits.LATD2 = 1;
 10754  0037F4  848C               	bsf	3980,2,c	;volatile
 10755                           
 10756                           ;lcd.c: 32: lcdNibble(data);
 10757  0037F6  0100               	movlb	0	; () banked
 10758  0037F8  5182               	movf	putch@data& (0+255),w,b
 10759  0037FA  EC52  F018         	call	_lcdNibble
 10760  0037FE  0012               	return		;funcret
 10761  003800                     __end_of_putch:
 10762                           	opt stack 0
 10763                           tosu	equ	0xFFF
 10764                           tosh	equ	0xFFE
 10765                           tosl	equ	0xFFD
 10766                           pclath	equ	0xFFA
 10767                           tblptru	equ	0xFF8
 10768                           tblptrh	equ	0xFF7
 10769                           tblptrl	equ	0xFF6
 10770                           tablat	equ	0xFF5
 10771                           prodh	equ	0xFF4
 10772                           prodl	equ	0xFF3
 10773                           intcon	equ	0xFF2
 10774                           intcon2	equ	0xFF1
 10775                           postinc0	equ	0xFEE
 10776                           wreg	equ	0xFE8
 10777                           indf1	equ	0xFE7
 10778                           postinc1	equ	0xFE6
 10779                           postdec1	equ	0xFE5
 10780                           fsr1h	equ	0xFE2
 10781                           fsr1l	equ	0xFE1
 10782                           indf2	equ	0xFDF
 10783                           postinc2	equ	0xFDE
 10784                           postdec2	equ	0xFDD
 10785                           fsr2h	equ	0xFDA
 10786                           fsr2l	equ	0xFD9
 10787                           status	equ	0xFD8
 10788                           
 10789 ;; *************** function _isdigit *****************
 10790 ;; Defined at:
 10791 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 10792 ;; Parameters:    Size  Location     Type
 10793 ;;  c               1    wreg     unsigned char 
 10794 ;; Auto vars:     Size  Location     Type
 10795 ;;  c               1    2[BANK0 ] unsigned char 
 10796 ;; Return value:  Size  Location     Type
 10797 ;;		None               void
 10798 ;; Registers used:
 10799 ;;		wreg, status,2, status,0
 10800 ;; Tracked objects:
 10801 ;;		On entry : 0/0
 10802 ;;		On exit  : 0/0
 10803 ;;		Unchanged: 0/0
 10804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10806 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10807 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10808 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10809 ;;Total ram usage:        3 bytes
 10810 ;; Hardware stack levels used:    1
 10811 ;; Hardware stack levels required when called:    6
 10812 ;; This function calls:
 10813 ;;		Nothing
 10814 ;; This function is called by:
 10815 ;;		__doprnt
 10816 ;;		_atoi
 10817 ;; This function uses a non-reentrant model
 10818 ;;
 10819                           
 10820                           	psect	text45
 10821  0036AC                     __ptext45:
 10822                           	opt stack 0
 10823  0036AC                     _isdigit:
 10824                           	opt stack 19
 10825                           
 10826                           ;incstack = 0
 10827                           ;isdigit@c stored from wreg
 10828  0036AC  0100               	movlb	0	; () banked
 10829  0036AE  6F82               	movwf	isdigit@c& (0+255),b
 10830  0036B0  0E00               	movlw	0
 10831  0036B2  0100               	movlb	0	; () banked
 10832  0036B4  6F81               	movwf	_isdigit$1338& (0+255),b
 10833                           
 10834                           ; BSR set to: 0
 10835  0036B6  0E3A               	movlw	58
 10836  0036B8  0100               	movlb	0	; () banked
 10837  0036BA  6182               	cpfslt	isdigit@c& (0+255),b
 10838  0036BC  D007               	goto	l3349
 10839                           
 10840                           ; BSR set to: 0
 10841  0036BE  0E2F               	movlw	47
 10842  0036C0  0100               	movlb	0	; () banked
 10843  0036C2  6582               	cpfsgt	isdigit@c& (0+255),b
 10844  0036C4  D003               	goto	l3349
 10845                           
 10846                           ; BSR set to: 0
 10847  0036C6  0E01               	movlw	1
 10848  0036C8  0100               	movlb	0	; () banked
 10849  0036CA  6F81               	movwf	_isdigit$1338& (0+255),b
 10850  0036CC                     l3349:
 10851                           
 10852                           ; BSR set to: 0
 10853  0036CC  C081  F080         	movff	_isdigit$1338,??_isdigit
 10854  0036D0  0100               	movlb	0	; () banked
 10855  0036D2  3180               	rrcf	??_isdigit& (0+255),w,b
 10856  0036D4  0012               	return	
 10857  0036D6                     __end_of_isdigit:
 10858                           	opt stack 0
 10859                           tosu	equ	0xFFF
 10860                           tosh	equ	0xFFE
 10861                           tosl	equ	0xFFD
 10862                           pclath	equ	0xFFA
 10863                           tblptru	equ	0xFF8
 10864                           tblptrh	equ	0xFF7
 10865                           tblptrl	equ	0xFF6
 10866                           tablat	equ	0xFF5
 10867                           prodh	equ	0xFF4
 10868                           prodl	equ	0xFF3
 10869                           intcon	equ	0xFF2
 10870                           intcon2	equ	0xFF1
 10871                           postinc0	equ	0xFEE
 10872                           wreg	equ	0xFE8
 10873                           indf1	equ	0xFE7
 10874                           postinc1	equ	0xFE6
 10875                           postdec1	equ	0xFE5
 10876                           fsr1h	equ	0xFE2
 10877                           fsr1l	equ	0xFE1
 10878                           indf2	equ	0xFDF
 10879                           postinc2	equ	0xFDE
 10880                           postdec2	equ	0xFDD
 10881                           fsr2h	equ	0xFDA
 10882                           fsr2l	equ	0xFD9
 10883                           status	equ	0xFD8
 10884                           
 10885 ;; *************** function ___lwmod *****************
 10886 ;; Defined at:
 10887 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 10888 ;; Parameters:    Size  Location     Type
 10889 ;;  dividend        2    7[BANK0 ] unsigned int 
 10890 ;;  divisor         2    9[BANK0 ] unsigned int 
 10891 ;; Auto vars:     Size  Location     Type
 10892 ;;  counter         1   11[BANK0 ] unsigned char 
 10893 ;; Return value:  Size  Location     Type
 10894 ;;                  2    7[BANK0 ] unsigned int 
 10895 ;; Registers used:
 10896 ;;		wreg, status,2, status,0
 10897 ;; Tracked objects:
 10898 ;;		On entry : 0/0
 10899 ;;		On exit  : 0/0
 10900 ;;		Unchanged: 0/0
 10901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10902 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10903 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10905 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10906 ;;Total ram usage:        5 bytes
 10907 ;; Hardware stack levels used:    1
 10908 ;; Hardware stack levels required when called:    6
 10909 ;; This function calls:
 10910 ;;		Nothing
 10911 ;; This function is called by:
 10912 ;;		__doprnt
 10913 ;; This function uses a non-reentrant model
 10914 ;;
 10915                           
 10916                           	psect	text46
 10917  003174                     __ptext46:
 10918                           	opt stack 0
 10919  003174                     ___lwmod:
 10920                           	opt stack 19
 10921                           
 10922                           ; BSR set to: 0
 10923                           ;incstack = 0
 10924  003174  0100               	movlb	0	; () banked
 10925  003176  5189               	movf	___lwmod@divisor& (0+255),w,b
 10926  003178  0100               	movlb	0	; () banked
 10927  00317A  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 10928  00317C  B4D8               	btfsc	status,2,c
 10929  00317E  D026               	goto	l1090
 10930                           
 10931                           ; BSR set to: 0
 10932  003180  0E01               	movlw	1
 10933  003182  0100               	movlb	0	; () banked
 10934  003184  6F8B               	movwf	___lwmod@counter& (0+255),b
 10935  003186  D006               	goto	l3387
 10936  003188                     l3385:
 10937                           
 10938                           ; BSR set to: 0
 10939  003188  0100               	movlb	0	; () banked
 10940  00318A  90D8               	bcf	status,0,c
 10941  00318C  3789               	rlcf	___lwmod@divisor& (0+255),f,b
 10942  00318E  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 10943  003190  0100               	movlb	0	; () banked
 10944  003192  2B8B               	incf	___lwmod@counter& (0+255),f,b
 10945  003194                     l3387:
 10946                           
 10947                           ; BSR set to: 0
 10948  003194  0100               	movlb	0	; () banked
 10949  003196  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 10950  003198  D7F7               	goto	l3385
 10951  00319A                     l3389:
 10952                           
 10953                           ; BSR set to: 0
 10954  00319A  0100               	movlb	0	; () banked
 10955  00319C  5189               	movf	___lwmod@divisor& (0+255),w,b
 10956  00319E  0100               	movlb	0	; () banked
 10957  0031A0  5D87               	subwf	___lwmod@dividend& (0+255),w,b
 10958  0031A2  0100               	movlb	0	; () banked
 10959  0031A4  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10960  0031A6  0100               	movlb	0	; () banked
 10961  0031A8  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 10962  0031AA  A0D8               	btfss	status,0,c
 10963  0031AC  D008               	goto	l3393
 10964                           
 10965                           ; BSR set to: 0
 10966  0031AE  0100               	movlb	0	; () banked
 10967  0031B0  5189               	movf	___lwmod@divisor& (0+255),w,b
 10968  0031B2  0100               	movlb	0	; () banked
 10969  0031B4  5F87               	subwf	___lwmod@dividend& (0+255),f,b
 10970  0031B6  0100               	movlb	0	; () banked
 10971  0031B8  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
 10972  0031BA  0100               	movlb	0	; () banked
 10973  0031BC  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 10974  0031BE                     l3393:
 10975                           
 10976                           ; BSR set to: 0
 10977  0031BE  0100               	movlb	0	; () banked
 10978  0031C0  90D8               	bcf	status,0,c
 10979  0031C2  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 10980  0031C4  3389               	rrcf	___lwmod@divisor& (0+255),f,b
 10981                           
 10982                           ; BSR set to: 0
 10983  0031C6  0100               	movlb	0	; () banked
 10984  0031C8  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
 10985  0031CA  D7E7               	goto	l3389
 10986  0031CC                     l1090:
 10987                           
 10988                           ; BSR set to: 0
 10989  0031CC  C087  F087         	movff	___lwmod@dividend,?___lwmod
 10990  0031D0  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
 10991                           
 10992                           ; BSR set to: 0
 10993  0031D4  0012               	return		;funcret
 10994  0031D6                     __end_of___lwmod:
 10995                           	opt stack 0
 10996                           tosu	equ	0xFFF
 10997                           tosh	equ	0xFFE
 10998                           tosl	equ	0xFFD
 10999                           pclath	equ	0xFFA
 11000                           tblptru	equ	0xFF8
 11001                           tblptrh	equ	0xFF7
 11002                           tblptrl	equ	0xFF6
 11003                           tablat	equ	0xFF5
 11004                           prodh	equ	0xFF4
 11005                           prodl	equ	0xFF3
 11006                           intcon	equ	0xFF2
 11007                           intcon2	equ	0xFF1
 11008                           postinc0	equ	0xFEE
 11009                           wreg	equ	0xFE8
 11010                           indf1	equ	0xFE7
 11011                           postinc1	equ	0xFE6
 11012                           postdec1	equ	0xFE5
 11013                           fsr1h	equ	0xFE2
 11014                           fsr1l	equ	0xFE1
 11015                           indf2	equ	0xFDF
 11016                           postinc2	equ	0xFDE
 11017                           postdec2	equ	0xFDD
 11018                           fsr2h	equ	0xFDA
 11019                           fsr2l	equ	0xFD9
 11020                           status	equ	0xFD8
 11021                           
 11022 ;; *************** function ___lwdiv *****************
 11023 ;; Defined at:
 11024 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 11025 ;; Parameters:    Size  Location     Type
 11026 ;;  dividend        2    0[BANK0 ] unsigned int 
 11027 ;;  divisor         2    2[BANK0 ] unsigned int 
 11028 ;; Auto vars:     Size  Location     Type
 11029 ;;  quotient        2    4[BANK0 ] unsigned int 
 11030 ;;  counter         1    6[BANK0 ] unsigned char 
 11031 ;; Return value:  Size  Location     Type
 11032 ;;                  2    0[BANK0 ] unsigned int 
 11033 ;; Registers used:
 11034 ;;		wreg, status,2, status,0
 11035 ;; Tracked objects:
 11036 ;;		On entry : 0/0
 11037 ;;		On exit  : 0/0
 11038 ;;		Unchanged: 0/0
 11039 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11040 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11041 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11042 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11043 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11044 ;;Total ram usage:        7 bytes
 11045 ;; Hardware stack levels used:    1
 11046 ;; Hardware stack levels required when called:    6
 11047 ;; This function calls:
 11048 ;;		Nothing
 11049 ;; This function is called by:
 11050 ;;		__doprnt
 11051 ;; This function uses a non-reentrant model
 11052 ;;
 11053                           
 11054                           	psect	text47
 11055  002EE6                     __ptext47:
 11056                           	opt stack 0
 11057  002EE6                     ___lwdiv:
 11058                           	opt stack 19
 11059                           
 11060                           ; BSR set to: 0
 11061                           ;incstack = 0
 11062  002EE6  0E00               	movlw	0
 11063  002EE8  0100               	movlb	0	; () banked
 11064  002EEA  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
 11065  002EEC  0E00               	movlw	0
 11066  002EEE  6F84               	movwf	___lwdiv@quotient& (0+255),b
 11067                           
 11068                           ; BSR set to: 0
 11069  002EF0  0100               	movlb	0	; () banked
 11070  002EF2  5182               	movf	___lwdiv@divisor& (0+255),w,b
 11071  002EF4  0100               	movlb	0	; () banked
 11072  002EF6  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 11073  002EF8  B4D8               	btfsc	status,2,c
 11074  002EFA  D02C               	goto	l1080
 11075                           
 11076                           ; BSR set to: 0
 11077  002EFC  0E01               	movlw	1
 11078  002EFE  0100               	movlb	0	; () banked
 11079  002F00  6F86               	movwf	___lwdiv@counter& (0+255),b
 11080  002F02  D006               	goto	l3367
 11081  002F04                     l3365:
 11082                           
 11083                           ; BSR set to: 0
 11084  002F04  0100               	movlb	0	; () banked
 11085  002F06  90D8               	bcf	status,0,c
 11086  002F08  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
 11087  002F0A  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 11088  002F0C  0100               	movlb	0	; () banked
 11089  002F0E  2B86               	incf	___lwdiv@counter& (0+255),f,b
 11090  002F10                     l3367:
 11091                           
 11092                           ; BSR set to: 0
 11093  002F10  0100               	movlb	0	; () banked
 11094  002F12  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 11095  002F14  D7F7               	goto	l3365
 11096  002F16                     l3369:
 11097                           
 11098                           ; BSR set to: 0
 11099  002F16  0100               	movlb	0	; () banked
 11100  002F18  90D8               	bcf	status,0,c
 11101  002F1A  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
 11102  002F1C  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 11103                           
 11104                           ; BSR set to: 0
 11105  002F1E  0100               	movlb	0	; () banked
 11106  002F20  5182               	movf	___lwdiv@divisor& (0+255),w,b
 11107  002F22  0100               	movlb	0	; () banked
 11108  002F24  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
 11109  002F26  0100               	movlb	0	; () banked
 11110  002F28  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 11111  002F2A  0100               	movlb	0	; () banked
 11112  002F2C  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 11113  002F2E  A0D8               	btfss	status,0,c
 11114  002F30  D00A               	goto	l3377
 11115                           
 11116                           ; BSR set to: 0
 11117  002F32  0100               	movlb	0	; () banked
 11118  002F34  5182               	movf	___lwdiv@divisor& (0+255),w,b
 11119  002F36  0100               	movlb	0	; () banked
 11120  002F38  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
 11121  002F3A  0100               	movlb	0	; () banked
 11122  002F3C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 11123  002F3E  0100               	movlb	0	; () banked
 11124  002F40  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 11125                           
 11126                           ; BSR set to: 0
 11127  002F42  0100               	movlb	0	; () banked
 11128  002F44  8184               	bsf	___lwdiv@quotient& (0+255),0,b
 11129  002F46                     l3377:
 11130                           
 11131                           ; BSR set to: 0
 11132  002F46  0100               	movlb	0	; () banked
 11133  002F48  90D8               	bcf	status,0,c
 11134  002F4A  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 11135  002F4C  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
 11136                           
 11137                           ; BSR set to: 0
 11138  002F4E  0100               	movlb	0	; () banked
 11139  002F50  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
 11140  002F52  D7E1               	goto	l3369
 11141  002F54                     l1080:
 11142                           
 11143                           ; BSR set to: 0
 11144  002F54  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
 11145  002F58  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
 11146                           
 11147                           ; BSR set to: 0
 11148  002F5C  0012               	return		;funcret
 11149  002F5E                     __end_of___lwdiv:
 11150                           	opt stack 0
 11151                           tosu	equ	0xFFF
 11152                           tosh	equ	0xFFE
 11153                           tosl	equ	0xFFD
 11154                           pclath	equ	0xFFA
 11155                           tblptru	equ	0xFF8
 11156                           tblptrh	equ	0xFF7
 11157                           tblptrl	equ	0xFF6
 11158                           tablat	equ	0xFF5
 11159                           prodh	equ	0xFF4
 11160                           prodl	equ	0xFF3
 11161                           intcon	equ	0xFF2
 11162                           intcon2	equ	0xFF1
 11163                           postinc0	equ	0xFEE
 11164                           wreg	equ	0xFE8
 11165                           indf1	equ	0xFE7
 11166                           postinc1	equ	0xFE6
 11167                           postdec1	equ	0xFE5
 11168                           fsr1h	equ	0xFE2
 11169                           fsr1l	equ	0xFE1
 11170                           indf2	equ	0xFDF
 11171                           postinc2	equ	0xFDE
 11172                           postdec2	equ	0xFDD
 11173                           fsr2h	equ	0xFDA
 11174                           fsr2l	equ	0xFD9
 11175                           status	equ	0xFD8
 11176                           
 11177 ;; *************** function _lcdInst *****************
 11178 ;; Defined at:
 11179 ;;		line 25 in file "lcd.c"
 11180 ;; Parameters:    Size  Location     Type
 11181 ;;  data            1    wreg     unsigned char 
 11182 ;; Auto vars:     Size  Location     Type
 11183 ;;  data            1    2[BANK0 ] unsigned char 
 11184 ;; Return value:  Size  Location     Type
 11185 ;;                  1    wreg      void 
 11186 ;; Registers used:
 11187 ;;		wreg, status,2, status,0, cstack
 11188 ;; Tracked objects:
 11189 ;;		On entry : 0/0
 11190 ;;		On exit  : 0/0
 11191 ;;		Unchanged: 0/0
 11192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11194 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11196 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11197 ;;Total ram usage:        1 bytes
 11198 ;; Hardware stack levels used:    1
 11199 ;; Hardware stack levels required when called:    7
 11200 ;; This function calls:
 11201 ;;		_lcdNibble
 11202 ;; This function is called by:
 11203 ;;		_printTime
 11204 ;;		_displayMainProgramLcdScreen
 11205 ;;		_update_eeprom_screen_state
 11206 ;;		_update_past_run_screen_state
 11207 ;;		_operation
 11208 ;;		_initializeLcdSettings
 11209 ;;		_lcdClear
 11210 ;; This function uses a non-reentrant model
 11211 ;;
 11212                           
 11213                           	psect	text48
 11214  00384E                     __ptext48:
 11215                           	opt stack 0
 11216  00384E                     _lcdInst:
 11217                           	opt stack 20
 11218                           
 11219                           ; BSR set to: 0
 11220                           ;incstack = 0
 11221                           ;lcdInst@data stored from wreg
 11222  00384E  0100               	movlb	0	; () banked
 11223  003850  6F82               	movwf	lcdInst@data& (0+255),b
 11224                           
 11225                           ;lcd.c: 26: LATDbits.LATD2 = 0;
 11226  003852  948C               	bcf	3980,2,c	;volatile
 11227                           
 11228                           ;lcd.c: 27: lcdNibble(data);
 11229  003854  0100               	movlb	0	; () banked
 11230  003856  5182               	movf	lcdInst@data& (0+255),w,b
 11231  003858  EC52  F018         	call	_lcdNibble
 11232  00385C  0012               	return		;funcret
 11233  00385E                     __end_of_lcdInst:
 11234                           	opt stack 0
 11235                           tosu	equ	0xFFF
 11236                           tosh	equ	0xFFE
 11237                           tosl	equ	0xFFD
 11238                           pclath	equ	0xFFA
 11239                           tblptru	equ	0xFF8
 11240                           tblptrh	equ	0xFF7
 11241                           tblptrl	equ	0xFF6
 11242                           tablat	equ	0xFF5
 11243                           prodh	equ	0xFF4
 11244                           prodl	equ	0xFF3
 11245                           intcon	equ	0xFF2
 11246                           intcon2	equ	0xFF1
 11247                           postinc0	equ	0xFEE
 11248                           wreg	equ	0xFE8
 11249                           indf1	equ	0xFE7
 11250                           postinc1	equ	0xFE6
 11251                           postdec1	equ	0xFE5
 11252                           fsr1h	equ	0xFE2
 11253                           fsr1l	equ	0xFE1
 11254                           indf2	equ	0xFDF
 11255                           postinc2	equ	0xFDE
 11256                           postdec2	equ	0xFDD
 11257                           fsr2h	equ	0xFDA
 11258                           fsr2l	equ	0xFD9
 11259                           status	equ	0xFD8
 11260                           
 11261 ;; *************** function _lcdNibble *****************
 11262 ;; Defined at:
 11263 ;;		line 43 in file "lcd.c"
 11264 ;; Parameters:    Size  Location     Type
 11265 ;;  data            1    wreg     unsigned char 
 11266 ;; Auto vars:     Size  Location     Type
 11267 ;;  data            1    1[BANK0 ] unsigned char 
 11268 ;;  temp            1    0[BANK0 ] unsigned char 
 11269 ;; Return value:  Size  Location     Type
 11270 ;;                  1    wreg      void 
 11271 ;; Registers used:
 11272 ;;		wreg, status,2, status,0
 11273 ;; Tracked objects:
 11274 ;;		On entry : 0/0
 11275 ;;		On exit  : 0/0
 11276 ;;		Unchanged: 0/0
 11277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11279 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11281 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11282 ;;Total ram usage:        2 bytes
 11283 ;; Hardware stack levels used:    1
 11284 ;; Hardware stack levels required when called:    6
 11285 ;; This function calls:
 11286 ;;		Nothing
 11287 ;; This function is called by:
 11288 ;;		_lcdInst
 11289 ;;		_putch
 11290 ;; This function uses a non-reentrant model
 11291 ;;
 11292                           
 11293                           	psect	text49
 11294  0030A4                     __ptext49:
 11295                           	opt stack 0
 11296  0030A4                     _lcdNibble:
 11297                           	opt stack 20
 11298                           
 11299                           ;incstack = 0
 11300                           ;lcdNibble@data stored from wreg
 11301  0030A4  0100               	movlb	0	; () banked
 11302  0030A6  6F81               	movwf	lcdNibble@data& (0+255),b
 11303                           
 11304                           ;lcd.c: 45: char temp = data & 0xF0;
 11305  0030A8  0100               	movlb	0	; () banked
 11306  0030AA  5181               	movf	lcdNibble@data& (0+255),w,b
 11307  0030AC  0BF0               	andlw	240
 11308  0030AE  0100               	movlb	0	; () banked
 11309  0030B0  6F80               	movwf	lcdNibble@temp& (0+255),b
 11310                           
 11311                           ;lcd.c: 46: LATD = LATD & 0x0F;
 11312  0030B2  508C               	movf	3980,w,c	;volatile
 11313  0030B4  0B0F               	andlw	15
 11314  0030B6  6E8C               	movwf	3980,c	;volatile
 11315                           
 11316                           ;lcd.c: 47: LATD = temp | LATD;
 11317  0030B8  0100               	movlb	0	; () banked
 11318  0030BA  5180               	movf	lcdNibble@temp& (0+255),w,b
 11319  0030BC  108C               	iorwf	3980,w,c	;volatile
 11320  0030BE  6E8C               	movwf	3980,c	;volatile
 11321                           
 11322                           ; BSR set to: 0
 11323                           ;lcd.c: 49: LATDbits.LATD3 = 0;
 11324  0030C0  968C               	bcf	3980,3,c	;volatile
 11325                           
 11326                           ; BSR set to: 0
 11327                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
 11328  0030C2  0E10               	movlw	16
 11329  0030C4                     u9677:
 11330  0030C4  2EE8               	decfsz	wreg,f,c
 11331  0030C6  D7FE               	bra	u9677
 11332  0030C8  D000               	nop2	
 11333                           
 11334                           ;lcd.c: 51: LATDbits.LATD3 = 1;
 11335  0030CA  868C               	bsf	3980,3,c	;volatile
 11336                           
 11337                           ;lcd.c: 52: _delay((unsigned long)((25)*(8000000/4000000.0)));
 11338  0030CC  0E10               	movlw	16
 11339  0030CE                     u9687:
 11340  0030CE  2EE8               	decfsz	wreg,f,c
 11341  0030D0  D7FE               	bra	u9687
 11342  0030D2  D000               	nop2	
 11343                           
 11344                           ;lcd.c: 54: data = data << 4;
 11345  0030D4  0100               	movlb	0	; () banked
 11346  0030D6  3981               	swapf	lcdNibble@data& (0+255),w,b
 11347  0030D8  0BF0               	andlw	240
 11348  0030DA  0100               	movlb	0	; () banked
 11349  0030DC  6F81               	movwf	lcdNibble@data& (0+255),b
 11350                           
 11351                           ;lcd.c: 56: temp = data & 0xF0;
 11352  0030DE  0100               	movlb	0	; () banked
 11353  0030E0  5181               	movf	lcdNibble@data& (0+255),w,b
 11354  0030E2  0BF0               	andlw	240
 11355  0030E4  0100               	movlb	0	; () banked
 11356  0030E6  6F80               	movwf	lcdNibble@temp& (0+255),b
 11357                           
 11358                           ;lcd.c: 57: LATD = LATD & 0x0F;
 11359  0030E8  508C               	movf	3980,w,c	;volatile
 11360  0030EA  0B0F               	andlw	15
 11361  0030EC  6E8C               	movwf	3980,c	;volatile
 11362                           
 11363                           ;lcd.c: 58: LATD = temp | LATD;
 11364  0030EE  0100               	movlb	0	; () banked
 11365  0030F0  5180               	movf	lcdNibble@temp& (0+255),w,b
 11366  0030F2  108C               	iorwf	3980,w,c	;volatile
 11367  0030F4  6E8C               	movwf	3980,c	;volatile
 11368                           
 11369                           ; BSR set to: 0
 11370                           ;lcd.c: 60: LATDbits.LATD3 = 0;
 11371  0030F6  968C               	bcf	3980,3,c	;volatile
 11372                           
 11373                           ; BSR set to: 0
 11374                           ;lcd.c: 61: _delay((unsigned long)((25)*(8000000/4000000.0)));
 11375  0030F8  0E10               	movlw	16
 11376  0030FA                     u9697:
 11377  0030FA  2EE8               	decfsz	wreg,f,c
 11378  0030FC  D7FE               	bra	u9697
 11379  0030FE  D000               	nop2	
 11380                           
 11381                           ;lcd.c: 62: LATDbits.LATD3 = 1;
 11382  003100  868C               	bsf	3980,3,c	;volatile
 11383                           
 11384                           ;lcd.c: 63: _delay((unsigned long)((25)*(8000000/4000000.0)));
 11385  003102  0E10               	movlw	16
 11386  003104                     u9707:
 11387  003104  2EE8               	decfsz	wreg,f,c
 11388  003106  D7FE               	bra	u9707
 11389  003108  D000               	nop2	
 11390  00310A  0012               	return		;funcret
 11391  00310C                     __end_of_lcdNibble:
 11392                           	opt stack 0
 11393                           tosu	equ	0xFFF
 11394                           tosh	equ	0xFFE
 11395                           tosl	equ	0xFFD
 11396                           pclath	equ	0xFFA
 11397                           tblptru	equ	0xFF8
 11398                           tblptrh	equ	0xFF7
 11399                           tblptrl	equ	0xFF6
 11400                           tablat	equ	0xFF5
 11401                           prodh	equ	0xFF4
 11402                           prodl	equ	0xFF3
 11403                           intcon	equ	0xFF2
 11404                           intcon2	equ	0xFF1
 11405                           postinc0	equ	0xFEE
 11406                           wreg	equ	0xFE8
 11407                           indf1	equ	0xFE7
 11408                           postinc1	equ	0xFE6
 11409                           postdec1	equ	0xFE5
 11410                           fsr1h	equ	0xFE2
 11411                           fsr1l	equ	0xFE1
 11412                           indf2	equ	0xFDF
 11413                           postinc2	equ	0xFDE
 11414                           postdec2	equ	0xFDD
 11415                           fsr2h	equ	0xFDA
 11416                           fsr2l	equ	0xFD9
 11417                           status	equ	0xFD8
 11418                           
 11419 ;; *************** function _getPressedKeypadKey *****************
 11420 ;; Defined at:
 11421 ;;		line 406 in file "main.c"
 11422 ;; Parameters:    Size  Location     Type
 11423 ;;		None
 11424 ;; Auto vars:     Size  Location     Type
 11425 ;;  keypress        1    0[BANK0 ] unsigned char 
 11426 ;; Return value:  Size  Location     Type
 11427 ;;                  1    wreg      unsigned char 
 11428 ;; Registers used:
 11429 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 11430 ;; Tracked objects:
 11431 ;;		On entry : 0/0
 11432 ;;		On exit  : 0/0
 11433 ;;		Unchanged: 0/0
 11434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11438 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11439 ;;Total ram usage:        1 bytes
 11440 ;; Hardware stack levels used:    1
 11441 ;; Hardware stack levels required when called:    6
 11442 ;; This function calls:
 11443 ;;		Nothing
 11444 ;; This function is called by:
 11445 ;;		_main
 11446 ;;		_operation
 11447 ;;		_EEPROM
 11448 ;;		_past_run_access
 11449 ;; This function uses a non-reentrant model
 11450 ;;
 11451                           
 11452                           	psect	text50
 11453  00364A                     __ptext50:
 11454                           	opt stack 0
 11455  00364A                     _getPressedKeypadKey:
 11456                           	opt stack 24
 11457  00364A                     l229:
 11458  00364A  A281               	btfss	3969,1,c	;volatile
 11459  00364C  D7FE               	goto	l229
 11460                           
 11461                           ;main.c: 408: unsigned char keypress = (PORTB & 0xF0)>>4;
 11462  00364E  3881               	swapf	3969,w,c	;volatile
 11463  003650  0B0F               	andlw	15
 11464  003652  0B0F               	andlw	15
 11465  003654  0100               	movlb	0	; () banked
 11466  003656  6F80               	movwf	getPressedKeypadKey@keypress& (0+255),b
 11467  003658                     l232:
 11468  003658  B281               	btfsc	3969,1,c	;volatile
 11469  00365A  D7FE               	goto	l232
 11470                           
 11471                           ;main.c: 410: }
 11472                           ;main.c: 411: __nop();
 11473  00365C  F000               	nop	
 11474                           
 11475                           ;main.c: 412: __nop();
 11476  00365E  F000               	nop	
 11477                           
 11478                           ;main.c: 413: return keys[keypress];
 11479  003660  0100               	movlb	0	; () banked
 11480  003662  5180               	movf	getPressedKeypadKey@keypress& (0+255),w,b
 11481  003664  0D01               	mullw	1
 11482  003666  0E31               	movlw	low _keys
 11483  003668  24F3               	addwf	prodl,w,c
 11484  00366A  6EF6               	movwf	tblptrl,c
 11485  00366C  0EFE               	movlw	high _keys
 11486  00366E  20F4               	addwfc	prodh,w,c
 11487  003670  6EF7               	movwf	tblptrh,c
 11488  003672                     	if	1	;There are 3 active tblptr bytes
 11489  003672  6AF8               	clrf	tblptru,c
 11490  003674  0E00               	movlw	low (__mediumconst shr (0+16))
 11491  003676  22F8               	addwfc	tblptru,f,c
 11492  003678                     	endif
 11493  003678  0008               	tblrd		*
 11494  00367A  50F5               	movf	tablat,w,c
 11495  00367C  0012               	return	
 11496  00367E                     __end_of_getPressedKeypadKey:
 11497                           	opt stack 0
 11498                           tosu	equ	0xFFF
 11499                           tosh	equ	0xFFE
 11500                           tosl	equ	0xFFD
 11501                           pclath	equ	0xFFA
 11502                           tblptru	equ	0xFF8
 11503                           tblptrh	equ	0xFF7
 11504                           tblptrl	equ	0xFF6
 11505                           tablat	equ	0xFF5
 11506                           prodh	equ	0xFF4
 11507                           prodl	equ	0xFF3
 11508                           intcon	equ	0xFF2
 11509                           intcon2	equ	0xFF1
 11510                           postinc0	equ	0xFEE
 11511                           wreg	equ	0xFE8
 11512                           indf1	equ	0xFE7
 11513                           postinc1	equ	0xFE6
 11514                           postdec1	equ	0xFE5
 11515                           fsr1h	equ	0xFE2
 11516                           fsr1l	equ	0xFE1
 11517                           indf2	equ	0xFDF
 11518                           postinc2	equ	0xFDE
 11519                           postdec2	equ	0xFDD
 11520                           fsr2h	equ	0xFDA
 11521                           fsr2l	equ	0xFD9
 11522                           status	equ	0xFD8
 11523                           
 11524 ;; *************** function _cycleProgramScreenRight *****************
 11525 ;; Defined at:
 11526 ;;		line 444 in file "main.c"
 11527 ;; Parameters:    Size  Location     Type
 11528 ;;  programScree    2    0[BANK0 ] PTR int 
 11529 ;;		 -> past_run_access@screen_state(2), EEPROM@screen_state(2), currentMainProgramScreen(2), 
 11530 ;;  min             2    2[BANK0 ] int 
 11531 ;;  max             2    4[BANK0 ] int 
 11532 ;; Auto vars:     Size  Location     Type
 11533 ;;		None
 11534 ;; Return value:  Size  Location     Type
 11535 ;;                  1    wreg      void 
 11536 ;; Registers used:
 11537 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11538 ;; Tracked objects:
 11539 ;;		On entry : 0/0
 11540 ;;		On exit  : 0/0
 11541 ;;		Unchanged: 0/0
 11542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11543 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11545 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11546 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11547 ;;Total ram usage:        8 bytes
 11548 ;; Hardware stack levels used:    1
 11549 ;; Hardware stack levels required when called:    6
 11550 ;; This function calls:
 11551 ;;		Nothing
 11552 ;; This function is called by:
 11553 ;;		_main
 11554 ;;		_EEPROM
 11555 ;;		_past_run_access
 11556 ;; This function uses a non-reentrant model
 11557 ;;
 11558                           
 11559                           	psect	text51
 11560  003532                     __ptext51:
 11561                           	opt stack 0
 11562  003532                     _cycleProgramScreenRight:
 11563                           	opt stack 22
 11564                           
 11565                           ;main.c: 445: if (*programScreen == max){
 11566                           
 11567                           ; BSR set to: 0
 11568                           ;incstack = 0
 11569  003532  C080  FFD9         	movff	cycleProgramScreenRight@programScreen,fsr2l
 11570  003536  C081  FFDA         	movff	cycleProgramScreenRight@programScreen+1,fsr2h
 11571  00353A  0100               	movlb	0	; () banked
 11572  00353C  5184               	movf	cycleProgramScreenRight@max& (0+255),w,b
 11573  00353E  18DE               	xorwf	postinc2,w,c
 11574  003540  E10E               	bnz	l3721
 11575  003542  0100               	movlb	0	; () banked
 11576  003544  5185               	movf	(cycleProgramScreenRight@max+1)& (0+255),w,b
 11577  003546  18DE               	xorwf	postinc2,w,c
 11578  003548  A4D8               	btfss	status,2,c
 11579  00354A  D009               	goto	l3721
 11580                           
 11581                           ; BSR set to: 0
 11582                           ;main.c: 446: *programScreen = min;
 11583  00354C  C080  FFD9         	movff	cycleProgramScreenRight@programScreen,fsr2l
 11584  003550  C081  FFDA         	movff	cycleProgramScreenRight@programScreen+1,fsr2h
 11585  003554  C082  FFDE         	movff	cycleProgramScreenRight@min,postinc2
 11586  003558  C083  FFDD         	movff	cycleProgramScreenRight@min+1,postdec2
 11587                           
 11588                           ;main.c: 447: }else{
 11589  00355C  0012               	return	
 11590  00355E                     l3721:
 11591                           
 11592                           ; BSR set to: 0
 11593                           ;main.c: 448: *programScreen += 1;
 11594  00355E  C080  FFD9         	movff	cycleProgramScreenRight@programScreen,fsr2l
 11595  003562  C081  FFDA         	movff	cycleProgramScreenRight@programScreen+1,fsr2h
 11596  003566  2ADE               	incf	postinc2,f,c
 11597  003568  0E00               	movlw	0
 11598  00356A  22DD               	addwfc	postdec2,f,c
 11599  00356C  0012               	return	
 11600  00356E                     __end_of_cycleProgramScreenRight:
 11601                           	opt stack 0
 11602                           tosu	equ	0xFFF
 11603                           tosh	equ	0xFFE
 11604                           tosl	equ	0xFFD
 11605                           pclath	equ	0xFFA
 11606                           tblptru	equ	0xFF8
 11607                           tblptrh	equ	0xFF7
 11608                           tblptrl	equ	0xFF6
 11609                           tablat	equ	0xFF5
 11610                           prodh	equ	0xFF4
 11611                           prodl	equ	0xFF3
 11612                           intcon	equ	0xFF2
 11613                           intcon2	equ	0xFF1
 11614                           postinc0	equ	0xFEE
 11615                           wreg	equ	0xFE8
 11616                           indf1	equ	0xFE7
 11617                           postinc1	equ	0xFE6
 11618                           postdec1	equ	0xFE5
 11619                           fsr1h	equ	0xFE2
 11620                           fsr1l	equ	0xFE1
 11621                           indf2	equ	0xFDF
 11622                           postinc2	equ	0xFDE
 11623                           postdec2	equ	0xFDD
 11624                           fsr2h	equ	0xFDA
 11625                           fsr2l	equ	0xFD9
 11626                           status	equ	0xFD8
 11627                           
 11628 ;; *************** function _cycleProgramScreenLeft *****************
 11629 ;; Defined at:
 11630 ;;		line 436 in file "main.c"
 11631 ;; Parameters:    Size  Location     Type
 11632 ;;  programScree    2    0[BANK0 ] PTR int 
 11633 ;;		 -> past_run_access@screen_state(2), EEPROM@screen_state(2), currentMainProgramScreen(2), 
 11634 ;;  min             2    2[BANK0 ] int 
 11635 ;;  max             2    4[BANK0 ] int 
 11636 ;; Auto vars:     Size  Location     Type
 11637 ;;		None
 11638 ;; Return value:  Size  Location     Type
 11639 ;;                  1    wreg      void 
 11640 ;; Registers used:
 11641 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11642 ;; Tracked objects:
 11643 ;;		On entry : 0/0
 11644 ;;		On exit  : 0/0
 11645 ;;		Unchanged: 0/0
 11646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11647 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11649 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11650 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11651 ;;Total ram usage:        8 bytes
 11652 ;; Hardware stack levels used:    1
 11653 ;; Hardware stack levels required when called:    6
 11654 ;; This function calls:
 11655 ;;		Nothing
 11656 ;; This function is called by:
 11657 ;;		_main
 11658 ;;		_EEPROM
 11659 ;;		_past_run_access
 11660 ;; This function uses a non-reentrant model
 11661 ;;
 11662                           
 11663                           	psect	text52
 11664  00356E                     __ptext52:
 11665                           	opt stack 0
 11666  00356E                     _cycleProgramScreenLeft:
 11667                           	opt stack 22
 11668                           
 11669                           ;main.c: 437: if (*programScreen == min){
 11670                           
 11671                           ; BSR set to: 0
 11672                           ;incstack = 0
 11673  00356E  C080  FFD9         	movff	cycleProgramScreenLeft@programScreen,fsr2l
 11674  003572  C081  FFDA         	movff	cycleProgramScreenLeft@programScreen+1,fsr2h
 11675  003576  0100               	movlb	0	; () banked
 11676  003578  5182               	movf	cycleProgramScreenLeft@min& (0+255),w,b
 11677  00357A  18DE               	xorwf	postinc2,w,c
 11678  00357C  E10E               	bnz	l3715
 11679  00357E  0100               	movlb	0	; () banked
 11680  003580  5183               	movf	(cycleProgramScreenLeft@min+1)& (0+255),w,b
 11681  003582  18DE               	xorwf	postinc2,w,c
 11682  003584  A4D8               	btfss	status,2,c
 11683  003586  D009               	goto	l3715
 11684                           
 11685                           ; BSR set to: 0
 11686                           ;main.c: 438: *programScreen = max;
 11687  003588  C080  FFD9         	movff	cycleProgramScreenLeft@programScreen,fsr2l
 11688  00358C  C081  FFDA         	movff	cycleProgramScreenLeft@programScreen+1,fsr2h
 11689  003590  C084  FFDE         	movff	cycleProgramScreenLeft@max,postinc2
 11690  003594  C085  FFDD         	movff	cycleProgramScreenLeft@max+1,postdec2
 11691                           
 11692                           ;main.c: 439: }else{
 11693  003598  0012               	return	
 11694  00359A                     l3715:
 11695                           
 11696                           ; BSR set to: 0
 11697                           ;main.c: 440: *programScreen -= 1;
 11698  00359A  C080  FFD9         	movff	cycleProgramScreenLeft@programScreen,fsr2l
 11699  00359E  C081  FFDA         	movff	cycleProgramScreenLeft@programScreen+1,fsr2h
 11700  0035A2  06DE               	decf	postinc2,f,c
 11701  0035A4  0E00               	movlw	0
 11702  0035A6  5ADD               	subwfb	postdec2,f,c
 11703  0035A8  0012               	return	
 11704  0035AA                     __end_of_cycleProgramScreenLeft:
 11705                           	opt stack 0
 11706                           tosu	equ	0xFFF
 11707                           tosh	equ	0xFFE
 11708                           tosl	equ	0xFFD
 11709                           pclath	equ	0xFFA
 11710                           tblptru	equ	0xFF8
 11711                           tblptrh	equ	0xFF7
 11712                           tblptrl	equ	0xFF6
 11713                           tablat	equ	0xFF5
 11714                           prodh	equ	0xFF4
 11715                           prodl	equ	0xFF3
 11716                           intcon	equ	0xFF2
 11717                           intcon2	equ	0xFF1
 11718                           postinc0	equ	0xFEE
 11719                           wreg	equ	0xFE8
 11720                           indf1	equ	0xFE7
 11721                           postinc1	equ	0xFE6
 11722                           postdec1	equ	0xFE5
 11723                           fsr1h	equ	0xFE2
 11724                           fsr1l	equ	0xFE1
 11725                           indf2	equ	0xFDF
 11726                           postinc2	equ	0xFDE
 11727                           postdec2	equ	0xFDD
 11728                           fsr2h	equ	0xFDA
 11729                           fsr2l	equ	0xFD9
 11730                           status	equ	0xFD8
 11731                           
 11732 ;; *************** function _getEEPROM *****************
 11733 ;; Defined at:
 11734 ;;		line 941 in file "main.c"
 11735 ;; Parameters:    Size  Location     Type
 11736 ;;  num             2    8[BANK0 ] int 
 11737 ;; Auto vars:     Size  Location     Type
 11738 ;;  i               2   14[BANK0 ] int 
 11739 ;; Return value:  Size  Location     Type
 11740 ;;                  1    wreg      void 
 11741 ;; Registers used:
 11742 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11743 ;; Tracked objects:
 11744 ;;		On entry : 0/0
 11745 ;;		On exit  : 0/0
 11746 ;;		Unchanged: 0/0
 11747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11748 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11749 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11750 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11751 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11752 ;;Total ram usage:        8 bytes
 11753 ;; Hardware stack levels used:    1
 11754 ;; Hardware stack levels required when called:    7
 11755 ;; This function calls:
 11756 ;;		_Eeprom_ReadByte
 11757 ;;		___wmul
 11758 ;; This function is called by:
 11759 ;;		_EEPROM
 11760 ;; This function uses a non-reentrant model
 11761 ;;
 11762                           
 11763                           	psect	text53
 11764  001FAC                     __ptext53:
 11765                           	opt stack 0
 11766  001FAC                     _getEEPROM:
 11767                           	opt stack 21
 11768                           
 11769                           ;main.c: 942: int i;
 11770                           ;main.c: 943: for (i = 0; i<6; i++){
 11771                           
 11772                           ; BSR set to: 0
 11773                           ;incstack = 0
 11774  001FAC  0E00               	movlw	0
 11775  001FAE  0100               	movlb	0	; () banked
 11776  001FB0  6F8F               	movwf	(getEEPROM@i+1)& (0+255),b
 11777  001FB2  0E00               	movlw	0
 11778  001FB4  6F8E               	movwf	getEEPROM@i& (0+255),b
 11779  001FB6                     l4213:
 11780                           
 11781                           ; BSR set to: 0
 11782  001FB6  0100               	movlb	0	; () banked
 11783  001FB8  BF8F               	btfsc	(getEEPROM@i+1)& (0+255),7,b
 11784  001FBA  D008               	goto	l4217
 11785  001FBC  0100               	movlb	0	; () banked
 11786  001FBE  518F               	movf	(getEEPROM@i+1)& (0+255),w,b
 11787  001FC0  E143               	bnz	l4223
 11788  001FC2  0E06               	movlw	6
 11789  001FC4  0100               	movlb	0	; () banked
 11790  001FC6  5D8E               	subwf	getEEPROM@i& (0+255),w,b
 11791  001FC8  B0D8               	btfsc	status,0,c
 11792  001FCA  D03E               	goto	l4223
 11793  001FCC                     l4217:
 11794                           
 11795                           ; BSR set to: 0
 11796                           ;main.c: 944: runInfo[i] = Eeprom_ReadByte(12*i+num*200);
 11797  001FCC  C08E  F080         	movff	getEEPROM@i,___wmul@multiplier
 11798  001FD0  C08F  F081         	movff	getEEPROM@i+1,___wmul@multiplier+1
 11799  001FD4  0E00               	movlw	0
 11800  001FD6  0100               	movlb	0	; () banked
 11801  001FD8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11802  001FDA  0E0C               	movlw	12
 11803  001FDC  6F82               	movwf	___wmul@multiplicand& (0+255),b
 11804  001FDE  ECD5  F01A         	call	___wmul	;wreg free
 11805  001FE2  C080  F08A         	movff	?___wmul,??_getEEPROM
 11806  001FE6  C081  F08B         	movff	?___wmul+1,??_getEEPROM+1
 11807  001FEA  C088  F080         	movff	getEEPROM@num,___wmul@multiplier
 11808  001FEE  C089  F081         	movff	getEEPROM@num+1,___wmul@multiplier+1
 11809  001FF2  0E00               	movlw	0
 11810  001FF4  0100               	movlb	0	; () banked
 11811  001FF6  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11812  001FF8  0EC8               	movlw	200
 11813  001FFA  6F82               	movwf	___wmul@multiplicand& (0+255),b
 11814  001FFC  ECD5  F01A         	call	___wmul	;wreg free
 11815  002000  0100               	movlb	0	; () banked
 11816  002002  5180               	movf	?___wmul& (0+255),w,b
 11817  002004  0100               	movlb	0	; () banked
 11818  002006  258A               	addwf	??_getEEPROM& (0+255),w,b
 11819  002008  0100               	movlb	0	; () banked
 11820  00200A  6F86               	movwf	Eeprom_ReadByte@address& (0+255),b
 11821  00200C  0100               	movlb	0	; () banked
 11822  00200E  5181               	movf	(?___wmul+1)& (0+255),w,b
 11823  002010  0100               	movlb	0	; () banked
 11824  002012  218B               	addwfc	(??_getEEPROM+1)& (0+255),w,b
 11825  002014  0100               	movlb	0	; () banked
 11826  002016  6F87               	movwf	(Eeprom_ReadByte@address+1)& (0+255),b
 11827  002018  ECE9  F01B         	call	_Eeprom_ReadByte	;wreg free
 11828  00201C  0100               	movlb	0	; () banked
 11829  00201E  6F8C               	movwf	(??_getEEPROM+2)& (0+255),b
 11830  002020  6B8D               	clrf	(??_getEEPROM+3)& (0+255),b
 11831  002022  90D8               	bcf	status,0,c
 11832  002024  0100               	movlb	0	; () banked
 11833  002026  358E               	rlcf	getEEPROM@i& (0+255),w,b
 11834  002028  6ED9               	movwf	fsr2l,c
 11835  00202A  0100               	movlb	0	; () banked
 11836  00202C  358F               	rlcf	(getEEPROM@i+1)& (0+255),w,b
 11837  00202E  6EDA               	movwf	fsr2h,c
 11838  002030  0EF1               	movlw	low _runInfo
 11839  002032  26D9               	addwf	fsr2l,f,c
 11840  002034  0E00               	movlw	high _runInfo
 11841  002036  22DA               	addwfc	fsr2h,f,c
 11842  002038  C08C  FFDE         	movff	??_getEEPROM+2,postinc2
 11843  00203C  C08D  FFDD         	movff	??_getEEPROM+3,postdec2
 11844                           
 11845                           ; BSR set to: 0
 11846  002040  0100               	movlb	0	; () banked
 11847  002042  4B8E               	infsnz	getEEPROM@i& (0+255),f,b
 11848  002044  2B8F               	incf	(getEEPROM@i+1)& (0+255),f,b
 11849  002046  D7B7               	goto	l4213
 11850  002048                     l4223:
 11851                           
 11852                           ; BSR set to: 0
 11853                           ;main.c: 945: }
 11854                           ;main.c: 946: for (i = 0; i<7; i++){
 11855  002048  0E00               	movlw	0
 11856  00204A  0100               	movlb	0	; () banked
 11857  00204C  6F8F               	movwf	(getEEPROM@i+1)& (0+255),b
 11858  00204E  0E00               	movlw	0
 11859  002050  6F8E               	movwf	getEEPROM@i& (0+255),b
 11860  002052                     l4225:
 11861                           
 11862                           ; BSR set to: 0
 11863  002052  0100               	movlb	0	; () banked
 11864  002054  BF8F               	btfsc	(getEEPROM@i+1)& (0+255),7,b
 11865  002056  D008               	goto	l4229
 11866  002058  0100               	movlb	0	; () banked
 11867  00205A  518F               	movf	(getEEPROM@i+1)& (0+255),w,b
 11868  00205C  E140               	bnz	l435
 11869  00205E  0E07               	movlw	7
 11870  002060  0100               	movlb	0	; () banked
 11871  002062  5D8E               	subwf	getEEPROM@i& (0+255),w,b
 11872  002064  B0D8               	btfsc	status,0,c
 11873  002066  0012               	return	
 11874  002068                     l4229:
 11875                           
 11876                           ; BSR set to: 0
 11877                           ;main.c: 947: lastRunTime[i] = Eeprom_ReadByte(12*(6+i)+num*200);
 11878  002068  0EDB               	movlw	low _lastRunTime
 11879  00206A  0100               	movlb	0	; () banked
 11880  00206C  258E               	addwf	getEEPROM@i& (0+255),w,b
 11881  00206E  6ED9               	movwf	fsr2l,c
 11882  002070  0E00               	movlw	high _lastRunTime
 11883  002072  0100               	movlb	0	; () banked
 11884  002074  218F               	addwfc	(getEEPROM@i+1)& (0+255),w,b
 11885  002076  6EDA               	movwf	fsr2h,c
 11886  002078  0E06               	movlw	6
 11887  00207A  0100               	movlb	0	; () banked
 11888  00207C  258E               	addwf	getEEPROM@i& (0+255),w,b
 11889  00207E  0100               	movlb	0	; () banked
 11890  002080  6F80               	movwf	___wmul@multiplier& (0+255),b
 11891  002082  0E00               	movlw	0
 11892  002084  0100               	movlb	0	; () banked
 11893  002086  218F               	addwfc	(getEEPROM@i+1)& (0+255),w,b
 11894  002088  0100               	movlb	0	; () banked
 11895  00208A  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
 11896  00208C  0E00               	movlw	0
 11897  00208E  0100               	movlb	0	; () banked
 11898  002090  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11899  002092  0E0C               	movlw	12
 11900  002094  6F82               	movwf	___wmul@multiplicand& (0+255),b
 11901  002096  ECD5  F01A         	call	___wmul	;wreg free
 11902  00209A  C080  F08A         	movff	?___wmul,??_getEEPROM
 11903  00209E  C081  F08B         	movff	?___wmul+1,??_getEEPROM+1
 11904  0020A2  C088  F080         	movff	getEEPROM@num,___wmul@multiplier
 11905  0020A6  C089  F081         	movff	getEEPROM@num+1,___wmul@multiplier+1
 11906  0020AA  0E00               	movlw	0
 11907  0020AC  0100               	movlb	0	; () banked
 11908  0020AE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 11909  0020B0  0EC8               	movlw	200
 11910  0020B2  6F82               	movwf	___wmul@multiplicand& (0+255),b
 11911  0020B4  ECD5  F01A         	call	___wmul	;wreg free
 11912  0020B8  0100               	movlb	0	; () banked
 11913  0020BA  5180               	movf	?___wmul& (0+255),w,b
 11914  0020BC  0100               	movlb	0	; () banked
 11915  0020BE  258A               	addwf	??_getEEPROM& (0+255),w,b
 11916  0020C0  0100               	movlb	0	; () banked
 11917  0020C2  6F86               	movwf	Eeprom_ReadByte@address& (0+255),b
 11918  0020C4  0100               	movlb	0	; () banked
 11919  0020C6  5181               	movf	(?___wmul+1)& (0+255),w,b
 11920  0020C8  0100               	movlb	0	; () banked
 11921  0020CA  218B               	addwfc	(??_getEEPROM+1)& (0+255),w,b
 11922  0020CC  0100               	movlb	0	; () banked
 11923  0020CE  6F87               	movwf	(Eeprom_ReadByte@address+1)& (0+255),b
 11924  0020D0  ECE9  F01B         	call	_Eeprom_ReadByte	;wreg free
 11925  0020D4  6EDF               	movwf	indf2,c
 11926  0020D6  0100               	movlb	0	; () banked
 11927  0020D8  4B8E               	infsnz	getEEPROM@i& (0+255),f,b
 11928  0020DA  2B8F               	incf	(getEEPROM@i+1)& (0+255),f,b
 11929  0020DC  D7BA               	goto	l4225
 11930  0020DE                     l435:
 11931                           
 11932                           ; BSR set to: 0
 11933  0020DE  0012               	return		;funcret
 11934  0020E0                     __end_of_getEEPROM:
 11935                           	opt stack 0
 11936                           tosu	equ	0xFFF
 11937                           tosh	equ	0xFFE
 11938                           tosl	equ	0xFFD
 11939                           pclath	equ	0xFFA
 11940                           tblptru	equ	0xFF8
 11941                           tblptrh	equ	0xFF7
 11942                           tblptrl	equ	0xFF6
 11943                           tablat	equ	0xFF5
 11944                           prodh	equ	0xFF4
 11945                           prodl	equ	0xFF3
 11946                           intcon	equ	0xFF2
 11947                           intcon2	equ	0xFF1
 11948                           postinc0	equ	0xFEE
 11949                           wreg	equ	0xFE8
 11950                           indf1	equ	0xFE7
 11951                           postinc1	equ	0xFE6
 11952                           postdec1	equ	0xFE5
 11953                           fsr1h	equ	0xFE2
 11954                           fsr1l	equ	0xFE1
 11955                           indf2	equ	0xFDF
 11956                           postinc2	equ	0xFDE
 11957                           postdec2	equ	0xFDD
 11958                           fsr2h	equ	0xFDA
 11959                           fsr2l	equ	0xFD9
 11960                           status	equ	0xFD8
 11961                           
 11962 ;; *************** function ___wmul *****************
 11963 ;; Defined at:
 11964 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 11965 ;; Parameters:    Size  Location     Type
 11966 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11967 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11968 ;; Auto vars:     Size  Location     Type
 11969 ;;  product         2    4[BANK0 ] unsigned int 
 11970 ;; Return value:  Size  Location     Type
 11971 ;;                  2    0[BANK0 ] unsigned int 
 11972 ;; Registers used:
 11973 ;;		wreg, status,2, status,0, prodl, prodh
 11974 ;; Tracked objects:
 11975 ;;		On entry : 0/0
 11976 ;;		On exit  : 0/0
 11977 ;;		Unchanged: 0/0
 11978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11979 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11980 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11982 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11983 ;;Total ram usage:        6 bytes
 11984 ;; Hardware stack levels used:    1
 11985 ;; Hardware stack levels required when called:    6
 11986 ;; This function calls:
 11987 ;;		Nothing
 11988 ;; This function is called by:
 11989 ;;		_getCurrentTimeInSeconds
 11990 ;;		_saveEEPROM
 11991 ;;		_getEEPROM
 11992 ;;		__doprnt
 11993 ;;		_atoi
 11994 ;; This function uses a non-reentrant model
 11995 ;;
 11996                           
 11997                           	psect	text54
 11998  0035AA                     __ptext54:
 11999                           	opt stack 0
 12000  0035AA                     ___wmul:
 12001                           	opt stack 19
 12002                           
 12003                           ; BSR set to: 0
 12004                           ;incstack = 0
 12005  0035AA  0100               	movlb	0	; () banked
 12006  0035AC  5180               	movf	___wmul@multiplier& (0+255),w,b
 12007  0035AE  0100               	movlb	0	; () banked
 12008  0035B0  0382               	mulwf	___wmul@multiplicand& (0+255),b
 12009  0035B2  CFF3 F084          	movff	prodl,___wmul@product
 12010  0035B6  CFF4 F085          	movff	prodh,___wmul@product+1
 12011  0035BA  0100               	movlb	0	; () banked
 12012  0035BC  5180               	movf	___wmul@multiplier& (0+255),w,b
 12013  0035BE  0100               	movlb	0	; () banked
 12014  0035C0  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 12015  0035C2  50F3               	movf	prodl,w,c
 12016  0035C4  0100               	movlb	0	; () banked
 12017  0035C6  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 12018  0035C8  0100               	movlb	0	; () banked
 12019  0035CA  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 12020  0035CC  0100               	movlb	0	; () banked
 12021  0035CE  0382               	mulwf	___wmul@multiplicand& (0+255),b
 12022  0035D0  50F3               	movf	prodl,w,c
 12023  0035D2  0100               	movlb	0	; () banked
 12024  0035D4  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 12025                           
 12026                           ; BSR set to: 0
 12027  0035D6  C084  F080         	movff	___wmul@product,?___wmul
 12028  0035DA  C085  F081         	movff	___wmul@product+1,?___wmul+1
 12029  0035DE  0012               	return	
 12030  0035E0                     __end_of___wmul:
 12031                           	opt stack 0
 12032                           tosu	equ	0xFFF
 12033                           tosh	equ	0xFFE
 12034                           tosl	equ	0xFFD
 12035                           pclath	equ	0xFFA
 12036                           tblptru	equ	0xFF8
 12037                           tblptrh	equ	0xFF7
 12038                           tblptrl	equ	0xFF6
 12039                           tablat	equ	0xFF5
 12040                           prodh	equ	0xFF4
 12041                           prodl	equ	0xFF3
 12042                           intcon	equ	0xFF2
 12043                           intcon2	equ	0xFF1
 12044                           postinc0	equ	0xFEE
 12045                           wreg	equ	0xFE8
 12046                           indf1	equ	0xFE7
 12047                           postinc1	equ	0xFE6
 12048                           postdec1	equ	0xFE5
 12049                           fsr1h	equ	0xFE2
 12050                           fsr1l	equ	0xFE1
 12051                           indf2	equ	0xFDF
 12052                           postinc2	equ	0xFDE
 12053                           postdec2	equ	0xFDD
 12054                           fsr2h	equ	0xFDA
 12055                           fsr2l	equ	0xFD9
 12056                           status	equ	0xFD8
 12057                           
 12058 ;; *************** function _Eeprom_ReadByte *****************
 12059 ;; Defined at:
 12060 ;;		line 974 in file "main.c"
 12061 ;; Parameters:    Size  Location     Type
 12062 ;;  address         2    6[BANK0 ] unsigned int 
 12063 ;; Auto vars:     Size  Location     Type
 12064 ;;		None
 12065 ;; Return value:  Size  Location     Type
 12066 ;;                  1    wreg      unsigned char 
 12067 ;; Registers used:
 12068 ;;		wreg, status,2
 12069 ;; Tracked objects:
 12070 ;;		On entry : 0/0
 12071 ;;		On exit  : 0/0
 12072 ;;		Unchanged: 0/0
 12073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12074 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12077 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12078 ;;Total ram usage:        2 bytes
 12079 ;; Hardware stack levels used:    1
 12080 ;; Hardware stack levels required when called:    6
 12081 ;; This function calls:
 12082 ;;		Nothing
 12083 ;; This function is called by:
 12084 ;;		_saveEEPROM
 12085 ;;		_getEEPROM
 12086 ;; This function uses a non-reentrant model
 12087 ;;
 12088                           
 12089                           	psect	text55
 12090  0037D2                     __ptext55:
 12091                           	opt stack 0
 12092  0037D2                     _Eeprom_ReadByte:
 12093                           	opt stack 21
 12094                           
 12095                           ;main.c: 978: EEADRH = (uint8_t)(address >> 8);
 12096                           
 12097                           ; BSR set to: 0
 12098                           ;incstack = 0
 12099  0037D2  0100               	movlb	0	; () banked
 12100  0037D4  5187               	movf	(Eeprom_ReadByte@address+1)& (0+255),w,b
 12101  0037D6  6EAA               	movwf	4010,c	;volatile
 12102                           
 12103                           ; BSR set to: 0
 12104                           ;main.c: 979: EEADR = (uint8_t)address;
 12105  0037D8  C086  FFA9         	movff	Eeprom_ReadByte@address,4009	;volatile
 12106                           
 12107                           ; BSR set to: 0
 12108                           ;main.c: 981: EECON1bits.EEPGD = 0;
 12109  0037DC  9EA6               	bcf	4006,7,c	;volatile
 12110                           
 12111                           ; BSR set to: 0
 12112                           ;main.c: 982: EECON1bits.CFGS = 0;
 12113  0037DE  9CA6               	bcf	4006,6,c	;volatile
 12114                           
 12115                           ; BSR set to: 0
 12116                           ;main.c: 983: EECON1bits.RD = 1;
 12117  0037E0  80A6               	bsf	4006,0,c	;volatile
 12118  0037E2                     l449:
 12119  0037E2  B0A6               	btfsc	4006,0,c	;volatile
 12120  0037E4  D7FE               	goto	l449
 12121                           
 12122                           ;main.c: 989: return EEDATA;
 12123  0037E6  50A8               	movf	4008,w,c	;volatile
 12124  0037E8  0012               	return	
 12125  0037EA                     __end_of_Eeprom_ReadByte:
 12126                           	opt stack 0
 12127                           tosu	equ	0xFFF
 12128                           tosh	equ	0xFFE
 12129                           tosl	equ	0xFFD
 12130                           pclath	equ	0xFFA
 12131                           tblptru	equ	0xFF8
 12132                           tblptrh	equ	0xFF7
 12133                           tblptrl	equ	0xFF6
 12134                           tablat	equ	0xFF5
 12135                           prodh	equ	0xFF4
 12136                           prodl	equ	0xFF3
 12137                           intcon	equ	0xFF2
 12138                           intcon2	equ	0xFF1
 12139                           postinc0	equ	0xFEE
 12140                           wreg	equ	0xFE8
 12141                           indf1	equ	0xFE7
 12142                           postinc1	equ	0xFE6
 12143                           postdec1	equ	0xFE5
 12144                           fsr1h	equ	0xFE2
 12145                           fsr1l	equ	0xFE1
 12146                           indf2	equ	0xFDF
 12147                           postinc2	equ	0xFDE
 12148                           postdec2	equ	0xFDD
 12149                           fsr2h	equ	0xFDA
 12150                           fsr2l	equ	0xFD9
 12151                           status	equ	0xFD8
 12152                           
 12153 ;; *************** function _handler *****************
 12154 ;; Defined at:
 12155 ;;		line 14 in file "interruptHandler.c"
 12156 ;; Parameters:    Size  Location     Type
 12157 ;;		None
 12158 ;; Auto vars:     Size  Location     Type
 12159 ;;  time            3   67[COMRAM] float 
 12160 ;;  set_time        2   70[COMRAM] unsigned int 
 12161 ;; Return value:  Size  Location     Type
 12162 ;;                  1    wreg      void 
 12163 ;; Registers used:
 12164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12165 ;; Tracked objects:
 12166 ;;		On entry : 0/0
 12167 ;;		On exit  : 0/0
 12168 ;;		Unchanged: 0/0
 12169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12171 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12172 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12173 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12174 ;;Total ram usage:       19 bytes
 12175 ;; Hardware stack levels used:    1
 12176 ;; Hardware stack levels required when called:    5
 12177 ;; This function calls:
 12178 ;;		_getMotorCounterBasedOnBottlesLeft
 12179 ;;		i2___ftdiv
 12180 ;;		i2___ftmul
 12181 ;;		i2___fttol
 12182 ;;		i2_printTime
 12183 ;;		i2_updateCurrentTime
 12184 ;; This function is called by:
 12185 ;;		Interrupt level 2
 12186 ;; This function uses a non-reentrant model
 12187 ;;
 12188                           
 12189                           	psect	intcode
 12190  000008                     __pintcode:
 12191                           	opt stack 0
 12192  000008                     _handler:
 12193                           	opt stack 16
 12194                           
 12195                           ;incstack = 0
 12196  000008  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 12197  00000A  ED9B  F00E         	call	int_func,f	;refresh shadow registers
 12198                           tosu	equ	0xFFF
 12199                           tosh	equ	0xFFE
 12200                           tosl	equ	0xFFD
 12201                           pclath	equ	0xFFA
 12202                           tblptru	equ	0xFF8
 12203                           tblptrh	equ	0xFF7
 12204                           tblptrl	equ	0xFF6
 12205                           tablat	equ	0xFF5
 12206                           prodh	equ	0xFF4
 12207                           prodl	equ	0xFF3
 12208                           intcon	equ	0xFF2
 12209                           intcon2	equ	0xFF1
 12210                           postinc0	equ	0xFEE
 12211                           wreg	equ	0xFE8
 12212                           indf1	equ	0xFE7
 12213                           postinc1	equ	0xFE6
 12214                           postdec1	equ	0xFE5
 12215                           fsr1h	equ	0xFE2
 12216                           fsr1l	equ	0xFE1
 12217                           indf2	equ	0xFDF
 12218                           postinc2	equ	0xFDE
 12219                           postdec2	equ	0xFDD
 12220                           fsr2h	equ	0xFDA
 12221                           fsr2l	equ	0xFD9
 12222                           status	equ	0xFD8
 12223                           
 12224                           	psect	intcode_body
 12225  001D36                     __pintcode_body:
 12226                           	opt stack 16
 12227  001D36                     int_func:
 12228                           	opt stack 16
 12229  001D36  0006               	pop		; remove dummy address from shadow register refresh
 12230  001D38  CFFA F036          	movff	pclath,??_handler
 12231  001D3C  CFFB F037          	movff	pclatu,??_handler+1
 12232  001D40  CFE9 F038          	movff	fsr0l,??_handler+2
 12233  001D44  CFEA F039          	movff	fsr0h,??_handler+3
 12234  001D48  CFE1 F03A          	movff	fsr1l,??_handler+4
 12235  001D4C  CFE2 F03B          	movff	fsr1h,??_handler+5
 12236  001D50  CFD9 F03C          	movff	fsr2l,??_handler+6
 12237  001D54  CFDA F03D          	movff	fsr2h,??_handler+7
 12238  001D58  CFF3 F03E          	movff	prodl,??_handler+8
 12239  001D5C  CFF4 F03F          	movff	prodh,??_handler+9
 12240  001D60  CFF6 F040          	movff	tblptrl,??_handler+10
 12241  001D64  CFF7 F041          	movff	tblptrh,??_handler+11
 12242  001D68  CFF8 F042          	movff	tblptru,??_handler+12
 12243  001D6C  CFF5 F043          	movff	tablat,??_handler+13
 12244                           
 12245                           ;interruptHandler.c: 15: (INTCONbits.GIE = 0);
 12246  001D70  9EF2               	bcf	intcon,7,c	;volatile
 12247                           
 12248                           ;interruptHandler.c: 17: if(TMR0IE && TMR0IF){
 12249  001D72  BAF2               	btfsc	intcon,5,c	;volatile
 12250  001D74  A4F2               	btfss	intcon,2,c	;volatile
 12251  001D76  D011               	goto	i2l8795
 12252                           
 12253                           ;interruptHandler.c: 18: if (timerCounter == 38){
 12254  001D78  0E26               	movlw	38
 12255  001D7A  184D               	xorwf	_timerCounter,w,c
 12256  001D7C  104E               	iorwf	_timerCounter+1,w,c
 12257  001D7E  A4D8               	btfss	status,2,c
 12258  001D80  D009               	goto	i2l8791
 12259                           
 12260                           ;interruptHandler.c: 19: updateCurrentTime();
 12261  001D82  EC86  F018         	call	i2_updateCurrentTime	;wreg free
 12262                           
 12263                           ;interruptHandler.c: 20: printTime();
 12264  001D86  EC34  F01A         	call	i2_printTime	;wreg free
 12265                           
 12266                           ;interruptHandler.c: 21: timerCounter = 0;
 12267  001D8A  0E00               	movlw	0
 12268  001D8C  6E4E               	movwf	_timerCounter+1,c
 12269  001D8E  0E00               	movlw	0
 12270  001D90  6E4D               	movwf	_timerCounter,c
 12271                           
 12272                           ;interruptHandler.c: 22: }else{
 12273  001D92  D002               	goto	i2l8793
 12274  001D94                     i2l8791:
 12275                           
 12276                           ;interruptHandler.c: 23: timerCounter++;
 12277  001D94  4A4D               	infsnz	_timerCounter,f,c
 12278  001D96  2A4E               	incf	_timerCounter+1,f,c
 12279  001D98                     i2l8793:
 12280                           
 12281                           ;interruptHandler.c: 24: }
 12282                           ;interruptHandler.c: 25: TMR0IF = 0;
 12283  001D98  94F2               	bcf	intcon,2,c	;volatile
 12284  001D9A                     i2l8795:
 12285                           
 12286                           ;interruptHandler.c: 26: }
 12287                           ;interruptHandler.c: 28: if(TMR1IE && TMR1IF){
 12288  001D9A  B09D               	btfsc	3997,0,c	;volatile
 12289  001D9C  A09E               	btfss	3998,0,c	;volatile
 12290  001D9E  D04C               	goto	i2l8819
 12291                           
 12292                           ;interruptHandler.c: 29: if (motorCounter == getMotorCounterBasedOnBottlesLeft()){
 12293  001DA0  ECC9  F01B         	call	_getMotorCounterBasedOnBottlesLeft	;wreg free
 12294  001DA4  5049               	movf	_motorCounter,w,c
 12295  001DA6  1809               	xorwf	?_getMotorCounterBasedOnBottlesLeft,w,c
 12296  001DA8  E10A               	bnz	i2l578
 12297  001DAA  504A               	movf	_motorCounter+1,w,c
 12298  001DAC  180A               	xorwf	?_getMotorCounterBasedOnBottlesLeft+1,w,c
 12299  001DAE  A4D8               	btfss	status,2,c
 12300  001DB0  D006               	goto	i2l578
 12301                           
 12302                           ;interruptHandler.c: 30: PORTCbits.RC1 = 1;
 12303  001DB2  8282               	bsf	3970,1,c	;volatile
 12304                           
 12305                           ;interruptHandler.c: 31: motorCounter = 0;
 12306  001DB4  0E00               	movlw	0
 12307  001DB6  6E4A               	movwf	_motorCounter+1,c
 12308  001DB8  0E00               	movlw	0
 12309  001DBA  6E49               	movwf	_motorCounter,c
 12310                           
 12311                           ;interruptHandler.c: 32: }else{
 12312  001DBC  D003               	goto	i2l8807
 12313  001DBE                     i2l578:
 12314                           
 12315                           ;interruptHandler.c: 33: PORTCbits.RC1 = 0;
 12316  001DBE  9282               	bcf	3970,1,c	;volatile
 12317                           
 12318                           ;interruptHandler.c: 34: motorCounter += 1;
 12319  001DC0  4A49               	infsnz	_motorCounter,f,c
 12320  001DC2  2A4A               	incf	_motorCounter+1,f,c
 12321  001DC4                     i2l8807:
 12322                           
 12323                           ;interruptHandler.c: 35: }
 12324                           ;interruptHandler.c: 36: TMR1IF = 0;
 12325  001DC4  909E               	bcf	3998,0,c	;volatile
 12326                           
 12327                           ;interruptHandler.c: 38: float time = 10;
 12328  001DC6  0E00               	movlw	0
 12329  001DC8  6E44               	movwf	handler@time,c
 12330  001DCA  0E20               	movlw	32
 12331  001DCC  6E45               	movwf	handler@time+1,c
 12332  001DCE  0E41               	movlw	65
 12333  001DD0  6E46               	movwf	handler@time+2,c
 12334                           
 12335                           ;interruptHandler.c: 39: unsigned int set_time = 65535-(int)((float)time*2000/8);
 12336  001DD2  0E00               	movlw	0
 12337  001DD4  6E1B               	movwf	i2___ftdiv@f2,c
 12338  001DD6  0E00               	movlw	0
 12339  001DD8  6E1C               	movwf	i2___ftdiv@f2+1,c
 12340  001DDA  0E41               	movlw	65
 12341  001DDC  6E1D               	movwf	i2___ftdiv@f2+2,c
 12342  001DDE  0E00               	movlw	0
 12343  001DE0  6E0C               	movwf	i2___ftmul@f2,c
 12344  001DE2  0EFA               	movlw	250
 12345  001DE4  6E0D               	movwf	i2___ftmul@f2+1,c
 12346  001DE6  0E44               	movlw	68
 12347  001DE8  6E0E               	movwf	i2___ftmul@f2+2,c
 12348  001DEA  C044  F009         	movff	handler@time,i2___ftmul@f1
 12349  001DEE  C045  F00A         	movff	handler@time+1,i2___ftmul@f1+1
 12350  001DF2  C046  F00B         	movff	handler@time+2,i2___ftmul@f1+2
 12351  001DF6  EC93  F013         	call	i2___ftmul	;wreg free
 12352  001DFA  C009  F018         	movff	?i2___ftmul,i2___ftdiv@f1
 12353  001DFE  C00A  F019         	movff	?i2___ftmul+1,i2___ftdiv@f1+1
 12354  001E02  C00B  F01A         	movff	?i2___ftmul+2,i2___ftdiv@f1+2
 12355  001E06  EC86  F014         	call	i2___ftdiv	;wreg free
 12356  001E0A  C018  F027         	movff	?i2___ftdiv,i2___fttol@f1
 12357  001E0E  C019  F028         	movff	?i2___ftdiv+1,i2___fttol@f1+1
 12358  001E12  C01A  F029         	movff	?i2___ftdiv+2,i2___fttol@f1+2
 12359  001E16  EC19  F013         	call	i2___fttol	;wreg free
 12360  001E1A  1E27               	comf	?i2___fttol,f,c
 12361  001E1C  1E28               	comf	?i2___fttol+1,f,c
 12362  001E1E  4A27               	infsnz	?i2___fttol,f,c
 12363  001E20  2A28               	incf	?i2___fttol+1,f,c
 12364  001E22  0EFF               	movlw	255
 12365  001E24  2427               	addwf	?i2___fttol,w,c
 12366  001E26  6E47               	movwf	handler@set_time,c
 12367  001E28  0EFF               	movlw	255
 12368  001E2A  2028               	addwfc	?i2___fttol+1,w,c
 12369  001E2C  6E48               	movwf	handler@set_time+1,c
 12370                           
 12371                           ;interruptHandler.c: 40: TMR1H = set_time >> 8;
 12372  001E2E  5048               	movf	handler@set_time+1,w,c
 12373  001E30  6ECF               	movwf	4047,c	;volatile
 12374                           
 12375                           ;interruptHandler.c: 41: TMR1L = set_time & 0b11111111;
 12376  001E32  C047  FFCE         	movff	handler@set_time,4046	;volatile
 12377                           
 12378                           ;interruptHandler.c: 42: TMR1ON = 1;
 12379  001E36  80CD               	bsf	4045,0,c	;volatile
 12380  001E38                     i2l8819:
 12381                           
 12382                           ;interruptHandler.c: 43: }
 12383                           ;interruptHandler.c: 45: (INTCONbits.GIE = 1);
 12384  001E38  8EF2               	bsf	intcon,7,c	;volatile
 12385  001E3A  C043  FFF5         	movff	??_handler+13,tablat
 12386  001E3E  C042  FFF8         	movff	??_handler+12,tblptru
 12387  001E42  C041  FFF7         	movff	??_handler+11,tblptrh
 12388  001E46  C040  FFF6         	movff	??_handler+10,tblptrl
 12389  001E4A  C03F  FFF4         	movff	??_handler+9,prodh
 12390  001E4E  C03E  FFF3         	movff	??_handler+8,prodl
 12391  001E52  C03D  FFDA         	movff	??_handler+7,fsr2h
 12392  001E56  C03C  FFD9         	movff	??_handler+6,fsr2l
 12393  001E5A  C03B  FFE2         	movff	??_handler+5,fsr1h
 12394  001E5E  C03A  FFE1         	movff	??_handler+4,fsr1l
 12395  001E62  C039  FFEA         	movff	??_handler+3,fsr0h
 12396  001E66  C038  FFE9         	movff	??_handler+2,fsr0l
 12397  001E6A  C037  FFFB         	movff	??_handler+1,pclatu
 12398  001E6E  C036  FFFA         	movff	??_handler,pclath
 12399  001E72  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12400  001E74  0011               	retfie		f
 12401  001E76                     __end_of_handler:
 12402                           	opt stack 0
 12403                           tosu	equ	0xFFF
 12404                           tosh	equ	0xFFE
 12405                           tosl	equ	0xFFD
 12406                           pclatu	equ	0xFFB
 12407                           pclath	equ	0xFFA
 12408                           tblptru	equ	0xFF8
 12409                           tblptrh	equ	0xFF7
 12410                           tblptrl	equ	0xFF6
 12411                           tablat	equ	0xFF5
 12412                           prodh	equ	0xFF4
 12413                           prodl	equ	0xFF3
 12414                           intcon	equ	0xFF2
 12415                           intcon2	equ	0xFF1
 12416                           postinc0	equ	0xFEE
 12417                           fsr0h	equ	0xFEA
 12418                           fsr0l	equ	0xFE9
 12419                           wreg	equ	0xFE8
 12420                           indf1	equ	0xFE7
 12421                           postinc1	equ	0xFE6
 12422                           postdec1	equ	0xFE5
 12423                           fsr1h	equ	0xFE2
 12424                           fsr1l	equ	0xFE1
 12425                           indf2	equ	0xFDF
 12426                           postinc2	equ	0xFDE
 12427                           postdec2	equ	0xFDD
 12428                           fsr2h	equ	0xFDA
 12429                           fsr2l	equ	0xFD9
 12430                           status	equ	0xFD8
 12431                           
 12432 ;; *************** function i2_updateCurrentTime *****************
 12433 ;; Defined at:
 12434 ;;		line 461 in file "main.c"
 12435 ;; Parameters:    Size  Location     Type
 12436 ;;		None
 12437 ;; Auto vars:     Size  Location     Type
 12438 ;;  updateCurren    1    3[COMRAM] unsigned char 
 12439 ;; Return value:  Size  Location     Type
 12440 ;;                  1    wreg      void 
 12441 ;; Registers used:
 12442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12443 ;; Tracked objects:
 12444 ;;		On entry : 0/0
 12445 ;;		On exit  : 0/0
 12446 ;;		Unchanged: 0/0
 12447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12449 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12451 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12452 ;;Total ram usage:        1 bytes
 12453 ;; Hardware stack levels used:    1
 12454 ;; Hardware stack levels required when called:    2
 12455 ;; This function calls:
 12456 ;;		i2_I2C_Master_Read
 12457 ;;		i2_I2C_Master_Start
 12458 ;;		i2_I2C_Master_Stop
 12459 ;;		i2_I2C_Master_Write
 12460 ;; This function is called by:
 12461 ;;		_handler
 12462 ;; This function uses a non-reentrant model
 12463 ;;
 12464                           
 12465                           	psect	text57
 12466  00310C                     __ptext57:
 12467                           	opt stack 0
 12468  00310C                     i2_updateCurrentTime:
 12469                           	opt stack 18
 12470                           
 12471                           ;main.c: 463: I2C_Master_Start();
 12472                           
 12473                           ;incstack = 0
 12474  00310C  EC5F  F01C         	call	i2_I2C_Master_Start	;wreg free
 12475                           
 12476                           ;main.c: 464: I2C_Master_Write(0b11010000);
 12477  003110  0E00               	movlw	0
 12478  003112  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12479  003114  0ED0               	movlw	208
 12480  003116  6E02               	movwf	i2I2C_Master_Write@d,c
 12481  003118  EC46  F01C         	call	i2_I2C_Master_Write	;wreg free
 12482                           
 12483                           ;main.c: 465: I2C_Master_Write(0x00);
 12484  00311C  0E00               	movlw	0
 12485  00311E  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12486  003120  0E00               	movlw	0
 12487  003122  6E02               	movwf	i2I2C_Master_Write@d,c
 12488  003124  EC46  F01C         	call	i2_I2C_Master_Write	;wreg free
 12489                           
 12490                           ;main.c: 466: I2C_Master_Stop();
 12491  003128  EC5B  F01C         	call	i2_I2C_Master_Stop	;wreg free
 12492                           
 12493                           ;main.c: 469: I2C_Master_Start();
 12494  00312C  EC5F  F01C         	call	i2_I2C_Master_Start	;wreg free
 12495                           
 12496                           ;main.c: 470: I2C_Master_Write(0b11010001);
 12497  003130  0E00               	movlw	0
 12498  003132  6E03               	movwf	i2I2C_Master_Write@d+1,c
 12499  003134  0ED1               	movlw	209
 12500  003136  6E02               	movwf	i2I2C_Master_Write@d,c
 12501  003138  EC46  F01C         	call	i2_I2C_Master_Write	;wreg free
 12502                           
 12503                           ;main.c: 471: for(unsigned char i=0;i<0x06;i++){
 12504  00313C  0E00               	movlw	0
 12505  00313E  6E04               	movwf	i2updateCurrentTime@i,c
 12506  003140                     i2l5013:
 12507  003140  0E05               	movlw	5
 12508  003142  6404               	cpfsgt	i2updateCurrentTime@i,c
 12509  003144  D001               	goto	i2l5017
 12510  003146  D00E               	goto	i2l5023
 12511  003148                     i2l5017:
 12512                           
 12513                           ;main.c: 472: time[i] = I2C_Master_Read(1);
 12514  003148  5004               	movf	i2updateCurrentTime@i,w,c
 12515  00314A  0D01               	mullw	1
 12516  00314C  0EE2               	movlw	low _time
 12517  00314E  24F3               	addwf	prodl,w,c
 12518  003150  6ED9               	movwf	fsr2l,c
 12519  003152  0E00               	movlw	high _time
 12520  003154  20F4               	addwfc	prodh,w,c
 12521  003156  6EDA               	movwf	fsr2h,c
 12522  003158  0E01               	movlw	1
 12523  00315A  EC92  F01B         	call	i2_I2C_Master_Read
 12524  00315E  6EDF               	movwf	indf2,c
 12525  003160  2A04               	incf	i2updateCurrentTime@i,f,c
 12526  003162  D7EE               	goto	i2l5013
 12527  003164                     i2l5023:
 12528                           
 12529                           ;main.c: 473: }
 12530                           ;main.c: 474: time[6] = I2C_Master_Read(0);
 12531  003164  0E00               	movlw	0
 12532  003166  EC92  F01B         	call	i2_I2C_Master_Read
 12533  00316A  0100               	movlb	0	; () banked
 12534  00316C  6FE8               	movwf	(_time+6)& (0+255),b
 12535                           
 12536                           ;main.c: 475: I2C_Master_Stop();
 12537  00316E  EC5B  F01C         	call	i2_I2C_Master_Stop	;wreg free
 12538  003172  0012               	return		;funcret
 12539  003174                     __end_ofi2_updateCurrentTime:
 12540                           	opt stack 0
 12541                           tosu	equ	0xFFF
 12542                           tosh	equ	0xFFE
 12543                           tosl	equ	0xFFD
 12544                           pclatu	equ	0xFFB
 12545                           pclath	equ	0xFFA
 12546                           tblptru	equ	0xFF8
 12547                           tblptrh	equ	0xFF7
 12548                           tblptrl	equ	0xFF6
 12549                           tablat	equ	0xFF5
 12550                           prodh	equ	0xFF4
 12551                           prodl	equ	0xFF3
 12552                           intcon	equ	0xFF2
 12553                           intcon2	equ	0xFF1
 12554                           postinc0	equ	0xFEE
 12555                           fsr0h	equ	0xFEA
 12556                           fsr0l	equ	0xFE9
 12557                           wreg	equ	0xFE8
 12558                           indf1	equ	0xFE7
 12559                           postinc1	equ	0xFE6
 12560                           postdec1	equ	0xFE5
 12561                           fsr1h	equ	0xFE2
 12562                           fsr1l	equ	0xFE1
 12563                           indf2	equ	0xFDF
 12564                           postinc2	equ	0xFDE
 12565                           postdec2	equ	0xFDD
 12566                           fsr2h	equ	0xFDA
 12567                           fsr2l	equ	0xFD9
 12568                           status	equ	0xFD8
 12569                           
 12570 ;; *************** function i2_I2C_Master_Write *****************
 12571 ;; Defined at:
 12572 ;;		line 47 in file "I2C.c"
 12573 ;; Parameters:    Size  Location     Type
 12574 ;;  d               2    1[COMRAM] unsigned int 
 12575 ;; Auto vars:     Size  Location     Type
 12576 ;;		None
 12577 ;; Return value:  Size  Location     Type
 12578 ;;                  1    wreg      void 
 12579 ;; Registers used:
 12580 ;;		wreg, status,2, status,0, cstack
 12581 ;; Tracked objects:
 12582 ;;		On entry : 0/0
 12583 ;;		On exit  : 0/0
 12584 ;;		Unchanged: 0/0
 12585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12586 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12589 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12590 ;;Total ram usage:        2 bytes
 12591 ;; Hardware stack levels used:    1
 12592 ;; Hardware stack levels required when called:    1
 12593 ;; This function calls:
 12594 ;;		i2_I2C_Master_Wait
 12595 ;; This function is called by:
 12596 ;;		i2_updateCurrentTime
 12597 ;; This function uses a non-reentrant model
 12598 ;;
 12599                           
 12600                           	psect	text58
 12601  00388C                     __ptext58:
 12602                           	opt stack 0
 12603  00388C                     i2_I2C_Master_Write:
 12604                           	opt stack 18
 12605                           
 12606                           ;I2C.c: 49: I2C_Master_Wait();
 12607                           
 12608                           ;incstack = 0
 12609  00388C  EC1E  F01C         	call	i2_I2C_Master_Wait	;wreg free
 12610                           
 12611                           ;I2C.c: 50: SSPBUF = d;
 12612  003890  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 12613  003894  0012               	return		;funcret
 12614  003896                     __end_ofi2_I2C_Master_Write:
 12615                           	opt stack 0
 12616                           tosu	equ	0xFFF
 12617                           tosh	equ	0xFFE
 12618                           tosl	equ	0xFFD
 12619                           pclatu	equ	0xFFB
 12620                           pclath	equ	0xFFA
 12621                           tblptru	equ	0xFF8
 12622                           tblptrh	equ	0xFF7
 12623                           tblptrl	equ	0xFF6
 12624                           tablat	equ	0xFF5
 12625                           prodh	equ	0xFF4
 12626                           prodl	equ	0xFF3
 12627                           intcon	equ	0xFF2
 12628                           intcon2	equ	0xFF1
 12629                           postinc0	equ	0xFEE
 12630                           fsr0h	equ	0xFEA
 12631                           fsr0l	equ	0xFE9
 12632                           wreg	equ	0xFE8
 12633                           indf1	equ	0xFE7
 12634                           postinc1	equ	0xFE6
 12635                           postdec1	equ	0xFE5
 12636                           fsr1h	equ	0xFE2
 12637                           fsr1l	equ	0xFE1
 12638                           indf2	equ	0xFDF
 12639                           postinc2	equ	0xFDE
 12640                           postdec2	equ	0xFDD
 12641                           fsr2h	equ	0xFDA
 12642                           fsr2l	equ	0xFD9
 12643                           status	equ	0xFD8
 12644                           
 12645 ;; *************** function i2_I2C_Master_Stop *****************
 12646 ;; Defined at:
 12647 ;;		line 41 in file "I2C.c"
 12648 ;; Parameters:    Size  Location     Type
 12649 ;;		None
 12650 ;; Auto vars:     Size  Location     Type
 12651 ;;		None
 12652 ;; Return value:  Size  Location     Type
 12653 ;;                  2    0[None  ] int 
 12654 ;; Registers used:
 12655 ;;		wreg, status,2, status,0, cstack
 12656 ;; Tracked objects:
 12657 ;;		On entry : 0/0
 12658 ;;		On exit  : 0/0
 12659 ;;		Unchanged: 0/0
 12660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12665 ;;Total ram usage:        0 bytes
 12666 ;; Hardware stack levels used:    1
 12667 ;; Hardware stack levels required when called:    1
 12668 ;; This function calls:
 12669 ;;		i2_I2C_Master_Wait
 12670 ;; This function is called by:
 12671 ;;		i2_updateCurrentTime
 12672 ;; This function uses a non-reentrant model
 12673 ;;
 12674                           
 12675                           	psect	text59
 12676  0038B6                     __ptext59:
 12677                           	opt stack 0
 12678  0038B6                     i2_I2C_Master_Stop:
 12679                           	opt stack 18
 12680                           
 12681                           ;I2C.c: 43: I2C_Master_Wait();
 12682                           
 12683                           ;incstack = 0
 12684  0038B6  EC1E  F01C         	call	i2_I2C_Master_Wait	;wreg free
 12685                           
 12686                           ;I2C.c: 44: PEN = 1;
 12687  0038BA  84C5               	bsf	4037,2,c	;volatile
 12688  0038BC  0012               	return		;funcret
 12689  0038BE                     __end_ofi2_I2C_Master_Stop:
 12690                           	opt stack 0
 12691                           tosu	equ	0xFFF
 12692                           tosh	equ	0xFFE
 12693                           tosl	equ	0xFFD
 12694                           pclatu	equ	0xFFB
 12695                           pclath	equ	0xFFA
 12696                           tblptru	equ	0xFF8
 12697                           tblptrh	equ	0xFF7
 12698                           tblptrl	equ	0xFF6
 12699                           tablat	equ	0xFF5
 12700                           prodh	equ	0xFF4
 12701                           prodl	equ	0xFF3
 12702                           intcon	equ	0xFF2
 12703                           intcon2	equ	0xFF1
 12704                           postinc0	equ	0xFEE
 12705                           fsr0h	equ	0xFEA
 12706                           fsr0l	equ	0xFE9
 12707                           wreg	equ	0xFE8
 12708                           indf1	equ	0xFE7
 12709                           postinc1	equ	0xFE6
 12710                           postdec1	equ	0xFE5
 12711                           fsr1h	equ	0xFE2
 12712                           fsr1l	equ	0xFE1
 12713                           indf2	equ	0xFDF
 12714                           postinc2	equ	0xFDE
 12715                           postdec2	equ	0xFDD
 12716                           fsr2h	equ	0xFDA
 12717                           fsr2l	equ	0xFD9
 12718                           status	equ	0xFD8
 12719                           
 12720 ;; *************** function i2_I2C_Master_Start *****************
 12721 ;; Defined at:
 12722 ;;		line 29 in file "I2C.c"
 12723 ;; Parameters:    Size  Location     Type
 12724 ;;		None
 12725 ;; Auto vars:     Size  Location     Type
 12726 ;;		None
 12727 ;; Return value:  Size  Location     Type
 12728 ;;                  2    0[None  ] int 
 12729 ;; Registers used:
 12730 ;;		wreg, status,2, status,0, cstack
 12731 ;; Tracked objects:
 12732 ;;		On entry : 0/0
 12733 ;;		On exit  : 0/0
 12734 ;;		Unchanged: 0/0
 12735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12737 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12739 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12740 ;;Total ram usage:        0 bytes
 12741 ;; Hardware stack levels used:    1
 12742 ;; Hardware stack levels required when called:    1
 12743 ;; This function calls:
 12744 ;;		i2_I2C_Master_Wait
 12745 ;; This function is called by:
 12746 ;;		i2_updateCurrentTime
 12747 ;; This function uses a non-reentrant model
 12748 ;;
 12749                           
 12750                           	psect	text60
 12751  0038BE                     __ptext60:
 12752                           	opt stack 0
 12753  0038BE                     i2_I2C_Master_Start:
 12754                           	opt stack 18
 12755                           
 12756                           ;I2C.c: 31: I2C_Master_Wait();
 12757                           
 12758                           ;incstack = 0
 12759  0038BE  EC1E  F01C         	call	i2_I2C_Master_Wait	;wreg free
 12760                           
 12761                           ;I2C.c: 32: SEN = 1;
 12762  0038C2  80C5               	bsf	4037,0,c	;volatile
 12763  0038C4  0012               	return		;funcret
 12764  0038C6                     __end_ofi2_I2C_Master_Start:
 12765                           	opt stack 0
 12766                           tosu	equ	0xFFF
 12767                           tosh	equ	0xFFE
 12768                           tosl	equ	0xFFD
 12769                           pclatu	equ	0xFFB
 12770                           pclath	equ	0xFFA
 12771                           tblptru	equ	0xFF8
 12772                           tblptrh	equ	0xFF7
 12773                           tblptrl	equ	0xFF6
 12774                           tablat	equ	0xFF5
 12775                           prodh	equ	0xFF4
 12776                           prodl	equ	0xFF3
 12777                           intcon	equ	0xFF2
 12778                           intcon2	equ	0xFF1
 12779                           postinc0	equ	0xFEE
 12780                           fsr0h	equ	0xFEA
 12781                           fsr0l	equ	0xFE9
 12782                           wreg	equ	0xFE8
 12783                           indf1	equ	0xFE7
 12784                           postinc1	equ	0xFE6
 12785                           postdec1	equ	0xFE5
 12786                           fsr1h	equ	0xFE2
 12787                           fsr1l	equ	0xFE1
 12788                           indf2	equ	0xFDF
 12789                           postinc2	equ	0xFDE
 12790                           postdec2	equ	0xFDD
 12791                           fsr2h	equ	0xFDA
 12792                           fsr2l	equ	0xFD9
 12793                           status	equ	0xFD8
 12794                           
 12795 ;; *************** function i2_I2C_Master_Read *****************
 12796 ;; Defined at:
 12797 ;;		line 53 in file "I2C.c"
 12798 ;; Parameters:    Size  Location     Type
 12799 ;;  a               1    wreg     unsigned char 
 12800 ;; Auto vars:     Size  Location     Type
 12801 ;;  a               1    1[COMRAM] unsigned char 
 12802 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 12803 ;; Return value:  Size  Location     Type
 12804 ;;                  1    wreg      unsigned char 
 12805 ;; Registers used:
 12806 ;;		wreg, status,2, status,0, cstack
 12807 ;; Tracked objects:
 12808 ;;		On entry : 0/0
 12809 ;;		On exit  : 0/0
 12810 ;;		Unchanged: 0/0
 12811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12813 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12815 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12816 ;;Total ram usage:        2 bytes
 12817 ;; Hardware stack levels used:    1
 12818 ;; Hardware stack levels required when called:    1
 12819 ;; This function calls:
 12820 ;;		i2_I2C_Master_Wait
 12821 ;; This function is called by:
 12822 ;;		i2_updateCurrentTime
 12823 ;; This function uses a non-reentrant model
 12824 ;;
 12825                           
 12826                           	psect	text61
 12827  003724                     __ptext61:
 12828                           	opt stack 0
 12829  003724                     i2_I2C_Master_Read:
 12830                           	opt stack 18
 12831                           
 12832                           ;incstack = 0
 12833                           ;i2I2C_Master_Read@a stored from wreg
 12834  003724  6E02               	movwf	i2I2C_Master_Read@a,c
 12835                           
 12836                           ;I2C.c: 55: unsigned char temp;
 12837                           ;I2C.c: 56: I2C_Master_Wait();
 12838  003726  EC1E  F01C         	call	i2_I2C_Master_Wait	;wreg free
 12839                           
 12840                           ;I2C.c: 57: RCEN = 1;
 12841  00372A  86C5               	bsf	4037,3,c	;volatile
 12842                           
 12843                           ;I2C.c: 58: I2C_Master_Wait();
 12844  00372C  EC1E  F01C         	call	i2_I2C_Master_Wait	;wreg free
 12845                           
 12846                           ;I2C.c: 59: temp = SSPBUF;
 12847  003730  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 12848                           
 12849                           ;I2C.c: 60: I2C_Master_Wait();
 12850  003734  EC1E  F01C         	call	i2_I2C_Master_Wait	;wreg free
 12851                           
 12852                           ;I2C.c: 61: ACKDT = (a)?0:1;
 12853  003738  5002               	movf	i2I2C_Master_Read@a,w,c
 12854  00373A  A4D8               	btfss	status,2,c
 12855  00373C  D002               	goto	i2u476_40
 12856  00373E  8AC5               	bsf	4037,5,c	;volatile
 12857  003740  D001               	goto	i2l4925
 12858  003742                     i2u476_40:
 12859  003742  9AC5               	bcf	4037,5,c	;volatile
 12860  003744                     i2l4925:
 12861                           
 12862                           ;I2C.c: 62: ACKEN = 1;
 12863  003744  88C5               	bsf	4037,4,c	;volatile
 12864                           
 12865                           ;I2C.c: 63: return temp;
 12866  003746  5003               	movf	i2I2C_Master_Read@temp,w,c
 12867  003748  0012               	return	
 12868  00374A                     __end_ofi2_I2C_Master_Read:
 12869                           	opt stack 0
 12870                           tosu	equ	0xFFF
 12871                           tosh	equ	0xFFE
 12872                           tosl	equ	0xFFD
 12873                           pclatu	equ	0xFFB
 12874                           pclath	equ	0xFFA
 12875                           tblptru	equ	0xFF8
 12876                           tblptrh	equ	0xFF7
 12877                           tblptrl	equ	0xFF6
 12878                           tablat	equ	0xFF5
 12879                           prodh	equ	0xFF4
 12880                           prodl	equ	0xFF3
 12881                           intcon	equ	0xFF2
 12882                           intcon2	equ	0xFF1
 12883                           postinc0	equ	0xFEE
 12884                           fsr0h	equ	0xFEA
 12885                           fsr0l	equ	0xFE9
 12886                           wreg	equ	0xFE8
 12887                           indf1	equ	0xFE7
 12888                           postinc1	equ	0xFE6
 12889                           postdec1	equ	0xFE5
 12890                           fsr1h	equ	0xFE2
 12891                           fsr1l	equ	0xFE1
 12892                           indf2	equ	0xFDF
 12893                           postinc2	equ	0xFDE
 12894                           postdec2	equ	0xFDD
 12895                           fsr2h	equ	0xFDA
 12896                           fsr2l	equ	0xFD9
 12897                           status	equ	0xFD8
 12898                           
 12899 ;; *************** function i2_I2C_Master_Wait *****************
 12900 ;; Defined at:
 12901 ;;		line 24 in file "I2C.c"
 12902 ;; Parameters:    Size  Location     Type
 12903 ;;		None
 12904 ;; Auto vars:     Size  Location     Type
 12905 ;;		None
 12906 ;; Return value:  Size  Location     Type
 12907 ;;                  1    wreg      void 
 12908 ;; Registers used:
 12909 ;;		wreg, status,2, status,0
 12910 ;; Tracked objects:
 12911 ;;		On entry : 0/0
 12912 ;;		On exit  : 0/0
 12913 ;;		Unchanged: 0/0
 12914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12917 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12918 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12919 ;;Total ram usage:        1 bytes
 12920 ;; Hardware stack levels used:    1
 12921 ;; This function calls:
 12922 ;;		Nothing
 12923 ;; This function is called by:
 12924 ;;		i2_I2C_Master_Start
 12925 ;;		i2_I2C_Master_Stop
 12926 ;;		i2_I2C_Master_Write
 12927 ;;		i2_I2C_Master_Read
 12928 ;; This function uses a non-reentrant model
 12929 ;;
 12930                           
 12931                           	psect	text62
 12932  00383C                     __ptext62:
 12933                           	opt stack 0
 12934  00383C                     i2_I2C_Master_Wait:
 12935                           	opt stack 18
 12936  00383C                     i2l519:
 12937  00383C  B4C7               	btfsc	4039,2,c	;volatile
 12938  00383E  D7FE               	goto	i2l519
 12939  003840  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 12940  003844  0E1F               	movlw	31
 12941  003846  1601               	andwf	??i2_I2C_Master_Wait,f,c
 12942  003848  B4D8               	btfsc	status,2,c
 12943  00384A  0012               	return	
 12944  00384C  D7F7               	goto	i2l519
 12945  00384E                     __end_ofi2_I2C_Master_Wait:
 12946                           	opt stack 0
 12947                           tosu	equ	0xFFF
 12948                           tosh	equ	0xFFE
 12949                           tosl	equ	0xFFD
 12950                           pclatu	equ	0xFFB
 12951                           pclath	equ	0xFFA
 12952                           tblptru	equ	0xFF8
 12953                           tblptrh	equ	0xFF7
 12954                           tblptrl	equ	0xFF6
 12955                           tablat	equ	0xFF5
 12956                           prodh	equ	0xFF4
 12957                           prodl	equ	0xFF3
 12958                           intcon	equ	0xFF2
 12959                           intcon2	equ	0xFF1
 12960                           postinc0	equ	0xFEE
 12961                           fsr0h	equ	0xFEA
 12962                           fsr0l	equ	0xFE9
 12963                           wreg	equ	0xFE8
 12964                           indf1	equ	0xFE7
 12965                           postinc1	equ	0xFE6
 12966                           postdec1	equ	0xFE5
 12967                           fsr1h	equ	0xFE2
 12968                           fsr1l	equ	0xFE1
 12969                           indf2	equ	0xFDF
 12970                           postinc2	equ	0xFDE
 12971                           postdec2	equ	0xFDD
 12972                           fsr2h	equ	0xFDA
 12973                           fsr2l	equ	0xFD9
 12974                           status	equ	0xFD8
 12975                           
 12976 ;; *************** function i2_printTime *****************
 12977 ;; Defined at:
 12978 ;;		line 416 in file "main.c"
 12979 ;; Parameters:    Size  Location     Type
 12980 ;;		None
 12981 ;; Auto vars:     Size  Location     Type
 12982 ;;		None
 12983 ;; Return value:  Size  Location     Type
 12984 ;;                  1    wreg      void 
 12985 ;; Registers used:
 12986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12987 ;; Tracked objects:
 12988 ;;		On entry : 0/0
 12989 ;;		On exit  : 0/0
 12990 ;;		Unchanged: 0/0
 12991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12996 ;;Total ram usage:        0 bytes
 12997 ;; Hardware stack levels used:    1
 12998 ;; Hardware stack levels required when called:    4
 12999 ;; This function calls:
 13000 ;;		i2_lcdInst
 13001 ;;		i2_printf
 13002 ;; This function is called by:
 13003 ;;		_handler
 13004 ;; This function uses a non-reentrant model
 13005 ;;
 13006                           
 13007                           	psect	text63
 13008  003468                     __ptext63:
 13009                           	opt stack 0
 13010  003468                     i2_printTime:
 13011                           	opt stack 16
 13012                           
 13013                           ;main.c: 417: lcdInst(0b10000000);
 13014                           
 13015                           ;incstack = 0
 13016  003468  0E80               	movlw	128
 13017  00346A  EC3B  F01C         	call	i2_lcdInst
 13018                           
 13019                           ;main.c: 418: printf("%02x/%02x   ", time[5],time[4]);
 13020  00346E  0EC9               	movlw	low STR_1
 13021  003470  6E1F               	movwf	i2printf@f,c
 13022  003472  0EFF               	movlw	high STR_1
 13023  003474  6E20               	movwf	i2printf@f+1,c
 13024  003476  C0E7  F021         	movff	_time+5,?i2_printf+2
 13025  00347A  6A22               	clrf	?i2_printf+3,c
 13026  00347C  C0E6  F023         	movff	_time+4,?i2_printf+4
 13027  003480  6A24               	clrf	?i2_printf+5,c
 13028  003482  ECF0  F01A         	call	i2_printf	;wreg free
 13029                           
 13030                           ;main.c: 419: printf("%02x:%02x:%02x", time[2]+1,time[1],time[0]);
 13031  003486  0E67               	movlw	low STR_2
 13032  003488  6E1F               	movwf	i2printf@f,c
 13033  00348A  0EFF               	movlw	high STR_2
 13034  00348C  6E20               	movwf	i2printf@f+1,c
 13035  00348E  0E01               	movlw	1
 13036  003490  0100               	movlb	0	; () banked
 13037  003492  25E4               	addwf	(_time+2)& (0+255),w,b
 13038  003494  6E21               	movwf	?i2_printf+2,c
 13039  003496  6A22               	clrf	?i2_printf+3,c
 13040  003498  0E00               	movlw	0
 13041  00349A  2222               	addwfc	?i2_printf+3,f,c
 13042  00349C  C0E3  F023         	movff	_time+1,?i2_printf+4
 13043  0034A0  6A24               	clrf	?i2_printf+5,c
 13044  0034A2  C0E2  F025         	movff	_time,?i2_printf+6
 13045  0034A6  6A26               	clrf	?i2_printf+7,c
 13046  0034A8  ECF0  F01A         	call	i2_printf	;wreg free
 13047  0034AC  0012               	return		;funcret
 13048  0034AE                     __end_ofi2_printTime:
 13049                           	opt stack 0
 13050                           tosu	equ	0xFFF
 13051                           tosh	equ	0xFFE
 13052                           tosl	equ	0xFFD
 13053                           pclatu	equ	0xFFB
 13054                           pclath	equ	0xFFA
 13055                           tblptru	equ	0xFF8
 13056                           tblptrh	equ	0xFF7
 13057                           tblptrl	equ	0xFF6
 13058                           tablat	equ	0xFF5
 13059                           prodh	equ	0xFF4
 13060                           prodl	equ	0xFF3
 13061                           intcon	equ	0xFF2
 13062                           intcon2	equ	0xFF1
 13063                           postinc0	equ	0xFEE
 13064                           fsr0h	equ	0xFEA
 13065                           fsr0l	equ	0xFE9
 13066                           wreg	equ	0xFE8
 13067                           indf1	equ	0xFE7
 13068                           postinc1	equ	0xFE6
 13069                           postdec1	equ	0xFE5
 13070                           fsr1h	equ	0xFE2
 13071                           fsr1l	equ	0xFE1
 13072                           indf2	equ	0xFDF
 13073                           postinc2	equ	0xFDE
 13074                           postdec2	equ	0xFDD
 13075                           fsr2h	equ	0xFDA
 13076                           fsr2l	equ	0xFD9
 13077                           status	equ	0xFD8
 13078                           
 13079 ;; *************** function i2_printf *****************
 13080 ;; Defined at:
 13081 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
 13082 ;; Parameters:    Size  Location     Type
 13083 ;;  f               2   30[COMRAM] PTR const unsigned char 
 13084 ;;		 -> STR_34(17), STR_33(17), STR_32(8), STR_31(17), 
 13085 ;;		 -> STR_30(18), STR_29(13), STR_28(12), STR_27(5), 
 13086 ;;		 -> STR_26(4), STR_25(14), STR_24(16), STR_23(18), 
 13087 ;;		 -> STR_22(15), STR_21(13), STR_20(17), STR_19(16), 
 13088 ;;		 -> STR_18(16), STR_17(14), STR_16(14), STR_15(16), 
 13089 ;;		 -> STR_14(17), STR_13(16), STR_12(16), STR_11(16), 
 13090 ;;		 -> STR_10(11), STR_9(17), STR_8(17), STR_7(14), 
 13091 ;;		 -> STR_6(14), STR_2(15), STR_1(13), 
 13092 ;; Auto vars:     Size  Location     Type
 13093 ;;  printf          4   40[COMRAM] struct __prbuf
 13094 ;;  printf          2   38[COMRAM] PTR void [1]
 13095 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
 13096 ;; Return value:  Size  Location     Type
 13097 ;;                  2   30[COMRAM] int 
 13098 ;; Registers used:
 13099 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13100 ;; Tracked objects:
 13101 ;;		On entry : 0/0
 13102 ;;		On exit  : 0/0
 13103 ;;		Unchanged: 0/0
 13104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13105 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13106 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13108 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13109 ;;Total ram usage:       14 bytes
 13110 ;; Hardware stack levels used:    1
 13111 ;; Hardware stack levels required when called:    3
 13112 ;; This function calls:
 13113 ;;		i2__doprnt
 13114 ;; This function is called by:
 13115 ;;		i2_printTime
 13116 ;; This function uses a non-reentrant model
 13117 ;;
 13118                           
 13119                           	psect	text64
 13120  0035E0                     __ptext64:
 13121                           	opt stack 0
 13122  0035E0                     i2_printf:
 13123                           	opt stack 16
 13124                           
 13125                           ;incstack = 0
 13126  0035E0  0E00               	movlw	0
 13127  0035E2  6E29               	movwf	i2printf@pb,c
 13128  0035E4  0E00               	movlw	0
 13129  0035E6  6E2A               	movwf	i2printf@pb+1,c
 13130  0035E8  0E6A               	movlw	low i2_putch
 13131  0035EA  6E2B               	movwf	i2printf@pb+2,c
 13132  0035EC  0E38               	movlw	high i2_putch
 13133  0035EE  6E2C               	movwf	i2printf@pb+3,c
 13134  0035F0  0E21               	movlw	low (?i2_printf+2)
 13135  0035F2  6E27               	movwf	i2printf@ap,c
 13136  0035F4  0E00               	movlw	high (?i2_printf+2)
 13137  0035F6  6E28               	movwf	i2printf@ap+1,c
 13138                           
 13139                           ;	Return value of i2_printf is never used
 13140  0035F8  0E29               	movlw	low i2printf@pb
 13141  0035FA  6E0D               	movwf	i2__doprnt@pb,c
 13142  0035FC  0E00               	movlw	high i2printf@pb
 13143  0035FE  6E0E               	movwf	i2__doprnt@pb+1,c
 13144  003600  C01F  F00F         	movff	i2printf@f,i2__doprnt@f
 13145  003604  C020  F010         	movff	i2printf@f+1,i2__doprnt@f+1
 13146  003608  0E27               	movlw	low i2printf@ap
 13147  00360A  6E11               	movwf	i2__doprnt@ap,c
 13148  00360C  0E00               	movlw	high i2printf@ap
 13149  00360E  6E12               	movwf	i2__doprnt@ap+1,c
 13150  003610  EC43  F003         	call	i2__doprnt	;wreg free
 13151  003614  0012               	return	
 13152  003616                     __end_ofi2_printf:
 13153                           	opt stack 0
 13154                           tosu	equ	0xFFF
 13155                           tosh	equ	0xFFE
 13156                           tosl	equ	0xFFD
 13157                           pclatu	equ	0xFFB
 13158                           pclath	equ	0xFFA
 13159                           tblptru	equ	0xFF8
 13160                           tblptrh	equ	0xFF7
 13161                           tblptrl	equ	0xFF6
 13162                           tablat	equ	0xFF5
 13163                           prodh	equ	0xFF4
 13164                           prodl	equ	0xFF3
 13165                           intcon	equ	0xFF2
 13166                           intcon2	equ	0xFF1
 13167                           postinc0	equ	0xFEE
 13168                           fsr0h	equ	0xFEA
 13169                           fsr0l	equ	0xFE9
 13170                           wreg	equ	0xFE8
 13171                           indf1	equ	0xFE7
 13172                           postinc1	equ	0xFE6
 13173                           postdec1	equ	0xFE5
 13174                           fsr1h	equ	0xFE2
 13175                           fsr1l	equ	0xFE1
 13176                           indf2	equ	0xFDF
 13177                           postinc2	equ	0xFDE
 13178                           postdec2	equ	0xFDD
 13179                           fsr2h	equ	0xFDA
 13180                           fsr2l	equ	0xFD9
 13181                           status	equ	0xFD8
 13182                           
 13183 ;; *************** function i2__doprnt *****************
 13184 ;; Defined at:
 13185 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 13186 ;; Parameters:    Size  Location     Type
 13187 ;;  pb              2   12[COMRAM] PTR struct __prbuf
 13188 ;;		 -> sprintf@pb(4), printf@pb(4), 
 13189 ;;  f               2   14[COMRAM] PTR const unsigned char 
 13190 ;;		 -> STR_34(17), STR_33(17), STR_32(8), STR_31(17), 
 13191 ;;		 -> STR_30(18), STR_29(13), STR_28(12), STR_27(5), 
 13192 ;;		 -> STR_26(4), STR_25(14), STR_24(16), STR_23(18), 
 13193 ;;		 -> STR_22(15), STR_21(13), STR_20(17), STR_19(16), 
 13194 ;;		 -> STR_18(16), STR_17(14), STR_16(14), STR_15(16), 
 13195 ;;		 -> STR_14(17), STR_13(16), STR_12(16), STR_11(16), 
 13196 ;;		 -> STR_10(11), STR_9(17), STR_8(17), STR_7(14), 
 13197 ;;		 -> STR_6(14), STR_5(5), STR_4(5), STR_3(5), 
 13198 ;;		 -> STR_2(15), STR_1(13), 
 13199 ;;  ap              2   16[COMRAM] PTR PTR void 
 13200 ;;		 -> sprintf@ap(2), printf@ap(2), 
 13201 ;; Auto vars:     Size  Location     Type
 13202 ;;  _doprnt         4    0        struct .
 13203 ;;  _doprnt         3    0        PTR const unsigned char 
 13204 ;;  _doprnt         2   27[COMRAM] int 
 13205 ;;  _doprnt         2   24[COMRAM] unsigned int 
 13206 ;;  _doprnt         2    0        unsigned int 
 13207 ;;  _doprnt         1   29[COMRAM] char 
 13208 ;;  _doprnt         1   26[COMRAM] unsigned char 
 13209 ;;  _doprnt         1   23[COMRAM] char 
 13210 ;;  _doprnt         1   22[COMRAM] unsigned char 
 13211 ;; Return value:  Size  Location     Type
 13212 ;;                  2   12[COMRAM] int 
 13213 ;; Registers used:
 13214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13215 ;; Tracked objects:
 13216 ;;		On entry : 0/0
 13217 ;;		On exit  : 0/0
 13218 ;;		Unchanged: 0/0
 13219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13220 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13221 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13222 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13223 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13224 ;;Total ram usage:       18 bytes
 13225 ;; Hardware stack levels used:    1
 13226 ;; Hardware stack levels required when called:    2
 13227 ;; This function calls:
 13228 ;;		Absolute function
 13229 ;;		i2___lwdiv
 13230 ;;		i2___lwmod
 13231 ;;		i2___wmul
 13232 ;;		i2_isdigit
 13233 ;;		i2_putch
 13234 ;; This function is called by:
 13235 ;;		i2_printf
 13236 ;; This function uses a non-reentrant model
 13237 ;;
 13238                           
 13239                           	psect	text65
 13240  000686                     __ptext65:
 13241                           	opt stack 0
 13242  000686                     i2__doprnt:
 13243                           	opt stack 16
 13244                           
 13245                           ;doprnt.c: 499: signed char c;
 13246                           ;doprnt.c: 501: int width;
 13247                           ;doprnt.c: 506: signed char prec;
 13248                           ;doprnt.c: 508: unsigned char flag;
 13249                           ;doprnt.c: 523: union {
 13250                           ;doprnt.c: 524: unsigned long vd;
 13251                           ;doprnt.c: 525: double integ;
 13252                           ;doprnt.c: 526: } tmpval;
 13253                           ;doprnt.c: 528: unsigned int val;
 13254                           ;doprnt.c: 529: unsigned len;
 13255                           ;doprnt.c: 530: const char * cp;
 13256                           ;doprnt.c: 536: while(c = *f++) {
 13257                           
 13258                           ;incstack = 0
 13259  000686  D2C4               	goto	i2l8483
 13260  000688                     i2l8325:
 13261                           
 13262                           ;doprnt.c: 538: if(c != '%')
 13263  000688  0E25               	movlw	37
 13264  00068A  181E               	xorwf	i2__doprnt@c,w,c
 13265  00068C  B4D8               	btfsc	status,2,c
 13266  00068E  D036               	goto	i2l8335
 13267                           
 13268                           ;doprnt.c: 540: {
 13269                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 13270  000690  EE20 F002          	lfsr	2,2
 13271  000694  500D               	movf	i2__doprnt@pb,w,c
 13272  000696  26D9               	addwf	fsr2l,f,c
 13273  000698  500E               	movf	i2__doprnt@pb+1,w,c
 13274  00069A  22DA               	addwfc	fsr2h,f,c
 13275  00069C  50DE               	movf	postinc2,w,c
 13276  00069E  10DE               	iorwf	postinc2,w,c
 13277  0006A0  B4D8               	btfsc	status,2,c
 13278  0006A2  D016               	goto	i2l8331
 13279  0006A4  EE20 F002          	lfsr	2,2
 13280  0006A8  500D               	movf	i2__doprnt@pb,w,c
 13281  0006AA  26D9               	addwf	fsr2l,f,c
 13282  0006AC  500E               	movf	i2__doprnt@pb+1,w,c
 13283  0006AE  22DA               	addwfc	fsr2h,f,c
 13284  0006B0  CFDE F013          	movff	postinc2,??i2__doprnt
 13285  0006B4  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13286  0006B8  D801               	call	i2u882_48
 13287  0006BA  D2AA               	goto	i2l8483
 13288  0006BC                     i2u882_48:
 13289  0006BC  0005               	push	
 13290  0006BE  6EFA               	movwf	pclath,c
 13291  0006C0  5013               	movf	??i2__doprnt,w,c
 13292  0006C2  6EFD               	movwf	tosl,c
 13293  0006C4  5014               	movf	??i2__doprnt+1,w,c
 13294  0006C6  6EFE               	movwf	tosh,c
 13295  0006C8  6AFF               	clrf	tosu,c
 13296  0006CA  50FA               	movf	pclath,w,c
 13297  0006CC  501E               	movf	i2__doprnt@c,w,c
 13298  0006CE  0012               	return		;indir
 13299  0006D0                     i2l8331:
 13300  0006D0  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13301  0006D4  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13302  0006D8  CFDE F013          	movff	postinc2,??i2__doprnt
 13303  0006DC  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13304  0006E0  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13305  0006E4  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13306  0006E8  C01E  FFDF         	movff	i2__doprnt@c,indf2
 13307  0006EC  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13308  0006F0  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13309  0006F4  2ADE               	incf	postinc2,f,c
 13310  0006F6  0E00               	movlw	0
 13311  0006F8  22DD               	addwfc	postdec2,f,c
 13312                           
 13313                           ;doprnt.c: 542: continue;
 13314  0006FA  D28A               	goto	i2l8483
 13315  0006FC                     i2l8335:
 13316                           
 13317                           ;doprnt.c: 543: }
 13318                           ;doprnt.c: 546: width = 0;
 13319  0006FC  0E00               	movlw	0
 13320  0006FE  6E1D               	movwf	i2__doprnt@width+1,c
 13321  000700  0E00               	movlw	0
 13322  000702  6E1C               	movwf	i2__doprnt@width,c
 13323                           
 13324                           ;doprnt.c: 548: flag = 0;
 13325  000704  0E00               	movlw	0
 13326  000706  6E1B               	movwf	i2__doprnt@flag,c
 13327                           
 13328                           ;doprnt.c: 551: switch(*f) {
 13329                           
 13330                           ;doprnt.c: 550: for(;;) {
 13331  000708  D003               	goto	i2l8341
 13332  00070A                     i2l8337:
 13333                           
 13334                           ;doprnt.c: 580: flag |= 0x04;
 13335  00070A  841B               	bsf	i2__doprnt@flag,2,c
 13336                           
 13337                           ;doprnt.c: 581: f++;
 13338  00070C  4A0F               	infsnz	i2__doprnt@f,f,c
 13339  00070E  2A10               	incf	i2__doprnt@f+1,f,c
 13340  000710                     i2l8341:
 13341  000710  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 13342  000714  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 13343  000718                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13344  000718  6AF8               	clrf	tblptru,c
 13345  00071A                     	endif
 13346  00071A                     	if	0	;tblptru may be non-zero
 13347  00071A                     	endif
 13348  00071A  0008               	tblrd		*
 13349  00071C  50F5               	movf	tablat,w,c
 13350                           
 13351                           ; Switch size 1, requested type "space"
 13352                           ; Number of cases is 1, Range of values is 48 to 48
 13353                           ; switch strategies available:
 13354                           ; Name         Instructions Cycles
 13355                           ; simple_byte            4     3 (average)
 13356                           ;	Chosen strategy is simple_byte
 13357  00071E  0A30               	xorlw	48	; case 48
 13358  000720  B4D8               	btfsc	status,2,c
 13359  000722  D7F3               	goto	i2l8337
 13360                           
 13361                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 13362                           
 13363                           ;doprnt.c: 586: }
 13364                           
 13365                           ;doprnt.c: 585: break;
 13366  000724  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 13367  000728  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 13368  00072C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13369  00072C  6AF8               	clrf	tblptru,c
 13370  00072E                     	endif
 13371  00072E                     	if	0	;tblptru may be non-zero
 13372  00072E                     	endif
 13373  00072E  0008               	tblrd		*
 13374  000730  50F5               	movf	tablat,w,c
 13375  000732  ECDA  F01B         	call	i2_isdigit
 13376  000736  A0D8               	btfss	status,0,c
 13377  000738  D037               	goto	i2l8359
 13378                           
 13379                           ;doprnt.c: 598: width = 0;
 13380  00073A  0E00               	movlw	0
 13381  00073C  6E1D               	movwf	i2__doprnt@width+1,c
 13382  00073E  0E00               	movlw	0
 13383  000740  6E1C               	movwf	i2__doprnt@width,c
 13384  000742                     i2l8347:
 13385                           
 13386                           ;doprnt.c: 600: width *= 10;
 13387  000742  C01C  F001         	movff	i2__doprnt@width,i2___wmul@multiplier
 13388  000746  C01D  F002         	movff	i2__doprnt@width+1,i2___wmul@multiplier+1
 13389  00074A  0E00               	movlw	0
 13390  00074C  6E04               	movwf	i2___wmul@multiplicand+1,c
 13391  00074E  0E0A               	movlw	10
 13392  000750  6E03               	movwf	i2___wmul@multiplicand,c
 13393  000752  ECA5  F01B         	call	i2___wmul	;wreg free
 13394  000756  C001  F01C         	movff	?i2___wmul,i2__doprnt@width
 13395  00075A  C002  F01D         	movff	?i2___wmul+1,i2__doprnt@width+1
 13396                           
 13397                           ;doprnt.c: 601: width += *f++ - '0';
 13398  00075E  0ED0               	movlw	208
 13399  000760  6E13               	movwf	??i2__doprnt& (0+255),c
 13400  000762  0EFF               	movlw	255
 13401  000764  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 13402  000766  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 13403  00076A  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 13404  00076E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13405  00076E  6AF8               	clrf	tblptru,c
 13406  000770                     	endif
 13407  000770                     	if	0	;tblptru may be non-zero
 13408  000770                     	endif
 13409  000770  0008               	tblrd		*
 13410  000772  50F5               	movf	tablat,w,c
 13411  000774  6E15               	movwf	(??i2__doprnt+2)& (0+255),c
 13412  000776  6A16               	clrf	(??i2__doprnt+3)& (0+255),c
 13413  000778  5013               	movf	??i2__doprnt,w,c
 13414  00077A  2615               	addwf	??i2__doprnt+2,f,c
 13415  00077C  5014               	movf	??i2__doprnt+1,w,c
 13416  00077E  2216               	addwfc	??i2__doprnt+3,f,c
 13417  000780  5015               	movf	??i2__doprnt+2,w,c
 13418  000782  261C               	addwf	i2__doprnt@width,f,c
 13419  000784  5016               	movf	??i2__doprnt+3,w,c
 13420  000786  221D               	addwfc	i2__doprnt@width+1,f,c
 13421  000788  4A0F               	infsnz	i2__doprnt@f,f,c
 13422  00078A  2A10               	incf	i2__doprnt@f+1,f,c
 13423                           
 13424                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 13425  00078C  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 13426  000790  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 13427  000794                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13428  000794  6AF8               	clrf	tblptru,c
 13429  000796                     	endif
 13430  000796                     	if	0	;tblptru may be non-zero
 13431  000796                     	endif
 13432  000796  0008               	tblrd		*
 13433  000798  50F5               	movf	tablat,w,c
 13434  00079A  ECDA  F01B         	call	i2_isdigit
 13435  00079E  A0D8               	btfss	status,0,c
 13436  0007A0  D003               	goto	i2l8359
 13437  0007A2  D7CF               	goto	i2l8347
 13438  0007A4                     i2l8355:
 13439                           
 13440                           ;doprnt.c: 721: flag |= 0x80;
 13441  0007A4  8E1B               	bsf	i2__doprnt@flag,7,c
 13442                           
 13443                           ;doprnt.c: 723: break;
 13444  0007A6  D018               	goto	i2l610
 13445  0007A8                     i2l8359:
 13446  0007A8  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 13447  0007AC  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 13448  0007B0  4A0F               	infsnz	i2__doprnt@f,f,c
 13449  0007B2  2A10               	incf	i2__doprnt@f+1,f,c
 13450  0007B4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 13451  0007B4  6AF8               	clrf	tblptru,c
 13452  0007B6                     	endif
 13453  0007B6                     	if	0	;tblptru may be non-zero
 13454  0007B6                     	endif
 13455  0007B6  0008               	tblrd		*
 13456  0007B8  CFF5 F01E          	movff	tablat,i2__doprnt@c
 13457  0007BC  501E               	movf	i2__doprnt@c,w,c
 13458                           
 13459                           ; Switch size 1, requested type "space"
 13460                           ; Number of cases is 4, Range of values is 0 to 120
 13461                           ; switch strategies available:
 13462                           ; Name         Instructions Cycles
 13463                           ; simple_byte           13     7 (average)
 13464                           ;	Chosen strategy is simple_byte
 13465  0007BE  0A00               	xorlw	0	; case 0
 13466  0007C0  B4D8               	btfsc	status,2,c
 13467  0007C2  D233               	goto	i2l8485
 13468  0007C4  0A64               	xorlw	100	; case 100
 13469  0007C6  B4D8               	btfsc	status,2,c
 13470  0007C8  D007               	goto	i2l610
 13471  0007CA  0A0D               	xorlw	13	; case 105
 13472  0007CC  B4D8               	btfsc	status,2,c
 13473  0007CE  D004               	goto	i2l610
 13474  0007D0  0A11               	xorlw	17	; case 120
 13475  0007D2  B4D8               	btfsc	status,2,c
 13476  0007D4  D7E7               	goto	i2l8355
 13477  0007D6  D21C               	goto	i2l8483
 13478  0007D8                     i2l610:
 13479                           
 13480                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 13481  0007D8  BE1B               	btfsc	i2__doprnt@flag,7,c
 13482  0007DA  D01D               	goto	i2l8369
 13483                           
 13484                           ;doprnt.c: 1253: {
 13485                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13486  0007DC  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 13487  0007E0  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 13488  0007E4  CFDF F013          	movff	indf2,??i2__doprnt
 13489  0007E8  0E02               	movlw	2
 13490  0007EA  26DE               	addwf	postinc2,f,c
 13491  0007EC  CFDF F014          	movff	indf2,??i2__doprnt+1
 13492  0007F0  0E00               	movlw	0
 13493  0007F2  22DD               	addwfc	postdec2,f,c
 13494  0007F4  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13495  0007F8  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13496  0007FC  CFDE F019          	movff	postinc2,i2__doprnt@val
 13497  000800  CFDD F01A          	movff	postdec2,i2__doprnt@val+1
 13498                           
 13499                           ;doprnt.c: 1261: if((int)val < 0) {
 13500  000804  AE1A               	btfss	i2__doprnt@val+1,7,c
 13501  000806  D052               	goto	i2l8401
 13502                           
 13503                           ;doprnt.c: 1262: flag |= 0x03;
 13504  000808  0E03               	movlw	3
 13505  00080A  121B               	iorwf	i2__doprnt@flag,f,c
 13506                           
 13507                           ;doprnt.c: 1263: val = -val;
 13508  00080C  6C19               	negf	i2__doprnt@val,c
 13509  00080E  1E1A               	comf	i2__doprnt@val+1,f,c
 13510  000810  B0D8               	btfsc	status,0,c
 13511  000812  2A1A               	incf	i2__doprnt@val+1,f,c
 13512                           
 13513                           ;doprnt.c: 1264: }
 13514                           ;doprnt.c: 1266: }
 13515  000814  D04B               	goto	i2l8401
 13516  000816                     i2l8369:
 13517                           
 13518                           ;doprnt.c: 1268: else
 13519                           ;doprnt.c: 1273: {
 13520                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13521  000816  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 13522  00081A  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 13523  00081E  CFDF F013          	movff	indf2,??i2__doprnt
 13524  000822  0E02               	movlw	2
 13525  000824  26DE               	addwf	postinc2,f,c
 13526  000826  CFDF F014          	movff	indf2,??i2__doprnt+1
 13527  00082A  0E00               	movlw	0
 13528  00082C  22DD               	addwfc	postdec2,f,c
 13529  00082E  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13530  000832  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13531  000836  CFDE F019          	movff	postinc2,i2__doprnt@val
 13532  00083A  CFDD F01A          	movff	postdec2,i2__doprnt@val+1
 13533                           
 13534                           ;doprnt.c: 1287: }
 13535                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 13536  00083E  D036               	goto	i2l8401
 13537  000840                     i2l8371:
 13538                           
 13539                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13540  000840  0E01               	movlw	1
 13541  000842  6E1E               	movwf	i2__doprnt@c,c
 13542  000844                     i2l8373:
 13543  000844  0E05               	movlw	5
 13544  000846  181E               	xorwf	i2__doprnt@c,w,c
 13545  000848  B4D8               	btfsc	status,2,c
 13546  00084A  D038               	goto	i2l8403
 13547                           
 13548                           ;doprnt.c: 1306: if(val < dpowers[c])
 13549  00084C  501E               	movf	i2__doprnt@c,w,c
 13550  00084E  0D02               	mullw	2
 13551  000850  0E42               	movlw	low _dpowers
 13552  000852  24F3               	addwf	prodl,w,c
 13553  000854  6EF6               	movwf	tblptrl,c
 13554  000856  0EFE               	movlw	high _dpowers
 13555  000858  20F4               	addwfc	prodh,w,c
 13556  00085A  6EF7               	movwf	tblptrh,c
 13557  00085C                     	if	1	;There are 3 active tblptr bytes
 13558  00085C  6AF8               	clrf	tblptru,c
 13559  00085E  0E00               	movlw	low (__mediumconst shr (0+16))
 13560  000860  22F8               	addwfc	tblptru,f,c
 13561  000862                     	endif
 13562  000862  0009               	tblrd		*+
 13563  000864  50F5               	movf	tablat,w,c
 13564  000866  5C19               	subwf	i2__doprnt@val,w,c
 13565  000868  0009               	tblrd		*+
 13566  00086A  50F5               	movf	tablat,w,c
 13567  00086C  581A               	subwfb	i2__doprnt@val+1,w,c
 13568  00086E  A0D8               	btfss	status,0,c
 13569  000870  D025               	goto	i2l8403
 13570                           
 13571                           ;doprnt.c: 1307: break;
 13572  000872  2A1E               	incf	i2__doprnt@c,f,c
 13573  000874  D7E7               	goto	i2l8373
 13574  000876                     i2l8385:
 13575                           
 13576                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 13577  000876  0E01               	movlw	1
 13578  000878  6E1E               	movwf	i2__doprnt@c,c
 13579  00087A                     i2l8387:
 13580  00087A  0E04               	movlw	4
 13581  00087C  181E               	xorwf	i2__doprnt@c,w,c
 13582  00087E  B4D8               	btfsc	status,2,c
 13583  000880  D01D               	goto	i2l8403
 13584                           
 13585                           ;doprnt.c: 1317: if(val < hexpowers[c])
 13586  000882  501E               	movf	i2__doprnt@c,w,c
 13587  000884  0D02               	mullw	2
 13588  000886  0E4C               	movlw	low _hexpowers
 13589  000888  24F3               	addwf	prodl,w,c
 13590  00088A  6EF6               	movwf	tblptrl,c
 13591  00088C  0EFE               	movlw	high _hexpowers
 13592  00088E  20F4               	addwfc	prodh,w,c
 13593  000890  6EF7               	movwf	tblptrh,c
 13594  000892                     	if	1	;There are 3 active tblptr bytes
 13595  000892  6AF8               	clrf	tblptru,c
 13596  000894  0E00               	movlw	low (__mediumconst shr (0+16))
 13597  000896  22F8               	addwfc	tblptru,f,c
 13598  000898                     	endif
 13599  000898  0009               	tblrd		*+
 13600  00089A  50F5               	movf	tablat,w,c
 13601  00089C  5C19               	subwf	i2__doprnt@val,w,c
 13602  00089E  0009               	tblrd		*+
 13603  0008A0  50F5               	movf	tablat,w,c
 13604  0008A2  581A               	subwfb	i2__doprnt@val+1,w,c
 13605  0008A4  A0D8               	btfss	status,0,c
 13606  0008A6  D00A               	goto	i2l8403
 13607                           
 13608                           ;doprnt.c: 1318: break;
 13609  0008A8  2A1E               	incf	i2__doprnt@c,f,c
 13610  0008AA  D7E7               	goto	i2l8387
 13611  0008AC                     i2l8401:
 13612  0008AC  501B               	movf	i2__doprnt@flag,w,c
 13613  0008AE  0B80               	andlw	128
 13614                           
 13615                           ; Switch size 1, requested type "space"
 13616                           ; Number of cases is 2, Range of values is 0 to 128
 13617                           ; switch strategies available:
 13618                           ; Name         Instructions Cycles
 13619                           ; simple_byte            7     4 (average)
 13620                           ;	Chosen strategy is simple_byte
 13621  0008B0  0A00               	xorlw	0	; case 0
 13622  0008B2  B4D8               	btfsc	status,2,c
 13623  0008B4  D7C5               	goto	i2l8371
 13624  0008B6  0A80               	xorlw	128	; case 128
 13625  0008B8  B4D8               	btfsc	status,2,c
 13626  0008BA  D7DD               	goto	i2l8385
 13627  0008BC                     i2l8403:
 13628                           
 13629                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13630  0008BC  501C               	movf	i2__doprnt@width,w,c
 13631  0008BE  101D               	iorwf	i2__doprnt@width+1,w,c
 13632  0008C0  B4D8               	btfsc	status,2,c
 13633  0008C2  D009               	goto	i2l8409
 13634  0008C4  C01B  F013         	movff	i2__doprnt@flag,??i2__doprnt
 13635  0008C8  0E03               	movlw	3
 13636  0008CA  1613               	andwf	??i2__doprnt,f,c
 13637  0008CC  B4D8               	btfsc	status,2,c
 13638  0008CE  D003               	goto	i2l8409
 13639                           
 13640                           ;doprnt.c: 1346: width--;
 13641  0008D0  061C               	decf	i2__doprnt@width,f,c
 13642  0008D2  A0D8               	btfss	status,0,c
 13643  0008D4  061D               	decf	i2__doprnt@width+1,f,c
 13644  0008D6                     i2l8409:
 13645                           
 13646                           ;doprnt.c: 1381: if(width > c)
 13647  0008D6  0E80               	movlw	128
 13648  0008D8  BE1E               	btfsc	i2__doprnt@c,7,c
 13649  0008DA  0E7F               	movlw	127
 13650  0008DC  6E13               	movwf	??i2__doprnt& (0+255),c
 13651  0008DE  501C               	movf	i2__doprnt@width,w,c
 13652  0008E0  5C1E               	subwf	i2__doprnt@c,w,c
 13653  0008E2  501D               	movf	i2__doprnt@width+1,w,c
 13654  0008E4  0A80               	xorlw	128
 13655  0008E6  5813               	subwfb	??i2__doprnt& (0+255),w,c
 13656  0008E8  B0D8               	btfsc	status,0,c
 13657  0008EA  D007               	goto	i2l8413
 13658                           
 13659                           ;doprnt.c: 1382: width -= c;
 13660  0008EC  501E               	movf	i2__doprnt@c,w,c
 13661  0008EE  5E1C               	subwf	i2__doprnt@width,f,c
 13662  0008F0  0E00               	movlw	0
 13663  0008F2  BE1E               	btfsc	i2__doprnt@c,7,c
 13664  0008F4  0EFF               	movlw	255
 13665  0008F6  5A1D               	subwfb	i2__doprnt@width+1,f,c
 13666  0008F8  D004               	goto	i2l8415
 13667  0008FA                     i2l8413:
 13668                           
 13669                           ;doprnt.c: 1383: else
 13670                           ;doprnt.c: 1384: width = 0;
 13671  0008FA  0E00               	movlw	0
 13672  0008FC  6E1D               	movwf	i2__doprnt@width+1,c
 13673  0008FE  0E00               	movlw	0
 13674  000900  6E1C               	movwf	i2__doprnt@width,c
 13675  000902                     i2l8415:
 13676                           
 13677                           ;doprnt.c: 1387: if(flag & 0x04) {
 13678  000902  A41B               	btfss	i2__doprnt@flag,2,c
 13679  000904  D078               	goto	i2l8439
 13680                           
 13681                           ;doprnt.c: 1392: if(flag & 0x03)
 13682  000906  C01B  F013         	movff	i2__doprnt@flag,??i2__doprnt
 13683  00090A  0E03               	movlw	3
 13684  00090C  1613               	andwf	??i2__doprnt,f,c
 13685  00090E  B4D8               	btfsc	status,2,c
 13686  000910  D035               	goto	i2l8427
 13687                           
 13688                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 13689  000912  EE20 F002          	lfsr	2,2
 13690  000916  500D               	movf	i2__doprnt@pb,w,c
 13691  000918  26D9               	addwf	fsr2l,f,c
 13692  00091A  500E               	movf	i2__doprnt@pb+1,w,c
 13693  00091C  22DA               	addwfc	fsr2h,f,c
 13694  00091E  50DE               	movf	postinc2,w,c
 13695  000920  10DE               	iorwf	postinc2,w,c
 13696  000922  B4D8               	btfsc	status,2,c
 13697  000924  D016               	goto	i2l8423
 13698  000926  EE20 F002          	lfsr	2,2
 13699  00092A  500D               	movf	i2__doprnt@pb,w,c
 13700  00092C  26D9               	addwf	fsr2l,f,c
 13701  00092E  500E               	movf	i2__doprnt@pb+1,w,c
 13702  000930  22DA               	addwfc	fsr2h,f,c
 13703  000932  CFDE F013          	movff	postinc2,??i2__doprnt
 13704  000936  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13705  00093A  D801               	call	i2u899_48
 13706  00093C  D01F               	goto	i2l8427
 13707  00093E                     i2u899_48:
 13708  00093E  0005               	push	
 13709  000940  6EFA               	movwf	pclath,c
 13710  000942  5013               	movf	??i2__doprnt,w,c
 13711  000944  6EFD               	movwf	tosl,c
 13712  000946  5014               	movf	??i2__doprnt+1,w,c
 13713  000948  6EFE               	movwf	tosh,c
 13714  00094A  6AFF               	clrf	tosu,c
 13715  00094C  50FA               	movf	pclath,w,c
 13716  00094E  0E2D               	movlw	45
 13717  000950  0012               	return		;indir
 13718  000952                     i2l8423:
 13719  000952  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13720  000956  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13721  00095A  CFDE F013          	movff	postinc2,??i2__doprnt
 13722  00095E  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13723  000962  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13724  000966  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13725  00096A  0E2D               	movlw	45
 13726  00096C  6EDF               	movwf	indf2,c
 13727  00096E  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13728  000972  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13729  000976  2ADE               	incf	postinc2,f,c
 13730  000978  0E00               	movlw	0
 13731  00097A  22DD               	addwfc	postdec2,f,c
 13732  00097C                     i2l8427:
 13733                           
 13734                           ;doprnt.c: 1415: if(width)
 13735  00097C  501C               	movf	i2__doprnt@width,w,c
 13736  00097E  101D               	iorwf	i2__doprnt@width+1,w,c
 13737  000980  B4D8               	btfsc	status,2,c
 13738  000982  D0B4               	goto	i2l8461
 13739                           
 13740                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 13741                           
 13742                           ;doprnt.c: 1416: do
 13743  000984  EE20 F002          	lfsr	2,2
 13744  000988  500D               	movf	i2__doprnt@pb,w,c
 13745  00098A  26D9               	addwf	fsr2l,f,c
 13746  00098C  500E               	movf	i2__doprnt@pb+1,w,c
 13747  00098E  22DA               	addwfc	fsr2h,f,c
 13748  000990  50DE               	movf	postinc2,w,c
 13749  000992  10DE               	iorwf	postinc2,w,c
 13750  000994  B4D8               	btfsc	status,2,c
 13751  000996  D016               	goto	i2l8433
 13752  000998  EE20 F002          	lfsr	2,2
 13753  00099C  500D               	movf	i2__doprnt@pb,w,c
 13754  00099E  26D9               	addwf	fsr2l,f,c
 13755  0009A0  500E               	movf	i2__doprnt@pb+1,w,c
 13756  0009A2  22DA               	addwfc	fsr2h,f,c
 13757  0009A4  CFDE F013          	movff	postinc2,??i2__doprnt
 13758  0009A8  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13759  0009AC  D801               	call	i2u902_48
 13760  0009AE  D01F               	goto	i2l8437
 13761  0009B0                     i2u902_48:
 13762  0009B0  0005               	push	
 13763  0009B2  6EFA               	movwf	pclath,c
 13764  0009B4  5013               	movf	??i2__doprnt,w,c
 13765  0009B6  6EFD               	movwf	tosl,c
 13766  0009B8  5014               	movf	??i2__doprnt+1,w,c
 13767  0009BA  6EFE               	movwf	tosh,c
 13768  0009BC  6AFF               	clrf	tosu,c
 13769  0009BE  50FA               	movf	pclath,w,c
 13770  0009C0  0E30               	movlw	48
 13771  0009C2  0012               	return		;indir
 13772  0009C4                     i2l8433:
 13773  0009C4  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13774  0009C8  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13775  0009CC  CFDE F013          	movff	postinc2,??i2__doprnt
 13776  0009D0  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13777  0009D4  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13778  0009D8  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13779  0009DC  0E30               	movlw	48
 13780  0009DE  6EDF               	movwf	indf2,c
 13781  0009E0  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13782  0009E4  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13783  0009E8  2ADE               	incf	postinc2,f,c
 13784  0009EA  0E00               	movlw	0
 13785  0009EC  22DD               	addwfc	postdec2,f,c
 13786  0009EE                     i2l8437:
 13787                           
 13788                           ;doprnt.c: 1418: while(--width);
 13789  0009EE  061C               	decf	i2__doprnt@width,f,c
 13790  0009F0  A0D8               	btfss	status,0,c
 13791  0009F2  061D               	decf	i2__doprnt@width+1,f,c
 13792  0009F4  D7C3               	goto	i2l8427
 13793  0009F6                     i2l8439:
 13794                           
 13795                           ;doprnt.c: 1422: {
 13796                           ;doprnt.c: 1424: if(width
 13797                           ;doprnt.c: 1428: )
 13798  0009F6  501C               	movf	i2__doprnt@width,w,c
 13799  0009F8  101D               	iorwf	i2__doprnt@width+1,w,c
 13800  0009FA  B4D8               	btfsc	status,2,c
 13801  0009FC  D03C               	goto	i2l8451
 13802  0009FE                     i2l8441:
 13803                           
 13804                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 13805  0009FE  EE20 F002          	lfsr	2,2
 13806  000A02  500D               	movf	i2__doprnt@pb,w,c
 13807  000A04  26D9               	addwf	fsr2l,f,c
 13808  000A06  500E               	movf	i2__doprnt@pb+1,w,c
 13809  000A08  22DA               	addwfc	fsr2h,f,c
 13810  000A0A  50DE               	movf	postinc2,w,c
 13811  000A0C  10DE               	iorwf	postinc2,w,c
 13812  000A0E  B4D8               	btfsc	status,2,c
 13813  000A10  D016               	goto	i2l8445
 13814  000A12  EE20 F002          	lfsr	2,2
 13815  000A16  500D               	movf	i2__doprnt@pb,w,c
 13816  000A18  26D9               	addwf	fsr2l,f,c
 13817  000A1A  500E               	movf	i2__doprnt@pb+1,w,c
 13818  000A1C  22DA               	addwfc	fsr2h,f,c
 13819  000A1E  CFDE F013          	movff	postinc2,??i2__doprnt
 13820  000A22  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13821  000A26  D801               	call	i2u906_48
 13822  000A28  D01F               	goto	i2l8449
 13823  000A2A                     i2u906_48:
 13824  000A2A  0005               	push	
 13825  000A2C  6EFA               	movwf	pclath,c
 13826  000A2E  5013               	movf	??i2__doprnt,w,c
 13827  000A30  6EFD               	movwf	tosl,c
 13828  000A32  5014               	movf	??i2__doprnt+1,w,c
 13829  000A34  6EFE               	movwf	tosh,c
 13830  000A36  6AFF               	clrf	tosu,c
 13831  000A38  50FA               	movf	pclath,w,c
 13832  000A3A  0E20               	movlw	32
 13833  000A3C  0012               	return		;indir
 13834  000A3E                     i2l8445:
 13835  000A3E  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13836  000A42  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13837  000A46  CFDE F013          	movff	postinc2,??i2__doprnt
 13838  000A4A  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13839  000A4E  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13840  000A52  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13841  000A56  0E20               	movlw	32
 13842  000A58  6EDF               	movwf	indf2,c
 13843  000A5A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13844  000A5E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13845  000A62  2ADE               	incf	postinc2,f,c
 13846  000A64  0E00               	movlw	0
 13847  000A66  22DD               	addwfc	postdec2,f,c
 13848  000A68                     i2l8449:
 13849                           
 13850                           ;doprnt.c: 1431: while(--width);
 13851  000A68  061C               	decf	i2__doprnt@width,f,c
 13852  000A6A  A0D8               	btfss	status,0,c
 13853  000A6C  061D               	decf	i2__doprnt@width+1,f,c
 13854  000A6E  501C               	movf	i2__doprnt@width,w,c
 13855  000A70  101D               	iorwf	i2__doprnt@width+1,w,c
 13856  000A72  A4D8               	btfss	status,2,c
 13857  000A74  D7C4               	goto	i2l8441
 13858  000A76                     i2l8451:
 13859                           
 13860                           ;doprnt.c: 1438: if(flag & 0x03)
 13861  000A76  C01B  F013         	movff	i2__doprnt@flag,??i2__doprnt
 13862  000A7A  0E03               	movlw	3
 13863  000A7C  1613               	andwf	??i2__doprnt,f,c
 13864  000A7E  B4D8               	btfsc	status,2,c
 13865  000A80  D035               	goto	i2l8461
 13866                           
 13867                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 13868  000A82  EE20 F002          	lfsr	2,2
 13869  000A86  500D               	movf	i2__doprnt@pb,w,c
 13870  000A88  26D9               	addwf	fsr2l,f,c
 13871  000A8A  500E               	movf	i2__doprnt@pb+1,w,c
 13872  000A8C  22DA               	addwfc	fsr2h,f,c
 13873  000A8E  50DE               	movf	postinc2,w,c
 13874  000A90  10DE               	iorwf	postinc2,w,c
 13875  000A92  B4D8               	btfsc	status,2,c
 13876  000A94  D016               	goto	i2l8457
 13877  000A96  EE20 F002          	lfsr	2,2
 13878  000A9A  500D               	movf	i2__doprnt@pb,w,c
 13879  000A9C  26D9               	addwf	fsr2l,f,c
 13880  000A9E  500E               	movf	i2__doprnt@pb+1,w,c
 13881  000AA0  22DA               	addwfc	fsr2h,f,c
 13882  000AA2  CFDE F013          	movff	postinc2,??i2__doprnt
 13883  000AA6  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13884  000AAA  D801               	call	i2u910_48
 13885  000AAC  D01F               	goto	i2l8461
 13886  000AAE                     i2u910_48:
 13887  000AAE  0005               	push	
 13888  000AB0  6EFA               	movwf	pclath,c
 13889  000AB2  5013               	movf	??i2__doprnt,w,c
 13890  000AB4  6EFD               	movwf	tosl,c
 13891  000AB6  5014               	movf	??i2__doprnt+1,w,c
 13892  000AB8  6EFE               	movwf	tosh,c
 13893  000ABA  6AFF               	clrf	tosu,c
 13894  000ABC  50FA               	movf	pclath,w,c
 13895  000ABE  0E2D               	movlw	45
 13896  000AC0  0012               	return		;indir
 13897  000AC2                     i2l8457:
 13898  000AC2  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13899  000AC6  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13900  000ACA  CFDE F013          	movff	postinc2,??i2__doprnt
 13901  000ACE  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13902  000AD2  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13903  000AD6  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13904  000ADA  0E2D               	movlw	45
 13905  000ADC  6EDF               	movwf	indf2,c
 13906  000ADE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13907  000AE2  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13908  000AE6  2ADE               	incf	postinc2,f,c
 13909  000AE8  0E00               	movlw	0
 13910  000AEA  22DD               	addwfc	postdec2,f,c
 13911  000AEC                     i2l8461:
 13912                           
 13913                           ;doprnt.c: 1469: }
 13914                           ;doprnt.c: 1472: prec = c;
 13915  000AEC  C01E  F018         	movff	i2__doprnt@c,i2__doprnt@prec
 13916                           
 13917                           ;doprnt.c: 1474: while(prec--) {
 13918  000AF0  D08B               	goto	i2l8481
 13919  000AF2                     i2l8463:
 13920                           
 13921                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13922  000AF2  5018               	movf	i2__doprnt@prec,w,c
 13923  000AF4  0D02               	mullw	2
 13924  000AF6  0E42               	movlw	low _dpowers
 13925  000AF8  24F3               	addwf	prodl,w,c
 13926  000AFA  6EF6               	movwf	tblptrl,c
 13927  000AFC  0EFE               	movlw	high _dpowers
 13928  000AFE  20F4               	addwfc	prodh,w,c
 13929  000B00  6EF7               	movwf	tblptrh,c
 13930  000B02                     	if	1	;There are 3 active tblptr bytes
 13931  000B02  6AF8               	clrf	tblptru,c
 13932  000B04  0E00               	movlw	low (__mediumconst shr (0+16))
 13933  000B06  22F8               	addwfc	tblptru,f,c
 13934  000B08                     	endif
 13935  000B08  0009               	tblrd		*+
 13936  000B0A  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 13937  000B0E  000A               	tblrd		*-
 13938  000B10  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 13939  000B14  C019  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 13940  000B18  C01A  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 13941  000B1C  EC9C  F019         	call	i2___lwdiv
 13942  000B20  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 13943  000B24  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 13944  000B28  0E00               	movlw	0
 13945  000B2A  6E0B               	movwf	i2___lwmod@divisor+1,c
 13946  000B2C  0E0A               	movlw	10
 13947  000B2E  6E0A               	movwf	i2___lwmod@divisor,c
 13948  000B30  EC78  F01A         	call	i2___lwmod	;wreg free
 13949  000B34  5008               	movf	?i2___lwmod,w,c
 13950  000B36  0F30               	addlw	48
 13951  000B38  6E1E               	movwf	i2__doprnt@c,c
 13952                           
 13953                           ;doprnt.c: 1491: break;
 13954  000B3A  D031               	goto	i2l8473
 13955  000B3C                     i2l8465:
 13956                           
 13957                           ;doprnt.c: 1499: {
 13958                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 13959  000B3C  C019  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 13960  000B40  C01A  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 13961  000B44  5018               	movf	i2__doprnt@prec,w,c
 13962  000B46  0D02               	mullw	2
 13963  000B48  0E4C               	movlw	low _hexpowers
 13964  000B4A  24F3               	addwf	prodl,w,c
 13965  000B4C  6EF6               	movwf	tblptrl,c
 13966  000B4E  0EFE               	movlw	high _hexpowers
 13967  000B50  20F4               	addwfc	prodh,w,c
 13968  000B52  6EF7               	movwf	tblptrh,c
 13969  000B54                     	if	1	;There are 3 active tblptr bytes
 13970  000B54  6AF8               	clrf	tblptru,c
 13971  000B56  0E00               	movlw	low (__mediumconst shr (0+16))
 13972  000B58  22F8               	addwfc	tblptru,f,c
 13973  000B5A                     	endif
 13974  000B5A  0009               	tblrd		*+
 13975  000B5C  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 13976  000B60  000A               	tblrd		*-
 13977  000B62  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 13978  000B66  EC9C  F019         	call	i2___lwdiv	;wreg free
 13979  000B6A  5001               	movf	?i2___lwdiv,w,c
 13980  000B6C  0B0F               	andlw	15
 13981  000B6E  6E17               	movwf	i2__doprnt@idx,c
 13982                           
 13983                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 13984  000B70  5017               	movf	i2__doprnt@idx,w,c
 13985  000B72  0D01               	mullw	1
 13986  000B74  0E80               	movlw	low STR_35
 13987  000B76  24F3               	addwf	prodl,w,c
 13988  000B78  6EF6               	movwf	tblptrl,c
 13989  000B7A  0EFE               	movlw	high STR_35
 13990  000B7C  20F4               	addwfc	prodh,w,c
 13991  000B7E  6EF7               	movwf	tblptrh,c
 13992  000B80                     	if	1	;There are 3 active tblptr bytes
 13993  000B80  6AF8               	clrf	tblptru,c
 13994  000B82  0E00               	movlw	low (__mediumconst shr (0+16))
 13995  000B84  22F8               	addwfc	tblptru,f,c
 13996  000B86                     	endif
 13997  000B86  0008               	tblrd		*
 13998  000B88  CFF5 F01E          	movff	tablat,i2__doprnt@c
 13999                           
 14000                           ;doprnt.c: 1523: }
 14001                           
 14002                           ;doprnt.c: 1508: }
 14003                           ;doprnt.c: 1510: break;
 14004  000B8C  D008               	goto	i2l8473
 14005  000B8E                     i2l8471:
 14006  000B8E  501B               	movf	i2__doprnt@flag,w,c
 14007  000B90  0B80               	andlw	128
 14008                           
 14009                           ; Switch size 1, requested type "space"
 14010                           ; Number of cases is 2, Range of values is 0 to 128
 14011                           ; switch strategies available:
 14012                           ; Name         Instructions Cycles
 14013                           ; simple_byte            7     4 (average)
 14014                           ;	Chosen strategy is simple_byte
 14015  000B92  0A00               	xorlw	0	; case 0
 14016  000B94  B4D8               	btfsc	status,2,c
 14017  000B96  D7AD               	goto	i2l8463
 14018  000B98  0A80               	xorlw	128	; case 128
 14019  000B9A  B4D8               	btfsc	status,2,c
 14020  000B9C  D7CF               	goto	i2l8465
 14021  000B9E                     i2l8473:
 14022                           
 14023                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 14024  000B9E  EE20 F002          	lfsr	2,2
 14025  000BA2  500D               	movf	i2__doprnt@pb,w,c
 14026  000BA4  26D9               	addwf	fsr2l,f,c
 14027  000BA6  500E               	movf	i2__doprnt@pb+1,w,c
 14028  000BA8  22DA               	addwfc	fsr2h,f,c
 14029  000BAA  50DE               	movf	postinc2,w,c
 14030  000BAC  10DE               	iorwf	postinc2,w,c
 14031  000BAE  B4D8               	btfsc	status,2,c
 14032  000BB0  D016               	goto	i2l8477
 14033  000BB2  EE20 F002          	lfsr	2,2
 14034  000BB6  500D               	movf	i2__doprnt@pb,w,c
 14035  000BB8  26D9               	addwf	fsr2l,f,c
 14036  000BBA  500E               	movf	i2__doprnt@pb+1,w,c
 14037  000BBC  22DA               	addwfc	fsr2h,f,c
 14038  000BBE  CFDE F013          	movff	postinc2,??i2__doprnt
 14039  000BC2  CFDD F014          	movff	postdec2,??i2__doprnt+1
 14040  000BC6  D801               	call	i2u912_48
 14041  000BC8  D01F               	goto	i2l8481
 14042  000BCA                     i2u912_48:
 14043  000BCA  0005               	push	
 14044  000BCC  6EFA               	movwf	pclath,c
 14045  000BCE  5013               	movf	??i2__doprnt,w,c
 14046  000BD0  6EFD               	movwf	tosl,c
 14047  000BD2  5014               	movf	??i2__doprnt+1,w,c
 14048  000BD4  6EFE               	movwf	tosh,c
 14049  000BD6  6AFF               	clrf	tosu,c
 14050  000BD8  50FA               	movf	pclath,w,c
 14051  000BDA  501E               	movf	i2__doprnt@c,w,c
 14052  000BDC  0012               	return		;indir
 14053  000BDE                     i2l8477:
 14054  000BDE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 14055  000BE2  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 14056  000BE6  CFDE F013          	movff	postinc2,??i2__doprnt
 14057  000BEA  CFDD F014          	movff	postdec2,??i2__doprnt+1
 14058  000BEE  C013  FFD9         	movff	??i2__doprnt,fsr2l
 14059  000BF2  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 14060  000BF6  C01E  FFDF         	movff	i2__doprnt@c,indf2
 14061  000BFA  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 14062  000BFE  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 14063  000C02  2ADE               	incf	postinc2,f,c
 14064  000C04  0E00               	movlw	0
 14065  000C06  22DD               	addwfc	postdec2,f,c
 14066  000C08                     i2l8481:
 14067  000C08  0618               	decf	i2__doprnt@prec,f,c
 14068  000C0A  2818               	incf	i2__doprnt@prec,w,c
 14069  000C0C  A4D8               	btfss	status,2,c
 14070  000C0E  D7BF               	goto	i2l8471
 14071  000C10                     i2l8483:
 14072  000C10  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 14073  000C14  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 14074  000C18  4A0F               	infsnz	i2__doprnt@f,f,c
 14075  000C1A  2A10               	incf	i2__doprnt@f+1,f,c
 14076  000C1C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 14077  000C1C  6AF8               	clrf	tblptru,c
 14078  000C1E                     	endif
 14079  000C1E                     	if	0	;tblptru may be non-zero
 14080  000C1E                     	endif
 14081  000C1E  0008               	tblrd		*
 14082  000C20  CFF5 F01E          	movff	tablat,i2__doprnt@c
 14083  000C24  501E               	movf	i2__doprnt@c,w,c
 14084  000C26  A4D8               	btfss	status,2,c
 14085  000C28  D52F               	goto	i2l8325
 14086  000C2A                     i2l8485:
 14087                           
 14088                           ;doprnt.c: 1540: return 0;
 14089  000C2A  0E00               	movlw	0
 14090  000C2C  6E0E               	movwf	?i2__doprnt+1,c
 14091  000C2E  0E00               	movlw	0
 14092  000C30  6E0D               	movwf	?i2__doprnt,c
 14093  000C32  0012               	return	
 14094  000C34                     __end_ofi2__doprnt:
 14095                           	opt stack 0
 14096                           tosu	equ	0xFFF
 14097                           tosh	equ	0xFFE
 14098                           tosl	equ	0xFFD
 14099                           pclatu	equ	0xFFB
 14100                           pclath	equ	0xFFA
 14101                           tblptru	equ	0xFF8
 14102                           tblptrh	equ	0xFF7
 14103                           tblptrl	equ	0xFF6
 14104                           tablat	equ	0xFF5
 14105                           prodh	equ	0xFF4
 14106                           prodl	equ	0xFF3
 14107                           intcon	equ	0xFF2
 14108                           intcon2	equ	0xFF1
 14109                           postinc0	equ	0xFEE
 14110                           fsr0h	equ	0xFEA
 14111                           fsr0l	equ	0xFE9
 14112                           wreg	equ	0xFE8
 14113                           indf1	equ	0xFE7
 14114                           postinc1	equ	0xFE6
 14115                           postdec1	equ	0xFE5
 14116                           fsr1h	equ	0xFE2
 14117                           fsr1l	equ	0xFE1
 14118                           indf2	equ	0xFDF
 14119                           postinc2	equ	0xFDE
 14120                           postdec2	equ	0xFDD
 14121                           fsr2h	equ	0xFDA
 14122                           fsr2l	equ	0xFD9
 14123                           status	equ	0xFD8
 14124                           
 14125 ;; *************** function i2_putch *****************
 14126 ;; Defined at:
 14127 ;;		line 30 in file "lcd.c"
 14128 ;; Parameters:    Size  Location     Type
 14129 ;;  data            1    wreg     unsigned char 
 14130 ;; Auto vars:     Size  Location     Type
 14131 ;;  data            1    2[COMRAM] unsigned char 
 14132 ;; Return value:  Size  Location     Type
 14133 ;;                  1    wreg      void 
 14134 ;; Registers used:
 14135 ;;		wreg, status,2, status,0, cstack
 14136 ;; Tracked objects:
 14137 ;;		On entry : 0/0
 14138 ;;		On exit  : 0/0
 14139 ;;		Unchanged: 0/0
 14140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14142 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14144 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14145 ;;Total ram usage:        1 bytes
 14146 ;; Hardware stack levels used:    1
 14147 ;; Hardware stack levels required when called:    1
 14148 ;; This function calls:
 14149 ;;		i2_lcdNibble
 14150 ;; This function is called by:
 14151 ;;		i2_printf
 14152 ;; This function uses a non-reentrant model
 14153 ;;
 14154                           
 14155                           	psect	text66
 14156  00386A                     __ptext66:
 14157                           	opt stack 0
 14158  00386A                     i2_putch:
 14159                           	opt stack 16
 14160                           
 14161                           ;incstack = 0
 14162                           ;i2putch@data stored from wreg
 14163  00386A  6E03               	movwf	i2putch@data,c
 14164                           
 14165                           ;lcd.c: 31: LATDbits.LATD2 = 1;
 14166  00386C  848C               	bsf	3980,2,c	;volatile
 14167                           
 14168                           ;lcd.c: 32: lcdNibble(data);
 14169  00386E  5003               	movf	i2putch@data,w,c
 14170  003870  EC48  F019         	call	i2_lcdNibble
 14171  003874  0012               	return		;funcret
 14172  003876                     __end_ofi2_putch:
 14173                           	opt stack 0
 14174                           tosu	equ	0xFFF
 14175                           tosh	equ	0xFFE
 14176                           tosl	equ	0xFFD
 14177                           pclatu	equ	0xFFB
 14178                           pclath	equ	0xFFA
 14179                           tblptru	equ	0xFF8
 14180                           tblptrh	equ	0xFF7
 14181                           tblptrl	equ	0xFF6
 14182                           tablat	equ	0xFF5
 14183                           prodh	equ	0xFF4
 14184                           prodl	equ	0xFF3
 14185                           intcon	equ	0xFF2
 14186                           intcon2	equ	0xFF1
 14187                           postinc0	equ	0xFEE
 14188                           fsr0h	equ	0xFEA
 14189                           fsr0l	equ	0xFE9
 14190                           wreg	equ	0xFE8
 14191                           indf1	equ	0xFE7
 14192                           postinc1	equ	0xFE6
 14193                           postdec1	equ	0xFE5
 14194                           fsr1h	equ	0xFE2
 14195                           fsr1l	equ	0xFE1
 14196                           indf2	equ	0xFDF
 14197                           postinc2	equ	0xFDE
 14198                           postdec2	equ	0xFDD
 14199                           fsr2h	equ	0xFDA
 14200                           fsr2l	equ	0xFD9
 14201                           status	equ	0xFD8
 14202                           
 14203 ;; *************** function i2_isdigit *****************
 14204 ;; Defined at:
 14205 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 14206 ;; Parameters:    Size  Location     Type
 14207 ;;  c               1    wreg     unsigned char 
 14208 ;; Auto vars:     Size  Location     Type
 14209 ;;  c               1    2[COMRAM] unsigned char 
 14210 ;; Return value:  Size  Location     Type
 14211 ;;		None               void
 14212 ;; Registers used:
 14213 ;;		wreg, status,2, status,0
 14214 ;; Tracked objects:
 14215 ;;		On entry : 0/0
 14216 ;;		On exit  : 0/0
 14217 ;;		Unchanged: 0/0
 14218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14220 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14221 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14222 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14223 ;;Total ram usage:        3 bytes
 14224 ;; Hardware stack levels used:    1
 14225 ;; This function calls:
 14226 ;;		Nothing
 14227 ;; This function is called by:
 14228 ;;		i2__doprnt
 14229 ;; This function uses a non-reentrant model
 14230 ;;
 14231                           
 14232                           	psect	text67
 14233  0037B4                     __ptext67:
 14234                           	opt stack 0
 14235  0037B4                     i2_isdigit:
 14236                           	opt stack 17
 14237                           
 14238                           ;incstack = 0
 14239                           ;i2isdigit@c stored from wreg
 14240  0037B4  6E03               	movwf	i2isdigit@c,c
 14241  0037B6  0E00               	movlw	0
 14242  0037B8  6E02               	movwf	i2_isdigit$1338,c
 14243  0037BA  0E3A               	movlw	58
 14244  0037BC  6003               	cpfslt	i2isdigit@c,c
 14245  0037BE  D005               	goto	i2l3925
 14246  0037C0  0E2F               	movlw	47
 14247  0037C2  6403               	cpfsgt	i2isdigit@c,c
 14248  0037C4  D002               	goto	i2l3925
 14249  0037C6  0E01               	movlw	1
 14250  0037C8  6E02               	movwf	i2_isdigit$1338,c
 14251  0037CA                     i2l3925:
 14252  0037CA  C002  F001         	movff	i2_isdigit$1338,??i2_isdigit
 14253  0037CE  3001               	rrcf	??i2_isdigit,w,c
 14254  0037D0  0012               	return	
 14255  0037D2                     __end_ofi2_isdigit:
 14256                           	opt stack 0
 14257                           tosu	equ	0xFFF
 14258                           tosh	equ	0xFFE
 14259                           tosl	equ	0xFFD
 14260                           pclatu	equ	0xFFB
 14261                           pclath	equ	0xFFA
 14262                           tblptru	equ	0xFF8
 14263                           tblptrh	equ	0xFF7
 14264                           tblptrl	equ	0xFF6
 14265                           tablat	equ	0xFF5
 14266                           prodh	equ	0xFF4
 14267                           prodl	equ	0xFF3
 14268                           intcon	equ	0xFF2
 14269                           intcon2	equ	0xFF1
 14270                           postinc0	equ	0xFEE
 14271                           fsr0h	equ	0xFEA
 14272                           fsr0l	equ	0xFE9
 14273                           wreg	equ	0xFE8
 14274                           indf1	equ	0xFE7
 14275                           postinc1	equ	0xFE6
 14276                           postdec1	equ	0xFE5
 14277                           fsr1h	equ	0xFE2
 14278                           fsr1l	equ	0xFE1
 14279                           indf2	equ	0xFDF
 14280                           postinc2	equ	0xFDE
 14281                           postdec2	equ	0xFDD
 14282                           fsr2h	equ	0xFDA
 14283                           fsr2l	equ	0xFD9
 14284                           status	equ	0xFD8
 14285                           
 14286 ;; *************** function i2___wmul *****************
 14287 ;; Defined at:
 14288 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 14289 ;; Parameters:    Size  Location     Type
 14290 ;;  multiplier      2    0[COMRAM] unsigned int 
 14291 ;;  multiplicand    2    2[COMRAM] unsigned int 
 14292 ;; Auto vars:     Size  Location     Type
 14293 ;;  __wmul          2    4[COMRAM] unsigned int 
 14294 ;; Return value:  Size  Location     Type
 14295 ;;                  2    0[COMRAM] unsigned int 
 14296 ;; Registers used:
 14297 ;;		wreg, status,2, status,0, prodl, prodh
 14298 ;; Tracked objects:
 14299 ;;		On entry : 0/0
 14300 ;;		On exit  : 0/0
 14301 ;;		Unchanged: 0/0
 14302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14303 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14304 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14306 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14307 ;;Total ram usage:        6 bytes
 14308 ;; Hardware stack levels used:    1
 14309 ;; This function calls:
 14310 ;;		Nothing
 14311 ;; This function is called by:
 14312 ;;		i2__doprnt
 14313 ;; This function uses a non-reentrant model
 14314 ;;
 14315                           
 14316                           	psect	text68
 14317  00374A                     __ptext68:
 14318                           	opt stack 0
 14319  00374A                     i2___wmul:
 14320                           	opt stack 17
 14321                           
 14322                           ;incstack = 0
 14323  00374A  5001               	movf	i2___wmul@multiplier,w,c
 14324  00374C  0203               	mulwf	i2___wmul@multiplicand,c
 14325  00374E  CFF3 F005          	movff	prodl,i2___wmul@product
 14326  003752  CFF4 F006          	movff	prodh,i2___wmul@product+1
 14327  003756  5001               	movf	i2___wmul@multiplier,w,c
 14328  003758  0204               	mulwf	i2___wmul@multiplicand+1,c
 14329  00375A  50F3               	movf	prodl,w,c
 14330  00375C  2606               	addwf	i2___wmul@product+1,f,c
 14331  00375E  5002               	movf	i2___wmul@multiplier+1,w,c
 14332  003760  0203               	mulwf	i2___wmul@multiplicand,c
 14333  003762  50F3               	movf	prodl,w,c
 14334  003764  2606               	addwf	i2___wmul@product+1,f,c
 14335  003766  C005  F001         	movff	i2___wmul@product,?i2___wmul
 14336  00376A  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 14337  00376E  0012               	return	
 14338  003770                     __end_ofi2___wmul:
 14339                           	opt stack 0
 14340                           tosu	equ	0xFFF
 14341                           tosh	equ	0xFFE
 14342                           tosl	equ	0xFFD
 14343                           pclatu	equ	0xFFB
 14344                           pclath	equ	0xFFA
 14345                           tblptru	equ	0xFF8
 14346                           tblptrh	equ	0xFF7
 14347                           tblptrl	equ	0xFF6
 14348                           tablat	equ	0xFF5
 14349                           prodh	equ	0xFF4
 14350                           prodl	equ	0xFF3
 14351                           intcon	equ	0xFF2
 14352                           intcon2	equ	0xFF1
 14353                           postinc0	equ	0xFEE
 14354                           fsr0h	equ	0xFEA
 14355                           fsr0l	equ	0xFE9
 14356                           wreg	equ	0xFE8
 14357                           indf1	equ	0xFE7
 14358                           postinc1	equ	0xFE6
 14359                           postdec1	equ	0xFE5
 14360                           fsr1h	equ	0xFE2
 14361                           fsr1l	equ	0xFE1
 14362                           indf2	equ	0xFDF
 14363                           postinc2	equ	0xFDE
 14364                           postdec2	equ	0xFDD
 14365                           fsr2h	equ	0xFDA
 14366                           fsr2l	equ	0xFD9
 14367                           status	equ	0xFD8
 14368                           
 14369 ;; *************** function i2___lwmod *****************
 14370 ;; Defined at:
 14371 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 14372 ;; Parameters:    Size  Location     Type
 14373 ;;  dividend        2    7[COMRAM] unsigned int 
 14374 ;;  divisor         2    9[COMRAM] unsigned int 
 14375 ;; Auto vars:     Size  Location     Type
 14376 ;;  __lwmod         1   11[COMRAM] unsigned char 
 14377 ;; Return value:  Size  Location     Type
 14378 ;;                  2    7[COMRAM] unsigned int 
 14379 ;; Registers used:
 14380 ;;		wreg, status,2, status,0
 14381 ;; Tracked objects:
 14382 ;;		On entry : 0/0
 14383 ;;		On exit  : 0/0
 14384 ;;		Unchanged: 0/0
 14385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14386 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14387 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14389 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14390 ;;Total ram usage:        5 bytes
 14391 ;; Hardware stack levels used:    1
 14392 ;; This function calls:
 14393 ;;		Nothing
 14394 ;; This function is called by:
 14395 ;;		i2__doprnt
 14396 ;; This function uses a non-reentrant model
 14397 ;;
 14398                           
 14399                           	psect	text69
 14400  0034F0                     __ptext69:
 14401                           	opt stack 0
 14402  0034F0                     i2___lwmod:
 14403                           	opt stack 17
 14404                           
 14405                           ;incstack = 0
 14406  0034F0  500A               	movf	i2___lwmod@divisor,w,c
 14407  0034F2  100B               	iorwf	i2___lwmod@divisor+1,w,c
 14408  0034F4  B4D8               	btfsc	status,2,c
 14409  0034F6  D018               	goto	i2l1090
 14410  0034F8  0E01               	movlw	1
 14411  0034FA  6E0C               	movwf	i2___lwmod@counter,c
 14412  0034FC  D004               	goto	i2l3957
 14413  0034FE                     i2l3955:
 14414  0034FE  90D8               	bcf	status,0,c
 14415  003500  360A               	rlcf	i2___lwmod@divisor,f,c
 14416  003502  360B               	rlcf	i2___lwmod@divisor+1,f,c
 14417  003504  2A0C               	incf	i2___lwmod@counter,f,c
 14418  003506                     i2l3957:
 14419  003506  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 14420  003508  D7FA               	goto	i2l3955
 14421  00350A                     i2l3959:
 14422  00350A  500A               	movf	i2___lwmod@divisor,w,c
 14423  00350C  5C08               	subwf	i2___lwmod@dividend,w,c
 14424  00350E  500B               	movf	i2___lwmod@divisor+1,w,c
 14425  003510  5809               	subwfb	i2___lwmod@dividend+1,w,c
 14426  003512  A0D8               	btfss	status,0,c
 14427  003514  D004               	goto	i2l3963
 14428  003516  500A               	movf	i2___lwmod@divisor,w,c
 14429  003518  5E08               	subwf	i2___lwmod@dividend,f,c
 14430  00351A  500B               	movf	i2___lwmod@divisor+1,w,c
 14431  00351C  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 14432  00351E                     i2l3963:
 14433  00351E  90D8               	bcf	status,0,c
 14434  003520  320B               	rrcf	i2___lwmod@divisor+1,f,c
 14435  003522  320A               	rrcf	i2___lwmod@divisor,f,c
 14436  003524  2E0C               	decfsz	i2___lwmod@counter,f,c
 14437  003526  D7F1               	goto	i2l3959
 14438  003528                     i2l1090:
 14439  003528  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 14440  00352C  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 14441  003530  0012               	return		;funcret
 14442  003532                     __end_ofi2___lwmod:
 14443                           	opt stack 0
 14444                           tosu	equ	0xFFF
 14445                           tosh	equ	0xFFE
 14446                           tosl	equ	0xFFD
 14447                           pclatu	equ	0xFFB
 14448                           pclath	equ	0xFFA
 14449                           tblptru	equ	0xFF8
 14450                           tblptrh	equ	0xFF7
 14451                           tblptrl	equ	0xFF6
 14452                           tablat	equ	0xFF5
 14453                           prodh	equ	0xFF4
 14454                           prodl	equ	0xFF3
 14455                           intcon	equ	0xFF2
 14456                           intcon2	equ	0xFF1
 14457                           postinc0	equ	0xFEE
 14458                           fsr0h	equ	0xFEA
 14459                           fsr0l	equ	0xFE9
 14460                           wreg	equ	0xFE8
 14461                           indf1	equ	0xFE7
 14462                           postinc1	equ	0xFE6
 14463                           postdec1	equ	0xFE5
 14464                           fsr1h	equ	0xFE2
 14465                           fsr1l	equ	0xFE1
 14466                           indf2	equ	0xFDF
 14467                           postinc2	equ	0xFDE
 14468                           postdec2	equ	0xFDD
 14469                           fsr2h	equ	0xFDA
 14470                           fsr2l	equ	0xFD9
 14471                           status	equ	0xFD8
 14472                           
 14473 ;; *************** function i2___lwdiv *****************
 14474 ;; Defined at:
 14475 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14476 ;; Parameters:    Size  Location     Type
 14477 ;;  dividend        2    0[COMRAM] unsigned int 
 14478 ;;  divisor         2    2[COMRAM] unsigned int 
 14479 ;; Auto vars:     Size  Location     Type
 14480 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 14481 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 14482 ;; Return value:  Size  Location     Type
 14483 ;;                  2    0[COMRAM] unsigned int 
 14484 ;; Registers used:
 14485 ;;		wreg, status,2, status,0
 14486 ;; Tracked objects:
 14487 ;;		On entry : 0/0
 14488 ;;		On exit  : 0/0
 14489 ;;		Unchanged: 0/0
 14490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14491 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14492 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14494 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14495 ;;Total ram usage:        7 bytes
 14496 ;; Hardware stack levels used:    1
 14497 ;; This function calls:
 14498 ;;		Nothing
 14499 ;; This function is called by:
 14500 ;;		i2__doprnt
 14501 ;; This function uses a non-reentrant model
 14502 ;;
 14503                           
 14504                           	psect	text70
 14505  003338                     __ptext70:
 14506                           	opt stack 0
 14507  003338                     i2___lwdiv:
 14508                           	opt stack 17
 14509                           
 14510                           ;incstack = 0
 14511  003338  0E00               	movlw	0
 14512  00333A  6E06               	movwf	i2___lwdiv@quotient+1,c
 14513  00333C  0E00               	movlw	0
 14514  00333E  6E05               	movwf	i2___lwdiv@quotient,c
 14515  003340  5003               	movf	i2___lwdiv@divisor,w,c
 14516  003342  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 14517  003344  B4D8               	btfsc	status,2,c
 14518  003346  D01C               	goto	i2l1080
 14519  003348  0E01               	movlw	1
 14520  00334A  6E07               	movwf	i2___lwdiv@counter,c
 14521  00334C  D004               	goto	i2l3937
 14522  00334E                     i2l3935:
 14523  00334E  90D8               	bcf	status,0,c
 14524  003350  3603               	rlcf	i2___lwdiv@divisor,f,c
 14525  003352  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 14526  003354  2A07               	incf	i2___lwdiv@counter,f,c
 14527  003356                     i2l3937:
 14528  003356  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 14529  003358  D7FA               	goto	i2l3935
 14530  00335A                     i2l3939:
 14531  00335A  90D8               	bcf	status,0,c
 14532  00335C  3605               	rlcf	i2___lwdiv@quotient,f,c
 14533  00335E  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 14534  003360  5003               	movf	i2___lwdiv@divisor,w,c
 14535  003362  5C01               	subwf	i2___lwdiv@dividend,w,c
 14536  003364  5004               	movf	i2___lwdiv@divisor+1,w,c
 14537  003366  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 14538  003368  A0D8               	btfss	status,0,c
 14539  00336A  D005               	goto	i2l3947
 14540  00336C  5003               	movf	i2___lwdiv@divisor,w,c
 14541  00336E  5E01               	subwf	i2___lwdiv@dividend,f,c
 14542  003370  5004               	movf	i2___lwdiv@divisor+1,w,c
 14543  003372  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 14544  003374  8005               	bsf	i2___lwdiv@quotient,0,c
 14545  003376                     i2l3947:
 14546  003376  90D8               	bcf	status,0,c
 14547  003378  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 14548  00337A  3203               	rrcf	i2___lwdiv@divisor,f,c
 14549  00337C  2E07               	decfsz	i2___lwdiv@counter,f,c
 14550  00337E  D7ED               	goto	i2l3939
 14551  003380                     i2l1080:
 14552  003380  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 14553  003384  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 14554  003388  0012               	return		;funcret
 14555  00338A                     __end_ofi2___lwdiv:
 14556                           	opt stack 0
 14557                           tosu	equ	0xFFF
 14558                           tosh	equ	0xFFE
 14559                           tosl	equ	0xFFD
 14560                           pclatu	equ	0xFFB
 14561                           pclath	equ	0xFFA
 14562                           tblptru	equ	0xFF8
 14563                           tblptrh	equ	0xFF7
 14564                           tblptrl	equ	0xFF6
 14565                           tablat	equ	0xFF5
 14566                           prodh	equ	0xFF4
 14567                           prodl	equ	0xFF3
 14568                           intcon	equ	0xFF2
 14569                           intcon2	equ	0xFF1
 14570                           postinc0	equ	0xFEE
 14571                           fsr0h	equ	0xFEA
 14572                           fsr0l	equ	0xFE9
 14573                           wreg	equ	0xFE8
 14574                           indf1	equ	0xFE7
 14575                           postinc1	equ	0xFE6
 14576                           postdec1	equ	0xFE5
 14577                           fsr1h	equ	0xFE2
 14578                           fsr1l	equ	0xFE1
 14579                           indf2	equ	0xFDF
 14580                           postinc2	equ	0xFDE
 14581                           postdec2	equ	0xFDD
 14582                           fsr2h	equ	0xFDA
 14583                           fsr2l	equ	0xFD9
 14584                           status	equ	0xFD8
 14585                           
 14586 ;; *************** function i2_lcdInst *****************
 14587 ;; Defined at:
 14588 ;;		line 25 in file "lcd.c"
 14589 ;; Parameters:    Size  Location     Type
 14590 ;;  data            1    wreg     unsigned char 
 14591 ;; Auto vars:     Size  Location     Type
 14592 ;;  data            1    2[COMRAM] unsigned char 
 14593 ;; Return value:  Size  Location     Type
 14594 ;;                  1    wreg      void 
 14595 ;; Registers used:
 14596 ;;		wreg, status,2, status,0, cstack
 14597 ;; Tracked objects:
 14598 ;;		On entry : 0/0
 14599 ;;		On exit  : 0/0
 14600 ;;		Unchanged: 0/0
 14601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14603 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14605 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14606 ;;Total ram usage:        1 bytes
 14607 ;; Hardware stack levels used:    1
 14608 ;; Hardware stack levels required when called:    1
 14609 ;; This function calls:
 14610 ;;		i2_lcdNibble
 14611 ;; This function is called by:
 14612 ;;		i2_printTime
 14613 ;; This function uses a non-reentrant model
 14614 ;;
 14615                           
 14616                           	psect	text71
 14617  003876                     __ptext71:
 14618                           	opt stack 0
 14619  003876                     i2_lcdInst:
 14620                           	opt stack 18
 14621                           
 14622                           ;incstack = 0
 14623                           ;i2lcdInst@data stored from wreg
 14624  003876  6E03               	movwf	i2lcdInst@data,c
 14625                           
 14626                           ;lcd.c: 26: LATDbits.LATD2 = 0;
 14627  003878  948C               	bcf	3980,2,c	;volatile
 14628                           
 14629                           ;lcd.c: 27: lcdNibble(data);
 14630  00387A  5003               	movf	i2lcdInst@data,w,c
 14631  00387C  EC48  F019         	call	i2_lcdNibble
 14632  003880  0012               	return		;funcret
 14633  003882                     __end_ofi2_lcdInst:
 14634                           	opt stack 0
 14635                           tosu	equ	0xFFF
 14636                           tosh	equ	0xFFE
 14637                           tosl	equ	0xFFD
 14638                           pclatu	equ	0xFFB
 14639                           pclath	equ	0xFFA
 14640                           tblptru	equ	0xFF8
 14641                           tblptrh	equ	0xFF7
 14642                           tblptrl	equ	0xFF6
 14643                           tablat	equ	0xFF5
 14644                           prodh	equ	0xFF4
 14645                           prodl	equ	0xFF3
 14646                           intcon	equ	0xFF2
 14647                           intcon2	equ	0xFF1
 14648                           postinc0	equ	0xFEE
 14649                           fsr0h	equ	0xFEA
 14650                           fsr0l	equ	0xFE9
 14651                           wreg	equ	0xFE8
 14652                           indf1	equ	0xFE7
 14653                           postinc1	equ	0xFE6
 14654                           postdec1	equ	0xFE5
 14655                           fsr1h	equ	0xFE2
 14656                           fsr1l	equ	0xFE1
 14657                           indf2	equ	0xFDF
 14658                           postinc2	equ	0xFDE
 14659                           postdec2	equ	0xFDD
 14660                           fsr2h	equ	0xFDA
 14661                           fsr2l	equ	0xFD9
 14662                           status	equ	0xFD8
 14663                           
 14664 ;; *************** function i2_lcdNibble *****************
 14665 ;; Defined at:
 14666 ;;		line 43 in file "lcd.c"
 14667 ;; Parameters:    Size  Location     Type
 14668 ;;  data            1    wreg     unsigned char 
 14669 ;; Auto vars:     Size  Location     Type
 14670 ;;  data            1    1[COMRAM] unsigned char 
 14671 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 14672 ;; Return value:  Size  Location     Type
 14673 ;;                  1    wreg      void 
 14674 ;; Registers used:
 14675 ;;		wreg, status,2, status,0
 14676 ;; Tracked objects:
 14677 ;;		On entry : 0/0
 14678 ;;		On exit  : 0/0
 14679 ;;		Unchanged: 0/0
 14680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14682 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14683 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14684 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14685 ;;Total ram usage:        2 bytes
 14686 ;; Hardware stack levels used:    1
 14687 ;; This function calls:
 14688 ;;		Nothing
 14689 ;; This function is called by:
 14690 ;;		i2_lcdInst
 14691 ;;		i2_putch
 14692 ;; This function uses a non-reentrant model
 14693 ;;
 14694                           
 14695                           	psect	text72
 14696  003290                     __ptext72:
 14697                           	opt stack 0
 14698  003290                     i2_lcdNibble:
 14699                           	opt stack 16
 14700                           
 14701                           ;incstack = 0
 14702                           ;i2lcdNibble@data stored from wreg
 14703  003290  6E02               	movwf	i2lcdNibble@data,c
 14704                           
 14705                           ;lcd.c: 45: char temp = data & 0xF0;
 14706  003292  5002               	movf	i2lcdNibble@data,w,c
 14707  003294  0BF0               	andlw	240
 14708  003296  6E01               	movwf	i2lcdNibble@temp,c
 14709                           
 14710                           ;lcd.c: 46: LATD = LATD & 0x0F;
 14711  003298  508C               	movf	3980,w,c	;volatile
 14712  00329A  0B0F               	andlw	15
 14713  00329C  6E8C               	movwf	3980,c	;volatile
 14714                           
 14715                           ;lcd.c: 47: LATD = temp | LATD;
 14716  00329E  5001               	movf	i2lcdNibble@temp,w,c
 14717  0032A0  108C               	iorwf	3980,w,c	;volatile
 14718  0032A2  6E8C               	movwf	3980,c	;volatile
 14719                           
 14720                           ;lcd.c: 49: LATDbits.LATD3 = 0;
 14721  0032A4  968C               	bcf	3980,3,c	;volatile
 14722                           
 14723                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
 14724  0032A6  0E10               	movlw	16
 14725  0032A8                     i2u971_47:
 14726  0032A8  2EE8               	decfsz	wreg,f,c
 14727  0032AA  D7FE               	bra	i2u971_47
 14728  0032AC  D000               	nop2	
 14729                           
 14730                           ;lcd.c: 51: LATDbits.LATD3 = 1;
 14731  0032AE  868C               	bsf	3980,3,c	;volatile
 14732                           
 14733                           ;lcd.c: 52: _delay((unsigned long)((25)*(8000000/4000000.0)));
 14734  0032B0  0E10               	movlw	16
 14735  0032B2                     i2u972_47:
 14736  0032B2  2EE8               	decfsz	wreg,f,c
 14737  0032B4  D7FE               	bra	i2u972_47
 14738  0032B6  D000               	nop2	
 14739                           
 14740                           ;lcd.c: 54: data = data << 4;
 14741  0032B8  3802               	swapf	i2lcdNibble@data,w,c
 14742  0032BA  0BF0               	andlw	240
 14743  0032BC  6E02               	movwf	i2lcdNibble@data,c
 14744                           
 14745                           ;lcd.c: 56: temp = data & 0xF0;
 14746  0032BE  5002               	movf	i2lcdNibble@data,w,c
 14747  0032C0  0BF0               	andlw	240
 14748  0032C2  6E01               	movwf	i2lcdNibble@temp,c
 14749                           
 14750                           ;lcd.c: 57: LATD = LATD & 0x0F;
 14751  0032C4  508C               	movf	3980,w,c	;volatile
 14752  0032C6  0B0F               	andlw	15
 14753  0032C8  6E8C               	movwf	3980,c	;volatile
 14754                           
 14755                           ;lcd.c: 58: LATD = temp | LATD;
 14756  0032CA  5001               	movf	i2lcdNibble@temp,w,c
 14757  0032CC  108C               	iorwf	3980,w,c	;volatile
 14758  0032CE  6E8C               	movwf	3980,c	;volatile
 14759                           
 14760                           ;lcd.c: 60: LATDbits.LATD3 = 0;
 14761  0032D0  968C               	bcf	3980,3,c	;volatile
 14762                           
 14763                           ;lcd.c: 61: _delay((unsigned long)((25)*(8000000/4000000.0)));
 14764  0032D2  0E10               	movlw	16
 14765  0032D4                     i2u973_47:
 14766  0032D4  2EE8               	decfsz	wreg,f,c
 14767  0032D6  D7FE               	bra	i2u973_47
 14768  0032D8  D000               	nop2	
 14769                           
 14770                           ;lcd.c: 62: LATDbits.LATD3 = 1;
 14771  0032DA  868C               	bsf	3980,3,c	;volatile
 14772                           
 14773                           ;lcd.c: 63: _delay((unsigned long)((25)*(8000000/4000000.0)));
 14774  0032DC  0E10               	movlw	16
 14775  0032DE                     i2u974_47:
 14776  0032DE  2EE8               	decfsz	wreg,f,c
 14777  0032E0  D7FE               	bra	i2u974_47
 14778  0032E2  D000               	nop2	
 14779  0032E4  0012               	return		;funcret
 14780  0032E6                     __end_ofi2_lcdNibble:
 14781                           	opt stack 0
 14782                           tosu	equ	0xFFF
 14783                           tosh	equ	0xFFE
 14784                           tosl	equ	0xFFD
 14785                           pclatu	equ	0xFFB
 14786                           pclath	equ	0xFFA
 14787                           tblptru	equ	0xFF8
 14788                           tblptrh	equ	0xFF7
 14789                           tblptrl	equ	0xFF6
 14790                           tablat	equ	0xFF5
 14791                           prodh	equ	0xFF4
 14792                           prodl	equ	0xFF3
 14793                           intcon	equ	0xFF2
 14794                           intcon2	equ	0xFF1
 14795                           postinc0	equ	0xFEE
 14796                           fsr0h	equ	0xFEA
 14797                           fsr0l	equ	0xFE9
 14798                           wreg	equ	0xFE8
 14799                           indf1	equ	0xFE7
 14800                           postinc1	equ	0xFE6
 14801                           postdec1	equ	0xFE5
 14802                           fsr1h	equ	0xFE2
 14803                           fsr1l	equ	0xFE1
 14804                           indf2	equ	0xFDF
 14805                           postinc2	equ	0xFDE
 14806                           postdec2	equ	0xFDD
 14807                           fsr2h	equ	0xFDA
 14808                           fsr2l	equ	0xFD9
 14809                           status	equ	0xFD8
 14810                           
 14811 ;; *************** function i2___fttol *****************
 14812 ;; Defined at:
 14813 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 14814 ;; Parameters:    Size  Location     Type
 14815 ;;  f1              3   38[COMRAM] float 
 14816 ;; Auto vars:     Size  Location     Type
 14817 ;;  __fttol         4   48[COMRAM] unsigned long 
 14818 ;;  __fttol         1   52[COMRAM] unsigned char 
 14819 ;;  __fttol         1   47[COMRAM] unsigned char 
 14820 ;; Return value:  Size  Location     Type
 14821 ;;                  4   38[COMRAM] long 
 14822 ;; Registers used:
 14823 ;;		wreg, status,2, status,0
 14824 ;; Tracked objects:
 14825 ;;		On entry : 0/0
 14826 ;;		On exit  : 0/0
 14827 ;;		Unchanged: 0/0
 14828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14829 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14830 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14831 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14832 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14833 ;;Total ram usage:       15 bytes
 14834 ;; Hardware stack levels used:    1
 14835 ;; This function calls:
 14836 ;;		Nothing
 14837 ;; This function is called by:
 14838 ;;		_handler
 14839 ;; This function uses a non-reentrant model
 14840 ;;
 14841                           
 14842                           	psect	text73
 14843  002632                     __ptext73:
 14844                           	opt stack 0
 14845  002632                     i2___fttol:
 14846                           	opt stack 20
 14847                           
 14848                           ;incstack = 0
 14849  002632  C029  F02B         	movff	i2___fttol@f1+2,??i2___fttol
 14850  002636  6A2C               	clrf	(??i2___fttol+1)& (0+255),c
 14851  002638  6A2D               	clrf	(??i2___fttol+2)& (0+255),c
 14852  00263A  3428               	rlcf	i2___fttol@f1+1,w,c
 14853  00263C  362B               	rlcf	??i2___fttol& (0+255),f,c
 14854  00263E  E301               	bnc	u499_41
 14855  002640  802C               	bsf	(??i2___fttol+1)& (0+255),0,c
 14856  002642                     u499_41:
 14857  002642  502B               	movf	??i2___fttol,w,c
 14858  002644  6E35               	movwf	i2___fttol@exp1,c
 14859  002646  5035               	movf	i2___fttol@exp1,w,c
 14860  002648  A4D8               	btfss	status,2,c
 14861  00264A  D009               	goto	i2l5125
 14862  00264C  0E00               	movlw	0
 14863  00264E  6E27               	movwf	?i2___fttol,c
 14864  002650  0E00               	movlw	0
 14865  002652  6E28               	movwf	?i2___fttol+1,c
 14866  002654  0E00               	movlw	0
 14867  002656  6E29               	movwf	?i2___fttol+2,c
 14868  002658  0E00               	movlw	0
 14869  00265A  6E2A               	movwf	?i2___fttol+3,c
 14870  00265C  0012               	return	
 14871  00265E                     i2l5125:
 14872  00265E  0E17               	movlw	23
 14873  002660  6E2B               	movwf	??i2___fttol& (0+255),c
 14874  002662  C027  F02C         	movff	i2___fttol@f1,??i2___fttol+1
 14875  002666  C028  F02D         	movff	i2___fttol@f1+1,??i2___fttol+2
 14876  00266A  C029  F02E         	movff	i2___fttol@f1+2,??i2___fttol+3
 14877  00266E  282B               	incf	??i2___fttol,w,c
 14878  002670  6E2F               	movwf	(??i2___fttol+4)& (0+255),c
 14879  002672  D004               	goto	i2u501_40
 14880  002674                     i2u501_45:
 14881  002674  90D8               	bcf	status,0,c
 14882  002676  322E               	rrcf	??i2___fttol+3,f,c
 14883  002678  322D               	rrcf	??i2___fttol+2,f,c
 14884  00267A  322C               	rrcf	??i2___fttol+1,f,c
 14885  00267C                     i2u501_40:
 14886  00267C  2E2F               	decfsz	(??i2___fttol+4)& (0+255),f,c
 14887  00267E  D7FA               	goto	i2u501_45
 14888  002680  502C               	movf	??i2___fttol+1,w,c
 14889  002682  6E30               	movwf	i2___fttol@sign1,c
 14890  002684  8E28               	bsf	i2___fttol@f1+1,7,c
 14891  002686  0EFF               	movlw	255
 14892  002688  1627               	andwf	i2___fttol@f1,f,c
 14893  00268A  0EFF               	movlw	255
 14894  00268C  1628               	andwf	i2___fttol@f1+1,f,c
 14895  00268E  0E00               	movlw	0
 14896  002690  1629               	andwf	i2___fttol@f1+2,f,c
 14897  002692  5027               	movf	i2___fttol@f1,w,c
 14898  002694  6E31               	movwf	i2___fttol@lval,c
 14899  002696  5028               	movf	i2___fttol@f1+1,w,c
 14900  002698  6E32               	movwf	i2___fttol@lval+1,c
 14901  00269A  5029               	movf	i2___fttol@f1+2,w,c
 14902  00269C  6E33               	movwf	i2___fttol@lval+2,c
 14903  00269E  6A34               	clrf	i2___fttol@lval+3,c
 14904  0026A0  0E8E               	movlw	142
 14905  0026A2  5E35               	subwf	i2___fttol@exp1,f,c
 14906  0026A4  AE35               	btfss	i2___fttol@exp1,7,c
 14907  0026A6  D016               	goto	i2l5147
 14908  0026A8  5035               	movf	i2___fttol@exp1,w,c
 14909  0026AA  0A80               	xorlw	128
 14910  0026AC  0F8F               	addlw	143
 14911  0026AE  B0D8               	btfsc	status,0,c
 14912  0026B0  D009               	goto	i2l5143
 14913  0026B2  0E00               	movlw	0
 14914  0026B4  6E27               	movwf	?i2___fttol,c
 14915  0026B6  0E00               	movlw	0
 14916  0026B8  6E28               	movwf	?i2___fttol+1,c
 14917  0026BA  0E00               	movlw	0
 14918  0026BC  6E29               	movwf	?i2___fttol+2,c
 14919  0026BE  0E00               	movlw	0
 14920  0026C0  6E2A               	movwf	?i2___fttol+3,c
 14921  0026C2  0012               	return	
 14922  0026C4                     i2l5143:
 14923  0026C4  90D8               	bcf	status,0,c
 14924  0026C6  3234               	rrcf	i2___fttol@lval+3,f,c
 14925  0026C8  3233               	rrcf	i2___fttol@lval+2,f,c
 14926  0026CA  3232               	rrcf	i2___fttol@lval+1,f,c
 14927  0026CC  3231               	rrcf	i2___fttol@lval,f,c
 14928  0026CE  3E35               	incfsz	i2___fttol@exp1,f,c
 14929  0026D0  D7F9               	goto	i2l5143
 14930  0026D2  D015               	goto	i2l5157
 14931  0026D4                     i2l5147:
 14932  0026D4  0E17               	movlw	23
 14933  0026D6  6435               	cpfsgt	i2___fttol@exp1,c
 14934  0026D8  D00F               	goto	i2l5155
 14935  0026DA  0E00               	movlw	0
 14936  0026DC  6E27               	movwf	?i2___fttol,c
 14937  0026DE  0E00               	movlw	0
 14938  0026E0  6E28               	movwf	?i2___fttol+1,c
 14939  0026E2  0E00               	movlw	0
 14940  0026E4  6E29               	movwf	?i2___fttol+2,c
 14941  0026E6  0E00               	movlw	0
 14942  0026E8  6E2A               	movwf	?i2___fttol+3,c
 14943  0026EA  0012               	return	
 14944  0026EC                     i2l5153:
 14945  0026EC  90D8               	bcf	status,0,c
 14946  0026EE  3631               	rlcf	i2___fttol@lval,f,c
 14947  0026F0  3632               	rlcf	i2___fttol@lval+1,f,c
 14948  0026F2  3633               	rlcf	i2___fttol@lval+2,f,c
 14949  0026F4  3634               	rlcf	i2___fttol@lval+3,f,c
 14950  0026F6  0635               	decf	i2___fttol@exp1,f,c
 14951  0026F8                     i2l5155:
 14952  0026F8  5035               	movf	i2___fttol@exp1,w,c
 14953  0026FA  A4D8               	btfss	status,2,c
 14954  0026FC  D7F7               	goto	i2l5153
 14955  0026FE                     i2l5157:
 14956  0026FE  5030               	movf	i2___fttol@sign1,w,c
 14957  002700  B4D8               	btfsc	status,2,c
 14958  002702  D008               	goto	i2l5161
 14959  002704  1E34               	comf	i2___fttol@lval+3,f,c
 14960  002706  1E33               	comf	i2___fttol@lval+2,f,c
 14961  002708  1E32               	comf	i2___fttol@lval+1,f,c
 14962  00270A  6C31               	negf	i2___fttol@lval,c
 14963  00270C  0E00               	movlw	0
 14964  00270E  2232               	addwfc	i2___fttol@lval+1,f,c
 14965  002710  2233               	addwfc	i2___fttol@lval+2,f,c
 14966  002712  2234               	addwfc	i2___fttol@lval+3,f,c
 14967  002714                     i2l5161:
 14968  002714  C031  F027         	movff	i2___fttol@lval,?i2___fttol
 14969  002718  C032  F028         	movff	i2___fttol@lval+1,?i2___fttol+1
 14970  00271C  C033  F029         	movff	i2___fttol@lval+2,?i2___fttol+2
 14971  002720  C034  F02A         	movff	i2___fttol@lval+3,?i2___fttol+3
 14972  002724  0012               	return	
 14973  002726                     __end_ofi2___fttol:
 14974                           	opt stack 0
 14975                           tosu	equ	0xFFF
 14976                           tosh	equ	0xFFE
 14977                           tosl	equ	0xFFD
 14978                           pclatu	equ	0xFFB
 14979                           pclath	equ	0xFFA
 14980                           tblptru	equ	0xFF8
 14981                           tblptrh	equ	0xFF7
 14982                           tblptrl	equ	0xFF6
 14983                           tablat	equ	0xFF5
 14984                           prodh	equ	0xFF4
 14985                           prodl	equ	0xFF3
 14986                           intcon	equ	0xFF2
 14987                           intcon2	equ	0xFF1
 14988                           postinc0	equ	0xFEE
 14989                           fsr0h	equ	0xFEA
 14990                           fsr0l	equ	0xFE9
 14991                           wreg	equ	0xFE8
 14992                           indf1	equ	0xFE7
 14993                           postinc1	equ	0xFE6
 14994                           postdec1	equ	0xFE5
 14995                           fsr1h	equ	0xFE2
 14996                           fsr1l	equ	0xFE1
 14997                           indf2	equ	0xFDF
 14998                           postinc2	equ	0xFDE
 14999                           postdec2	equ	0xFDD
 15000                           fsr2h	equ	0xFDA
 15001                           fsr2l	equ	0xFD9
 15002                           status	equ	0xFD8
 15003                           
 15004 ;; *************** function i2___ftmul *****************
 15005 ;; Defined at:
 15006 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 15007 ;; Parameters:    Size  Location     Type
 15008 ;;  f1              3    8[COMRAM] float 
 15009 ;;  f2              3   11[COMRAM] float 
 15010 ;; Auto vars:     Size  Location     Type
 15011 ;;  __ftmul         3   18[COMRAM] unsigned um
 15012 ;;  __ftmul         1   22[COMRAM] unsigned char 
 15013 ;;  __ftmul         1   21[COMRAM] unsigned char 
 15014 ;;  __ftmul         1   17[COMRAM] unsigned char 
 15015 ;; Return value:  Size  Location     Type
 15016 ;;                  3    8[COMRAM] float 
 15017 ;; Registers used:
 15018 ;;		wreg, status,2, status,0, cstack
 15019 ;; Tracked objects:
 15020 ;;		On entry : 0/0
 15021 ;;		On exit  : 0/0
 15022 ;;		Unchanged: 0/0
 15023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15024 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15025 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15026 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15027 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15028 ;;Total ram usage:       15 bytes
 15029 ;; Hardware stack levels used:    1
 15030 ;; Hardware stack levels required when called:    1
 15031 ;; This function calls:
 15032 ;;		i2___ftpack
 15033 ;; This function is called by:
 15034 ;;		_handler
 15035 ;; This function uses a non-reentrant model
 15036 ;;
 15037                           
 15038                           	psect	text74
 15039  002726                     __ptext74:
 15040                           	opt stack 0
 15041  002726                     i2___ftmul:
 15042                           	opt stack 19
 15043                           
 15044                           ;incstack = 0
 15045  002726  C00B  F00F         	movff	i2___ftmul@f1+2,??i2___ftmul
 15046  00272A  6A10               	clrf	(??i2___ftmul+1)& (0+255),c
 15047  00272C  6A11               	clrf	(??i2___ftmul+2)& (0+255),c
 15048  00272E  340A               	rlcf	i2___ftmul@f1+1,w,c
 15049  002730  360F               	rlcf	??i2___ftmul& (0+255),f,c
 15050  002732  E301               	bnc	u493_41
 15051  002734  8010               	bsf	(??i2___ftmul+1)& (0+255),0,c
 15052  002736                     u493_41:
 15053  002736  500F               	movf	??i2___ftmul,w,c
 15054  002738  6E12               	movwf	i2___ftmul@exp,c
 15055  00273A  5012               	movf	i2___ftmul@exp,w,c
 15056  00273C  A4D8               	btfss	status,2,c
 15057  00273E  D007               	goto	i2l5077
 15058  002740  0E00               	movlw	0
 15059  002742  6E09               	movwf	?i2___ftmul,c
 15060  002744  0E00               	movlw	0
 15061  002746  6E0A               	movwf	?i2___ftmul+1,c
 15062  002748  0E00               	movlw	0
 15063  00274A  6E0B               	movwf	?i2___ftmul+2,c
 15064  00274C  0012               	return	
 15065  00274E                     i2l5077:
 15066  00274E  C00E  F00F         	movff	i2___ftmul@f2+2,??i2___ftmul
 15067  002752  6A10               	clrf	(??i2___ftmul+1)& (0+255),c
 15068  002754  6A11               	clrf	(??i2___ftmul+2)& (0+255),c
 15069  002756  340D               	rlcf	i2___ftmul@f2+1,w,c
 15070  002758  360F               	rlcf	??i2___ftmul& (0+255),f,c
 15071  00275A  E301               	bnc	u495_41
 15072  00275C  8010               	bsf	(??i2___ftmul+1)& (0+255),0,c
 15073  00275E                     u495_41:
 15074  00275E  500F               	movf	??i2___ftmul,w,c
 15075  002760  6E17               	movwf	i2___ftmul@sign,c
 15076  002762  5017               	movf	i2___ftmul@sign,w,c
 15077  002764  A4D8               	btfss	status,2,c
 15078  002766  D007               	goto	i2l5083
 15079  002768  0E00               	movlw	0
 15080  00276A  6E09               	movwf	?i2___ftmul,c
 15081  00276C  0E00               	movlw	0
 15082  00276E  6E0A               	movwf	?i2___ftmul+1,c
 15083  002770  0E00               	movlw	0
 15084  002772  6E0B               	movwf	?i2___ftmul+2,c
 15085  002774  0012               	return	
 15086  002776                     i2l5083:
 15087  002776  5017               	movf	i2___ftmul@sign,w,c
 15088  002778  0F7B               	addlw	123
 15089  00277A  2612               	addwf	i2___ftmul@exp,f,c
 15090  00277C  C00B  F017         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 15091  002780  500E               	movf	i2___ftmul@f2+2,w,c
 15092  002782  1A17               	xorwf	i2___ftmul@sign,f,c
 15093  002784  0E80               	movlw	128
 15094  002786  1617               	andwf	i2___ftmul@sign,f,c
 15095  002788  8E0A               	bsf	i2___ftmul@f1+1,7,c
 15096  00278A  8E0D               	bsf	i2___ftmul@f2+1,7,c
 15097  00278C  0EFF               	movlw	255
 15098  00278E  160C               	andwf	i2___ftmul@f2,f,c
 15099  002790  0EFF               	movlw	255
 15100  002792  160D               	andwf	i2___ftmul@f2+1,f,c
 15101  002794  0E00               	movlw	0
 15102  002796  160E               	andwf	i2___ftmul@f2+2,f,c
 15103  002798  0E00               	movlw	0
 15104  00279A  6E13               	movwf	i2___ftmul@f3_as_product,c
 15105  00279C  0E00               	movlw	0
 15106  00279E  6E14               	movwf	i2___ftmul@f3_as_product+1,c
 15107  0027A0  0E00               	movlw	0
 15108  0027A2  6E15               	movwf	i2___ftmul@f3_as_product+2,c
 15109  0027A4  0E07               	movlw	7
 15110  0027A6  6E16               	movwf	i2___ftmul@cntr,c
 15111  0027A8                     i2l5097:
 15112  0027A8  A009               	btfss	i2___ftmul@f1,0,c
 15113  0027AA  D006               	goto	i2l5101
 15114  0027AC  500C               	movf	i2___ftmul@f2,w,c
 15115  0027AE  2613               	addwf	i2___ftmul@f3_as_product,f,c
 15116  0027B0  500D               	movf	i2___ftmul@f2+1,w,c
 15117  0027B2  2214               	addwfc	i2___ftmul@f3_as_product+1,f,c
 15118  0027B4  500E               	movf	i2___ftmul@f2+2,w,c
 15119  0027B6  2215               	addwfc	i2___ftmul@f3_as_product+2,f,c
 15120  0027B8                     i2l5101:
 15121  0027B8  90D8               	bcf	status,0,c
 15122  0027BA  320B               	rrcf	i2___ftmul@f1+2,f,c
 15123  0027BC  320A               	rrcf	i2___ftmul@f1+1,f,c
 15124  0027BE  3209               	rrcf	i2___ftmul@f1,f,c
 15125  0027C0  90D8               	bcf	status,0,c
 15126  0027C2  360C               	rlcf	i2___ftmul@f2,f,c
 15127  0027C4  360D               	rlcf	i2___ftmul@f2+1,f,c
 15128  0027C6  360E               	rlcf	i2___ftmul@f2+2,f,c
 15129  0027C8  2E16               	decfsz	i2___ftmul@cntr,f,c
 15130  0027CA  D7EE               	goto	i2l5097
 15131  0027CC  0E09               	movlw	9
 15132  0027CE  6E16               	movwf	i2___ftmul@cntr,c
 15133  0027D0                     i2l5107:
 15134  0027D0  A009               	btfss	i2___ftmul@f1,0,c
 15135  0027D2  D006               	goto	i2l5111
 15136  0027D4  500C               	movf	i2___ftmul@f2,w,c
 15137  0027D6  2613               	addwf	i2___ftmul@f3_as_product,f,c
 15138  0027D8  500D               	movf	i2___ftmul@f2+1,w,c
 15139  0027DA  2214               	addwfc	i2___ftmul@f3_as_product+1,f,c
 15140  0027DC  500E               	movf	i2___ftmul@f2+2,w,c
 15141  0027DE  2215               	addwfc	i2___ftmul@f3_as_product+2,f,c
 15142  0027E0                     i2l5111:
 15143  0027E0  90D8               	bcf	status,0,c
 15144  0027E2  320B               	rrcf	i2___ftmul@f1+2,f,c
 15145  0027E4  320A               	rrcf	i2___ftmul@f1+1,f,c
 15146  0027E6  3209               	rrcf	i2___ftmul@f1,f,c
 15147  0027E8  90D8               	bcf	status,0,c
 15148  0027EA  3215               	rrcf	i2___ftmul@f3_as_product+2,f,c
 15149  0027EC  3214               	rrcf	i2___ftmul@f3_as_product+1,f,c
 15150  0027EE  3213               	rrcf	i2___ftmul@f3_as_product,f,c
 15151  0027F0  2E16               	decfsz	i2___ftmul@cntr,f,c
 15152  0027F2  D7EE               	goto	i2l5107
 15153  0027F4  C013  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 15154  0027F8  C014  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 15155  0027FC  C015  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 15156  002800  C012  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 15157  002804  C017  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 15158  002808  ECB2  F015         	call	i2___ftpack	;wreg free
 15159  00280C  C001  F009         	movff	?i2___ftpack,?i2___ftmul
 15160  002810  C002  F00A         	movff	?i2___ftpack+1,?i2___ftmul+1
 15161  002814  C003  F00B         	movff	?i2___ftpack+2,?i2___ftmul+2
 15162  002818  0012               	return	
 15163  00281A                     __end_ofi2___ftmul:
 15164                           	opt stack 0
 15165                           tosu	equ	0xFFF
 15166                           tosh	equ	0xFFE
 15167                           tosl	equ	0xFFD
 15168                           pclatu	equ	0xFFB
 15169                           pclath	equ	0xFFA
 15170                           tblptru	equ	0xFF8
 15171                           tblptrh	equ	0xFF7
 15172                           tblptrl	equ	0xFF6
 15173                           tablat	equ	0xFF5
 15174                           prodh	equ	0xFF4
 15175                           prodl	equ	0xFF3
 15176                           intcon	equ	0xFF2
 15177                           intcon2	equ	0xFF1
 15178                           postinc0	equ	0xFEE
 15179                           fsr0h	equ	0xFEA
 15180                           fsr0l	equ	0xFE9
 15181                           wreg	equ	0xFE8
 15182                           indf1	equ	0xFE7
 15183                           postinc1	equ	0xFE6
 15184                           postdec1	equ	0xFE5
 15185                           fsr1h	equ	0xFE2
 15186                           fsr1l	equ	0xFE1
 15187                           indf2	equ	0xFDF
 15188                           postinc2	equ	0xFDE
 15189                           postdec2	equ	0xFDD
 15190                           fsr2h	equ	0xFDA
 15191                           fsr2l	equ	0xFD9
 15192                           status	equ	0xFD8
 15193                           
 15194 ;; *************** function i2___ftdiv *****************
 15195 ;; Defined at:
 15196 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 15197 ;; Parameters:    Size  Location     Type
 15198 ;;  f1              3   23[COMRAM] float 
 15199 ;;  f2              3   26[COMRAM] float 
 15200 ;; Auto vars:     Size  Location     Type
 15201 ;;  __ftdiv         3   33[COMRAM] float 
 15202 ;;  __ftdiv         1   37[COMRAM] unsigned char 
 15203 ;;  __ftdiv         1   36[COMRAM] unsigned char 
 15204 ;;  __ftdiv         1   32[COMRAM] unsigned char 
 15205 ;; Return value:  Size  Location     Type
 15206 ;;                  3   23[COMRAM] float 
 15207 ;; Registers used:
 15208 ;;		wreg, status,2, status,0, cstack
 15209 ;; Tracked objects:
 15210 ;;		On entry : 0/0
 15211 ;;		On exit  : 0/0
 15212 ;;		Unchanged: 0/0
 15213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15214 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15215 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15216 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15217 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15218 ;;Total ram usage:       15 bytes
 15219 ;; Hardware stack levels used:    1
 15220 ;; Hardware stack levels required when called:    1
 15221 ;; This function calls:
 15222 ;;		i2___ftpack
 15223 ;; This function is called by:
 15224 ;;		_handler
 15225 ;; This function uses a non-reentrant model
 15226 ;;
 15227                           
 15228                           	psect	text75
 15229  00290C                     __ptext75:
 15230                           	opt stack 0
 15231  00290C                     i2___ftdiv:
 15232                           	opt stack 19
 15233                           
 15234                           ;incstack = 0
 15235  00290C  C01A  F01E         	movff	i2___ftdiv@f1+2,??i2___ftdiv
 15236  002910  6A1F               	clrf	(??i2___ftdiv+1)& (0+255),c
 15237  002912  6A20               	clrf	(??i2___ftdiv+2)& (0+255),c
 15238  002914  3419               	rlcf	i2___ftdiv@f1+1,w,c
 15239  002916  361E               	rlcf	??i2___ftdiv& (0+255),f,c
 15240  002918  E301               	bnc	u488_41
 15241  00291A  801F               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 15242  00291C                     u488_41:
 15243  00291C  501E               	movf	??i2___ftdiv,w,c
 15244  00291E  6E25               	movwf	i2___ftdiv@exp,c
 15245  002920  5025               	movf	i2___ftdiv@exp,w,c
 15246  002922  A4D8               	btfss	status,2,c
 15247  002924  D007               	goto	i2l5031
 15248  002926  0E00               	movlw	0
 15249  002928  6E18               	movwf	?i2___ftdiv,c
 15250  00292A  0E00               	movlw	0
 15251  00292C  6E19               	movwf	?i2___ftdiv+1,c
 15252  00292E  0E00               	movlw	0
 15253  002930  6E1A               	movwf	?i2___ftdiv+2,c
 15254  002932  0012               	return	
 15255  002934                     i2l5031:
 15256  002934  C01D  F01E         	movff	i2___ftdiv@f2+2,??i2___ftdiv
 15257  002938  6A1F               	clrf	(??i2___ftdiv+1)& (0+255),c
 15258  00293A  6A20               	clrf	(??i2___ftdiv+2)& (0+255),c
 15259  00293C  341C               	rlcf	i2___ftdiv@f2+1,w,c
 15260  00293E  361E               	rlcf	??i2___ftdiv& (0+255),f,c
 15261  002940  E301               	bnc	u490_41
 15262  002942  801F               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 15263  002944                     u490_41:
 15264  002944  501E               	movf	??i2___ftdiv,w,c
 15265  002946  6E26               	movwf	i2___ftdiv@sign,c
 15266  002948  5026               	movf	i2___ftdiv@sign,w,c
 15267  00294A  A4D8               	btfss	status,2,c
 15268  00294C  D007               	goto	i2l5037
 15269  00294E  0E00               	movlw	0
 15270  002950  6E18               	movwf	?i2___ftdiv,c
 15271  002952  0E00               	movlw	0
 15272  002954  6E19               	movwf	?i2___ftdiv+1,c
 15273  002956  0E00               	movlw	0
 15274  002958  6E1A               	movwf	?i2___ftdiv+2,c
 15275  00295A  0012               	return	
 15276  00295C                     i2l5037:
 15277  00295C  0E00               	movlw	0
 15278  00295E  6E22               	movwf	i2___ftdiv@f3,c
 15279  002960  0E00               	movlw	0
 15280  002962  6E23               	movwf	i2___ftdiv@f3+1,c
 15281  002964  0E00               	movlw	0
 15282  002966  6E24               	movwf	i2___ftdiv@f3+2,c
 15283  002968  5026               	movf	i2___ftdiv@sign,w,c
 15284  00296A  0F89               	addlw	137
 15285  00296C  5E25               	subwf	i2___ftdiv@exp,f,c
 15286  00296E  C01A  F026         	movff	i2___ftdiv@f1+2,i2___ftdiv@sign
 15287  002972  501D               	movf	i2___ftdiv@f2+2,w,c
 15288  002974  1A26               	xorwf	i2___ftdiv@sign,f,c
 15289  002976  0E80               	movlw	128
 15290  002978  1626               	andwf	i2___ftdiv@sign,f,c
 15291  00297A  8E19               	bsf	i2___ftdiv@f1+1,7,c
 15292  00297C  0EFF               	movlw	255
 15293  00297E  1618               	andwf	i2___ftdiv@f1,f,c
 15294  002980  0EFF               	movlw	255
 15295  002982  1619               	andwf	i2___ftdiv@f1+1,f,c
 15296  002984  0E00               	movlw	0
 15297  002986  161A               	andwf	i2___ftdiv@f1+2,f,c
 15298  002988  8E1C               	bsf	i2___ftdiv@f2+1,7,c
 15299  00298A  0EFF               	movlw	255
 15300  00298C  161B               	andwf	i2___ftdiv@f2,f,c
 15301  00298E  0EFF               	movlw	255
 15302  002990  161C               	andwf	i2___ftdiv@f2+1,f,c
 15303  002992  0E00               	movlw	0
 15304  002994  161D               	andwf	i2___ftdiv@f2+2,f,c
 15305  002996  0E18               	movlw	24
 15306  002998  6E21               	movwf	i2___ftdiv@cntr,c
 15307  00299A                     i2l5057:
 15308  00299A  90D8               	bcf	status,0,c
 15309  00299C  3622               	rlcf	i2___ftdiv@f3,f,c
 15310  00299E  3623               	rlcf	i2___ftdiv@f3+1,f,c
 15311  0029A0  3624               	rlcf	i2___ftdiv@f3+2,f,c
 15312  0029A2  501B               	movf	i2___ftdiv@f2,w,c
 15313  0029A4  5C18               	subwf	i2___ftdiv@f1,w,c
 15314  0029A6  501C               	movf	i2___ftdiv@f2+1,w,c
 15315  0029A8  5819               	subwfb	i2___ftdiv@f1+1,w,c
 15316  0029AA  501D               	movf	i2___ftdiv@f2+2,w,c
 15317  0029AC  581A               	subwfb	i2___ftdiv@f1+2,w,c
 15318  0029AE  A0D8               	btfss	status,0,c
 15319  0029B0  D007               	goto	i2l955
 15320  0029B2  501B               	movf	i2___ftdiv@f2,w,c
 15321  0029B4  5E18               	subwf	i2___ftdiv@f1,f,c
 15322  0029B6  501C               	movf	i2___ftdiv@f2+1,w,c
 15323  0029B8  5A19               	subwfb	i2___ftdiv@f1+1,f,c
 15324  0029BA  501D               	movf	i2___ftdiv@f2+2,w,c
 15325  0029BC  5A1A               	subwfb	i2___ftdiv@f1+2,f,c
 15326  0029BE  8022               	bsf	i2___ftdiv@f3,0,c
 15327  0029C0                     i2l955:
 15328  0029C0  90D8               	bcf	status,0,c
 15329  0029C2  3618               	rlcf	i2___ftdiv@f1,f,c
 15330  0029C4  3619               	rlcf	i2___ftdiv@f1+1,f,c
 15331  0029C6  361A               	rlcf	i2___ftdiv@f1+2,f,c
 15332  0029C8  2E21               	decfsz	i2___ftdiv@cntr,f,c
 15333  0029CA  D7E7               	goto	i2l5057
 15334  0029CC  C022  F001         	movff	i2___ftdiv@f3,i2___ftpack@arg
 15335  0029D0  C023  F002         	movff	i2___ftdiv@f3+1,i2___ftpack@arg+1
 15336  0029D4  C024  F003         	movff	i2___ftdiv@f3+2,i2___ftpack@arg+2
 15337  0029D8  C025  F004         	movff	i2___ftdiv@exp,i2___ftpack@exp
 15338  0029DC  C026  F005         	movff	i2___ftdiv@sign,i2___ftpack@sign
 15339  0029E0  ECB2  F015         	call	i2___ftpack	;wreg free
 15340  0029E4  C001  F018         	movff	?i2___ftpack,?i2___ftdiv
 15341  0029E8  C002  F019         	movff	?i2___ftpack+1,?i2___ftdiv+1
 15342  0029EC  C003  F01A         	movff	?i2___ftpack+2,?i2___ftdiv+2
 15343  0029F0  0012               	return	
 15344  0029F2                     __end_ofi2___ftdiv:
 15345                           	opt stack 0
 15346                           tosu	equ	0xFFF
 15347                           tosh	equ	0xFFE
 15348                           tosl	equ	0xFFD
 15349                           pclatu	equ	0xFFB
 15350                           pclath	equ	0xFFA
 15351                           tblptru	equ	0xFF8
 15352                           tblptrh	equ	0xFF7
 15353                           tblptrl	equ	0xFF6
 15354                           tablat	equ	0xFF5
 15355                           prodh	equ	0xFF4
 15356                           prodl	equ	0xFF3
 15357                           intcon	equ	0xFF2
 15358                           intcon2	equ	0xFF1
 15359                           postinc0	equ	0xFEE
 15360                           fsr0h	equ	0xFEA
 15361                           fsr0l	equ	0xFE9
 15362                           wreg	equ	0xFE8
 15363                           indf1	equ	0xFE7
 15364                           postinc1	equ	0xFE6
 15365                           postdec1	equ	0xFE5
 15366                           fsr1h	equ	0xFE2
 15367                           fsr1l	equ	0xFE1
 15368                           indf2	equ	0xFDF
 15369                           postinc2	equ	0xFDE
 15370                           postdec2	equ	0xFDD
 15371                           fsr2h	equ	0xFDA
 15372                           fsr2l	equ	0xFD9
 15373                           status	equ	0xFD8
 15374                           
 15375 ;; *************** function i2___ftpack *****************
 15376 ;; Defined at:
 15377 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 15378 ;; Parameters:    Size  Location     Type
 15379 ;;  arg             3    0[COMRAM] unsigned um
 15380 ;;  exp             1    3[COMRAM] unsigned char 
 15381 ;;  sign            1    4[COMRAM] unsigned char 
 15382 ;; Auto vars:     Size  Location     Type
 15383 ;;		None
 15384 ;; Return value:  Size  Location     Type
 15385 ;;                  3    0[COMRAM] float 
 15386 ;; Registers used:
 15387 ;;		wreg, status,2, status,0
 15388 ;; Tracked objects:
 15389 ;;		On entry : 0/0
 15390 ;;		On exit  : 0/0
 15391 ;;		Unchanged: 0/0
 15392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15393 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15395 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15396 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15397 ;;Total ram usage:        8 bytes
 15398 ;; Hardware stack levels used:    1
 15399 ;; This function calls:
 15400 ;;		Nothing
 15401 ;; This function is called by:
 15402 ;;		i2___ftdiv
 15403 ;;		i2___ftmul
 15404 ;; This function uses a non-reentrant model
 15405 ;;
 15406                           
 15407                           	psect	text76
 15408  002B64                     __ptext76:
 15409                           	opt stack 0
 15410  002B64                     i2___ftpack:
 15411                           	opt stack 19
 15412                           
 15413                           ;incstack = 0
 15414  002B64  5004               	movf	i2___ftpack@exp,w,c
 15415  002B66  B4D8               	btfsc	status,2,c
 15416  002B68  D005               	goto	i2l4935
 15417  002B6A  5001               	movf	i2___ftpack@arg,w,c
 15418  002B6C  1002               	iorwf	i2___ftpack@arg+1,w,c
 15419  002B6E  1003               	iorwf	i2___ftpack@arg+2,w,c
 15420  002B70  A4D8               	btfss	status,2,c
 15421  002B72  D00C               	goto	i2l4941
 15422  002B74                     i2l4935:
 15423  002B74  0E00               	movlw	0
 15424  002B76  6E01               	movwf	?i2___ftpack,c
 15425  002B78  0E00               	movlw	0
 15426  002B7A  6E02               	movwf	?i2___ftpack+1,c
 15427  002B7C  0E00               	movlw	0
 15428  002B7E  6E03               	movwf	?i2___ftpack+2,c
 15429  002B80  0012               	return	
 15430  002B82                     i2l4939:
 15431  002B82  2A04               	incf	i2___ftpack@exp,f,c
 15432  002B84  90D8               	bcf	status,0,c
 15433  002B86  3203               	rrcf	i2___ftpack@arg+2,f,c
 15434  002B88  3202               	rrcf	i2___ftpack@arg+1,f,c
 15435  002B8A  3201               	rrcf	i2___ftpack@arg,f,c
 15436  002B8C                     i2l4941:
 15437  002B8C  0E00               	movlw	0
 15438  002B8E  1401               	andwf	i2___ftpack@arg,w,c
 15439  002B90  6E06               	movwf	??i2___ftpack& (0+255),c
 15440  002B92  0E00               	movlw	0
 15441  002B94  1402               	andwf	i2___ftpack@arg+1,w,c
 15442  002B96  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 15443  002B98  0EFE               	movlw	254
 15444  002B9A  1403               	andwf	i2___ftpack@arg+2,w,c
 15445  002B9C  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 15446  002B9E  5006               	movf	??i2___ftpack,w,c
 15447  002BA0  1007               	iorwf	??i2___ftpack+1,w,c
 15448  002BA2  1008               	iorwf	??i2___ftpack+2,w,c
 15449  002BA4  B4D8               	btfsc	status,2,c
 15450  002BA6  D00C               	goto	i2l4947
 15451  002BA8  D7EC               	goto	i2l4939
 15452  002BAA                     i2l4943:
 15453  002BAA  2A04               	incf	i2___ftpack@exp,f,c
 15454  002BAC  0E01               	movlw	1
 15455  002BAE  2601               	addwf	i2___ftpack@arg,f,c
 15456  002BB0  0E00               	movlw	0
 15457  002BB2  2202               	addwfc	i2___ftpack@arg+1,f,c
 15458  002BB4  0E00               	movlw	0
 15459  002BB6  2203               	addwfc	i2___ftpack@arg+2,f,c
 15460  002BB8  90D8               	bcf	status,0,c
 15461  002BBA  3203               	rrcf	i2___ftpack@arg+2,f,c
 15462  002BBC  3202               	rrcf	i2___ftpack@arg+1,f,c
 15463  002BBE  3201               	rrcf	i2___ftpack@arg,f,c
 15464  002BC0                     i2l4947:
 15465  002BC0  0E00               	movlw	0
 15466  002BC2  1401               	andwf	i2___ftpack@arg,w,c
 15467  002BC4  6E06               	movwf	??i2___ftpack& (0+255),c
 15468  002BC6  0E00               	movlw	0
 15469  002BC8  1402               	andwf	i2___ftpack@arg+1,w,c
 15470  002BCA  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 15471  002BCC  0EFF               	movlw	255
 15472  002BCE  1403               	andwf	i2___ftpack@arg+2,w,c
 15473  002BD0  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 15474  002BD2  5006               	movf	??i2___ftpack,w,c
 15475  002BD4  1007               	iorwf	??i2___ftpack+1,w,c
 15476  002BD6  1008               	iorwf	??i2___ftpack+2,w,c
 15477  002BD8  B4D8               	btfsc	status,2,c
 15478  002BDA  D006               	goto	i2l4951
 15479  002BDC  D7E6               	goto	i2l4943
 15480  002BDE                     i2l4949:
 15481  002BDE  0604               	decf	i2___ftpack@exp,f,c
 15482  002BE0  90D8               	bcf	status,0,c
 15483  002BE2  3601               	rlcf	i2___ftpack@arg,f,c
 15484  002BE4  3602               	rlcf	i2___ftpack@arg+1,f,c
 15485  002BE6  3603               	rlcf	i2___ftpack@arg+2,f,c
 15486  002BE8                     i2l4951:
 15487  002BE8  BE02               	btfsc	i2___ftpack@arg+1,7,c
 15488  002BEA  D003               	goto	i2l897
 15489  002BEC  0E02               	movlw	2
 15490  002BEE  6004               	cpfslt	i2___ftpack@exp,c
 15491  002BF0  D7F6               	goto	i2l4949
 15492  002BF2                     i2l897:
 15493  002BF2  A004               	btfss	i2___ftpack@exp,0,c
 15494  002BF4  9E02               	bcf	i2___ftpack@arg+1,7,c
 15495  002BF6  90D8               	bcf	status,0,c
 15496  002BF8  3204               	rrcf	i2___ftpack@exp,f,c
 15497  002BFA  5004               	movf	i2___ftpack@exp,w,c
 15498  002BFC  1203               	iorwf	i2___ftpack@arg+2,f,c
 15499  002BFE  5005               	movf	i2___ftpack@sign,w,c
 15500  002C00  A4D8               	btfss	status,2,c
 15501  002C02  8E03               	bsf	i2___ftpack@arg+2,7,c
 15502  002C04  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 15503  002C08  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 15504  002C0C  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 15505  002C10  0012               	return	
 15506  002C12                     __end_ofi2___ftpack:
 15507                           	opt stack 0
 15508                           tosu	equ	0xFFF
 15509                           tosh	equ	0xFFE
 15510                           tosl	equ	0xFFD
 15511                           pclatu	equ	0xFFB
 15512                           pclath	equ	0xFFA
 15513                           tblptru	equ	0xFF8
 15514                           tblptrh	equ	0xFF7
 15515                           tblptrl	equ	0xFF6
 15516                           tablat	equ	0xFF5
 15517                           prodh	equ	0xFF4
 15518                           prodl	equ	0xFF3
 15519                           intcon	equ	0xFF2
 15520                           intcon2	equ	0xFF1
 15521                           postinc0	equ	0xFEE
 15522                           fsr0h	equ	0xFEA
 15523                           fsr0l	equ	0xFE9
 15524                           wreg	equ	0xFE8
 15525                           indf1	equ	0xFE7
 15526                           postinc1	equ	0xFE6
 15527                           postdec1	equ	0xFE5
 15528                           fsr1h	equ	0xFE2
 15529                           fsr1l	equ	0xFE1
 15530                           indf2	equ	0xFDF
 15531                           postinc2	equ	0xFDE
 15532                           postdec2	equ	0xFDD
 15533                           fsr2h	equ	0xFDA
 15534                           fsr2l	equ	0xFD9
 15535                           status	equ	0xFD8
 15536                           
 15537 ;; *************** function _getMotorCounterBasedOnBottlesLeft *****************
 15538 ;; Defined at:
 15539 ;;		line 866 in file "main.c"
 15540 ;; Parameters:    Size  Location     Type
 15541 ;;		None
 15542 ;; Auto vars:     Size  Location     Type
 15543 ;;		None
 15544 ;; Return value:  Size  Location     Type
 15545 ;;                  2    8[COMRAM] int 
 15546 ;; Registers used:
 15547 ;;		wreg, status,2, status,0, cstack
 15548 ;; Tracked objects:
 15549 ;;		On entry : 0/0
 15550 ;;		On exit  : 0/0
 15551 ;;		Unchanged: 0/0
 15552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15553 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15556 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15557 ;;Total ram usage:        2 bytes
 15558 ;; Hardware stack levels used:    1
 15559 ;; Hardware stack levels required when called:    1
 15560 ;; This function calls:
 15561 ;;		___awdiv
 15562 ;; This function is called by:
 15563 ;;		_handler
 15564 ;; This function uses a non-reentrant model
 15565 ;;
 15566                           
 15567                           	psect	text77
 15568  003792                     __ptext77:
 15569                           	opt stack 0
 15570  003792                     _getMotorCounterBasedOnBottlesLeft:
 15571                           	opt stack 19
 15572                           
 15573                           ;main.c: 877: return 5 + (runInfo[1]/2);
 15574                           
 15575                           ;incstack = 0
 15576  003792  C0F3  F001         	movff	_runInfo+2,___awdiv@dividend
 15577  003796  C0F4  F002         	movff	_runInfo+3,___awdiv@dividend+1
 15578  00379A  0E00               	movlw	0
 15579  00379C  6E04               	movwf	___awdiv@divisor+1,c
 15580  00379E  0E02               	movlw	2
 15581  0037A0  6E03               	movwf	___awdiv@divisor,c
 15582  0037A2  ECF0  F016         	call	___awdiv	;wreg free
 15583  0037A6  0E05               	movlw	5
 15584  0037A8  2401               	addwf	?___awdiv,w,c
 15585  0037AA  6E09               	movwf	?_getMotorCounterBasedOnBottlesLeft,c
 15586  0037AC  0E00               	movlw	0
 15587  0037AE  2002               	addwfc	?___awdiv+1,w,c
 15588  0037B0  6E0A               	movwf	?_getMotorCounterBasedOnBottlesLeft+1,c
 15589  0037B2  0012               	return	
 15590  0037B4                     __end_of_getMotorCounterBasedOnBottlesLeft:
 15591                           	opt stack 0
 15592                           tosu	equ	0xFFF
 15593                           tosh	equ	0xFFE
 15594                           tosl	equ	0xFFD
 15595                           pclatu	equ	0xFFB
 15596                           pclath	equ	0xFFA
 15597                           tblptru	equ	0xFF8
 15598                           tblptrh	equ	0xFF7
 15599                           tblptrl	equ	0xFF6
 15600                           tablat	equ	0xFF5
 15601                           prodh	equ	0xFF4
 15602                           prodl	equ	0xFF3
 15603                           intcon	equ	0xFF2
 15604                           intcon2	equ	0xFF1
 15605                           postinc0	equ	0xFEE
 15606                           fsr0h	equ	0xFEA
 15607                           fsr0l	equ	0xFE9
 15608                           wreg	equ	0xFE8
 15609                           indf1	equ	0xFE7
 15610                           postinc1	equ	0xFE6
 15611                           postdec1	equ	0xFE5
 15612                           fsr1h	equ	0xFE2
 15613                           fsr1l	equ	0xFE1
 15614                           indf2	equ	0xFDF
 15615                           postinc2	equ	0xFDE
 15616                           postdec2	equ	0xFDD
 15617                           fsr2h	equ	0xFDA
 15618                           fsr2l	equ	0xFD9
 15619                           status	equ	0xFD8
 15620                           
 15621 ;; *************** function ___awdiv *****************
 15622 ;; Defined at:
 15623 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
 15624 ;; Parameters:    Size  Location     Type
 15625 ;;  dividend        2    0[COMRAM] int 
 15626 ;;  divisor         2    2[COMRAM] int 
 15627 ;; Auto vars:     Size  Location     Type
 15628 ;;  quotient        2    6[COMRAM] int 
 15629 ;;  sign            1    5[COMRAM] unsigned char 
 15630 ;;  counter         1    4[COMRAM] unsigned char 
 15631 ;; Return value:  Size  Location     Type
 15632 ;;                  2    0[COMRAM] int 
 15633 ;; Registers used:
 15634 ;;		wreg, status,2, status,0
 15635 ;; Tracked objects:
 15636 ;;		On entry : 0/0
 15637 ;;		On exit  : 0/0
 15638 ;;		Unchanged: 0/0
 15639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15640 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15641 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15643 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15644 ;;Total ram usage:        8 bytes
 15645 ;; Hardware stack levels used:    1
 15646 ;; This function calls:
 15647 ;;		Nothing
 15648 ;; This function is called by:
 15649 ;;		_getMotorCounterBasedOnBottlesLeft
 15650 ;; This function uses a non-reentrant model
 15651 ;;
 15652                           
 15653                           	psect	text78
 15654  002DE0                     __ptext78:
 15655                           	opt stack 0
 15656  002DE0                     ___awdiv:
 15657                           	opt stack 19
 15658                           
 15659                           ;incstack = 0
 15660  002DE0  0E00               	movlw	0
 15661  002DE2  6E06               	movwf	___awdiv@sign,c
 15662  002DE4  AE04               	btfss	___awdiv@divisor+1,7,c
 15663  002DE6  D006               	goto	i2l4865
 15664  002DE8  6C03               	negf	___awdiv@divisor,c
 15665  002DEA  1E04               	comf	___awdiv@divisor+1,f,c
 15666  002DEC  B0D8               	btfsc	status,0,c
 15667  002DEE  2A04               	incf	___awdiv@divisor+1,f,c
 15668  002DF0  0E01               	movlw	1
 15669  002DF2  6E06               	movwf	___awdiv@sign,c
 15670  002DF4                     i2l4865:
 15671  002DF4  AE02               	btfss	___awdiv@dividend+1,7,c
 15672  002DF6  D006               	goto	i2l4871
 15673  002DF8  6C01               	negf	___awdiv@dividend,c
 15674  002DFA  1E02               	comf	___awdiv@dividend+1,f,c
 15675  002DFC  B0D8               	btfsc	status,0,c
 15676  002DFE  2A02               	incf	___awdiv@dividend+1,f,c
 15677  002E00  0E01               	movlw	1
 15678  002E02  1A06               	xorwf	___awdiv@sign,f,c
 15679  002E04                     i2l4871:
 15680  002E04  0E00               	movlw	0
 15681  002E06  6E08               	movwf	___awdiv@quotient+1,c
 15682  002E08  0E00               	movlw	0
 15683  002E0A  6E07               	movwf	___awdiv@quotient,c
 15684  002E0C  5003               	movf	___awdiv@divisor,w,c
 15685  002E0E  1004               	iorwf	___awdiv@divisor+1,w,c
 15686  002E10  B4D8               	btfsc	status,2,c
 15687  002E12  D01C               	goto	i2l4893
 15688  002E14  0E01               	movlw	1
 15689  002E16  6E05               	movwf	___awdiv@counter,c
 15690  002E18  D004               	goto	i2l4879
 15691  002E1A                     i2l4877:
 15692  002E1A  90D8               	bcf	status,0,c
 15693  002E1C  3603               	rlcf	___awdiv@divisor,f,c
 15694  002E1E  3604               	rlcf	___awdiv@divisor+1,f,c
 15695  002E20  2A05               	incf	___awdiv@counter,f,c
 15696  002E22                     i2l4879:
 15697  002E22  AE04               	btfss	___awdiv@divisor+1,7,c
 15698  002E24  D7FA               	goto	i2l4877
 15699  002E26                     i2l4881:
 15700  002E26  90D8               	bcf	status,0,c
 15701  002E28  3607               	rlcf	___awdiv@quotient,f,c
 15702  002E2A  3608               	rlcf	___awdiv@quotient+1,f,c
 15703  002E2C  5003               	movf	___awdiv@divisor,w,c
 15704  002E2E  5C01               	subwf	___awdiv@dividend,w,c
 15705  002E30  5004               	movf	___awdiv@divisor+1,w,c
 15706  002E32  5802               	subwfb	___awdiv@dividend+1,w,c
 15707  002E34  A0D8               	btfss	status,0,c
 15708  002E36  D005               	goto	i2l4889
 15709  002E38  5003               	movf	___awdiv@divisor,w,c
 15710  002E3A  5E01               	subwf	___awdiv@dividend,f,c
 15711  002E3C  5004               	movf	___awdiv@divisor+1,w,c
 15712  002E3E  5A02               	subwfb	___awdiv@dividend+1,f,c
 15713  002E40  8007               	bsf	___awdiv@quotient,0,c
 15714  002E42                     i2l4889:
 15715  002E42  90D8               	bcf	status,0,c
 15716  002E44  3204               	rrcf	___awdiv@divisor+1,f,c
 15717  002E46  3203               	rrcf	___awdiv@divisor,f,c
 15718  002E48  2E05               	decfsz	___awdiv@counter,f,c
 15719  002E4A  D7ED               	goto	i2l4881
 15720  002E4C                     i2l4893:
 15721  002E4C  5006               	movf	___awdiv@sign,w,c
 15722  002E4E  B4D8               	btfsc	status,2,c
 15723  002E50  D004               	goto	i2l4897
 15724  002E52  6C07               	negf	___awdiv@quotient,c
 15725  002E54  1E08               	comf	___awdiv@quotient+1,f,c
 15726  002E56  B0D8               	btfsc	status,0,c
 15727  002E58  2A08               	incf	___awdiv@quotient+1,f,c
 15728  002E5A                     i2l4897:
 15729  002E5A  C007  F001         	movff	___awdiv@quotient,?___awdiv
 15730  002E5E  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
 15731  002E62  0012               	return	
 15732  002E64                     __end_of___awdiv:
 15733                           	opt stack 0
 15734                           tosu	equ	0xFFF
 15735                           tosh	equ	0xFFE
 15736                           tosl	equ	0xFFD
 15737                           pclatu	equ	0xFFB
 15738                           pclath	equ	0xFFA
 15739                           tblptru	equ	0xFF8
 15740                           tblptrh	equ	0xFF7
 15741                           tblptrl	equ	0xFF6
 15742                           tablat	equ	0xFF5
 15743                           prodh	equ	0xFF4
 15744                           prodl	equ	0xFF3
 15745                           intcon	equ	0xFF2
 15746                           intcon2	equ	0xFF1
 15747                           postinc0	equ	0xFEE
 15748                           fsr0h	equ	0xFEA
 15749                           fsr0l	equ	0xFE9
 15750                           wreg	equ	0xFE8
 15751                           indf1	equ	0xFE7
 15752                           postinc1	equ	0xFE6
 15753                           postdec1	equ	0xFE5
 15754                           fsr1h	equ	0xFE2
 15755                           fsr1l	equ	0xFE1
 15756                           indf2	equ	0xFDF
 15757                           postinc2	equ	0xFDE
 15758                           postdec2	equ	0xFDD
 15759                           fsr2h	equ	0xFDA
 15760                           fsr2l	equ	0xFD9
 15761                           status	equ	0xFD8
 15762                           tosu	equ	0xFFF
 15763                           tosh	equ	0xFFE
 15764                           tosl	equ	0xFFD
 15765                           pclatu	equ	0xFFB
 15766                           pclath	equ	0xFFA
 15767                           tblptru	equ	0xFF8
 15768                           tblptrh	equ	0xFF7
 15769                           tblptrl	equ	0xFF6
 15770                           tablat	equ	0xFF5
 15771                           prodh	equ	0xFF4
 15772                           prodl	equ	0xFF3
 15773                           intcon	equ	0xFF2
 15774                           intcon2	equ	0xFF1
 15775                           postinc0	equ	0xFEE
 15776                           fsr0h	equ	0xFEA
 15777                           fsr0l	equ	0xFE9
 15778                           wreg	equ	0xFE8
 15779                           indf1	equ	0xFE7
 15780                           postinc1	equ	0xFE6
 15781                           postdec1	equ	0xFE5
 15782                           fsr1h	equ	0xFE2
 15783                           fsr1l	equ	0xFE1
 15784                           indf2	equ	0xFDF
 15785                           postinc2	equ	0xFDE
 15786                           postdec2	equ	0xFDD
 15787                           fsr2h	equ	0xFDA
 15788                           fsr2l	equ	0xFD9
 15789                           status	equ	0xFD8
 15790                           
 15791                           	psect	text79
 15792  000000                     __ptext79:
 15793                           	opt stack 0
 15794                           tosu	equ	0xFFF
 15795                           tosh	equ	0xFFE
 15796                           tosl	equ	0xFFD
 15797                           pclatu	equ	0xFFB
 15798                           pclath	equ	0xFFA
 15799                           tblptru	equ	0xFF8
 15800                           tblptrh	equ	0xFF7
 15801                           tblptrl	equ	0xFF6
 15802                           tablat	equ	0xFF5
 15803                           prodh	equ	0xFF4
 15804                           prodl	equ	0xFF3
 15805                           intcon	equ	0xFF2
 15806                           intcon2	equ	0xFF1
 15807                           postinc0	equ	0xFEE
 15808                           fsr0h	equ	0xFEA
 15809                           fsr0l	equ	0xFE9
 15810                           wreg	equ	0xFE8
 15811                           indf1	equ	0xFE7
 15812                           postinc1	equ	0xFE6
 15813                           postdec1	equ	0xFE5
 15814                           fsr1h	equ	0xFE2
 15815                           fsr1l	equ	0xFE1
 15816                           indf2	equ	0xFDF
 15817                           postinc2	equ	0xFDE
 15818                           postdec2	equ	0xFDD
 15819                           fsr2h	equ	0xFDA
 15820                           fsr2l	equ	0xFD9
 15821                           status	equ	0xFD8
 15822                           
 15823                           	psect	rparam
 15824  0000                     tosu	equ	0xFFF
 15825                           tosh	equ	0xFFE
 15826                           tosl	equ	0xFFD
 15827                           pclatu	equ	0xFFB
 15828                           pclath	equ	0xFFA
 15829                           tblptru	equ	0xFF8
 15830                           tblptrh	equ	0xFF7
 15831                           tblptrl	equ	0xFF6
 15832                           tablat	equ	0xFF5
 15833                           prodh	equ	0xFF4
 15834                           prodl	equ	0xFF3
 15835                           intcon	equ	0xFF2
 15836                           intcon2	equ	0xFF1
 15837                           postinc0	equ	0xFEE
 15838                           fsr0h	equ	0xFEA
 15839                           fsr0l	equ	0xFE9
 15840                           wreg	equ	0xFE8
 15841                           indf1	equ	0xFE7
 15842                           postinc1	equ	0xFE6
 15843                           postdec1	equ	0xFE5
 15844                           fsr1h	equ	0xFE2
 15845                           fsr1l	equ	0xFE1
 15846                           indf2	equ	0xFDF
 15847                           postinc2	equ	0xFDE
 15848                           postdec2	equ	0xFDD
 15849                           fsr2h	equ	0xFDA
 15850                           fsr2l	equ	0xFD9
 15851                           status	equ	0xFD8
 15852                           
 15853                           	psect	temp
 15854  000051                     btemp:
 15855                           	opt stack 0
 15856  000051                     	ds	1
 15857  0000                     int$flags	set	btemp
 15858                           tosu	equ	0xFFF
 15859                           tosh	equ	0xFFE
 15860                           tosl	equ	0xFFD
 15861                           pclatu	equ	0xFFB
 15862                           pclath	equ	0xFFA
 15863                           tblptru	equ	0xFF8
 15864                           tblptrh	equ	0xFF7
 15865                           tblptrl	equ	0xFF6
 15866                           tablat	equ	0xFF5
 15867                           prodh	equ	0xFF4
 15868                           prodl	equ	0xFF3
 15869                           intcon	equ	0xFF2
 15870                           intcon2	equ	0xFF1
 15871                           postinc0	equ	0xFEE
 15872                           fsr0h	equ	0xFEA
 15873                           fsr0l	equ	0xFE9
 15874                           wreg	equ	0xFE8
 15875                           indf1	equ	0xFE7
 15876                           postinc1	equ	0xFE6
 15877                           postdec1	equ	0xFE5
 15878                           fsr1h	equ	0xFE2
 15879                           fsr1l	equ	0xFE1
 15880                           indf2	equ	0xFDF
 15881                           postinc2	equ	0xFDE
 15882                           postdec2	equ	0xFDD
 15883                           fsr2h	equ	0xFDA
 15884                           fsr2l	equ	0xFD9
 15885                           status	equ	0xFD8


Data Sizes:
    Strings     418
    Constant    43
    Data        12
    BSS         30
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     72      80
    BANK0           128     91     125
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    storeRgbSensorInputIntegerValuesInto@colorValues	PTR PTR unsigned char  size(2) Largest target is 4
		 -> capIsOnBottle@rgbc(BANK0[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 2
		 -> getCurrentTimeInSeconds@str(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTimeInSeconds@str(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[8]), STR_31(CODE[17]), 
		 -> STR_30(CODE[18]), STR_29(CODE[13]), STR_28(CODE[12]), STR_27(CODE[5]), 
		 -> STR_26(CODE[4]), STR_25(CODE[14]), STR_24(CODE[16]), STR_23(CODE[18]), 
		 -> STR_22(CODE[15]), STR_21(CODE[13]), STR_20(CODE[17]), STR_19(CODE[16]), 
		 -> STR_18(CODE[16]), STR_17(CODE[14]), STR_16(CODE[14]), STR_15(CODE[16]), 
		 -> STR_14(CODE[17]), STR_13(CODE[16]), STR_12(CODE[16]), STR_11(CODE[16]), 
		 -> STR_10(CODE[11]), STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[14]), 
		 -> STR_6(CODE[14]), STR_2(CODE[15]), STR_1(CODE[13]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> i2_putch(), Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTimeInSeconds@str(BANK0[2]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 2
		 -> getCurrentTimeInSeconds@str(BANK0[2]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[8]), STR_31(CODE[17]), 
		 -> STR_30(CODE[18]), STR_29(CODE[13]), STR_28(CODE[12]), STR_27(CODE[5]), 
		 -> STR_26(CODE[4]), STR_25(CODE[14]), STR_24(CODE[16]), STR_23(CODE[18]), 
		 -> STR_22(CODE[15]), STR_21(CODE[13]), STR_20(CODE[17]), STR_19(CODE[16]), 
		 -> STR_18(CODE[16]), STR_17(CODE[14]), STR_16(CODE[14]), STR_15(CODE[16]), 
		 -> STR_14(CODE[17]), STR_13(CODE[16]), STR_12(CODE[16]), STR_11(CODE[16]), 
		 -> STR_10(CODE[11]), STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[14]), 
		 -> STR_6(CODE[14]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[15]), STR_1(CODE[13]), 

    S1075__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1075__prbuf$ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTimeInSeconds@str(BANK0[2]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTimeInSeconds@str(BANK0[2]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    analyzeRgbcForSensor@rgbc	PTR unsigned char  size(2) Largest target is 4
		 -> storeRgbSensorInputIntegerValuesInto@colorValue(BANK0[4]), 

    cycleProgramScreenRight@programScreen	PTR int  size(2) Largest target is 2
		 -> past_run_access@screen_state(BANK0[2]), EEPROM@screen_state(BANK0[2]), currentMainProgramScreen(BANK0[2]), 

    cycleProgramScreenLeft@programScreen	PTR int  size(2) Largest target is 2
		 -> past_run_access@screen_state(BANK0[2]), EEPROM@screen_state(BANK0[2]), currentMainProgramScreen(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->i2___fttol
    i2_updateCurrentTime->i2_I2C_Master_Read
    i2_updateCurrentTime->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    i2_printTime->i2_printf
    i2_printf->i2__doprnt
    i2__doprnt->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    i2___fttol->i2___ftdiv
    i2___ftmul->i2___ftpack
    i2___ftdiv->i2___ftmul
    _getMotorCounterBasedOnBottlesLeft->___awdiv

Critical Paths under _main in BANK0

    _main->_enterSelectedSubProgramFromMainProgram
    _initializePicSettings->_initializePicPins
    _initializePicPins->___fttol
    ___fttol->___ftdiv
    ___ftmul->___ftpack
    ___ftdiv->___ftmul
    _initializeLcdScreen->_displayMainProgramLcdScreen
    _initializeLcdSettings->_lcdInst
    _initializeI2C->___lldiv
    _enterSelectedSubProgramFromMainProgram->_EEPROM
    _pushBottle->_extendSensorAreaArm
    _pushBottle->_retractSensorAreaArm
    _operation->_capIsOnBottle
    _operation->_getCurrentTimeInSeconds
    _saveEEPROM->_Eeprom_WriteByte
    _Eeprom_WriteByte->___wmul
    _getCurrentTimeInSeconds->_sprintf
    _sprintf->__doprnt
    _atoi->___wmul
    _capIsOnBottle->_storeRgbSensorInputIntegerValuesInto
    _storeRgbSensorInputIntegerValuesInto->_analyzeRgbcForSensor
    _setMultiplexerToSensor->_I2C_Master_Write
    _displayMainProgramLcdScreen->_printf
    _updateCurrentTime->_I2C_Master_Read
    _updateCurrentTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _printTime->_printf
    _EEPROM->_past_run_access
    _update_eeprom_screen_state->_printf
    _past_run_access->_update_past_run_screen_state
    _update_past_run_screen_state->_printf
    _lcdClear->_printf
    _printf->__doprnt
    __doprnt->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _getEEPROM->_Eeprom_ReadByte
    _Eeprom_ReadByte->___wmul

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  301287
                                             88 BANK0      3     3      0
             _cycleProgramScreenLeft
            _cycleProgramScreenRight
        _displayMainProgramLcdScreen
_enterSelectedSubProgramFromMainProg
                _getPressedKeypadKey
              _initializePicSettings
                       _moveBinServo
 ---------------------------------------------------------------------------------
 (1) _initializePicSettings                                0     0      0   51234
                      _initializeI2C
                _initializeLcdScreen
                  _initializePicPins
 ---------------------------------------------------------------------------------
 (2) _initializePicPins                                    5     5      0    5624
                                             53 BANK0      5     5      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     354
                                             38 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    2624
                                              8 BANK0     15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    2578
                                             23 BANK0     15     9      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1992
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _initializeLcdScreen                                  0     0      0   45234
        _displayMainProgramLcdScreen
              _initializeLcdSettings
 ---------------------------------------------------------------------------------
 (3) _initializeLcdSettings                                1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _initializeI2C                                        8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (1) _enterSelectedSubProgramFromMainProgram               2     2      0  203113
                                             86 BANK0      2     2      0
                             _EEPROM
        _displayMainProgramLcdScreen
                          _operation
                    _past_run_access
                         _pushBottle
 ---------------------------------------------------------------------------------
 (2) _pushBottle                                           2     2      0      92
                                              4 BANK0      2     2      0
                _extendSensorAreaArm
               _retractSensorAreaArm
 ---------------------------------------------------------------------------------
 (2) _operation                                           19    19      0   57518
                                             50 BANK0     19    19      0
                   _activateDCmotors
                      _capIsOnBottle
                    _disableDCmotors
                _extendSensorAreaArm
            _getCurrentTimeInSeconds
                _getPressedKeypadKey
                           _lcdClear
                            _lcdInst
                       _moveBinServo
                             _printf
               _retractSensorAreaArm
                         _saveEEPROM
                  _updateCurrentTime
 ---------------------------------------------------------------------------------
 (3) _saveEEPROM                                           5     5      0    3798
                                              9 BANK0      5     5      0
                    _Eeprom_ReadByte
                   _Eeprom_WriteByte
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _Eeprom_WriteByte                                     3     0      3     706
                                              6 BANK0      3     0      3
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _retractSensorAreaArm                                 4     4      0      46
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _moveBinServo                                         4     2      2     151
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _getCurrentTimeInSeconds                             10     8      2   17703
                                             42 BANK0      8     6      2
                             ___wmul
                               _atoi
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             12     6      6   11463
                                             30 BANK0     12     6      6
                            __doprnt
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 7     5      2    2697
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _extendSensorAreaArm                                  4     4      0      46
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _disableDCmotors                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _capIsOnBottle                                       12    10      2    3665
                                             38 BANK0     12    10      2
             _setMultiplexerToSensor
_storeRgbSensorInputIntegerValuesInt
 ---------------------------------------------------------------------------------
 (4) _storeRgbSensorInputIntegerValuesInto                24    20      4    2329
                                             14 BANK0     24    20      4
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
               _analyzeRgbcForSensor
 ---------------------------------------------------------------------------------
 (5) _analyzeRgbcForSensor                                14    10      4     638
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (4) _setMultiplexerToSensor                               2     0      2    1154
                                              3 BANK0      2     0      2
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _activateDCmotors                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _displayMainProgramLcdScreen                          4     2      2   45099
                                             44 BANK0      4     2      2
                           _lcdClear
                            _lcdInst
                          _printTime
                             _printf
_toggleRTCBasedOnCurrentMainProgramS
                  _updateCurrentTime
 ---------------------------------------------------------------------------------
 (4) _updateCurrentTime                                    1     1      0    1095
                                              3 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     982
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _toggleRTCBasedOnCurrentMainProgramScreen             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _printTime                                            0     0      0   14668
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROM                                              33    33      0   68539
                                             53 BANK0     33    33      0
             _cycleProgramScreenLeft
            _cycleProgramScreenRight
                          _getEEPROM
                _getPressedKeypadKey
                    _past_run_access
         _update_eeprom_screen_state
 ---------------------------------------------------------------------------------
 (3) _update_eeprom_screen_state                           4     2      2   29918
                                             44 BANK0      4     2      2
                           _lcdClear
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _past_run_access                                      5     5      0   31865
                                             48 BANK0      5     5      0
             _cycleProgramScreenLeft
            _cycleProgramScreenRight
                _getPressedKeypadKey
       _update_past_run_screen_state
 ---------------------------------------------------------------------------------
 (3) _update_past_run_screen_state                         4     2      2   29790
                                             44 BANK0      4     2      2
                           _lcdClear
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _lcdClear                                             0     0      0   14668
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              14     6      8   14533
                                             30 BANK0     14     6      8
                            __doprnt
 ---------------------------------------------------------------------------------
 (5) __doprnt                                             27    21      6    9175
                                             12 BANK0     18    12      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     287
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     418
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _getPressedKeypadKey                                  1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _cycleProgramScreenRight                              8     2      6     686
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (3) _cycleProgramScreenLeft                               8     2      6     686
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (3) _getEEPROM                                            8     6      2    2861
                                              8 BANK0      8     6      2
                    _Eeprom_ReadByte
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    2209
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Eeprom_ReadByte                                      2     0      2     364
                                              6 BANK0      2     0      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _handler                                            19    19      0    9637
                                             53 COMRAM    19    19      0
  _getMotorCounterBasedOnBottlesLeft
                          i2___ftdiv
                          i2___ftmul
                          i2___fttol
                        i2_printTime
                i2_updateCurrentTime
 ---------------------------------------------------------------------------------
 (11) i2_updateCurrentTime                                 1     1      0     213
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) i2_printTime                                         0     0      0    6994
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (12) i2_printf                                           14     6      8    6859
                                             30 COMRAM    14     6      8
                          i2__doprnt
 ---------------------------------------------------------------------------------
 (13) i2__doprnt                                          27    21      6    6401
                                             12 COMRAM    18    12      6
                   Absolute function *
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch *
 ---------------------------------------------------------------------------------
 (14) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (14) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (14) i2___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (14) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (14) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (15) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2___fttol                                          15    11      4     278
                                             38 COMRAM    15    11      4
                          i2___ftdiv (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftmul                                          15     9      6     765
                                              8 COMRAM    15     9      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___ftdiv                                          15     9      6     719
                                             23 COMRAM    15     9      6
                          i2___ftmul (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (12) i2___ftpack                                          8     3      5     387
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (11) _getMotorCounterBasedOnBottlesLeft                   2     0      2     428
                                              8 COMRAM     2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (12) ___awdiv                                             8     4      4     428
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cycleProgramScreenLeft
   _cycleProgramScreenRight
   _displayMainProgramLcdScreen
     _lcdClear
       _lcdInst
         _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
     _lcdInst
       _lcdNibble
     _printTime
       _lcdInst
         _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
     _toggleRTCBasedOnCurrentMainProgramScreen
     _updateCurrentTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _enterSelectedSubProgramFromMainProgram
     _EEPROM
       _cycleProgramScreenLeft
       _cycleProgramScreenRight
       _getEEPROM
         _Eeprom_ReadByte
           ___wmul (ARG)
         ___wmul
       _getPressedKeypadKey
       _past_run_access
         _cycleProgramScreenLeft
         _cycleProgramScreenRight
         _getPressedKeypadKey
         _update_past_run_screen_state
           _lcdClear
             _lcdInst
               _lcdNibble
             _printf
               __doprnt
                 Absolute function(Fake) *
                 ___lwdiv *
                 ___lwmod *
                   ___lwdiv (ARG)
                 ___wmul *
                 _isdigit *
                 _putch *
                   _lcdNibble
           _lcdInst
             _lcdNibble
           _printf
             __doprnt
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               ___wmul *
               _isdigit *
               _putch *
                 _lcdNibble
       _update_eeprom_screen_state
         _lcdClear
           _lcdInst
             _lcdNibble
           _printf
             __doprnt
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               ___wmul *
               _isdigit *
               _putch *
                 _lcdNibble
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
     _displayMainProgramLcdScreen
       _lcdClear
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
       _lcdInst
         _lcdNibble
       _printTime
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
       _toggleRTCBasedOnCurrentMainProgramScreen
       _updateCurrentTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _operation
       _activateDCmotors
       _capIsOnBottle
         _setMultiplexerToSensor
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
         _storeRgbSensorInputIntegerValuesInto
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
           _analyzeRgbcForSensor
       _disableDCmotors
       _extendSensorAreaArm
       _getCurrentTimeInSeconds
         ___wmul
         _atoi
           ___wmul
           _isdigit
         _sprintf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
       _getPressedKeypadKey
       _lcdClear
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
       _lcdInst
         _lcdNibble
       _moveBinServo
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
       _retractSensorAreaArm
       _saveEEPROM
         _Eeprom_ReadByte
           ___wmul (ARG)
         _Eeprom_WriteByte
           ___wmul (ARG)
         ___wmul
       _updateCurrentTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _past_run_access
       _cycleProgramScreenLeft
       _cycleProgramScreenRight
       _getPressedKeypadKey
       _update_past_run_screen_state
         _lcdClear
           _lcdInst
             _lcdNibble
           _printf
             __doprnt
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               ___wmul *
               _isdigit *
               _putch *
                 _lcdNibble
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
     _pushBottle
       _extendSensorAreaArm
       _retractSensorAreaArm
   _getPressedKeypadKey
   _initializePicSettings
     _initializeI2C
       ___lldiv
     _initializeLcdScreen
       _displayMainProgramLcdScreen
         _lcdClear
           _lcdInst
             _lcdNibble
           _printf
             __doprnt
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               ___wmul *
               _isdigit *
               _putch *
                 _lcdNibble
         _lcdInst
           _lcdNibble
         _printTime
           _lcdInst
             _lcdNibble
           _printf
             __doprnt
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               ___wmul *
               _isdigit *
               _putch *
                 _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
         _toggleRTCBasedOnCurrentMainProgramScreen
         _updateCurrentTime
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _initializeLcdSettings
         _lcdInst
           _lcdNibble
     _initializePicPins
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul
         ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___ftpack
   _moveBinServo

 _handler (ROOT)
   _getMotorCounterBasedOnBottlesLeft
     ___awdiv
   i2___ftdiv
     i2___ftmul (ARG)
       i2___ftpack
     i2___ftpack (ARG)
   i2___ftmul
     i2___ftpack
   i2___fttol
     i2___ftdiv (ARG)
       i2___ftmul (ARG)
         i2___ftpack
       i2___ftpack (ARG)
     i2___ftmul (ARG)
       i2___ftpack
   i2_printTime
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2__doprnt
         Absolute function(Fake) *
         i2___lwdiv *
         i2___lwmod *
           i2___lwdiv (ARG)
         i2___wmul *
         i2_isdigit *
         i2_putch *
           i2_lcdNibble
   i2_updateCurrentTime
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5B      7D       5       97.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     48      50       1       63.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CD      34        0.0%
DATA                 0      0      CD       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Mar 28 16:33:56 2017

                             operation@bottle_type 00BB                             ??_analyzeRgbcForSensor 0084  
                               i2_I2C_Master_Start 38BE                                 i2_I2C_Master_Write 388C  
                         __end_of_Eeprom_WriteByte 36FE               __end_of_update_past_run_screen_state 1948  
            __size_of_update_past_run_screen_state 0160                       _update_past_run_screen_state 17E8  
                                     ___awdiv@sign 0006                                ___wmul@multiplicand 0082  
                               i2___lwdiv@dividend 0001                                        __CFG_BORV$3 000000  
                       __size_of_updateCurrentTime 0076                                         i2___ftpack 2B64  
                                     __CFG_CP0$OFF 000000                                       __CFG_CP1$OFF 000000  
                                     __CFG_CP2$OFF 000000                                       __CFG_CP3$OFF 000000  
                                      __CFG_OSC$HS 000000                                                l232 3658  
                                              l260 3838                                                l229 364A  
                                              l610 0198                                                l435 20DE  
                                              l339 0CC2                                                l372 2D54  
                                              l428 156E                                                l519 3814  
                                              l375 2D82                                                l455 36F4  
                                              l449 37E2                                                l830 2902  
                                              l955 1BBC                                                l897 23FE  
                                     __CFG_CPB$OFF 000000                                                _PEN 007E2A  
                                     __CFG_CPD$OFF 000000                                                _SEN 007E28  
                                              _PSA 007EAB                                ?i2_I2C_Master_Start 0001  
                              ?i2_I2C_Master_Write 0002                                __end_ofi2_printTime 34AE  
                                              prod 000FF3                                                tosl 000FFD  
                                              wreg 000FE8                           ?_getCurrentTimeInSeconds 00AA  
                                     __CFG_LVP$OFF 000000                                       ___ftdiv@cntr 00A0  
                                     ___ftdiv@sign 00A5                                       __CFG_WDT$OFF 000000  
                                             l1027 2A9C                                               l1080 2F54  
                                             l1090 31CC                                               l4011 2DB6  
                                             l4007 2DAA                                               l4201 150C  
                                             l4123 2FDE                                               l4213 1FB6  
                                             l4133 301E                                               l4205 1522  
                                             l4223 2048                                               l4311 1A28  
                                             l4225 2052                                               l4217 1FCC  
                                             l4081 2ACE                                               l4137 3046  
                                             l4153 12F0                                               l4241 1AE0  
                                             l4321 1A66                                               l4147 3086  
                                             l4163 137C                                               l4307 1A0A  
                                             l4229 2068                                               l3365 2F04  
                                             l3349 36CC                                               l4077 2AB8  
                                             l4181 1432                                               l4165 1386  
                                             l4157 1306                                               l4317 1A48  
                                             l3367 2F10                                               l3623 1660  
                                             l4087 2AEA                                               l4175 1412  
                                             l4247 1B1A                                               l4335 1C2C  
                                             l3721 355E                                               l3377 2F46  
                                             l3369 2F16                                               l3393 31BE  
                                             l3385 3188                                               l3641 16C6  
                                             l4193 14BC                                               l4177 141C  
                                             l4169 139C                                               l4353 1CBE  
                                             l3715 359A                                               l3387 3194  
                                             l3651 1742                                               l3627 168C  
                                             l4187 149C                                               l4267 1B7A  
                                             l4371 1D24                                               l4363 1CEE  
                                             l3389 319A                                               l3741 2FA4  
                                             l3629 16A2                                               l3637 16BA  
                                             l4189 14A6                                               l4381 2A20  
                                             l4293 19BC                                               l4365 1CFE  
                                             l4357 1CD2                                               l3663 1786  
                                             l3655 176E                                               l3647 1716  
                                             l4199 1502                                               l4383 2A30  
                                             l3903 2424                                               l4287 1982  
                                             l4367 1D08                                               l3737 2F9A  
                                             l3665 17C4                                               l3673 17DC  
                                             l3649 172C                                               l3761 2822  
                                             l4393 2A8A                                               l4385 2A36  
                                             l3747 2FC4                                               l3771 2868  
                                             l8021 00A4                                               l3597 36A4  
                                             _BACK FE54                                               l8111 0386  
                                             l8031 00E2                                               l8015 0066  
                                             l3775 287A                                               l3759 281C  
                                             l8121 0402                                               l8025 00AE  
                                             l8009 0014                                               l3777 28C4  
                                             l3881 2362                                               l8107 035C  
                                             l8123 040C                                               l8043 0164  
                                             l8019 0092                                               l8211 1866  
                                             l8203 17EE                                               l3779 28CA  
                                             l3891 23F0                                               l3883 2392  
                                             l3875 2340                                               l8141 04F0  
                                             l8133 0488                                               l8125 0418  
                                             l8117 03D8                                               l8053 01DE  
                                             l8213 1884                                               l8205 180C  
                                             l8221 1930                                               l3789 2EA4  
                                             l8135 049C                                               l8071 0250  
                                             l8055 0208                                               l8039 015E  
                                             l8215 18A2                                               l8207 182A  
                                             l8303 2C18                                               l8231 2CBC  
                                             l3887 23B2                                               l3879 2354  
                                             l8161 0626                                               l8129 045E  
                                             l8145 051A                                               l8057 020E  
                                             l8209 1848                                               l8305 2C2E  
                                             l8313 2C70                                               l8233 2CD2  
                                             l3897 2408                                               l3889 23E2  
                                             _ADFM 007E07                                               l8147 0520  
                                             l8155 05CC                                               l8219 18F0  
                                             l8307 2C44                                               l8315 2C9E  
                                             l8243 2D08                                               l8149 0572  
                                             l8157 05DE                                               l8165 0650  
                                             l8093 02C0                                               l8069 024A  
                                             l8085 028C                                               l8309 2C5A  
                                             l8237 2CDC                                               l8245 2D36  
                                             l8501 0C56                                               l8087 029E  
                                             l8167 065C                                               l8239 2CF2  
                                             l8511 0C92                                               l8097 02F8  
                                             l8169 067A                                               l8273 21A0  
                                             l8505 0C6C                                               l8099 0302  
                                             l8259 20F6                                               l8701 127C  
                                             l8621 0FCE                                               l8613 0F9E  
                                             l8541 0D4A                                               l8631 1004  
                                             l8519 0CBC                                               l8641 1064  
                                             l8609 0F88                                               l8721 338C  
                                             l8619 0FCA                                               l8555 0D9E  
                                             l8723 3392                                               l8731 33A4  
                                             l8653 10C0                                               l8637 104E  
                                             l8573 0E82                                               l8725 3398  
                                             l8733 33D2                                               l8671 113A  
                                             l8647 10A0                                               l8591 0F16  
                                             l8727 339E                                               l8649 10AA  
                                             l8577 0ED8                                               l8753 1EC0  
                                             l8683 119A                                               l8667 1124  
                                             l8659 10FE                                               l8747 1E7A  
                                             l8677 1176                                               l8589 0F00  
                                             l8765 1F84                                               l8759 1F22  
                                             l8689 11DA                                               STR_1 FFC9  
                                             STR_2 FF67                                               STR_3 FF71  
                                             STR_4 FF71                                               STR_5 FF71  
                                             STR_6 FF92                                               STR_7 FF84  
                                             STR_8 FEB3                                               STR_9 FED5  
                                             _T0CS 007EAD                                               u3100 1632  
                                             _LATA 000F89                                               u3110 1648  
                                             _LATB 000F8A                                               _LATC 000F8B  
                                             _LATD 000F8C                                               _LATE 000F8D  
                                             u3050 36A2                                               u3130 1676  
                                             u3220 1758                                               _LEFT FE58  
                                             u3080 1606                                               u3090 161C  
                                             u3180 16E8                                               _PEIE 007F96  
                                             u4455 3206                                               u3911 195E  
                                             u3931 1998                                               _RCEN 007E2B  
                                             u3861 1ABC                                               u3881 1AF6  
                                             u3971 1C08                                               u3990 1C52  
                                             u3995 1C48                                               u9340 1198  
                                             u9350 11D8                                               u8448 004E  
                                             u8618 0346                                               u9507 342A  
                                             u9517 345E                                               u9607 2D72  
                                             u9527 3710                                               u8728 04DA  
                                             u8648 03C2                                               u9617 2D8C  
                                             u9537 0CEE                                               u9707 3104  
                                             u9627 2DA0                                               u9547 0D0E  
                                             u8748 060E                                               u9637 2DD0  
                                             u9557 0E1C                                               u9647 3060  
                                             u9567 2FF8                                               u8688 0448  
                                             u9657 3074                                               u9577 300C  
                                             u9667 3094                                               u9587 302C  
                                             u9677 30C4                                               u9597 2D5E  
                                             u9687 30CE                                               u9697 30FA  
                                             _RSEN 007E29                                               _atoi 281A  
                                             _main 1E76                                        i2__doprnt@c 001E  
                                     ___ftpack@arg 0080                                        i2__doprnt@f 000F  
                                             _keys FE31                 __end_of_update_eeprom_screen_state 2CB6  
                       _update_eeprom_screen_state 2C12                                       ___ftpack@exp 0083  
                                             _time 00E2                                               fsr0h 000FEA  
                                             fsr1h 000FE2                                 i2___lwdiv@quotient 0005  
                                             fsr2h 000FDA                                               fsr0l 000FE9  
                                             indf1 000FE7                                               indf2 000FDF  
                                             fsr1l 000FE1                                               fsr2l 000FD9  
                                             btemp 0051                               ??i2_I2C_Master_Start 0002  
                             ??i2_I2C_Master_Write 0004                                               prodh 000FF4  
                                             prodl 000FF3                                               start 000E  
                                    __CFG_IESO$OFF 000000                                       i2___ftdiv@f1 0018  
                                     i2___ftdiv@f2 001B                                       i2___ftdiv@f3 0022  
                                  __end_ofi2_putch 3876                                      __CFG_MCLRE$ON 000000  
                                     ___ftmul@cntr 0095                                       i2___ftmul@f1 0009  
                                     i2___ftmul@f2 000C                                       ___param_bank 000000  
                                     ___ftmul@sign 0096                                       i2___fttol@f1 0027  
                              past_run_access@temp 00B2                                        i2_lcdNibble 3290  
                                     ___fttol@exp1 00B4                                       ___fttol@lval 00B0  
                                 ?_I2C_Master_Read 0001                                   ?_I2C_Master_Wait 0001  
                                 ?_I2C_Master_Stop 0001                      ?_update_past_run_screen_state 00AC  
                                            ?_atoi 0086                                              ?_main 0001  
                                            _ACKEN 007E2C                                              _ACKDT 007E2D  
                                  __end_of___awdiv 2E64                                              _EEADR 000FA9  
                                            STR_10 FFE2                                              STR_11 FEF7  
                                            STR_12 FF07                                              STR_20 FEE6  
                                            STR_21 FFC9                                              STR_13 FF17  
                                            STR_22 FF67                                              STR_14 FEC4  
                                            STR_30 FE5C                                              STR_15 FF57  
                                            STR_31 FEA2                                              STR_23 FE6E  
                                            STR_32 FFED                                              STR_16 FFAE  
                                            STR_24 FF27                                              STR_17 FFA0  
                                            STR_25 FF76                                              STR_33 FE91  
                                            STR_34 FE91                                              STR_26 FFFA  
                                            STR_18 FF47                                              STR_27 FFF5  
                                            STR_19 FF37                                              STR_35 FE80  
                                            STR_28 FFD6                                              STR_29 FFBC  
                                  __end_of___ftdiv 1BF2                                    __end_of___lldiv 2AAE  
                                  __end_of___ftmul 1AA6                                    ___awdiv@divisor 0003  
                                            _T1CON 000FCD                                    __end_of___fttol 1D36  
                                            _T0PS0 007EA8                                              _T0PS1 007EA9  
                                            _T0PS2 007EAA                             _cycleProgramScreenLeft 356E  
                                            _ENTER FE56                                    __end_of___lwdiv 2F5E  
                                  __end_of___lwmod 31D6                                              i2l610 07D8  
                                            i2l519 383C                                              i2l578 1DBE  
                                            i2l955 29C0                                    ___awdiv@counter 0005  
                                            i2l897 2BF2                                              _RIGHT FE5A  
                          ??_initializePicSettings 00BA                                              _TMR1H 000FCF  
                                            _TMR1L 000FCE                                              _PORTB 000F81  
                                  __end_of__doprnt 0686                                              _TRISA 000F92  
                                            _TRISB 000F93                                              _TRISC 000F94  
                                            _TRISD 000F95                                              _TRISE 000F96  
                                    __CFG_PWRT$OFF 000000                                      __CFG_WRT0$OFF 000000  
                                    __CFG_WRT1$OFF 000000                                      __CFG_WRT2$OFF 000000  
                                    __CFG_WRT3$OFF 000000                                    __end_of_lcdInst 385E  
                             _retractSensorAreaArm 2FD4                                    __end_of_handler 1E76  
                                   __CFG_EBTR0$OFF 000000                                     __CFG_FCMEN$OFF 000000  
                                   __CFG_EBTR1$OFF 000000                                     __CFG_EBTR2$OFF 000000  
                                   __CFG_EBTR3$OFF 000000                                              _nRBPU 007F8F  
                                    __CFG_WRTB$OFF 000000                                      __CFG_WRTC$OFF 000000  
                                    __CFG_WRTD$OFF 000000                            ?_setMultiplexerToSensor 0083  
                                   __CFG_EBTRB$OFF 000000                                         i2isdigit@c 0003  
                                  __end_of_dpowers FE4C                                   ?_Eeprom_ReadByte 0086  
                                     i2__doprnt@ap 0011                                       i2__doprnt@pb 000D  
                              _getPressedKeypadKey 364A                                    __end_of_isdigit 36D6  
                                    ___ftpack@sign 0084                                              atoi@a 008B  
                                            atoi@s 0086                                              _putch 37EA  
                                            pclath 000FFA                                              tablat 000FF5  
                                 __end_ofi2___wmul 3770                                              status 000FD8  
                                  __end_of_sprintf 3338                                      i2___ftdiv@exp 0025  
                                   saveEEPROM@temp 008A                                     __CFG_PBADEN$ON 000000  
                               __size_ofi2___ftdiv 00E6                                 __size_ofi2___ftmul 00F4  
                               __size_ofi2___fttol 00F4                                       __end_of_BACK FE56  
                                 __end_ofi2_printf 3616                                 __size_ofi2___lwdiv 0052  
                               __size_ofi2___lwmod 0042                                       __end_of_LEFT FE5A  
                           __size_of_capIsOnBottle 00B6                                 __size_ofi2__doprnt 05AE  
                                  __initialization 34AE                                 __size_ofi2_lcdInst 000C  
                                     __end_of_atoi 290C                                       __end_of_main 1FAC  
                                     __end_of_keys FE42                                      i2___ftmul@exp 0012  
                             ?_getPressedKeypadKey 0001                                         i2printf@ap 0027  
                                       i2printf@pb 0029                                        i2_printTime 3468  
                               __size_ofi2_isdigit 001E                                        ?i2___ftpack 0001  
                                  _past_run_access 20E0                                             ??_atoi 0088  
                                           ??_main 00D8                                      ___fttol@sign1 00AF  
                                    __activetblptr 000003                         operation@requiredBottleBin 00C1  
                               EEPROM@screen_state 00D2                         cycleProgramScreenRight@max 0084  
                       cycleProgramScreenRight@min 0082                     __end_of_setMultiplexerToSensor 2EE6  
                            ?_retractSensorAreaArm 0001                                  ?_I2C_Master_Start 0001  
                     __size_of_initializeLcdScreen 0014                                  ?_I2C_Master_Write 0081  
                                  _disableDCmotors 3896                                 ??_I2C_Master_Start 0081  
                                           _ADCON0 000FC2                                             _ADCON1 000FC1  
                               ??_I2C_Master_Write 0083             storeRgbSensorInputIntegerValuesInto@b1 0096  
           storeRgbSensorInputIntegerValuesInto@c1 0098             storeRgbSensorInputIntegerValuesInto@g1 0094  
           storeRgbSensorInputIntegerValuesInto@r1 0092                                             _EEADRH 000FAA  
                                           _EEDATA 000FA8                                             _EECON2 000FA7  
                                           _T08BIT 007EAE                                   ___awdiv@dividend 0001  
                                  i2lcdNibble@data 0002                                             ?_putch 0001  
                                 __end_of___ftpack 2432                                             _EEPROM 0FEE  
                                  i2lcdNibble@temp 0001                                             _CVRCON 000FB5  
                                           i2l1080 3380                                             i2l1090 3528  
                                           _T1SYNC 007E6A                                             i2l5101 27B8  
                                           i2l5013 3140                                             i2l5031 2934  
                                           i2l5111 27E0                                             i2l5023 3164  
                                           i2l5017 3148                                             i2l5107 27D0  
                                           i2l5037 295C                                             i2l5125 265E  
                                           i2l5143 26C4                                             i2l5057 299A  
                                           i2l5161 2714                                             i2l5153 26EC  
                                           i2l5083 2776                                             i2l5155 26F8  
                                           i2l5147 26D4                           analyzeRgbcForSensor@rgbc 0082  
                                           i2l5077 274E                                             i2l5157 26FE  
                          _cycleProgramScreenRight 3532                                             i2l5097 27A8  
                                           i2l3925 37CA                                             i2l3935 334E  
                                           i2l3937 3356                                             i2l3947 3376  
                                           i2l3939 335A                                             i2l3963 351E  
                                           i2l3955 34FE                                             i2l4941 2B8C  
                                           i2l3957 3506                                             i2l4925 3744  
                                           i2l4871 2E04                                             i2l4951 2BE8  
                                           i2l4943 2BAA                                             i2l4935 2B74  
                                           i2l3959 350A                                             i2l4881 2E26  
                                           i2l4865 2DF4                                             i2l8401 08AC  
                                           i2l4947 2BC0                                             i2l4939 2B82  
                                           i2l8403 08BC                                             i2l8331 06D0  
                                           i2l4877 2E1A                                             i2l4893 2E4C  
                                           i2l4949 2BDE                                             i2l8413 08FA  
                                           i2l8341 0710                                             i2l8325 0688  
                                           i2l4879 2E22                                             i2l8423 0952  
                                           i2l8415 0902                                             i2l8335 06FC  
                                           i2l4897 2E5A                                             i2l4889 2E42  
                                           i2l8441 09FE                                             i2l8433 09C4  
                                           i2l8409 08D6                                             i2l8337 070A  
                                           i2l8451 0A76                                             i2l8427 097C  
                                           i2l8371 0840                                             i2l8355 07A4  
                                           i2l8347 0742                                             i2l8445 0A3E  
                                           i2l8437 09EE                                             i2l8461 0AEC  
                                           i2l8373 0844                                             i2l8463 0AF2  
                                           i2l8471 0B8E                                             i2l8439 09F6  
                                           i2l8359 07A8                                             i2l8465 0B3C  
                                           i2l8473 0B9E                                             i2l8481 0C08  
                                           i2l8457 0AC2                                             i2l8449 0A68  
                                           i2l8385 0876                                             i2l8369 0816  
                                           i2l8387 087A                                             i2l8483 0C10  
                                           i2l8477 0BDE                                             i2l8485 0C2A  
                                           i2l8807 1DC4                                             i2l8819 1E38  
                                           i2l8791 1D94                                             i2l8793 1D98  
                                           i2l8795 1D9A                                             _OSCCON 000FD3  
                                           u490_41 2944                                             u493_41 2736  
                                           u495_41 275E                                             u488_41 291C  
                                           u499_41 2642                                             _TMR0IE 007F95  
                                           _TMR0IF 007F92                                          ??i2_putch 0003  
                                           _TMR1IE 007CE8                                             _TMR1IF 007CF0  
                                           _TMR1CS 007E69                                             _TMR0ON 007EAF  
                                           _TMR1ON 007E68                                             _SSPADD 000FC8  
                                           _TRISC3 007CA3                                             _TRISC4 007CA4  
                                           _SSPBUF 000FC9                                   __end_of_lcdClear 364A  
                        initializePicPins@set_time 00B8                                     __CFG_XINST$OFF 000000  
   storeRgbSensorInputIntegerValuesInto@colorValue 00A2                              ??_getPressedKeypadKey 0080  
                                           ___wmul 35AA                                          ??___awdiv 0005  
                                   __CFG_STVREN$ON 000000                                          ??___ftdiv 009D  
                                        ??___lldiv 0088                                          ??___ftmul 008E  
                                        ??___fttol 00AA                                          ??___lwdiv 0084  
                                        ??___lwmod 008B                                          ??__doprnt 0092  
                                    i2__doprnt@idx 0017                                      i2__doprnt@val 0019  
                                           clear_0 34D4                                             clear_1 34E0  
                                 ___awdiv@quotient 0007                                       __doprnt@flag 009A  
                                        ??_lcdInst 0082                                             _printf 33D8  
                                        ??_handler 0036                                       __doprnt@prec 0097  
                            ___ftmul@f3_as_product 0092                                          ??_isdigit 0080  
                                __end_ofi2___ftdiv 29F2                                  __end_ofi2___ftmul 281A  
                                __end_ofi2___fttol 2726                                      _capIsOnBottle 2AAE  
                                __end_ofi2___lwdiv 338A                                       __mediumconst FE30  
                                __end_ofi2___lwmod 3532                     ??_update_past_run_screen_state 00AE  
                                           tblptrh 000FF7                            Eeprom_WriteByte@address 0086  
                                           tblptrl 000FF6                                             tblptru 000FF8  
                           __size_of_initializeI2C 0060                                  __end_ofi2__doprnt 0C34  
                                __end_ofi2_lcdInst 3882                                          ??_sprintf 00A4  
                                    main@userInput 00DA                                  __end_ofi2_isdigit 37D2  
                                   i2___ftdiv@cntr 0021                                         __accesstop 0080  
                          __end_of__initialization 34E6                     __size_of_initializeLcdSettings 0046  
                                   i2___ftdiv@sign 0026                      __end_of_initializeLcdSettings 3468  
                              __size_ofi2___ftpack 00AE                                      ___rparam_used 000001  
                                       ___ftdiv@f1 0097                                         ___ftdiv@f2 009A  
                                       ___ftdiv@f3 00A1                                      __end_of_ENTER FE58  
                                    __end_of_RIGHT FE5C                                     i2___ftpack@arg 0001  
                                   i2___ftpack@exp 0004                                        saveEEPROM@i 008C  
                                       ___ftmul@f1 0088                                         ___ftmul@f2 008B  
                        cycleProgramScreenLeft@max 0084                          cycleProgramScreenLeft@min 0082  
                          __end_of_past_run_access 220A                                         ___fttol@f1 00A6  
                               i2___lwmod@dividend 0008                                     __pcstackCOMRAM 0001  
                               __size_of_getEEPROM 0134                                       __pidataBANK0 385E  
                        __size_of_activateDCmotors 0008                                     i2___ftmul@cntr 0016  
                                   i2___ftmul@sign 0017                                      __end_of_putch 3800  
                                ?_Eeprom_WriteByte 0086                            __end_of_disableDCmotors 389E  
                                   i2___fttol@exp1 0035                                     i2___fttol@lval 0031  
                               ??_Eeprom_WriteByte 0089                        getPressedKeypadKey@keypress 0080  
                                        ?i2___wmul 0001                       __size_ofi2_updateCurrentTime 0068  
                           ??_retractSensorAreaArm 0080                                 __size_of_lcdNibble 0068  
                     __size_of_extendSensorAreaArm 0068                                        i2putch@data 0003  
                                   ?_capIsOnBottle 00A6                                      _currentBottle 00E9  
                                        ?i2_printf 001F                          ??_cycleProgramScreenRight 0086  
                                          EEPROM@i 00D4                                         __doprnt@ap 0090  
                                       __doprnt@pb 008C                                            ??_putch 0082  
                                          ?_EEPROM 0001                                         __pbssBANK0 00DB  
                                    ?_moveBinServo 0080                        ?_update_eeprom_screen_state 00AC  
                 __size_of_getCurrentTimeInSeconds 011C                                      _initializeI2C 31D6  
                             i2updateCurrentTime@i 0004                                       ?i2_lcdNibble 0001  
                                          ?___wmul 0080                                    handler@set_time 0047  
                          ?_cycleProgramScreenLeft 0080                      __size_of_analyzeRgbcForSensor 0278  
          storeRgbSensorInputIntegerValuesInto@red 009A                                          ?___ftpack 0080  
                                          ?_printf 009E                                 __size_of_operation 03BA  
                                          _T1CKPS0 007E6C                                            _T1CKPS1 007E6D  
                                       ??i2___wmul 0005                                  _initializePicPins 253C  
                                          _T1OSCEN 007E6B                                 __size_of_printTime 005A  
                               ?_initializePicPins 0001                     __size_of_initializePicSettings 0022  
                                        ?_lcdClear 0001                      __end_of_initializePicSettings 3792  
                                       ??i2_printf 0027                                            _SSPCON1 000FC6  
                                          _SSPCON2 000FC5                                  __end_of_getEEPROM 20E0  
                     ?_displayMainProgramLcdScreen 00AC                                            _SSPSTAT 000FC7  
                                  __size_of_EEPROM 02F8                                ??_initializePicPins 00B5  
                                   ??_moveBinServo 0082          __end_of_getMotorCounterBasedOnBottlesLeft 37B4  
       __size_of_getMotorCounterBasedOnBottlesLeft 0022                ??_getMotorCounterBasedOnBottlesLeft 000B  
               ?_getMotorCounterBasedOnBottlesLeft 0009                  _getMotorCounterBasedOnBottlesLeft 3792  
                                          i2_putch 386A                          setMultiplexerToSensor@num 0083  
                      __size_ofi2_I2C_Master_Start 0008                                  __end_of_lcdNibble 310C  
                      __size_ofi2_I2C_Master_Write 000A                                         getEEPROM@i 008E  
                                   ?_initializeI2C 008D                                            __Hparam 0000  
                              _initializeLcdScreen 3800                                            __Lparam 0000  
                                 ?_past_run_access 0001                    __end_of_cycleProgramScreenRight 356E  
                             Eeprom_WriteByte@data 0088                     __end_of_cycleProgramScreenLeft 35AA  
                                 _currentBottleBin 00EB                                            ___awdiv 2DE0  
                                          ___ftdiv 1AA6                                            ___lldiv 29F2  
                                  __size_of___wmul 0036                                            ___ftmul 1948  
                                          ___fttol 1BF2                                            ___lwdiv 2EE6  
                                          ___lwmod 3174                                       ?i2_printTime 0001  
                                        _CMCONbits 000FB4                                            __doprnt 0012  
                        __end_of_initializePicPins 2632                                            __pcinit 34AE  
                                     ??i2___ftpack 0006                                         ??___ftpack 0085  
                          i2___ftmul@f3_as_product 0013                                            __ramtop 1000  
                                 ?_disableDCmotors 0001                                            _lcdInst 384E  
                                          _handler 0008                                            __ptext0 1E76  
                                          __ptext1 3770                                            __ptext2 253C  
                                          __ptext3 1BF2                                            __ptext4 1948  
                                          __ptext5 1AA6                                            __ptext6 2326  
                                          __ptext7 3800                                            __ptext8 3422  
                                          __ptext9 31D6                                    ??_capIsOnBottle 00A8  
                                  __size_of_printf 004A                                  __end_of_hexpowers FE54  
                                       _saveEEPROM 12E6                                            _dpowers FE42  
                                          _isdigit 36AC                                     i2__doprnt@flag 001B  
                             ?_initializeLcdScreen 0001                                     i2__doprnt@prec 0018  
               getCurrentTimeInSeconds@currentTime 00AC                           __size_of_I2C_Master_Read 002E  
                                       ??_lcdClear 00AC                           __size_of_I2C_Master_Wait 0014  
                                       EEPROM@temp 00D1                           __size_of_I2C_Master_Stop 0008  
                  update_past_run_screen_state@num 00AC                                            _runInfo 00F1  
                                          _sprintf 32E6                                      __doprnt@width 009B  
                                   __pintcode_body 1D36                               end_of_initialization 34E6  
                    ??_displayMainProgramLcdScreen 00AE                                            int_func 1D36  
                              i2___wmul@multiplier 0001                                  __end_of_operation 0FEE  
                               __end_ofi2___ftpack 2C12                           __size_of_Eeprom_ReadByte 0018  
                        __size_of_I2C_Master_Start 0008                                     capIsOnBottle@i 00B0  
                        __size_of_I2C_Master_Write 000A                                    ___lldiv@divisor 0084  
                                  ___lldiv@counter 008C                                  __end_of_printTime 3290  
                                          printf@f 009E                         moveBinServo@num90Rotations 0080  
                                 I2C_Master_Read@a 0081                                            postdec1 000FE5  
                                          postdec2 000FDD                                   _activateDCmotors 389E  
                                          postinc0 000FEE                                            postinc1 000FE6  
                                          postinc2 000FDE                      update_eeprom_screen_state@num 00AC  
                                    EEPROM@storage 00C5                                          _PORTAbits 000F80  
                                        _PORTBbits 000F81                                          _PORTCbits 000F82  
                                        _PORTDbits 000F83                              ??_initializeLcdScreen 00B0  
                                       _pushBottle 36FE                                  i2_I2C_Master_Read 3724  
                                i2_I2C_Master_Wait 383C                                  i2_I2C_Master_Stop 38B6  
                                        i2___ftdiv 290C                                  i2___lwdiv@divisor 0003  
                                        i2___ftmul 2726                                          i2___fttol 2632  
                                        i2___lwdiv 3338                                          i2___lwmod 34F0  
                                i2___lwdiv@counter 0007                                 ?i2_I2C_Master_Read 0001  
                               ?i2_I2C_Master_Wait 0001                                 ?i2_I2C_Master_Stop 0001  
                                        i2__doprnt 0686                        past_run_access@screen_state 00B3  
                            operation@startingTime 00B4                                     __end_of_EEPROM 12E6  
                                        i2_lcdInst 3876                                        ___ftdiv@exp 00A4  
                                  ??_initializeI2C 0091                        __end_of_getPressedKeypadKey 367E  
                          _getCurrentTimeInSeconds 220A                                i2_updateCurrentTime 310C  
                              _extendSensorAreaArm 303C                                ??i2_I2C_Master_Read 0002  
                                  i2___ftpack@sign 0005                                          i2_isdigit 37B4  
                              ??i2_I2C_Master_Wait 0001                                ??i2_I2C_Master_Stop 0002  
                            retractSensorAreaArm@i 0082                                        ___ftmul@exp 0091  
                            initializePicPins@time 00B5               __size_of_displayMainProgramLcdScreen 009C  
                                   __end_of___wmul 35E0                         __size_of_initializePicPins 00F6  
                             __size_ofi2_lcdNibble 0056                               __end_of_moveBinServo 2DE0  
                                    i2lcdInst@data 0003                               ?i2_updateCurrentTime 0001  
                             ?_extendSensorAreaArm 0001                                   i2___wmul@product 0005  
                                      ?_saveEEPROM 0001                                     __end_of_printf 3422  
                        __end_ofi2_I2C_Master_Read 374A                      analyzeRgbcForSensor@sensorNum 0080  
                        __end_ofi2_I2C_Master_Wait 384E                                start_initialization 34AE  
                        __end_ofi2_I2C_Master_Stop 38BE                                  __size_ofi2___wmul 0026  
                                        i2printf@f 001F                              i2I2C_Master_Read@temp 0003  
                                  i2___fttol@sign1 0030                                       getEEPROM@num 0088  
                                       ?i2___ftdiv 0018                                         ?i2___ftmul 0009  
                                       ?i2___fttol 0027                                         ?i2___lwdiv 0001  
                                         ??_EEPROM 00B5                                         ?i2___lwmod 0008  
                        __size_of_Eeprom_WriteByte 0028                                  __size_ofi2_printf 0036  
                                       ?i2__doprnt 000D                                  ??_I2C_Master_Read 0081  
                                ??_I2C_Master_Wait 0080                                         ?i2_lcdInst 0001  
                                ??_I2C_Master_Stop 0081                                         ?i2_isdigit 0001  
                            _initializeLcdSettings 3422                                           ??___wmul 0084  
                                      __doprnt@idx 0096                                        __doprnt@val 0098  
                                ??_Eeprom_ReadByte 0088                                        __pdataBANK0 00F1  
                                 __CFG_LPT1OSC$OFF 000000                                  EEPROM@timeStorage 00B7  
                         ??_setMultiplexerToSensor 0085                                           ??_printf 00A6  
                            ??i2_updateCurrentTime 0004                               __size_ofi2_printTime 0046  
                            ??_extendSensorAreaArm 0080                                  __size_of___ftpack 010C  
                                      __pbssCOMRAM 0049                      __size_of_retractSensorAreaArm 0068  
                                      ?_pushBottle 0001                                      __pcstackBANK0 0080  
                                i2___lwmod@divisor 000A                         getCurrentTimeInSeconds@str 00B0  
                                i2___lwmod@counter 000C                                       _isdigit$1338 0081  
                                __size_of_lcdClear 0034                       __end_of_analyzeRgbcForSensor 17E8  
                        ??_getCurrentTimeInSeconds 00AC                                           ?i2_putch 0001  
                                        __doprnt@c 009D                                          __doprnt@f 008E  
                                        _getEEPROM 1FAC                                   _I2C_Master_Start 38AE  
                              i2I2C_Master_Write@d 0002                                   _I2C_Master_Write 3882  
                              __size_of_saveEEPROM 028A                                   ___lwdiv@dividend 0080  
                                __CFG_CCP2MX$PORTC 000000                               extendSensorAreaArm@i 0082  
                                        __pintcode 0008                                      __pmediumconst FE30  
                                        _lcdNibble 30A4                                           ?___awdiv 0001  
                                         ?___ftdiv 0097                                           ?___lldiv 0080  
                                         ?___ftmul 0088                                           ?___fttol 00A6  
                                         ?___lwdiv 0080                                           ?___lwmod 0087  
                                         ?__doprnt 008C                                           ?_lcdInst 0001  
                                capIsOnBottle@rgbc 00A8                                           ?_handler 0001  
                         ?_cycleProgramScreenRight 0080                                           ?_isdigit 0001  
         storeRgbSensorInputIntegerValuesInto@blue 009E                         __size_ofi2_I2C_Master_Read 0026  
                       __size_ofi2_I2C_Master_Wait 0012                         __size_ofi2_I2C_Master_Stop 0008  
                                        _hexpowers FE4C                                   ___lwdiv@quotient 0084  
                         __end_of_activateDCmotors 38A6                                           ?_sprintf 009E  
                                      ??i2___ftdiv 001E                                        ??i2___ftmul 000F  
                                      ??i2___fttol 002B                              _initializePicSettings 3770  
                                      ??i2___lwdiv 0005                                        ??i2___lwmod 000C  
                                   __size_of_putch 0016                                        ??i2__doprnt 0013  
                                       operation@i 00C3                         __end_ofi2_I2C_Master_Start 38C6  
                       __end_ofi2_I2C_Master_Write 3896                                        ??i2_lcdInst 0003  
                                       ?_getEEPROM 0088                                     ___wmul@product 0084  
                                    operation@temp 00B8                                           _LATDbits 000F8C  
                           ?_initializeLcdSettings 0001                                        ??i2_isdigit 0001  
                                         i2u501_40 267C                                           i2u501_45 2674  
                                         _PIR2bits 000FA1                                          _operation 0C34  
                                         i2u476_40 3742                                           i2u910_48 0AAE  
                                         i2u902_48 09B0                                           i2u912_48 0BCA  
                                         i2u906_48 0A2A                                           i2u882_48 06BC  
                                         i2u971_47 32A8                                           i2u972_47 32B2  
                                         i2u973_47 32D4                                           i2u974_47 32DE  
                              __size_of_pushBottle 0026                                           i2u899_48 093E  
                                 __CFG_WDTPS$32768 000000                              __size_of_moveBinServo 008E  
                                       ?_lcdNibble 0001                                          _printTime 3236  
                  __end_of_getCurrentTimeInSeconds 2326                    __size_of_setMultiplexerToSensor 0082  
                                ___wmul@multiplier 0080                           __size_of_past_run_access 012A  
                                         i2___wmul 374A                                      lcdNibble@data 0081  
                                    lcdNibble@temp 0080                              __end_of_capIsOnBottle 2B64  
                                         i2_printf 35E0                           __size_of_disableDCmotors 0008  
                              I2C_Master_Read@temp 0082                                          copy_data0 34C2  
                                 _Eeprom_WriteByte 36D6                     operation@numberRotationsNeeded 00B9  
 __end_of_toggleRTCBasedOnCurrentMainProgramScreen 383C  __size_of_toggleRTCBasedOnCurrentMainProgramScreen 0014  
        ?_toggleRTCBasedOnCurrentMainProgramScreen 0001         ??_toggleRTCBasedOnCurrentMainProgramScreen 0080  
         _toggleRTCBasedOnCurrentMainProgramScreen 3828                       _getCurrentTimeInSeconds$1724 00AE  
                                     _moveBinServo 2D52                                   __size_ofi2_putch 000C  
                                       _EECON1bits 000FA6                             analyzeRgbcForSensor@b1 0086  
                           analyzeRgbcForSensor@c1 0088                             analyzeRgbcForSensor@g1 008C  
                           analyzeRgbcForSensor@r1 008A                                           __Hrparam 0000  
                                       ?_operation 0001                                        _lastRunTime 00DB  
                                         __Lrparam 0000                                 __CFG_BOREN$SBORDIS 000000  
   __end_of_enterSelectedSubProgramFromMainProgram 33D8    __size_of_enterSelectedSubProgramFromMainProgram 004E  
          ?_enterSelectedSubProgramFromMainProgram 0001           ??_enterSelectedSubProgramFromMainProgram 00D6  
           _enterSelectedSubProgramFromMainProgram 338A                                         ?_printTime 0001  
                      __end_of_initializeLcdScreen 3814                                   __size_of___awdiv 0084  
                                 __size_of___ftdiv 014C                              i2___wmul@multiplicand 0003  
                                 __size_of___lldiv 00BC                                   __size_of___ftmul 015E  
                                 __size_of___fttol 0144                               _analyzeRgbcForSensor 1570  
                                 __size_of___lwdiv 0078                                   __size_of___lwmod 0062  
                                         ___ftpack 2326                                   __size_of__doprnt 0674  
                           Eeprom_ReadByte@address 0086                                 i2I2C_Master_Read@a 0002  
                                  _putch$intlevel0 37F0                                   __size_of_lcdInst 0010  
                                 __size_of_handler 1E6E                                       ??_saveEEPROM 0089  
                                _updateCurrentTime 2F5E                                      _timerDisabled 004F  
                                  _I2C_Master_Read 367E                                    _I2C_Master_Wait 3814  
                                  _I2C_Master_Stop 38A6                                   __size_of_isdigit 002A  
                               ?_updateCurrentTime 0001                                           _lcdClear 3616  
                                  ___lwdiv@divisor 0082                                    ___lwdiv@counter 0086  
                           ?_initializePicSettings 0001                __end_of_displayMainProgramLcdScreen 2D52  
                      _displayMainProgramLcdScreen 2CB6                                           __ptext10 29F2  
                                         __ptext11 338A                                           __ptext20 281A  
                                         __ptext12 36FE                                           __ptext21 303C  
                                         __ptext13 0C34                                           __ptext30 3882  
                                         __ptext22 3896                                           __ptext14 12E6  
                                         __ptext31 38A6                                           __ptext23 2AAE  
                                         __ptext15 36D6                                           __ptext40 17E8  
                                         __ptext32 38AE                                           __ptext24 2432  
                                         __ptext16 2FD4                                           __ptext41 3616  
                                         __ptext33 367E                                           __ptext25 1570  
                                         __ptext17 2D52                                           __ptext50 364A  
                                         __ptext42 33D8                                           __ptext34 3814  
                                         __ptext26 2E64                                           __ptext18 220A  
                                         __ptext51 3532                                           __ptext43 0012  
                                         __ptext35 3828                                           __ptext27 389E  
                                         __ptext19 32E6                                           __ptext60 38BE  
                                         __ptext52 356E                                           __ptext44 37EA  
                                         __ptext36 3236                                           __ptext28 2CB6  
                                         __ptext61 3724                                           __ptext53 1FAC  
                                         __ptext45 36AC                                           __ptext37 0FEE  
                                         __ptext29 2F5E                                           __ptext70 3338  
                                         __ptext62 383C                                           __ptext54 35AA  
                                         __ptext46 3174                                           __ptext38 2C12  
                                         __ptext71 3876                                           __ptext63 3468  
                                         __ptext55 37D2                                           __ptext47 2EE6  
                                         __ptext39 20E0                                           __ptext72 3290  
                                         __ptext64 35E0                                           __ptext48 384E  
                                         __ptext73 2632                                           __ptext65 0686  
                                         __ptext57 310C                                           __ptext49 30A4  
                                         __ptext74 2726                                           __ptext66 386A  
                                         __ptext58 388C                                           __ptext75 290C  
                                         __ptext67 37B4                                           __ptext59 38B6  
                                         __ptext76 2B64                                           __ptext68 374A  
                                         __ptext77 3792                                           __ptext69 34F0  
                                         __ptext78 2DE0                                           __ptext79 0000  
                                 __size_of_sprintf 0052                             _setMultiplexerToSensor 2E64  
                              ??_updateCurrentTime 0083                                     i2_isdigit$1338 0002  
                                      ??_getEEPROM 008A                                      __size_of_atoi 00F2  
                                    __size_of_main 0136                                    _Eeprom_ReadByte 37D2  
                         _currentMainProgramScreen 00EF                           ??_cycleProgramScreenLeft 0086  
    storeRgbSensorInputIntegerValuesInto@sensorNum 0090                       ??_update_eeprom_screen_state 00AE  
                                  i2__doprnt@width 001C                              __end_of_initializeI2C 3236  
                             _lastSortedBottleTime 00ED                                 __end_of_saveEEPROM 1570  
                                   initializeI2C@c 008D                                        _randomSpeed 004B  
                                    ??i2_lcdNibble 0001                                        ??_lcdNibble 0080  
                                         int$flags 0051                       __size_of_getPressedKeypadKey 0034  
                                         atoi@sign 008A                                    operation@bottle 00BF  
                            ?_analyzeRgbcForSensor 0080       __end_of_storeRgbSensorInputIntegerValuesInto 253C  
    __size_of_storeRgbSensorInputIntegerValuesInto 010A             ??_storeRgbSensorInputIntegerValuesInto 0092  
            ?_storeRgbSensorInputIntegerValuesInto 008E               _storeRgbSensorInputIntegerValuesInto 2432  
                        __end_of_updateCurrentTime 2FD4                                       _motorCounter 0049  
                                        putch@data 0082                           __end_of_I2C_Master_Start 38B6  
                                      _OSCTUNEbits 000F9B                           __end_of_I2C_Master_Write 388C  
                                       _INTCONbits 000FF2                                       ??_pushBottle 0084  
                                         isdigit@c 0082               cycleProgramScreenRight@programScreen 0080  
                                ??_past_run_access 00B0                __size_of_update_eeprom_screen_state 00A4  
                                         intlevel2 0000                                          sprintf@ap 00A4  
                                        sprintf@pb 00A6                                          sprintf@wh 009E  
                                     _timerCounter 004D                                   ___lwmod@dividend 0087  
                                 ___lldiv@dividend 0080                                    capIsOnBottle@v1 00AC  
                                  capIsOnBottle@v2 00AE                                  ??_disableDCmotors 0080  
                     __end_of_retractSensorAreaArm 303C                                        ??_operation 00B2  
                               updateCurrentTime@i 0083                        __end_ofi2_updateCurrentTime 3174  
                                         printf@ap 00A6                        __end_of_extendSensorAreaArm 30A4  
                                         printf@pb 00A8                                 __end_of_pushBottle 3724  
                                    ??i2_printTime 002D                                        ??_printTime 00AC  
                          __end_of_I2C_Master_Read 36AC                            __end_of_I2C_Master_Wait 3828  
                          __end_of_I2C_Master_Stop 38AE                                        lcdInst@data 0082  
                              __end_ofi2_lcdNibble 32E6                                           sprintf@f 00A0  
                                      handler@time 0044                                   ___lldiv@quotient 0088  
                                I2C_Master_Write@d 0081                                    ___lwmod@divisor 0089  
                                  ___lwmod@counter 008B                            __end_of_Eeprom_ReadByte 37EA  
                              operation@endingTime 00B6                                  ?_activateDCmotors 0001  
                          ??_initializeLcdSettings 0083          storeRgbSensorInputIntegerValuesInto@clear 00A0  
        storeRgbSensorInputIntegerValuesInto@green 009C                                 ??_activateDCmotors 0080  
                 __size_of_cycleProgramScreenRight 003C    storeRgbSensorInputIntegerValuesInto@colorValues 008E  
                  __size_of_cycleProgramScreenLeft 003C                cycleProgramScreenLeft@programScreen 0080  
                              operation@bottle_cap 00BD  
