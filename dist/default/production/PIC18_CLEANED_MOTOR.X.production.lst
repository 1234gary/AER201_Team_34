

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Mar 13 23:32:41 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	text31,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	text38,global,reloc=2,class=CODE,delta=1
    52                           	psect	text39,global,reloc=2,class=CODE,delta=1
    53                           	psect	text40,global,reloc=2,class=CODE,delta=1
    54                           	psect	text41,global,reloc=2,class=CODE,delta=1
    55                           	psect	text42,global,reloc=2,class=CODE,delta=1
    56                           	psect	text43,global,reloc=2,class=CODE,delta=1
    57                           	psect	text44,global,reloc=2,class=CODE,delta=1
    58                           	psect	text45,global,reloc=2,class=CODE,delta=1
    59                           	psect	text46,global,reloc=2,class=CODE,delta=1
    60                           	psect	text47,global,reloc=2,class=CODE,delta=1
    61                           	psect	text48,global,reloc=2,class=CODE,delta=1
    62                           	psect	text49,global,reloc=2,class=CODE,delta=1
    63                           	psect	text50,global,reloc=2,class=CODE,delta=1
    64                           	psect	text51,global,reloc=2,class=CODE,delta=1
    65                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    67                           	psect	text53,global,reloc=2,class=CODE,delta=1
    68                           	psect	text54,global,reloc=2,class=CODE,delta=1
    69                           	psect	text55,global,reloc=2,class=CODE,delta=1
    70                           	psect	text56,global,reloc=2,class=CODE,delta=1
    71                           	psect	text57,global,reloc=2,class=CODE,delta=1
    72                           	psect	text58,global,reloc=2,class=CODE,delta=1
    73                           	psect	text59,global,reloc=2,class=CODE,delta=1
    74                           	psect	text60,global,reloc=2,class=CODE,delta=1
    75                           	psect	text61,global,reloc=2,class=CODE,delta=1
    76                           	psect	text62,global,reloc=2,class=CODE,delta=1
    77                           	psect	text63,global,reloc=2,class=CODE,delta=1
    78                           	psect	text64,global,reloc=2,class=CODE,delta=1
    79                           	psect	text65,global,reloc=2,class=CODE,delta=1
    80                           	psect	text66,global,reloc=2,class=CODE,delta=1
    81                           	psect	text67,global,reloc=2,class=CODE,delta=1
    82                           	psect	text68,global,reloc=2,class=CODE,delta=1
    83                           	psect	text69,global,reloc=2,class=CODE,delta=1
    84                           	psect	text70,global,reloc=2,class=CODE,delta=1
    85                           	psect	text71,global,reloc=2,class=CODE,delta=1
    86                           	psect	text72,global,reloc=2,class=CODE,delta=1
    87                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    88                           	psect	text73,global,reloc=2,class=CODE,delta=1
    89                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    90                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    91  0000                     
    92                           ; Version 1.40
    93                           ; Generated 01/12/2016 GMT
    94                           ; 
    95                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    96                           ; All rights reserved.
    97                           ; 
    98                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    99                           ; 
   100                           ; Redistribution and use in source and binary forms, with or without modification, are
   101                           ; permitted provided that the following conditions are met:
   102                           ; 
   103                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   104                           ;        conditions and the following disclaimer.
   105                           ; 
   106                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   107                           ;        of conditions and the following disclaimer in the documentation and/or other
   108                           ;        materials provided with the distribution.
   109                           ; 
   110                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   111                           ;        software without specific prior written permission.
   112                           ; 
   113                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   114                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   115                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   116                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   117                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   118                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   119                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   120                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   121                           ; 
   122                           ; 
   123                           ; Code-generator required, PIC18F4620 Definitions
   124                           ; 
   125                           ; SFR Addresses
   126  0000                     
   127                           	psect	idataBANK0
   128  00309C                     __pidataBANK0:
   129                           	opt stack 0
   130                           
   131                           ;initializer for _runInfo
   132  00309C  0028               	dw	40
   133  00309E  000A               	dw	10
   134  0030A0  0002               	dw	2
   135  0030A2  0003               	dw	3
   136  0030A4  0003               	dw	3
   137  0030A6  0002               	dw	2
   138                           
   139                           	psect	mediumconst
   140  00FE28                     __pmediumconst:
   141                           	opt stack 0
   142  00FE28  00                 	db	0
   143  00FE29                     _keys:
   144                           	opt stack 0
   145  00FE29  31                 	db	49
   146  00FE2A  32                 	db	50
   147  00FE2B  33                 	db	51
   148  00FE2C  41                 	db	65
   149  00FE2D  34                 	db	52
   150  00FE2E  35                 	db	53
   151  00FE2F  36                 	db	54
   152  00FE30  42                 	db	66
   153  00FE31  37                 	db	55
   154  00FE32  38                 	db	56
   155  00FE33  39                 	db	57
   156  00FE34  43                 	db	67
   157  00FE35  2A                 	db	42
   158  00FE36  30                 	db	48
   159  00FE37  23                 	db	35
   160  00FE38  44                 	db	68
   161  00FE39  00                 	db	0
   162  00FE3A                     __end_of_keys:
   163                           	opt stack 0
   164  00FE3A                     _dpowers:
   165                           	opt stack 0
   166  00FE3A  0001               	dw	1
   167  00FE3C  000A               	dw	10
   168  00FE3E  0064               	dw	100
   169  00FE40  03E8               	dw	1000
   170  00FE42  2710               	dw	10000
   171  00FE44                     __end_of_dpowers:
   172                           	opt stack 0
   173  00FE44                     _hexpowers:
   174                           	opt stack 0
   175  00FE44  0001               	dw	1
   176  00FE46  0010               	dw	16
   177  00FE48  0100               	dw	256
   178  00FE4A  1000               	dw	4096
   179  00FE4C                     __end_of_hexpowers:
   180                           	opt stack 0
   181  00FE4C                     _BACK:
   182                           	opt stack 0
   183  00FE4C  000F               	dw	15
   184  00FE4E                     __end_of_BACK:
   185                           	opt stack 0
   186  00FE4E                     _ENTER:
   187                           	opt stack 0
   188  00FE4E  0003               	dw	3
   189  00FE50                     __end_of_ENTER:
   190                           	opt stack 0
   191  00FE50                     _LEFT:
   192                           	opt stack 0
   193  00FE50  0001               	dw	1
   194  00FE52                     __end_of_LEFT:
   195                           	opt stack 0
   196  00FE52                     _RIGHT:
   197                           	opt stack 0
   198  00FE52  0002               	dw	2
   199  00FE54                     __end_of_RIGHT:
   200                           	opt stack 0
   201  0000                     _ADCON0	set	4034
   202  0000                     _ADCON1	set	4033
   203  0000                     _CMCONbits	set	4020
   204  0000                     _CVRCON	set	4021
   205  0000                     _EEADR	set	4009
   206  0000                     _EEADRH	set	4010
   207  0000                     _EECON1bits	set	4006
   208  0000                     _EECON2	set	4007
   209  0000                     _EEDATA	set	4008
   210  0000                     _INTCONbits	set	4082
   211  0000                     _LATA	set	3977
   212  0000                     _LATB	set	3978
   213  0000                     _LATC	set	3979
   214  0000                     _LATD	set	3980
   215  0000                     _LATDbits	set	3980
   216  0000                     _LATE	set	3981
   217  0000                     _OSCCON	set	4051
   218  0000                     _OSCTUNEbits	set	3995
   219  0000                     _PIR2bits	set	4001
   220  0000                     _PORTAbits	set	3968
   221  0000                     _PORTB	set	3969
   222  0000                     _PORTBbits	set	3969
   223  0000                     _PORTCbits	set	3970
   224  0000                     _PORTDbits	set	3971
   225  0000                     _SSPADD	set	4040
   226  0000                     _SSPBUF	set	4041
   227  0000                     _SSPCON1	set	4038
   228  0000                     _SSPCON2	set	4037
   229  0000                     _SSPSTAT	set	4039
   230  0000                     _T1CON	set	4045
   231  0000                     _TMR1H	set	4047
   232  0000                     _TMR1L	set	4046
   233  0000                     _TRISA	set	3986
   234  0000                     _TRISB	set	3987
   235  0000                     _TRISC	set	3988
   236  0000                     _TRISD	set	3989
   237  0000                     _TRISE	set	3990
   238  0000                     _ACKDT	set	32301
   239  0000                     _ACKEN	set	32300
   240  0000                     _ADFM	set	32263
   241  0000                     _PEIE	set	32662
   242  0000                     _PEN	set	32298
   243  0000                     _PSA	set	32427
   244  0000                     _RCEN	set	32299
   245  0000                     _RSEN	set	32297
   246  0000                     _SEN	set	32296
   247  0000                     _T08BIT	set	32430
   248  0000                     _T0CS	set	32429
   249  0000                     _T0PS0	set	32424
   250  0000                     _T0PS1	set	32425
   251  0000                     _T0PS2	set	32426
   252  0000                     _T1CKPS0	set	32364
   253  0000                     _T1CKPS1	set	32365
   254  0000                     _T1OSCEN	set	32363
   255  0000                     _T1SYNC	set	32362
   256  0000                     _TMR0IE	set	32661
   257  0000                     _TMR0IF	set	32658
   258  0000                     _TMR0ON	set	32431
   259  0000                     _TMR1CS	set	32361
   260  0000                     _TMR1IE	set	31976
   261  0000                     _TMR1IF	set	31984
   262  0000                     _TMR1ON	set	32360
   263  0000                     _TRISC3	set	31907
   264  0000                     _TRISC4	set	31908
   265  0000                     _nRBPU	set	32655
   266  00FE54                     STR_31:
   267  00FE54  43                 	db	67	;'C'
   268  00FE55  4F                 	db	79	;'O'
   269  00FE56  4D                 	db	77	;'M'
   270  00FE57  50                 	db	80	;'P'
   271  00FE58  4C                 	db	76	;'L'
   272  00FE59  45                 	db	69	;'E'
   273  00FE5A  54                 	db	84	;'T'
   274  00FE5B  45                 	db	69	;'E'
   275  00FE5C  44                 	db	68	;'D'
   276  00FE5D  21                 	db	33
   277  00FE5E  21                 	db	33
   278  00FE5F  21                 	db	33
   279  00FE60  20                 	db	32
   280  00FE61  20                 	db	32
   281  00FE62  20                 	db	32
   282  00FE63  20                 	db	32
   283  00FE64  20                 	db	32
   284  00FE65  00                 	db	0
   285  00FE66                     STR_23:
   286  00FE66  3C                 	db	60	;'<'
   287  00FE67  34                 	db	52	;'4'
   288  00FE68  20                 	db	32
   289  00FE69  20                 	db	32
   290  00FE6A  42                 	db	66	;'B'
   291  00FE6B  61                 	db	97	;'a'
   292  00FE6C  63                 	db	99	;'c'
   293  00FE6D  6B                 	db	107	;'k'
   294  00FE6E  3A                 	db	58	;':'
   295  00FE6F  20                 	db	32
   296  00FE70  20                 	db	32
   297  00FE71  44                 	db	68	;'D'
   298  00FE72  20                 	db	32
   299  00FE73  20                 	db	32
   300  00FE74  36                 	db	54	;'6'
   301  00FE75  3E                 	db	62	;'>'
   302  00FE76  20                 	db	32
   303  00FE77  00                 	db	0
   304  00FE78                     STR_35:
   305  00FE78  30                 	db	48	;'0'
   306  00FE79  31                 	db	49	;'1'
   307  00FE7A  32                 	db	50	;'2'
   308  00FE7B  33                 	db	51	;'3'
   309  00FE7C  34                 	db	52	;'4'
   310  00FE7D  35                 	db	53	;'5'
   311  00FE7E  36                 	db	54	;'6'
   312  00FE7F  37                 	db	55	;'7'
   313  00FE80  38                 	db	56	;'8'
   314  00FE81  39                 	db	57	;'9'
   315  00FE82  61                 	db	97	;'a'
   316  00FE83  62                 	db	98	;'b'
   317  00FE84  63                 	db	99	;'c'
   318  00FE85  64                 	db	100	;'d'
   319  00FE86  65                 	db	101	;'e'
   320  00FE87  66                 	db	102	;'f'
   321  00FE88  00                 	db	0
   322  00FE89                     STR_33:
   323  00FE89  20                 	db	32
   324  00FE8A  20                 	db	32
   325  00FE8B  20                 	db	32
   326  00FE8C  20                 	db	32
   327  00FE8D  20                 	db	32
   328  00FE8E  20                 	db	32
   329  00FE8F  20                 	db	32
   330  00FE90  20                 	db	32
   331  00FE91  20                 	db	32
   332  00FE92  20                 	db	32
   333  00FE93  20                 	db	32
   334  00FE94  20                 	db	32
   335  00FE95  20                 	db	32
   336  00FE96  20                 	db	32
   337  00FE97  20                 	db	32
   338  00FE98  20                 	db	32
   339  00FE99  00                 	db	0
   340  00FE9A                     STR_32:
   341  00FE9A  41                 	db	65	;'A'
   342  00FE9B  20                 	db	32
   343  00FE9C  74                 	db	116	;'t'
   344  00FE9D  6F                 	db	111	;'o'
   345  00FE9E  20                 	db	32
   346  00FE9F  62                 	db	98	;'b'
   347  00FEA0  61                 	db	97	;'a'
   348  00FEA1  63                 	db	99	;'c'
   349  00FEA2  6B                 	db	107	;'k'
   350  00FEA3  20                 	db	32
   351  00FEA4  20                 	db	32
   352  00FEA5  20                 	db	32
   353  00FEA6  20                 	db	32
   354  00FEA7  20                 	db	32
   355  00FEA8  20                 	db	32
   356  00FEA9  20                 	db	32
   357  00FEAA  00                 	db	0
   358  00FEAB                     STR_26:
   359  00FEAB  42                 	db	66	;'B'
   360  00FEAC  4F                 	db	79	;'O'
   361  00FEAD  54                 	db	84	;'T'
   362  00FEAE  54                 	db	84	;'T'
   363  00FEAF  4C                 	db	76	;'L'
   364  00FEB0  45                 	db	69	;'E'
   365  00FEB1  20                 	db	32
   366  00FEB2  49                 	db	73	;'I'
   367  00FEB3  4E                 	db	78	;'N'
   368  00FEB4  53                 	db	83	;'S'
   369  00FEB5  49                 	db	73	;'I'
   370  00FEB6  44                 	db	68	;'D'
   371  00FEB7  45                 	db	69	;'E'
   372  00FEB8  20                 	db	32
   373  00FEB9  20                 	db	32
   374  00FEBA  20                 	db	32
   375  00FEBB  00                 	db	0
   376  00FEBC                     STR_8:
   377  00FEBC  41                 	db	65	;'A'
   378  00FEBD  63                 	db	99	;'c'
   379  00FEBE  63                 	db	99	;'c'
   380  00FEBF  65                 	db	101	;'e'
   381  00FEC0  73                 	db	115	;'s'
   382  00FEC1  73                 	db	115	;'s'
   383  00FEC2  20                 	db	32
   384  00FEC3  4C                 	db	76	;'L'
   385  00FEC4  61                 	db	97	;'a'
   386  00FEC5  73                 	db	115	;'s'
   387  00FEC6  74                 	db	116	;'t'
   388  00FEC7  20                 	db	32
   389  00FEC8  52                 	db	82	;'R'
   390  00FEC9  75                 	db	117	;'u'
   391  00FECA  6E                 	db	110	;'n'
   392  00FECB  20                 	db	32
   393  00FECC  00                 	db	0
   394  00FECD                     STR_9:
   395  00FECD  3C                 	db	60	;'<'
   396  00FECE  34                 	db	52	;'4'
   397  00FECF  20                 	db	32
   398  00FED0  20                 	db	32
   399  00FED1  53                 	db	83	;'S'
   400  00FED2  74                 	db	116	;'t'
   401  00FED3  61                 	db	97	;'a'
   402  00FED4  72                 	db	114	;'r'
   403  00FED5  74                 	db	116	;'t'
   404  00FED6  3A                 	db	58	;':'
   405  00FED7  20                 	db	32
   406  00FED8  41                 	db	65	;'A'
   407  00FED9  20                 	db	32
   408  00FEDA  20                 	db	32
   409  00FEDB  36                 	db	54	;'6'
   410  00FEDC  3E                 	db	62	;'>'
   411  00FEDD  00                 	db	0
   412  00FEDE                     STR_14:
   413  00FEDE  3C                 	db	60	;'<'
   414  00FEDF  34                 	db	52	;'4'
   415  00FEE0  20                 	db	32
   416  00FEE1  20                 	db	32
   417  00FEE2  4E                 	db	78	;'N'
   418  00FEE3  61                 	db	97	;'a'
   419  00FEE4  76                 	db	118	;'v'
   420  00FEE5  3A                 	db	58	;':'
   421  00FEE6  20                 	db	32
   422  00FEE7  41                 	db	65	;'A'
   423  00FEE8  2F                 	db	47
   424  00FEE9  44                 	db	68	;'D'
   425  00FEEA  20                 	db	32
   426  00FEEB  20                 	db	32
   427  00FEEC  36                 	db	54	;'6'
   428  00FEED  3E                 	db	62	;'>'
   429  00FEEE  00                 	db	0
   430  00FEEF                     STR_20:
   431  00FEEF  45                 	db	69	;'E'
   432  00FEF0  73                 	db	115	;'s'
   433  00FEF1  6B                 	db	107	;'k'
   434  00FEF2  61                 	db	97	;'a'
   435  00FEF3  20                 	db	32
   436  00FEF4  77                 	db	119	;'w'
   437  00FEF5  2F                 	db	47
   438  00FEF6  6F                 	db	111	;'o'
   439  00FEF7  20                 	db	32
   440  00FEF8  43                 	db	67	;'C'
   441  00FEF9  61                 	db	97	;'a'
   442  00FEFA  70                 	db	112	;'p'
   443  00FEFB  3A                 	db	58	;':'
   444  00FEFC  20                 	db	32
   445  00FEFD  25                 	db	37
   446  00FEFE  69                 	db	105	;'i'
   447  00FEFF  00                 	db	0
   448  00FF00                     STR_11:
   449  00FF00  20                 	db	32
   450  00FF01  20                 	db	32
   451  00FF02  20                 	db	32
   452  00FF03  50                 	db	80	;'P'
   453  00FF04  61                 	db	97	;'a'
   454  00FF05  73                 	db	115	;'s'
   455  00FF06  74                 	db	116	;'t'
   456  00FF07  20                 	db	32
   457  00FF08  52                 	db	82	;'R'
   458  00FF09  75                 	db	117	;'u'
   459  00FF0A  6E                 	db	110	;'n'
   460  00FF0B  20                 	db	32
   461  00FF0C  32                 	db	50	;'2'
   462  00FF0D  20                 	db	32
   463  00FF0E  20                 	db	32
   464  00FF0F  00                 	db	0
   465  00FF10                     STR_12:
   466  00FF10  20                 	db	32
   467  00FF11  20                 	db	32
   468  00FF12  20                 	db	32
   469  00FF13  50                 	db	80	;'P'
   470  00FF14  61                 	db	97	;'a'
   471  00FF15  73                 	db	115	;'s'
   472  00FF16  74                 	db	116	;'t'
   473  00FF17  20                 	db	32
   474  00FF18  52                 	db	82	;'R'
   475  00FF19  75                 	db	117	;'u'
   476  00FF1A  6E                 	db	110	;'n'
   477  00FF1B  20                 	db	32
   478  00FF1C  33                 	db	51	;'3'
   479  00FF1D  20                 	db	32
   480  00FF1E  20                 	db	32
   481  00FF1F  00                 	db	0
   482  00FF20                     STR_13:
   483  00FF20  20                 	db	32
   484  00FF21  20                 	db	32
   485  00FF22  20                 	db	32
   486  00FF23  50                 	db	80	;'P'
   487  00FF24  61                 	db	97	;'a'
   488  00FF25  73                 	db	115	;'s'
   489  00FF26  74                 	db	116	;'t'
   490  00FF27  20                 	db	32
   491  00FF28  52                 	db	82	;'R'
   492  00FF29  75                 	db	117	;'u'
   493  00FF2A  6E                 	db	110	;'n'
   494  00FF2B  20                 	db	32
   495  00FF2C  34                 	db	52	;'4'
   496  00FF2D  20                 	db	32
   497  00FF2E  20                 	db	32
   498  00FF2F  00                 	db	0
   499  00FF30                     STR_24:
   500  00FF30  2E                 	db	46
   501  00FF31  2E                 	db	46
   502  00FF32  2E                 	db	46
   503  00FF33  4F                 	db	79	;'O'
   504  00FF34  70                 	db	112	;'p'
   505  00FF35  65                 	db	101	;'e'
   506  00FF36  72                 	db	114	;'r'
   507  00FF37  61                 	db	97	;'a'
   508  00FF38  74                 	db	116	;'t'
   509  00FF39  69                 	db	105	;'i'
   510  00FF3A  6E                 	db	110	;'n'
   511  00FF3B  67                 	db	103	;'g'
   512  00FF3C  2E                 	db	46
   513  00FF3D  2E                 	db	46
   514  00FF3E  2E                 	db	46
   515  00FF3F  00                 	db	0
   516  00FF40                     STR_19:
   517  00FF40  45                 	db	69	;'E'
   518  00FF41  73                 	db	115	;'s'
   519  00FF42  6B                 	db	107	;'k'
   520  00FF43  61                 	db	97	;'a'
   521  00FF44  20                 	db	32
   522  00FF45  77                 	db	119	;'w'
   523  00FF46  2F                 	db	47
   524  00FF47  20                 	db	32
   525  00FF48  43                 	db	67	;'C'
   526  00FF49  61                 	db	97	;'a'
   527  00FF4A  70                 	db	112	;'p'
   528  00FF4B  3A                 	db	58	;':'
   529  00FF4C  20                 	db	32
   530  00FF4D  25                 	db	37
   531  00FF4E  69                 	db	105	;'i'
   532  00FF4F  00                 	db	0
   533  00FF50                     STR_18:
   534  00FF50  59                 	db	89	;'Y'
   535  00FF51  6F                 	db	111	;'o'
   536  00FF52  70                 	db	112	;'p'
   537  00FF53  20                 	db	32
   538  00FF54  77                 	db	119	;'w'
   539  00FF55  2F                 	db	47
   540  00FF56  6F                 	db	111	;'o'
   541  00FF57  20                 	db	32
   542  00FF58  43                 	db	67	;'C'
   543  00FF59  61                 	db	97	;'a'
   544  00FF5A  70                 	db	112	;'p'
   545  00FF5B  3A                 	db	58	;':'
   546  00FF5C  20                 	db	32
   547  00FF5D  25                 	db	37
   548  00FF5E  69                 	db	105	;'i'
   549  00FF5F  00                 	db	0
   550  00FF60                     STR_15:
   551  00FF60  54                 	db	84	;'T'
   552  00FF61  69                 	db	105	;'i'
   553  00FF62  6D                 	db	109	;'m'
   554  00FF63  65                 	db	101	;'e'
   555  00FF64  20                 	db	32
   556  00FF65  74                 	db	116	;'t'
   557  00FF66  61                 	db	97	;'a'
   558  00FF67  6B                 	db	107	;'k'
   559  00FF68  65                 	db	101	;'e'
   560  00FF69  6E                 	db	110	;'n'
   561  00FF6A  3A                 	db	58	;':'
   562  00FF6B  20                 	db	32
   563  00FF6C  25                 	db	37
   564  00FF6D  69                 	db	105	;'i'
   565  00FF6E  73                 	db	115	;'s'
   566  00FF6F  00                 	db	0
   567  00FF70                     STR_2:
   568  00FF70  25                 	db	37
   569  00FF71  30                 	db	48	;'0'
   570  00FF72  32                 	db	50	;'2'
   571  00FF73  78                 	db	120	;'x'
   572  00FF74  3A                 	db	58	;':'
   573  00FF75  25                 	db	37
   574  00FF76  30                 	db	48	;'0'
   575  00FF77  32                 	db	50	;'2'
   576  00FF78  78                 	db	120	;'x'
   577  00FF79  3A                 	db	58	;':'
   578  00FF7A  25                 	db	37
   579  00FF7B  30                 	db	48	;'0'
   580  00FF7C  32                 	db	50	;'2'
   581  00FF7D  78                 	db	120	;'x'
   582  00FF7E  00                 	db	0
   583  00FF7F                     STR_25:
   584  00FF7F  4E                 	db	78	;'N'
   585  00FF80  4F                 	db	79	;'O'
   586  00FF81  20                 	db	32
   587  00FF82  42                 	db	66	;'B'
   588  00FF83  4F                 	db	79	;'O'
   589  00FF84  54                 	db	84	;'T'
   590  00FF85  54                 	db	84	;'T'
   591  00FF86  4C                 	db	76	;'L'
   592  00FF87  45                 	db	69	;'E'
   593  00FF88  20                 	db	32
   594  00FF89  20                 	db	32
   595  00FF8A  20                 	db	32
   596  00FF8B  20                 	db	32
   597  00FF8C  00                 	db	0
   598  00FF8D                     STR_7:
   599  00FF8D  41                 	db	65	;'A'
   600  00FF8E  63                 	db	99	;'c'
   601  00FF8F  63                 	db	99	;'c'
   602  00FF90  65                 	db	101	;'e'
   603  00FF91  73                 	db	115	;'s'
   604  00FF92  73                 	db	115	;'s'
   605  00FF93  20                 	db	32
   606  00FF94  45                 	db	69	;'E'
   607  00FF95  45                 	db	69	;'E'
   608  00FF96  50                 	db	80	;'P'
   609  00FF97  52                 	db	82	;'R'
   610  00FF98  4F                 	db	79	;'O'
   611  00FF99  4D                 	db	77	;'M'
   612  00FF9A  00                 	db	0
   613  00FF9B                     STR_6:
   614  00FF9B  42                 	db	66	;'B'
   615  00FF9C  65                 	db	101	;'e'
   616  00FF9D  67                 	db	103	;'g'
   617  00FF9E  69                 	db	105	;'i'
   618  00FF9F  6E                 	db	110	;'n'
   619  00FFA0  20                 	db	32
   620  00FFA1  53                 	db	83	;'S'
   621  00FFA2  6F                 	db	111	;'o'
   622  00FFA3  72                 	db	114	;'r'
   623  00FFA4  74                 	db	116	;'t'
   624  00FFA5  69                 	db	105	;'i'
   625  00FFA6  6E                 	db	110	;'n'
   626  00FFA7  67                 	db	103	;'g'
   627  00FFA8  00                 	db	0
   628  00FFA9                     STR_17:
   629  00FFA9  59                 	db	89	;'Y'
   630  00FFAA  6F                 	db	111	;'o'
   631  00FFAB  70                 	db	112	;'p'
   632  00FFAC  20                 	db	32
   633  00FFAD  77                 	db	119	;'w'
   634  00FFAE  2F                 	db	47
   635  00FFAF  43                 	db	67	;'C'
   636  00FFB0  61                 	db	97	;'a'
   637  00FFB1  70                 	db	112	;'p'
   638  00FFB2  3A                 	db	58	;':'
   639  00FFB3  20                 	db	32
   640  00FFB4  25                 	db	37
   641  00FFB5  69                 	db	105	;'i'
   642  00FFB6  00                 	db	0
   643  00FFB7                     STR_16:
   644  00FFB7  23                 	db	35
   645  00FFB8  20                 	db	32
   646  00FFB9  42                 	db	66	;'B'
   647  00FFBA  6F                 	db	111	;'o'
   648  00FFBB  74                 	db	116	;'t'
   649  00FFBC  74                 	db	116	;'t'
   650  00FFBD  6C                 	db	108	;'l'
   651  00FFBE  65                 	db	101	;'e'
   652  00FFBF  73                 	db	115	;'s'
   653  00FFC0  3A                 	db	58	;':'
   654  00FFC1  20                 	db	32
   655  00FFC2  25                 	db	37
   656  00FFC3  69                 	db	105	;'i'
   657  00FFC4  00                 	db	0
   658  00FFC5                     STR_30:
   659  00FFC5  20                 	db	32
   660  00FFC6  77                 	db	119	;'w'
   661  00FFC7  2F                 	db	47
   662  00FFC8  6F                 	db	111	;'o'
   663  00FFC9  20                 	db	32
   664  00FFCA  43                 	db	67	;'C'
   665  00FFCB  61                 	db	97	;'a'
   666  00FFCC  70                 	db	112	;'p'
   667  00FFCD  20                 	db	32
   668  00FFCE  20                 	db	32
   669  00FFCF  20                 	db	32
   670  00FFD0  20                 	db	32
   671  00FFD1  00                 	db	0
   672  00FFD2                     STR_1:
   673  00FFD2  25                 	db	37
   674  00FFD3  30                 	db	48	;'0'
   675  00FFD4  32                 	db	50	;'2'
   676  00FFD5  78                 	db	120	;'x'
   677  00FFD6  2F                 	db	47
   678  00FFD7  25                 	db	37
   679  00FFD8  30                 	db	48	;'0'
   680  00FFD9  32                 	db	50	;'2'
   681  00FFDA  78                 	db	120	;'x'
   682  00FFDB  20                 	db	32
   683  00FFDC  20                 	db	32
   684  00FFDD  20                 	db	32
   685  00FFDE  00                 	db	0
   686  00FFDF                     STR_29:
   687  00FFDF  20                 	db	32
   688  00FFE0  77                 	db	119	;'w'
   689  00FFE1  2F                 	db	47
   690  00FFE2  20                 	db	32
   691  00FFE3  43                 	db	67	;'C'
   692  00FFE4  61                 	db	97	;'a'
   693  00FFE5  70                 	db	112	;'p'
   694  00FFE6  20                 	db	32
   695  00FFE7  20                 	db	32
   696  00FFE8  20                 	db	32
   697  00FFE9  20                 	db	32
   698  00FFEA  00                 	db	0
   699  00FFEB                     STR_10:
   700  00FFEB  52                 	db	82	;'R'
   701  00FFEC  65                 	db	101	;'e'
   702  00FFED  63                 	db	99	;'c'
   703  00FFEE  65                 	db	101	;'e'
   704  00FFEF  6E                 	db	110	;'n'
   705  00FFF0  74                 	db	116	;'t'
   706  00FFF1  20                 	db	32
   707  00FFF2  52                 	db	82	;'R'
   708  00FFF3  75                 	db	117	;'u'
   709  00FFF4  6E                 	db	110	;'n'
   710  00FFF5  00                 	db	0
   711  00FFF6                     STR_28:
   712  00FFF6  45                 	db	69	;'E'
   713  00FFF7  53                 	db	83	;'S'
   714  00FFF8  4B                 	db	75	;'K'
   715  00FFF9  41                 	db	65	;'A'
   716  00FFFA  00                 	db	0
   717  00FFFB                     STR_27:
   718  00FFFB  59                 	db	89	;'Y'
   719  00FFFC  4F                 	db	79	;'O'
   720  00FFFD  50                 	db	80	;'P'
   721  00FFFE  00                 	db	0
   722  0000                     
   723                           ; #config settings
   724  00FFFF  00                 	db	0	; dummy byte at the end
   725  0000                     
   726                           	psect	cinit
   727  002CF6                     __pcinit:
   728                           	opt stack 0
   729  002CF6                     start_initialization:
   730                           	opt stack 0
   731  002CF6                     __initialization:
   732                           	opt stack 0
   733                           
   734                           ; Initialize objects allocated to BANK0 (12 bytes)
   735                           ; load TBLPTR registers with __pidataBANK0
   736  002CF6  0E9C               	movlw	low __pidataBANK0
   737  002CF8  6EF6               	movwf	tblptrl,c
   738  002CFA  0E30               	movlw	high __pidataBANK0
   739  002CFC  6EF7               	movwf	tblptrh,c
   740  002CFE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   741  002D00  6EF8               	movwf	tblptru,c
   742  002D02  EE00  F0E9         	lfsr	0,__pdataBANK0
   743  002D06  EE10 F00C          	lfsr	1,12
   744  002D0A                     copy_data0:
   745  002D0A  0009               	tblrd		*+
   746  002D0C  CFF5 FFEE          	movff	tablat,postinc0
   747  002D10  50E5               	movf	postdec1,w,c
   748  002D12  50E1               	movf	fsr1l,w,c
   749  002D14  E1FA               	bnz	copy_data0
   750                           
   751                           ; Clear objects allocated to BANK0 (16 bytes)
   752  002D16  EE00  F0D9         	lfsr	0,__pbssBANK0
   753  002D1A  0E10               	movlw	16
   754  002D1C                     clear_0:
   755  002D1C  6AEE               	clrf	postinc0,c
   756  002D1E  06E8               	decf	wreg,f,c
   757  002D20  E1FD               	bnz	clear_0
   758                           
   759                           ; Clear objects allocated to COMRAM (6 bytes)
   760  002D22  6A4E               	clrf	(__pbssCOMRAM+5)& (0+255),c
   761  002D24  6A4D               	clrf	(__pbssCOMRAM+4)& (0+255),c
   762  002D26  6A4C               	clrf	(__pbssCOMRAM+3)& (0+255),c
   763  002D28  6A4B               	clrf	(__pbssCOMRAM+2)& (0+255),c
   764  002D2A  6A4A               	clrf	(__pbssCOMRAM+1)& (0+255),c
   765  002D2C  6A49               	clrf	__pbssCOMRAM& (0+255),c
   766  002D2E                     end_of_initialization:
   767                           	opt stack 0
   768  002D2E                     __end_of__initialization:
   769                           	opt stack 0
   770  002D2E  904F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   771  002D30  924F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   772  002D32  0100               	movlb	0
   773  002D34  EF44  F00D         	goto	_main	;jump to C main() function
   774                           tblptru	equ	0xFF8
   775                           tblptrh	equ	0xFF7
   776                           tblptrl	equ	0xFF6
   777                           tablat	equ	0xFF5
   778                           postinc0	equ	0xFEE
   779                           wreg	equ	0xFE8
   780                           postdec1	equ	0xFE5
   781                           fsr1l	equ	0xFE1
   782                           
   783                           	psect	bssCOMRAM
   784  000049                     __pbssCOMRAM:
   785                           	opt stack 0
   786  000049                     _motorCounter:
   787                           	opt stack 0
   788  000049                     	ds	2
   789  00004B                     _timerCounter:
   790                           	opt stack 0
   791  00004B                     	ds	2
   792  00004D                     _timerDisabled:
   793                           	opt stack 0
   794  00004D                     	ds	2
   795                           tblptru	equ	0xFF8
   796                           tblptrh	equ	0xFF7
   797                           tblptrl	equ	0xFF6
   798                           tablat	equ	0xFF5
   799                           postinc0	equ	0xFEE
   800                           wreg	equ	0xFE8
   801                           postdec1	equ	0xFE5
   802                           fsr1l	equ	0xFE1
   803                           
   804                           	psect	bssBANK0
   805  0000D9                     __pbssBANK0:
   806                           	opt stack 0
   807  0000D9                     _lastRunTime:
   808                           	opt stack 0
   809  0000D9                     	ds	7
   810  0000E0                     _time:
   811                           	opt stack 0
   812  0000E0                     	ds	7
   813  0000E7                     _currentMainProgramScreen:
   814                           	opt stack 0
   815  0000E7                     	ds	2
   816                           tblptru	equ	0xFF8
   817                           tblptrh	equ	0xFF7
   818                           tblptrl	equ	0xFF6
   819                           tablat	equ	0xFF5
   820                           postinc0	equ	0xFEE
   821                           wreg	equ	0xFE8
   822                           postdec1	equ	0xFE5
   823                           fsr1l	equ	0xFE1
   824                           
   825                           	psect	dataBANK0
   826  0000E9                     __pdataBANK0:
   827                           	opt stack 0
   828  0000E9                     _runInfo:
   829                           	opt stack 0
   830  0000E9                     	ds	12
   831                           tblptru	equ	0xFF8
   832                           tblptrh	equ	0xFF7
   833                           tblptrl	equ	0xFF6
   834                           tablat	equ	0xFF5
   835                           postinc0	equ	0xFEE
   836                           wreg	equ	0xFE8
   837                           postdec1	equ	0xFE5
   838                           fsr1l	equ	0xFE1
   839                           
   840                           	psect	cstackBANK0
   841  000080                     __pcstackBANK0:
   842                           	opt stack 0
   843  000080                     ??_retractSensorAreaArm:
   844  000080                     ??_extendSensorAreaArm:
   845  000080                     ??_isdigit:
   846  000080                     ??_I2C_Master_Wait:
   847  000080                     ?___wmul:
   848                           	opt stack 0
   849  000080                     ?___lwdiv:
   850                           	opt stack 0
   851  000080                     ?___ftpack:
   852                           	opt stack 0
   853  000080                     ?___lldiv:
   854                           	opt stack 0
   855  000080                     getPressedKeypadKey@keypress:
   856                           	opt stack 0
   857  000080                     lcdNibble@temp:
   858                           	opt stack 0
   859  000080                     cycleProgramScreenLeft@programScreen:
   860                           	opt stack 0
   861  000080                     cycleProgramScreenRight@programScreen:
   862                           	opt stack 0
   863  000080                     moveBinServo@num:
   864                           	opt stack 0
   865  000080                     ___wmul@multiplier:
   866                           	opt stack 0
   867  000080                     ___lwdiv@dividend:
   868                           	opt stack 0
   869  000080                     ___ftpack@arg:
   870                           	opt stack 0
   871  000080                     ___lldiv@dividend:
   872                           	opt stack 0
   873                           
   874                           ; 4 bytes @ 0x0
   875  000080                     	ds	1
   876  000081                     lcdNibble@data:
   877                           	opt stack 0
   878  000081                     I2C_Master_Read@a:
   879                           	opt stack 0
   880  000081                     _isdigit$1284:
   881                           	opt stack 0
   882  000081                     extendSensorAreaArm@i:
   883                           	opt stack 0
   884  000081                     I2C_Master_Write@d:
   885                           	opt stack 0
   886                           
   887                           ; 2 bytes @ 0x1
   888  000081                     	ds	1
   889  000082                     ??_moveBinServo:
   890  000082                     lcdInst@data:
   891                           	opt stack 0
   892  000082                     putch@data:
   893                           	opt stack 0
   894  000082                     I2C_Master_Read@temp:
   895                           	opt stack 0
   896  000082                     isdigit@c:
   897                           	opt stack 0
   898  000082                     cycleProgramScreenLeft@min:
   899                           	opt stack 0
   900  000082                     cycleProgramScreenRight@min:
   901                           	opt stack 0
   902  000082                     retractSensorAreaArm@i:
   903                           	opt stack 0
   904  000082                     ___wmul@multiplicand:
   905                           	opt stack 0
   906  000082                     ___lwdiv@divisor:
   907                           	opt stack 0
   908                           
   909                           ; 2 bytes @ 0x2
   910  000082                     	ds	1
   911  000083                     ??_initializeLcdSettings:
   912  000083                     updateCurrentTime@i:
   913                           	opt stack 0
   914  000083                     ___ftpack@exp:
   915                           	opt stack 0
   916                           
   917                           ; 1 bytes @ 0x3
   918  000083                     	ds	1
   919  000084                     ___ftpack@sign:
   920                           	opt stack 0
   921  000084                     cycleProgramScreenLeft@max:
   922                           	opt stack 0
   923  000084                     cycleProgramScreenRight@max:
   924                           	opt stack 0
   925  000084                     moveBinServo@i:
   926                           	opt stack 0
   927  000084                     ___wmul@product:
   928                           	opt stack 0
   929  000084                     ___lwdiv@quotient:
   930                           	opt stack 0
   931  000084                     ___lldiv@divisor:
   932                           	opt stack 0
   933                           
   934                           ; 4 bytes @ 0x4
   935  000084                     	ds	1
   936  000085                     ??___ftpack:
   937                           
   938                           ; 1 bytes @ 0x5
   939  000085                     	ds	1
   940  000086                     ?_atoi:
   941                           	opt stack 0
   942  000086                     ___lwdiv@counter:
   943                           	opt stack 0
   944  000086                     Eeprom_ReadByte@address:
   945                           	opt stack 0
   946  000086                     Eeprom_WriteByte@address:
   947                           	opt stack 0
   948  000086                     atoi@s:
   949                           	opt stack 0
   950                           
   951                           ; 2 bytes @ 0x6
   952  000086                     	ds	1
   953  000087                     ?___lwmod:
   954                           	opt stack 0
   955  000087                     ___lwmod@dividend:
   956                           	opt stack 0
   957                           
   958                           ; 2 bytes @ 0x7
   959  000087                     	ds	1
   960  000088                     ??_atoi:
   961  000088                     ?___ftmul:
   962                           	opt stack 0
   963  000088                     Eeprom_WriteByte@data:
   964                           	opt stack 0
   965  000088                     getEEPROM@num:
   966                           	opt stack 0
   967  000088                     ___ftmul@f1:
   968                           	opt stack 0
   969  000088                     ___lldiv@quotient:
   970                           	opt stack 0
   971                           
   972                           ; 4 bytes @ 0x8
   973  000088                     	ds	1
   974  000089                     ??_saveEEPROM:
   975  000089                     ___lwmod@divisor:
   976                           	opt stack 0
   977                           
   978                           ; 2 bytes @ 0x9
   979  000089                     	ds	1
   980  00008A                     ??_getEEPROM:
   981  00008A                     atoi@sign:
   982                           	opt stack 0
   983  00008A                     saveEEPROM@temp:
   984                           	opt stack 0
   985                           
   986                           ; 2 bytes @ 0xA
   987  00008A                     	ds	1
   988  00008B                     ___lwmod@counter:
   989                           	opt stack 0
   990  00008B                     atoi@a:
   991                           	opt stack 0
   992  00008B                     ___ftmul@f2:
   993                           	opt stack 0
   994                           
   995                           ; 3 bytes @ 0xB
   996  00008B                     	ds	1
   997  00008C                     ?__doprnt:
   998                           	opt stack 0
   999  00008C                     ___lldiv@counter:
  1000                           	opt stack 0
  1001  00008C                     saveEEPROM@i:
  1002                           	opt stack 0
  1003  00008C                     __doprnt@pb:
  1004                           	opt stack 0
  1005                           
  1006                           ; 2 bytes @ 0xC
  1007  00008C                     	ds	1
  1008  00008D                     initializeRTC@c:
  1009                           	opt stack 0
  1010                           
  1011                           ; 4 bytes @ 0xD
  1012  00008D                     	ds	1
  1013  00008E                     ??___ftmul:
  1014  00008E                     getEEPROM@i:
  1015                           	opt stack 0
  1016  00008E                     __doprnt@f:
  1017                           	opt stack 0
  1018                           
  1019                           ; 2 bytes @ 0xE
  1020  00008E                     	ds	2
  1021  000090                     __doprnt@ap:
  1022                           	opt stack 0
  1023                           
  1024                           ; 2 bytes @ 0x10
  1025  000090                     	ds	1
  1026  000091                     ??_initializeRTC:
  1027  000091                     ___ftmul@exp:
  1028                           	opt stack 0
  1029                           
  1030                           ; 1 bytes @ 0x11
  1031  000091                     	ds	1
  1032  000092                     ??__doprnt:
  1033  000092                     ___ftmul@f3_as_product:
  1034                           	opt stack 0
  1035                           
  1036                           ; 3 bytes @ 0x12
  1037  000092                     	ds	3
  1038  000095                     ___ftmul@cntr:
  1039                           	opt stack 0
  1040                           
  1041                           ; 1 bytes @ 0x15
  1042  000095                     	ds	1
  1043  000096                     __doprnt@idx:
  1044                           	opt stack 0
  1045  000096                     ___ftmul@sign:
  1046                           	opt stack 0
  1047                           
  1048                           ; 1 bytes @ 0x16
  1049  000096                     	ds	1
  1050  000097                     ?___ftdiv:
  1051                           	opt stack 0
  1052  000097                     __doprnt@prec:
  1053                           	opt stack 0
  1054  000097                     ___ftdiv@f1:
  1055                           	opt stack 0
  1056                           
  1057                           ; 3 bytes @ 0x17
  1058  000097                     	ds	1
  1059  000098                     __doprnt@val:
  1060                           	opt stack 0
  1061                           
  1062                           ; 2 bytes @ 0x18
  1063  000098                     	ds	2
  1064  00009A                     __doprnt@flag:
  1065                           	opt stack 0
  1066  00009A                     ___ftdiv@f2:
  1067                           	opt stack 0
  1068                           
  1069                           ; 3 bytes @ 0x1A
  1070  00009A                     	ds	1
  1071  00009B                     __doprnt@width:
  1072                           	opt stack 0
  1073                           
  1074                           ; 2 bytes @ 0x1B
  1075  00009B                     	ds	2
  1076  00009D                     ??___ftdiv:
  1077  00009D                     __doprnt@c:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x1D
  1081  00009D                     	ds	1
  1082  00009E                     ?_printf:
  1083                           	opt stack 0
  1084  00009E                     ?_sprintf:
  1085                           	opt stack 0
  1086  00009E                     printf@f:
  1087                           	opt stack 0
  1088  00009E                     sprintf@wh:
  1089                           	opt stack 0
  1090                           
  1091                           ; 2 bytes @ 0x1E
  1092  00009E                     	ds	2
  1093  0000A0                     ___ftdiv@cntr:
  1094                           	opt stack 0
  1095  0000A0                     sprintf@f:
  1096                           	opt stack 0
  1097                           
  1098                           ; 2 bytes @ 0x20
  1099  0000A0                     	ds	1
  1100  0000A1                     ___ftdiv@f3:
  1101                           	opt stack 0
  1102                           
  1103                           ; 3 bytes @ 0x21
  1104  0000A1                     	ds	3
  1105  0000A4                     ___ftdiv@exp:
  1106                           	opt stack 0
  1107  0000A4                     sprintf@ap:
  1108                           	opt stack 0
  1109                           
  1110                           ; 2 bytes @ 0x24
  1111  0000A4                     	ds	1
  1112  0000A5                     ___ftdiv@sign:
  1113                           	opt stack 0
  1114                           
  1115                           ; 1 bytes @ 0x25
  1116  0000A5                     	ds	1
  1117  0000A6                     ?___fttol:
  1118                           	opt stack 0
  1119  0000A6                     printf@ap:
  1120                           	opt stack 0
  1121  0000A6                     ___fttol@f1:
  1122                           	opt stack 0
  1123  0000A6                     sprintf@pb:
  1124                           	opt stack 0
  1125                           
  1126                           ; 4 bytes @ 0x26
  1127  0000A6                     	ds	2
  1128  0000A8                     printf@pb:
  1129                           	opt stack 0
  1130                           
  1131                           ; 4 bytes @ 0x28
  1132  0000A8                     	ds	2
  1133  0000AA                     ??___fttol:
  1134  0000AA                     ?_getCurrentTimeInSeconds:
  1135                           	opt stack 0
  1136                           
  1137                           ; 2 bytes @ 0x2A
  1138  0000AA                     	ds	2
  1139  0000AC                     ?_displayMainProgramLcdScreen:
  1140                           	opt stack 0
  1141  0000AC                     getCurrentTimeInSeconds@currentTime:
  1142                           	opt stack 0
  1143  0000AC                     update_eeprom_screen_state@num:
  1144                           	opt stack 0
  1145  0000AC                     update_past_run_screen_state@num:
  1146                           	opt stack 0
  1147                           
  1148                           ; 2 bytes @ 0x2C
  1149  0000AC                     	ds	2
  1150  0000AE                     ??_displayMainProgramLcdScreen:
  1151  0000AE                     ??_update_eeprom_screen_state:
  1152  0000AE                     ??_update_past_run_screen_state:
  1153  0000AE                     _getCurrentTimeInSeconds$1663:
  1154                           	opt stack 0
  1155                           
  1156                           ; 2 bytes @ 0x2E
  1157  0000AE                     	ds	1
  1158  0000AF                     ___fttol@sign1:
  1159                           	opt stack 0
  1160                           
  1161                           ; 1 bytes @ 0x2F
  1162  0000AF                     	ds	1
  1163  0000B0                     past_run_access@temp:
  1164                           	opt stack 0
  1165  0000B0                     getCurrentTimeInSeconds@str:
  1166                           	opt stack 0
  1167  0000B0                     ___fttol@lval:
  1168                           	opt stack 0
  1169                           
  1170                           ; 4 bytes @ 0x30
  1171  0000B0                     	ds	1
  1172  0000B1                     past_run_access@screen_state:
  1173                           	opt stack 0
  1174                           
  1175                           ; 2 bytes @ 0x31
  1176  0000B1                     	ds	1
  1177  0000B2                     ??_operation:
  1178                           
  1179                           ; 1 bytes @ 0x32
  1180  0000B2                     	ds	1
  1181  0000B3                     ??_EEPROM:
  1182                           
  1183                           ; 1 bytes @ 0x33
  1184  0000B3                     	ds	1
  1185  0000B4                     ___fttol@exp1:
  1186                           	opt stack 0
  1187  0000B4                     operation@startingTime:
  1188                           	opt stack 0
  1189                           
  1190                           ; 2 bytes @ 0x34
  1191  0000B4                     	ds	1
  1192  0000B5                     initializePicPins@time:
  1193                           	opt stack 0
  1194  0000B5                     EEPROM@timeStorage:
  1195                           	opt stack 0
  1196                           
  1197                           ; 14 bytes @ 0x35
  1198  0000B5                     	ds	1
  1199  0000B6                     operation@endingTime:
  1200                           	opt stack 0
  1201                           
  1202                           ; 2 bytes @ 0x36
  1203  0000B6                     	ds	2
  1204  0000B8                     operation@temp:
  1205                           	opt stack 0
  1206  0000B8                     initializePicPins@set_time:
  1207                           	opt stack 0
  1208                           
  1209                           ; 2 bytes @ 0x38
  1210  0000B8                     	ds	1
  1211  0000B9                     operation@bottle_type:
  1212                           	opt stack 0
  1213                           
  1214                           ; 2 bytes @ 0x39
  1215  0000B9                     	ds	1
  1216  0000BA                     
  1217                           ; 1 bytes @ 0x3A
  1218  0000BA                     	ds	1
  1219  0000BB                     operation@bottle_cap:
  1220                           	opt stack 0
  1221                           
  1222                           ; 2 bytes @ 0x3B
  1223  0000BB                     	ds	2
  1224  0000BD                     operation@bottle:
  1225                           	opt stack 0
  1226                           
  1227                           ; 2 bytes @ 0x3D
  1228  0000BD                     	ds	2
  1229  0000BF                     operation@i:
  1230                           	opt stack 0
  1231                           
  1232                           ; 2 bytes @ 0x3F
  1233  0000BF                     	ds	4
  1234  0000C3                     EEPROM@storage:
  1235                           	opt stack 0
  1236                           
  1237                           ; 12 bytes @ 0x43
  1238  0000C3                     	ds	12
  1239  0000CF                     EEPROM@temp:
  1240                           	opt stack 0
  1241                           
  1242                           ; 1 bytes @ 0x4F
  1243  0000CF                     	ds	1
  1244  0000D0                     EEPROM@screen_state:
  1245                           	opt stack 0
  1246                           
  1247                           ; 2 bytes @ 0x50
  1248  0000D0                     	ds	2
  1249  0000D2                     EEPROM@i:
  1250                           	opt stack 0
  1251                           
  1252                           ; 2 bytes @ 0x52
  1253  0000D2                     	ds	2
  1254  0000D4                     ??_enterSelectedSubProgramFromMainProgram:
  1255                           
  1256                           ; 1 bytes @ 0x54
  1257  0000D4                     	ds	2
  1258  0000D6                     ??_main:
  1259                           
  1260                           ; 1 bytes @ 0x56
  1261  0000D6                     	ds	2
  1262  0000D8                     main@userInput:
  1263                           	opt stack 0
  1264                           
  1265                           ; 1 bytes @ 0x58
  1266  0000D8                     	ds	1
  1267                           tblptru	equ	0xFF8
  1268                           tblptrh	equ	0xFF7
  1269                           tblptrl	equ	0xFF6
  1270                           tablat	equ	0xFF5
  1271                           postinc0	equ	0xFEE
  1272                           wreg	equ	0xFE8
  1273                           postdec1	equ	0xFE5
  1274                           fsr1l	equ	0xFE1
  1275                           
  1276                           	psect	cstackCOMRAM
  1277  000001                     __pcstackCOMRAM:
  1278                           	opt stack 0
  1279  000001                     ??i2_I2C_Master_Wait:
  1280  000001                     ??i2_isdigit:
  1281  000001                     ?i2___wmul:
  1282                           	opt stack 0
  1283  000001                     ?i2___lwdiv:
  1284                           	opt stack 0
  1285  000001                     ?i2___ftpack:
  1286                           	opt stack 0
  1287  000001                     i2lcdNibble@temp:
  1288                           	opt stack 0
  1289  000001                     i2___wmul@multiplier:
  1290                           	opt stack 0
  1291  000001                     i2___lwdiv@dividend:
  1292                           	opt stack 0
  1293  000001                     i2___ftpack@arg:
  1294                           	opt stack 0
  1295                           
  1296                           ; 3 bytes @ 0x0
  1297  000001                     	ds	1
  1298  000002                     i2lcdNibble@data:
  1299                           	opt stack 0
  1300  000002                     i2I2C_Master_Read@a:
  1301                           	opt stack 0
  1302  000002                     i2_isdigit$1284:
  1303                           	opt stack 0
  1304  000002                     i2I2C_Master_Write@d:
  1305                           	opt stack 0
  1306                           
  1307                           ; 2 bytes @ 0x1
  1308  000002                     	ds	1
  1309  000003                     i2lcdInst@data:
  1310                           	opt stack 0
  1311  000003                     i2putch@data:
  1312                           	opt stack 0
  1313  000003                     i2I2C_Master_Read@temp:
  1314                           	opt stack 0
  1315  000003                     i2isdigit@c:
  1316                           	opt stack 0
  1317  000003                     i2___wmul@multiplicand:
  1318                           	opt stack 0
  1319  000003                     i2___lwdiv@divisor:
  1320                           	opt stack 0
  1321                           
  1322                           ; 2 bytes @ 0x2
  1323  000003                     	ds	1
  1324  000004                     i2updateCurrentTime@i:
  1325                           	opt stack 0
  1326  000004                     i2___ftpack@exp:
  1327                           	opt stack 0
  1328                           
  1329                           ; 1 bytes @ 0x3
  1330  000004                     	ds	1
  1331  000005                     i2___ftpack@sign:
  1332                           	opt stack 0
  1333  000005                     i2___wmul@product:
  1334                           	opt stack 0
  1335  000005                     i2___lwdiv@quotient:
  1336                           	opt stack 0
  1337                           
  1338                           ; 2 bytes @ 0x4
  1339  000005                     	ds	1
  1340  000006                     ??i2___ftpack:
  1341                           
  1342                           ; 1 bytes @ 0x5
  1343  000006                     	ds	1
  1344  000007                     i2___lwdiv@counter:
  1345                           	opt stack 0
  1346                           
  1347                           ; 1 bytes @ 0x6
  1348  000007                     	ds	1
  1349  000008                     ?i2___lwmod:
  1350                           	opt stack 0
  1351  000008                     i2___lwmod@dividend:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0x7
  1355  000008                     	ds	1
  1356  000009                     ?i2___ftmul:
  1357                           	opt stack 0
  1358  000009                     i2___ftmul@f1:
  1359                           	opt stack 0
  1360                           
  1361                           ; 3 bytes @ 0x8
  1362  000009                     	ds	1
  1363  00000A                     i2___lwmod@divisor:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0x9
  1367  00000A                     	ds	2
  1368  00000C                     i2___lwmod@counter:
  1369                           	opt stack 0
  1370  00000C                     i2___ftmul@f2:
  1371                           	opt stack 0
  1372                           
  1373                           ; 3 bytes @ 0xB
  1374  00000C                     	ds	1
  1375  00000D                     ?i2__doprnt:
  1376                           	opt stack 0
  1377  00000D                     i2__doprnt@pb:
  1378                           	opt stack 0
  1379                           
  1380                           ; 2 bytes @ 0xC
  1381  00000D                     	ds	2
  1382  00000F                     ??i2___ftmul:
  1383  00000F                     i2__doprnt@f:
  1384                           	opt stack 0
  1385                           
  1386                           ; 2 bytes @ 0xE
  1387  00000F                     	ds	2
  1388  000011                     i2__doprnt@ap:
  1389                           	opt stack 0
  1390                           
  1391                           ; 2 bytes @ 0x10
  1392  000011                     	ds	1
  1393  000012                     i2___ftmul@exp:
  1394                           	opt stack 0
  1395                           
  1396                           ; 1 bytes @ 0x11
  1397  000012                     	ds	1
  1398  000013                     ??i2__doprnt:
  1399  000013                     i2___ftmul@f3_as_product:
  1400                           	opt stack 0
  1401                           
  1402                           ; 3 bytes @ 0x12
  1403  000013                     	ds	3
  1404  000016                     i2___ftmul@cntr:
  1405                           	opt stack 0
  1406                           
  1407                           ; 1 bytes @ 0x15
  1408  000016                     	ds	1
  1409  000017                     i2__doprnt@idx:
  1410                           	opt stack 0
  1411  000017                     i2___ftmul@sign:
  1412                           	opt stack 0
  1413                           
  1414                           ; 1 bytes @ 0x16
  1415  000017                     	ds	1
  1416  000018                     ?i2___ftdiv:
  1417                           	opt stack 0
  1418  000018                     i2__doprnt@prec:
  1419                           	opt stack 0
  1420  000018                     i2___ftdiv@f1:
  1421                           	opt stack 0
  1422                           
  1423                           ; 3 bytes @ 0x17
  1424  000018                     	ds	1
  1425  000019                     i2__doprnt@val:
  1426                           	opt stack 0
  1427                           
  1428                           ; 2 bytes @ 0x18
  1429  000019                     	ds	2
  1430  00001B                     i2__doprnt@flag:
  1431                           	opt stack 0
  1432  00001B                     i2___ftdiv@f2:
  1433                           	opt stack 0
  1434                           
  1435                           ; 3 bytes @ 0x1A
  1436  00001B                     	ds	1
  1437  00001C                     i2__doprnt@width:
  1438                           	opt stack 0
  1439                           
  1440                           ; 2 bytes @ 0x1B
  1441  00001C                     	ds	2
  1442  00001E                     ??i2___ftdiv:
  1443  00001E                     i2__doprnt@c:
  1444                           	opt stack 0
  1445                           
  1446                           ; 1 bytes @ 0x1D
  1447  00001E                     	ds	1
  1448  00001F                     ?i2_printf:
  1449                           	opt stack 0
  1450  00001F                     i2printf@f:
  1451                           	opt stack 0
  1452                           
  1453                           ; 2 bytes @ 0x1E
  1454  00001F                     	ds	2
  1455  000021                     i2___ftdiv@cntr:
  1456                           	opt stack 0
  1457                           
  1458                           ; 1 bytes @ 0x20
  1459  000021                     	ds	1
  1460  000022                     i2___ftdiv@f3:
  1461                           	opt stack 0
  1462                           
  1463                           ; 3 bytes @ 0x21
  1464  000022                     	ds	3
  1465  000025                     i2___ftdiv@exp:
  1466                           	opt stack 0
  1467                           
  1468                           ; 1 bytes @ 0x24
  1469  000025                     	ds	1
  1470  000026                     i2___ftdiv@sign:
  1471                           	opt stack 0
  1472                           
  1473                           ; 1 bytes @ 0x25
  1474  000026                     	ds	1
  1475  000027                     ?i2___fttol:
  1476                           	opt stack 0
  1477  000027                     i2printf@ap:
  1478                           	opt stack 0
  1479  000027                     i2___fttol@f1:
  1480                           	opt stack 0
  1481                           
  1482                           ; 3 bytes @ 0x26
  1483  000027                     	ds	2
  1484  000029                     i2printf@pb:
  1485                           	opt stack 0
  1486                           
  1487                           ; 4 bytes @ 0x28
  1488  000029                     	ds	2
  1489  00002B                     ??i2___fttol:
  1490                           
  1491                           ; 1 bytes @ 0x2A
  1492  00002B                     	ds	2
  1493  00002D                     
  1494                           ; 1 bytes @ 0x2C
  1495  00002D                     	ds	3
  1496  000030                     i2___fttol@sign1:
  1497                           	opt stack 0
  1498                           
  1499                           ; 1 bytes @ 0x2F
  1500  000030                     	ds	1
  1501  000031                     i2___fttol@lval:
  1502                           	opt stack 0
  1503                           
  1504                           ; 4 bytes @ 0x30
  1505  000031                     	ds	4
  1506  000035                     i2___fttol@exp1:
  1507                           	opt stack 0
  1508                           
  1509                           ; 1 bytes @ 0x34
  1510  000035                     	ds	1
  1511  000036                     ??_handler:
  1512                           
  1513                           ; 1 bytes @ 0x35
  1514  000036                     	ds	14
  1515  000044                     handler@time:
  1516                           	opt stack 0
  1517                           
  1518                           ; 3 bytes @ 0x43
  1519  000044                     	ds	3
  1520  000047                     handler@set_time:
  1521                           	opt stack 0
  1522                           
  1523                           ; 2 bytes @ 0x46
  1524  000047                     	ds	2
  1525                           tblptru	equ	0xFF8
  1526                           tblptrh	equ	0xFF7
  1527                           tblptrl	equ	0xFF6
  1528                           tablat	equ	0xFF5
  1529                           postinc0	equ	0xFEE
  1530                           wreg	equ	0xFE8
  1531                           postdec1	equ	0xFE5
  1532                           fsr1l	equ	0xFE1
  1533                           
  1534 ;;
  1535 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1536 ;;
  1537 ;; *************** function _main *****************
  1538 ;; Defined at:
  1539 ;;		line 40 in file "main.c"
  1540 ;; Parameters:    Size  Location     Type
  1541 ;;		None
  1542 ;; Auto vars:     Size  Location     Type
  1543 ;;  userInput       1   88[BANK0 ] unsigned char 
  1544 ;; Return value:  Size  Location     Type
  1545 ;;                  1    wreg      void 
  1546 ;; Registers used:
  1547 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1548 ;; Tracked objects:
  1549 ;;		On entry : 0/0
  1550 ;;		On exit  : 0/0
  1551 ;;		Unchanged: 0/0
  1552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1555 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1556 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1557 ;;Total ram usage:        3 bytes
  1558 ;; Hardware stack levels required when called:   15
  1559 ;; This function calls:
  1560 ;;		_cycleProgramScreenLeft
  1561 ;;		_cycleProgramScreenRight
  1562 ;;		_displayMainProgramLcdScreen
  1563 ;;		_enterSelectedSubProgramFromMainProgram
  1564 ;;		_getPressedKeypadKey
  1565 ;;		_initializePicSettings
  1566 ;;		_moveBinServo
  1567 ;; This function is called by:
  1568 ;;		Startup code after reset
  1569 ;; This function uses a non-reentrant model
  1570 ;;
  1571                           
  1572                           	psect	text0
  1573  001A88                     __ptext0:
  1574                           	opt stack 0
  1575  001A88                     _main:
  1576                           	opt stack 16
  1577                           
  1578                           ;main.c: 41: initializePicSettings();
  1579                           
  1580                           ;incstack = 0
  1581  001A88  ECE8  F017         	call	_initializePicSettings	;wreg free
  1582  001A8C                     l8127:
  1583                           
  1584                           ;main.c: 45: userInput = getPressedKeypadKey();
  1585  001A8C  EC68  F017         	call	_getPressedKeypadKey	;wreg free
  1586  001A90  0100               	movlb	0	; () banked
  1587  001A92  6FD8               	movwf	main@userInput& (0+255),b
  1588                           
  1589                           ; BSR set to: 0
  1590                           ;main.c: 46: if (userInput == keys[ENTER]){
  1591  001A94  0E4E               	movlw	low _ENTER
  1592  001A96  6EF6               	movwf	tblptrl,c
  1593  001A98                     	if	1	;There is more than 1 active tblptr byte
  1594  001A98  0EFE               	movlw	high _ENTER
  1595  001A9A  6EF7               	movwf	tblptrh,c
  1596  001A9C                     	endif
  1597  001A9C                     	if	1	;There are 3 active tblptr bytes
  1598  001A9C  0E00               	movlw	low (_ENTER shr (0+16))
  1599  001A9E  6EF8               	movwf	tblptru,c
  1600  001AA0                     	endif
  1601  001AA0  0009               	tblrd		*+
  1602  001AA2  CFF5 F0D6          	movff	tablat,??_main
  1603  001AA6  0009               	tblrd		*+
  1604  001AA8  CFF5 F0D7          	movff	tablat,??_main+1
  1605  001AAC  0E29               	movlw	low _keys
  1606  001AAE  0100               	movlb	0	; () banked
  1607  001AB0  25D6               	addwf	??_main& (0+255),w,b
  1608  001AB2  6EF6               	movwf	tblptrl,c
  1609  001AB4  0EFE               	movlw	high _keys
  1610  001AB6  21D7               	addwfc	(??_main+1)& (0+255),w,b
  1611  001AB8  6EF7               	movwf	tblptrh,c
  1612  001ABA                     	if	1	;There are 3 active tblptr bytes
  1613  001ABA  6AF8               	clrf	tblptru,c
  1614  001ABC  0E00               	movlw	low (__mediumconst shr (0+16))
  1615  001ABE  22F8               	addwfc	tblptru,f,c
  1616  001AC0                     	endif
  1617  001AC0  0008               	tblrd		*
  1618  001AC2  50F5               	movf	tablat,w,c
  1619  001AC4  0100               	movlb	0	; () banked
  1620  001AC6  19D8               	xorwf	main@userInput& (0+255),w,b
  1621  001AC8  A4D8               	btfss	status,2,c
  1622  001ACA  D003               	goto	l8133
  1623                           
  1624                           ; BSR set to: 0
  1625                           ;main.c: 47: enterSelectedSubProgramFromMainProgram();
  1626  001ACC  ECE8  F015         	call	_enterSelectedSubProgramFromMainProgram	;wreg free
  1627                           
  1628                           ;main.c: 48: }else if (userInput == keys[LEFT]){
  1629  001AD0  D7DD               	goto	l8127
  1630  001AD2                     l8133:
  1631  001AD2  0E50               	movlw	low _LEFT
  1632  001AD4  6EF6               	movwf	tblptrl,c
  1633  001AD6                     	if	1	;There is more than 1 active tblptr byte
  1634  001AD6  0EFE               	movlw	high _LEFT
  1635  001AD8  6EF7               	movwf	tblptrh,c
  1636  001ADA                     	endif
  1637  001ADA                     	if	1	;There are 3 active tblptr bytes
  1638  001ADA  0E00               	movlw	low (_LEFT shr (0+16))
  1639  001ADC  6EF8               	movwf	tblptru,c
  1640  001ADE                     	endif
  1641  001ADE  0009               	tblrd		*+
  1642  001AE0  CFF5 F0D6          	movff	tablat,??_main
  1643  001AE4  0009               	tblrd		*+
  1644  001AE6  CFF5 F0D7          	movff	tablat,??_main+1
  1645  001AEA  0E29               	movlw	low _keys
  1646  001AEC  0100               	movlb	0	; () banked
  1647  001AEE  25D6               	addwf	??_main& (0+255),w,b
  1648  001AF0  6EF6               	movwf	tblptrl,c
  1649  001AF2  0EFE               	movlw	high _keys
  1650  001AF4  21D7               	addwfc	(??_main+1)& (0+255),w,b
  1651  001AF6  6EF7               	movwf	tblptrh,c
  1652  001AF8                     	if	1	;There are 3 active tblptr bytes
  1653  001AF8  6AF8               	clrf	tblptru,c
  1654  001AFA  0E00               	movlw	low (__mediumconst shr (0+16))
  1655  001AFC  22F8               	addwfc	tblptru,f,c
  1656  001AFE                     	endif
  1657  001AFE  0008               	tblrd		*
  1658  001B00  50F5               	movf	tablat,w,c
  1659  001B02  0100               	movlb	0	; () banked
  1660  001B04  19D8               	xorwf	main@userInput& (0+255),w,b
  1661  001B06  A4D8               	btfss	status,2,c
  1662  001B08  D015               	goto	l8139
  1663                           
  1664                           ; BSR set to: 0
  1665                           ;main.c: 49: cycleProgramScreenLeft(&currentMainProgramScreen,0,3);
  1666  001B0A  0EE7               	movlw	low _currentMainProgramScreen
  1667  001B0C  0100               	movlb	0	; () banked
  1668  001B0E  6F80               	movwf	cycleProgramScreenLeft@programScreen& (0+255),b
  1669  001B10  0E00               	movlw	high _currentMainProgramScreen
  1670  001B12  0100               	movlb	0	; () banked
  1671  001B14  6F81               	movwf	(cycleProgramScreenLeft@programScreen+1)& (0+255),b
  1672  001B16  0E00               	movlw	0
  1673  001B18  0100               	movlb	0	; () banked
  1674  001B1A  6F83               	movwf	(cycleProgramScreenLeft@min+1)& (0+255),b
  1675  001B1C  0E00               	movlw	0
  1676  001B1E  6F82               	movwf	cycleProgramScreenLeft@min& (0+255),b
  1677  001B20  0E00               	movlw	0
  1678  001B22  0100               	movlb	0	; () banked
  1679  001B24  6F85               	movwf	(cycleProgramScreenLeft@max+1)& (0+255),b
  1680  001B26  0E03               	movlw	3
  1681  001B28  6F84               	movwf	cycleProgramScreenLeft@max& (0+255),b
  1682  001B2A  ECFA  F016         	call	_cycleProgramScreenLeft	;wreg free
  1683                           
  1684                           ;main.c: 50: displayMainProgramLcdScreen();
  1685  001B2E  EC4D  F013         	call	_displayMainProgramLcdScreen	;wreg free
  1686                           
  1687                           ;main.c: 51: }else if (userInput == keys[RIGHT]){
  1688  001B32  D7AC               	goto	l8127
  1689  001B34                     l8139:
  1690  001B34  0E52               	movlw	low _RIGHT
  1691  001B36  6EF6               	movwf	tblptrl,c
  1692  001B38                     	if	1	;There is more than 1 active tblptr byte
  1693  001B38  0EFE               	movlw	high _RIGHT
  1694  001B3A  6EF7               	movwf	tblptrh,c
  1695  001B3C                     	endif
  1696  001B3C                     	if	1	;There are 3 active tblptr bytes
  1697  001B3C  0E00               	movlw	low (_RIGHT shr (0+16))
  1698  001B3E  6EF8               	movwf	tblptru,c
  1699  001B40                     	endif
  1700  001B40  0009               	tblrd		*+
  1701  001B42  CFF5 F0D6          	movff	tablat,??_main
  1702  001B46  0009               	tblrd		*+
  1703  001B48  CFF5 F0D7          	movff	tablat,??_main+1
  1704  001B4C  0E29               	movlw	low _keys
  1705  001B4E  0100               	movlb	0	; () banked
  1706  001B50  25D6               	addwf	??_main& (0+255),w,b
  1707  001B52  6EF6               	movwf	tblptrl,c
  1708  001B54  0EFE               	movlw	high _keys
  1709  001B56  21D7               	addwfc	(??_main+1)& (0+255),w,b
  1710  001B58  6EF7               	movwf	tblptrh,c
  1711  001B5A                     	if	1	;There are 3 active tblptr bytes
  1712  001B5A  6AF8               	clrf	tblptru,c
  1713  001B5C  0E00               	movlw	low (__mediumconst shr (0+16))
  1714  001B5E  22F8               	addwfc	tblptru,f,c
  1715  001B60                     	endif
  1716  001B60  0008               	tblrd		*
  1717  001B62  50F5               	movf	tablat,w,c
  1718  001B64  0100               	movlb	0	; () banked
  1719  001B66  19D8               	xorwf	main@userInput& (0+255),w,b
  1720  001B68  A4D8               	btfss	status,2,c
  1721  001B6A  D015               	goto	l8145
  1722                           
  1723                           ; BSR set to: 0
  1724                           ;main.c: 52: cycleProgramScreenRight(&currentMainProgramScreen,0,3);
  1725  001B6C  0EE7               	movlw	low _currentMainProgramScreen
  1726  001B6E  0100               	movlb	0	; () banked
  1727  001B70  6F80               	movwf	cycleProgramScreenRight@programScreen& (0+255),b
  1728  001B72  0E00               	movlw	high _currentMainProgramScreen
  1729  001B74  0100               	movlb	0	; () banked
  1730  001B76  6F81               	movwf	(cycleProgramScreenRight@programScreen+1)& (0+255),b
  1731  001B78  0E00               	movlw	0
  1732  001B7A  0100               	movlb	0	; () banked
  1733  001B7C  6F83               	movwf	(cycleProgramScreenRight@min+1)& (0+255),b
  1734  001B7E  0E00               	movlw	0
  1735  001B80  6F82               	movwf	cycleProgramScreenRight@min& (0+255),b
  1736  001B82  0E00               	movlw	0
  1737  001B84  0100               	movlb	0	; () banked
  1738  001B86  6F85               	movwf	(cycleProgramScreenRight@max+1)& (0+255),b
  1739  001B88  0E03               	movlw	3
  1740  001B8A  6F84               	movwf	cycleProgramScreenRight@max& (0+255),b
  1741  001B8C  ECDC  F016         	call	_cycleProgramScreenRight	;wreg free
  1742                           
  1743                           ;main.c: 53: displayMainProgramLcdScreen();
  1744  001B90  EC4D  F013         	call	_displayMainProgramLcdScreen	;wreg free
  1745                           
  1746                           ;main.c: 54: }
  1747  001B94  D77B               	goto	l8127
  1748  001B96                     l8145:
  1749                           
  1750                           ;main.c: 55: else if (userInput == keys[0]){
  1751  001B96  0E29               	movlw	low _keys
  1752  001B98  6EF6               	movwf	tblptrl,c
  1753  001B9A                     	if	1	;There is more than 1 active tblptr byte
  1754  001B9A  0EFE               	movlw	high _keys
  1755  001B9C  6EF7               	movwf	tblptrh,c
  1756  001B9E                     	endif
  1757  001B9E                     	if	1	;There are 3 active tblptr bytes
  1758  001B9E  0E00               	movlw	low (_keys shr (0+16))
  1759  001BA0  6EF8               	movwf	tblptru,c
  1760  001BA2                     	endif
  1761  001BA2  0008               	tblrd		*
  1762  001BA4  50F5               	movf	tablat,w,c
  1763  001BA6  0100               	movlb	0	; () banked
  1764  001BA8  19D8               	xorwf	main@userInput& (0+255),w,b
  1765  001BAA  A4D8               	btfss	status,2,c
  1766  001BAC  D76F               	goto	l8127
  1767                           
  1768                           ; BSR set to: 0
  1769                           ;main.c: 56: moveBinServo(0);
  1770  001BAE  0E00               	movlw	0
  1771  001BB0  0100               	movlb	0	; () banked
  1772  001BB2  6F81               	movwf	(moveBinServo@num+1)& (0+255),b
  1773  001BB4  0E00               	movlw	0
  1774  001BB6  6F80               	movwf	moveBinServo@num& (0+255),b
  1775  001BB8  EC46  F014         	call	_moveBinServo	;wreg free
  1776  001BBC  D767               	goto	l8127
  1777  001BBE                     __end_of_main:
  1778                           	opt stack 0
  1779                           tblptru	equ	0xFF8
  1780                           tblptrh	equ	0xFF7
  1781                           tblptrl	equ	0xFF6
  1782                           tablat	equ	0xFF5
  1783                           postinc0	equ	0xFEE
  1784                           wreg	equ	0xFE8
  1785                           postdec1	equ	0xFE5
  1786                           fsr1l	equ	0xFE1
  1787                           status	equ	0xFD8
  1788                           
  1789 ;; *************** function _initializePicSettings *****************
  1790 ;; Defined at:
  1791 ;;		line 61 in file "main.c"
  1792 ;; Parameters:    Size  Location     Type
  1793 ;;		None
  1794 ;; Auto vars:     Size  Location     Type
  1795 ;;		None
  1796 ;; Return value:  Size  Location     Type
  1797 ;;                  1    wreg      void 
  1798 ;; Registers used:
  1799 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1800 ;; Tracked objects:
  1801 ;;		On entry : 0/0
  1802 ;;		On exit  : 0/0
  1803 ;;		Unchanged: 0/0
  1804 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1809 ;;Total ram usage:        0 bytes
  1810 ;; Hardware stack levels used:    1
  1811 ;; Hardware stack levels required when called:   13
  1812 ;; This function calls:
  1813 ;;		_initializeLcdScreen
  1814 ;;		_initializePicPins
  1815 ;;		_initializeRTC
  1816 ;; This function is called by:
  1817 ;;		_main
  1818 ;; This function uses a non-reentrant model
  1819 ;;
  1820                           
  1821                           	psect	text1
  1822  002FD0                     __ptext1:
  1823                           	opt stack 0
  1824  002FD0                     _initializePicSettings:
  1825                           	opt stack 17
  1826                           
  1827                           ;main.c: 62: initializePicPins();
  1828                           
  1829                           ;incstack = 0
  1830  002FD0  EC8D  F00F         	call	_initializePicPins	;wreg free
  1831                           
  1832                           ;main.c: 63: initializeRTC(10000);
  1833  002FD4  0E10               	movlw	16
  1834  002FD6  0100               	movlb	0	; () banked
  1835  002FD8  6F8D               	movwf	initializeRTC@c& (0+255),b
  1836  002FDA  0E27               	movlw	39
  1837  002FDC  6F8E               	movwf	(initializeRTC@c+1)& (0+255),b
  1838  002FDE  0E00               	movlw	0
  1839  002FE0  6F8F               	movwf	(initializeRTC@c+2)& (0+255),b
  1840  002FE2  0E00               	movlw	0
  1841  002FE4  6F90               	movwf	(initializeRTC@c+3)& (0+255),b
  1842  002FE6  EC13  F015         	call	_initializeRTC	;wreg free
  1843                           
  1844                           ;main.c: 64: (INTCONbits.GIE = 0);
  1845  002FEA  9EF2               	bcf	intcon,7,c	;volatile
  1846                           
  1847                           ;main.c: 65: initializeLcdScreen();
  1848  002FEC  EC1F  F018         	call	_initializeLcdScreen	;wreg free
  1849  002FF0  0012               	return		;funcret
  1850  002FF2                     __end_of_initializePicSettings:
  1851                           	opt stack 0
  1852                           tblptru	equ	0xFF8
  1853                           tblptrh	equ	0xFF7
  1854                           tblptrl	equ	0xFF6
  1855                           tablat	equ	0xFF5
  1856                           intcon	equ	0xFF2
  1857                           postinc0	equ	0xFEE
  1858                           wreg	equ	0xFE8
  1859                           postdec1	equ	0xFE5
  1860                           fsr1l	equ	0xFE1
  1861                           status	equ	0xFD8
  1862                           
  1863 ;; *************** function _initializeRTC *****************
  1864 ;; Defined at:
  1865 ;;		line 13 in file "I2C.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;  c               4   13[BANK0 ] const unsigned long 
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;		None
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  1    wreg      void 
  1872 ;; Registers used:
  1873 ;;		wreg, status,2, status,0, cstack
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1879 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1881 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1882 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1883 ;;Total ram usage:        8 bytes
  1884 ;; Hardware stack levels used:    1
  1885 ;; Hardware stack levels required when called:    7
  1886 ;; This function calls:
  1887 ;;		___lldiv
  1888 ;; This function is called by:
  1889 ;;		_initializePicSettings
  1890 ;; This function uses a non-reentrant model
  1891 ;;
  1892                           
  1893                           	psect	text2
  1894  002A26                     __ptext2:
  1895                           	opt stack 0
  1896  002A26                     _initializeRTC:
  1897                           	opt stack 22
  1898                           
  1899                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  1900                           
  1901                           ;incstack = 0
  1902  002A26  0E00               	movlw	0
  1903  002A28  6EC7               	movwf	4039,c	;volatile
  1904                           
  1905                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  1906  002A2A  0E28               	movlw	40
  1907  002A2C  6EC6               	movwf	4038,c	;volatile
  1908                           
  1909                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  1910  002A2E  0E00               	movlw	0
  1911  002A30  6EC5               	movwf	4037,c	;volatile
  1912                           
  1913                           ;I2C.c: 19: SSPADD = (8000000/(4*c))-1;
  1914  002A32  0E00               	movlw	0
  1915  002A34  0100               	movlb	0	; () banked
  1916  002A36  6F80               	movwf	___lldiv@dividend& (0+255),b
  1917  002A38  0E12               	movlw	18
  1918  002A3A  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  1919  002A3C  0E7A               	movlw	122
  1920  002A3E  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  1921  002A40  0E00               	movlw	0
  1922  002A42  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  1923  002A44  C08D  F091         	movff	initializeRTC@c,??_initializeRTC
  1924  002A48  C08E  F092         	movff	initializeRTC@c+1,??_initializeRTC+1
  1925  002A4C  C08F  F093         	movff	initializeRTC@c+2,??_initializeRTC+2
  1926  002A50  C090  F094         	movff	initializeRTC@c+3,??_initializeRTC+3
  1927  002A54  0E02               	movlw	2
  1928  002A56                     u3875:
  1929  002A56  90D8               	bcf	status,0,c
  1930  002A58  0100               	movlb	0	; () banked
  1931  002A5A  3791               	rlcf	??_initializeRTC& (0+255),f,b
  1932  002A5C  3792               	rlcf	(??_initializeRTC+1)& (0+255),f,b
  1933  002A5E  3793               	rlcf	(??_initializeRTC+2)& (0+255),f,b
  1934  002A60  3794               	rlcf	(??_initializeRTC+3)& (0+255),f,b
  1935  002A62  2EE8               	decfsz	wreg,f,c
  1936  002A64  D7F8               	goto	u3875
  1937  002A66  C091  F084         	movff	??_initializeRTC,___lldiv@divisor
  1938  002A6A  C092  F085         	movff	??_initializeRTC+1,___lldiv@divisor+1
  1939  002A6E  C093  F086         	movff	??_initializeRTC+2,___lldiv@divisor+2
  1940  002A72  C094  F087         	movff	??_initializeRTC+3,___lldiv@divisor+3
  1941  002A76  ECE8  F011         	call	___lldiv	;wreg free
  1942  002A7A  0100               	movlb	0	; () banked
  1943  002A7C  0580               	decf	?___lldiv& (0+255),w,b
  1944  002A7E  6EC8               	movwf	4040,c	;volatile
  1945                           
  1946                           ; BSR set to: 0
  1947                           ;I2C.c: 20: TRISC3 = 1;
  1948  002A80  8694               	bsf	3988,3,c	;volatile
  1949                           
  1950                           ; BSR set to: 0
  1951                           ;I2C.c: 21: TRISC4 = 1;
  1952  002A82  8894               	bsf	3988,4,c	;volatile
  1953                           
  1954                           ; BSR set to: 0
  1955  002A84  0012               	return		;funcret
  1956  002A86                     __end_of_initializeRTC:
  1957                           	opt stack 0
  1958                           tblptru	equ	0xFF8
  1959                           tblptrh	equ	0xFF7
  1960                           tblptrl	equ	0xFF6
  1961                           tablat	equ	0xFF5
  1962                           intcon	equ	0xFF2
  1963                           postinc0	equ	0xFEE
  1964                           wreg	equ	0xFE8
  1965                           postdec1	equ	0xFE5
  1966                           fsr1l	equ	0xFE1
  1967                           status	equ	0xFD8
  1968                           
  1969 ;; *************** function ___lldiv *****************
  1970 ;; Defined at:
  1971 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;  dividend        4    0[BANK0 ] unsigned long 
  1974 ;;  divisor         4    4[BANK0 ] unsigned long 
  1975 ;; Auto vars:     Size  Location     Type
  1976 ;;  quotient        4    8[BANK0 ] unsigned long 
  1977 ;;  counter         1   12[BANK0 ] unsigned char 
  1978 ;; Return value:  Size  Location     Type
  1979 ;;                  4    0[BANK0 ] unsigned long 
  1980 ;; Registers used:
  1981 ;;		wreg, status,2, status,0
  1982 ;; Tracked objects:
  1983 ;;		On entry : 0/0
  1984 ;;		On exit  : 0/0
  1985 ;;		Unchanged: 0/0
  1986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1987 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1988 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1990 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1991 ;;Total ram usage:       13 bytes
  1992 ;; Hardware stack levels used:    1
  1993 ;; Hardware stack levels required when called:    6
  1994 ;; This function calls:
  1995 ;;		Nothing
  1996 ;; This function is called by:
  1997 ;;		_initializeRTC
  1998 ;; This function uses a non-reentrant model
  1999 ;;
  2000                           
  2001                           	psect	text3
  2002  0023D0                     __ptext3:
  2003                           	opt stack 0
  2004  0023D0                     ___lldiv:
  2005                           	opt stack 22
  2006                           
  2007                           ; BSR set to: 0
  2008                           ;incstack = 0
  2009  0023D0  0E00               	movlw	0
  2010  0023D2  0100               	movlb	0	; () banked
  2011  0023D4  6F88               	movwf	___lldiv@quotient& (0+255),b
  2012  0023D6  0E00               	movlw	0
  2013  0023D8  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  2014  0023DA  0E00               	movlw	0
  2015  0023DC  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  2016  0023DE  0E00               	movlw	0
  2017  0023E0  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  2018                           
  2019                           ; BSR set to: 0
  2020  0023E2  0100               	movlb	0	; () banked
  2021  0023E4  5184               	movf	___lldiv@divisor& (0+255),w,b
  2022  0023E6  0100               	movlb	0	; () banked
  2023  0023E8  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  2024  0023EA  0100               	movlb	0	; () banked
  2025  0023EC  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  2026  0023EE  0100               	movlb	0	; () banked
  2027  0023F0  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  2028  0023F2  B4D8               	btfsc	status,2,c
  2029  0023F4  D042               	goto	l965
  2030                           
  2031                           ; BSR set to: 0
  2032  0023F6  0E01               	movlw	1
  2033  0023F8  0100               	movlb	0	; () banked
  2034  0023FA  6F8C               	movwf	___lldiv@counter& (0+255),b
  2035  0023FC  D008               	goto	l3965
  2036  0023FE                     l3963:
  2037                           
  2038                           ; BSR set to: 0
  2039  0023FE  0100               	movlb	0	; () banked
  2040  002400  90D8               	bcf	status,0,c
  2041  002402  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  2042  002404  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  2043  002406  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  2044  002408  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  2045  00240A  0100               	movlb	0	; () banked
  2046  00240C  2B8C               	incf	___lldiv@counter& (0+255),f,b
  2047  00240E                     l3965:
  2048                           
  2049                           ; BSR set to: 0
  2050  00240E  0100               	movlb	0	; () banked
  2051  002410  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  2052  002412  D7F5               	goto	l3963
  2053  002414                     l3967:
  2054                           
  2055                           ; BSR set to: 0
  2056  002414  0100               	movlb	0	; () banked
  2057  002416  90D8               	bcf	status,0,c
  2058  002418  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  2059  00241A  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  2060  00241C  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  2061  00241E  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  2062                           
  2063                           ; BSR set to: 0
  2064  002420  0100               	movlb	0	; () banked
  2065  002422  5184               	movf	___lldiv@divisor& (0+255),w,b
  2066  002424  0100               	movlb	0	; () banked
  2067  002426  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  2068  002428  0100               	movlb	0	; () banked
  2069  00242A  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2070  00242C  0100               	movlb	0	; () banked
  2071  00242E  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  2072  002430  0100               	movlb	0	; () banked
  2073  002432  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2074  002434  0100               	movlb	0	; () banked
  2075  002436  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  2076  002438  0100               	movlb	0	; () banked
  2077  00243A  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2078  00243C  0100               	movlb	0	; () banked
  2079  00243E  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  2080  002440  A0D8               	btfss	status,0,c
  2081  002442  D012               	goto	l3975
  2082                           
  2083                           ; BSR set to: 0
  2084  002444  0100               	movlb	0	; () banked
  2085  002446  5184               	movf	___lldiv@divisor& (0+255),w,b
  2086  002448  0100               	movlb	0	; () banked
  2087  00244A  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  2088  00244C  0100               	movlb	0	; () banked
  2089  00244E  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  2090  002450  0100               	movlb	0	; () banked
  2091  002452  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  2092  002454  0100               	movlb	0	; () banked
  2093  002456  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  2094  002458  0100               	movlb	0	; () banked
  2095  00245A  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  2096  00245C  0100               	movlb	0	; () banked
  2097  00245E  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  2098  002460  0100               	movlb	0	; () banked
  2099  002462  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  2100                           
  2101                           ; BSR set to: 0
  2102  002464  0100               	movlb	0	; () banked
  2103  002466  8188               	bsf	___lldiv@quotient& (0+255),0,b
  2104  002468                     l3975:
  2105                           
  2106                           ; BSR set to: 0
  2107  002468  0100               	movlb	0	; () banked
  2108  00246A  90D8               	bcf	status,0,c
  2109  00246C  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  2110  00246E  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  2111  002470  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  2112  002472  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  2113                           
  2114                           ; BSR set to: 0
  2115  002474  0100               	movlb	0	; () banked
  2116  002476  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  2117  002478  D7CD               	goto	l3967
  2118  00247A                     l965:
  2119                           
  2120                           ; BSR set to: 0
  2121  00247A  C088  F080         	movff	___lldiv@quotient,?___lldiv
  2122  00247E  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  2123  002482  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  2124  002486  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  2125                           
  2126                           ; BSR set to: 0
  2127  00248A  0012               	return		;funcret
  2128  00248C                     __end_of___lldiv:
  2129                           	opt stack 0
  2130                           tblptru	equ	0xFF8
  2131                           tblptrh	equ	0xFF7
  2132                           tblptrl	equ	0xFF6
  2133                           tablat	equ	0xFF5
  2134                           intcon	equ	0xFF2
  2135                           postinc0	equ	0xFEE
  2136                           wreg	equ	0xFE8
  2137                           postdec1	equ	0xFE5
  2138                           fsr1l	equ	0xFE1
  2139                           status	equ	0xFD8
  2140                           
  2141 ;; *************** function _initializePicPins *****************
  2142 ;; Defined at:
  2143 ;;		line 68 in file "main.c"
  2144 ;; Parameters:    Size  Location     Type
  2145 ;;		None
  2146 ;; Auto vars:     Size  Location     Type
  2147 ;;  time            3   53[BANK0 ] float 
  2148 ;;  set_time        2   56[BANK0 ] unsigned int 
  2149 ;; Return value:  Size  Location     Type
  2150 ;;                  1    wreg      void 
  2151 ;; Registers used:
  2152 ;;		wreg, status,2, status,0, cstack
  2153 ;; Tracked objects:
  2154 ;;		On entry : 0/0
  2155 ;;		On exit  : 0/0
  2156 ;;		Unchanged: 0/0
  2157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2159 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2161 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2162 ;;Total ram usage:        5 bytes
  2163 ;; Hardware stack levels used:    1
  2164 ;; Hardware stack levels required when called:    8
  2165 ;; This function calls:
  2166 ;;		___ftdiv
  2167 ;;		___ftmul
  2168 ;;		___fttol
  2169 ;; This function is called by:
  2170 ;;		_initializePicSettings
  2171 ;; This function uses a non-reentrant model
  2172 ;;
  2173                           
  2174                           	psect	text4
  2175  001F1A                     __ptext4:
  2176                           	opt stack 0
  2177  001F1A                     _initializePicPins:
  2178                           	opt stack 21
  2179                           
  2180                           ;main.c: 70: OSCCON = 0b11110000;
  2181                           
  2182                           ; BSR set to: 0
  2183                           ;incstack = 0
  2184  001F1A  0EF0               	movlw	240
  2185  001F1C  6ED3               	movwf	4051,c	;volatile
  2186                           
  2187                           ;main.c: 72: OSCTUNEbits.PLLEN = 1;
  2188  001F1E  8C9B               	bsf	3995,6,c	;volatile
  2189                           
  2190                           ;main.c: 75: TRISA = 0xFF;
  2191  001F20  6892               	setf	3986,c	;volatile
  2192                           
  2193                           ;main.c: 76: TRISB = 0xFF;
  2194  001F22  6893               	setf	3987,c	;volatile
  2195                           
  2196                           ;main.c: 79: TRISC = 0x00;
  2197  001F24  0E00               	movlw	0
  2198  001F26  6E94               	movwf	3988,c	;volatile
  2199                           
  2200                           ;main.c: 80: TRISD = 0x00;
  2201  001F28  0E00               	movlw	0
  2202  001F2A  6E95               	movwf	3989,c	;volatile
  2203                           
  2204                           ;main.c: 81: TRISE = 0x00;
  2205  001F2C  0E00               	movlw	0
  2206  001F2E  6E96               	movwf	3990,c	;volatile
  2207                           
  2208                           ;main.c: 84: LATA = 0x00;
  2209  001F30  0E00               	movlw	0
  2210  001F32  6E89               	movwf	3977,c	;volatile
  2211                           
  2212                           ;main.c: 85: LATB = 0x00;
  2213  001F34  0E00               	movlw	0
  2214  001F36  6E8A               	movwf	3978,c	;volatile
  2215                           
  2216                           ;main.c: 86: LATC = 0x00;
  2217  001F38  0E00               	movlw	0
  2218  001F3A  6E8B               	movwf	3979,c	;volatile
  2219                           
  2220                           ;main.c: 87: LATD = 0x00;
  2221  001F3C  0E00               	movlw	0
  2222  001F3E  6E8C               	movwf	3980,c	;volatile
  2223                           
  2224                           ;main.c: 88: LATE = 0x00;
  2225  001F40  0E00               	movlw	0
  2226  001F42  6E8D               	movwf	3981,c	;volatile
  2227                           
  2228                           ;main.c: 91: ADCON0 = 0x00;
  2229  001F44  0E00               	movlw	0
  2230  001F46  6EC2               	movwf	4034,c	;volatile
  2231                           
  2232                           ;main.c: 93: ADCON1 = 0xFF;
  2233  001F48  68C1               	setf	4033,c	;volatile
  2234                           
  2235                           ;main.c: 94: nRBPU = 0;
  2236  001F4A  9EF1               	bcf	intcon2,7,c	;volatile
  2237                           
  2238                           ;main.c: 95: CVRCON = 0x00;
  2239  001F4C  0E00               	movlw	0
  2240  001F4E  6EB5               	movwf	4021,c	;volatile
  2241                           
  2242                           ;main.c: 96: CMCONbits.CIS = 0;
  2243  001F50  96B4               	bcf	4020,3,c	;volatile
  2244                           
  2245                           ;main.c: 97: ADFM = 1;
  2246  001F52  8EC0               	bsf	4032,7,c	;volatile
  2247                           
  2248                           ;main.c: 101: T0PS0=1;
  2249  001F54  80D5               	bsf	4053,0,c	;volatile
  2250                           
  2251                           ;main.c: 102: T0PS1=1;
  2252  001F56  82D5               	bsf	4053,1,c	;volatile
  2253                           
  2254                           ;main.c: 103: T0PS2=1;
  2255  001F58  84D5               	bsf	4053,2,c	;volatile
  2256                           
  2257                           ;main.c: 104: PSA=0;
  2258  001F5A  96D5               	bcf	4053,3,c	;volatile
  2259                           
  2260                           ;main.c: 105: T0CS=0;
  2261  001F5C  9AD5               	bcf	4053,5,c	;volatile
  2262                           
  2263                           ;main.c: 106: T08BIT=1;
  2264  001F5E  8CD5               	bsf	4053,6,c	;volatile
  2265                           
  2266                           ;main.c: 109: T1CON = 0b10000000;
  2267  001F60  0E80               	movlw	128
  2268  001F62  6ECD               	movwf	4045,c	;volatile
  2269                           
  2270                           ;main.c: 110: T1CKPS1 = 1;
  2271  001F64  8ACD               	bsf	4045,5,c	;volatile
  2272                           
  2273                           ;main.c: 111: T1CKPS0 = 1;
  2274  001F66  88CD               	bsf	4045,4,c	;volatile
  2275                           
  2276                           ;main.c: 112: T1OSCEN = 0;
  2277  001F68  96CD               	bcf	4045,3,c	;volatile
  2278                           
  2279                           ;main.c: 113: T1SYNC = 1;
  2280  001F6A  84CD               	bsf	4045,2,c	;volatile
  2281                           
  2282                           ;main.c: 114: TMR1CS = 0;
  2283  001F6C  92CD               	bcf	4045,1,c	;volatile
  2284                           
  2285                           ;main.c: 116: float time = 10;
  2286  001F6E  0E00               	movlw	0
  2287  001F70  0100               	movlb	0	; () banked
  2288  001F72  6FB5               	movwf	initializePicPins@time& (0+255),b
  2289  001F74  0E20               	movlw	32
  2290  001F76  0100               	movlb	0	; () banked
  2291  001F78  6FB6               	movwf	(initializePicPins@time+1)& (0+255),b
  2292  001F7A  0E41               	movlw	65
  2293  001F7C  0100               	movlb	0	; () banked
  2294  001F7E  6FB7               	movwf	(initializePicPins@time+2)& (0+255),b
  2295                           
  2296                           ; BSR set to: 0
  2297                           ;main.c: 117: unsigned int set_time = 65535-(int)((float)time*2000/8);
  2298  001F80  0E00               	movlw	0
  2299  001F82  0100               	movlb	0	; () banked
  2300  001F84  6F9A               	movwf	___ftdiv@f2& (0+255),b
  2301  001F86  0E00               	movlw	0
  2302  001F88  0100               	movlb	0	; () banked
  2303  001F8A  6F9B               	movwf	(___ftdiv@f2+1)& (0+255),b
  2304  001F8C  0E41               	movlw	65
  2305  001F8E  0100               	movlb	0	; () banked
  2306  001F90  6F9C               	movwf	(___ftdiv@f2+2)& (0+255),b
  2307  001F92  0E00               	movlw	0
  2308  001F94  0100               	movlb	0	; () banked
  2309  001F96  6F8B               	movwf	___ftmul@f2& (0+255),b
  2310  001F98  0EFA               	movlw	250
  2311  001F9A  0100               	movlb	0	; () banked
  2312  001F9C  6F8C               	movwf	(___ftmul@f2+1)& (0+255),b
  2313  001F9E  0E44               	movlw	68
  2314  001FA0  0100               	movlb	0	; () banked
  2315  001FA2  6F8D               	movwf	(___ftmul@f2+2)& (0+255),b
  2316  001FA4  C0B5  F088         	movff	initializePicPins@time,___ftmul@f1
  2317  001FA8  C0B6  F089         	movff	initializePicPins@time+1,___ftmul@f1+1
  2318  001FAC  C0B7  F08A         	movff	initializePicPins@time+2,___ftmul@f1+2
  2319  001FB0  ECB1  F00A         	call	___ftmul	;wreg free
  2320  001FB4  C088  F097         	movff	?___ftmul,___ftdiv@f1
  2321  001FB8  C089  F098         	movff	?___ftmul+1,___ftdiv@f1+1
  2322  001FBC  C08A  F099         	movff	?___ftmul+2,___ftdiv@f1+2
  2323  001FC0  EC60  F00B         	call	___ftdiv	;wreg free
  2324  001FC4  C097  F0A6         	movff	?___ftdiv,___fttol@f1
  2325  001FC8  C098  F0A7         	movff	?___ftdiv+1,___fttol@f1+1
  2326  001FCC  C099  F0A8         	movff	?___ftdiv+2,___fttol@f1+2
  2327  001FD0  EC06  F00C         	call	___fttol	;wreg free
  2328  001FD4  0100               	movlb	0	; () banked
  2329  001FD6  1FA6               	comf	?___fttol& (0+255),f,b
  2330  001FD8  0100               	movlb	0	; () banked
  2331  001FDA  1FA7               	comf	(?___fttol+1)& (0+255),f,b
  2332  001FDC  0100               	movlb	0	; () banked
  2333  001FDE  4BA6               	infsnz	?___fttol& (0+255),f,b
  2334  001FE0  2BA7               	incf	(?___fttol+1)& (0+255),f,b
  2335  001FE2  0EFF               	movlw	255
  2336  001FE4  0100               	movlb	0	; () banked
  2337  001FE6  25A6               	addwf	?___fttol& (0+255),w,b
  2338  001FE8  0100               	movlb	0	; () banked
  2339  001FEA  6FB8               	movwf	initializePicPins@set_time& (0+255),b
  2340  001FEC  0EFF               	movlw	255
  2341  001FEE  0100               	movlb	0	; () banked
  2342  001FF0  21A7               	addwfc	(?___fttol+1)& (0+255),w,b
  2343  001FF2  0100               	movlb	0	; () banked
  2344  001FF4  6FB9               	movwf	(initializePicPins@set_time+1)& (0+255),b
  2345                           
  2346                           ; BSR set to: 0
  2347                           ;main.c: 118: TMR1H = set_time >> 8;
  2348  001FF6  0100               	movlb	0	; () banked
  2349  001FF8  51B9               	movf	(initializePicPins@set_time+1)& (0+255),w,b
  2350  001FFA  6ECF               	movwf	4047,c	;volatile
  2351                           
  2352                           ; BSR set to: 0
  2353                           ;main.c: 119: TMR1L = set_time & 0b11111111;
  2354  001FFC  C0B8  FFCE         	movff	initializePicPins@set_time,4046	;volatile
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;main.c: 122: TMR0IE = 1;
  2358  002000  8AF2               	bsf	intcon,5,c	;volatile
  2359                           
  2360                           ; BSR set to: 0
  2361                           ;main.c: 123: TMR0IF = 1;
  2362  002002  84F2               	bsf	intcon,2,c	;volatile
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;main.c: 124: TMR0ON = 1;
  2366  002004  8ED5               	bsf	4053,7,c	;volatile
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;main.c: 126: TMR1IE = 0;
  2370  002006  909D               	bcf	3997,0,c	;volatile
  2371                           
  2372                           ; BSR set to: 0
  2373                           ;main.c: 127: TMR1IF = 1;
  2374  002008  809E               	bsf	3998,0,c	;volatile
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;main.c: 128: TMR1ON = 1;
  2378  00200A  80CD               	bsf	4045,0,c	;volatile
  2379                           
  2380                           ; BSR set to: 0
  2381                           ;main.c: 130: PEIE = 1;
  2382  00200C  8CF2               	bsf	intcon,6,c	;volatile
  2383                           
  2384                           ; BSR set to: 0
  2385  00200E  0012               	return		;funcret
  2386  002010                     __end_of_initializePicPins:
  2387                           	opt stack 0
  2388                           tblptru	equ	0xFF8
  2389                           tblptrh	equ	0xFF7
  2390                           tblptrl	equ	0xFF6
  2391                           tablat	equ	0xFF5
  2392                           intcon	equ	0xFF2
  2393                           intcon2	equ	0xFF1
  2394                           postinc0	equ	0xFEE
  2395                           wreg	equ	0xFE8
  2396                           postdec1	equ	0xFE5
  2397                           fsr1l	equ	0xFE1
  2398                           status	equ	0xFD8
  2399                           
  2400 ;; *************** function ___fttol *****************
  2401 ;; Defined at:
  2402 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  2403 ;; Parameters:    Size  Location     Type
  2404 ;;  f1              3   38[BANK0 ] float 
  2405 ;; Auto vars:     Size  Location     Type
  2406 ;;  lval            4   48[BANK0 ] unsigned long 
  2407 ;;  exp1            1   52[BANK0 ] unsigned char 
  2408 ;;  sign1           1   47[BANK0 ] unsigned char 
  2409 ;; Return value:  Size  Location     Type
  2410 ;;                  4   38[BANK0 ] long 
  2411 ;; Registers used:
  2412 ;;		wreg, status,2, status,0
  2413 ;; Tracked objects:
  2414 ;;		On entry : 0/0
  2415 ;;		On exit  : 0/0
  2416 ;;		Unchanged: 0/0
  2417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2418 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2419 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2420 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2421 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2422 ;;Total ram usage:       15 bytes
  2423 ;; Hardware stack levels used:    1
  2424 ;; Hardware stack levels required when called:    6
  2425 ;; This function calls:
  2426 ;;		Nothing
  2427 ;; This function is called by:
  2428 ;;		_initializePicPins
  2429 ;; This function uses a non-reentrant model
  2430 ;;
  2431                           
  2432                           	psect	text5
  2433  00180C                     __ptext5:
  2434                           	opt stack 0
  2435  00180C                     ___fttol:
  2436                           	opt stack 22
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;incstack = 0
  2440  00180C  C0A8  F0AA         	movff	___fttol@f1+2,??___fttol
  2441  001810  0100               	movlb	0	; () banked
  2442  001812  6BAB               	clrf	(??___fttol+1)& (0+255),b
  2443  001814  6BAC               	clrf	(??___fttol+2)& (0+255),b
  2444  001816  0100               	movlb	0	; () banked
  2445  001818  35A7               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2446  00181A  0100               	movlb	0	; () banked
  2447  00181C  37AA               	rlcf	??___fttol& (0+255),f,b
  2448  00181E  E301               	bnc	u3391
  2449  001820  81AB               	bsf	(??___fttol+1)& (0+255),0,b
  2450  001822                     u3391:
  2451  001822  0100               	movlb	0	; () banked
  2452  001824  51AA               	movf	??___fttol& (0+255),w,b
  2453  001826  0100               	movlb	0	; () banked
  2454  001828  6FB4               	movwf	___fttol@exp1& (0+255),b
  2455  00182A  0100               	movlb	0	; () banked
  2456  00182C  51B4               	movf	___fttol@exp1& (0+255),w,b
  2457  00182E  A4D8               	btfss	status,2,c
  2458  001830  D00A               	goto	l3917
  2459                           
  2460                           ; BSR set to: 0
  2461  001832  0E00               	movlw	0
  2462  001834  0100               	movlb	0	; () banked
  2463  001836  6FA6               	movwf	?___fttol& (0+255),b
  2464  001838  0E00               	movlw	0
  2465  00183A  6FA7               	movwf	(?___fttol+1)& (0+255),b
  2466  00183C  0E00               	movlw	0
  2467  00183E  6FA8               	movwf	(?___fttol+2)& (0+255),b
  2468  001840  0E00               	movlw	0
  2469  001842  6FA9               	movwf	(?___fttol+3)& (0+255),b
  2470                           
  2471                           ; BSR set to: 0
  2472  001844  0012               	return	
  2473  001846                     l3917:
  2474                           
  2475                           ; BSR set to: 0
  2476  001846  0E17               	movlw	23
  2477  001848  0100               	movlb	0	; () banked
  2478  00184A  6FAA               	movwf	??___fttol& (0+255),b
  2479  00184C  C0A6  F0AB         	movff	___fttol@f1,??___fttol+1
  2480  001850  C0A7  F0AC         	movff	___fttol@f1+1,??___fttol+2
  2481  001854  C0A8  F0AD         	movff	___fttol@f1+2,??___fttol+3
  2482  001858  0100               	movlb	0	; () banked
  2483  00185A  29AA               	incf	??___fttol& (0+255),w,b
  2484  00185C  0100               	movlb	0	; () banked
  2485  00185E  6FAE               	movwf	(??___fttol+4)& (0+255),b
  2486  001860  D005               	goto	u3410
  2487  001862                     u3415:
  2488  001862  0100               	movlb	0	; () banked
  2489  001864  90D8               	bcf	status,0,c
  2490  001866  33AD               	rrcf	(??___fttol+3)& (0+255),f,b
  2491  001868  33AC               	rrcf	(??___fttol+2)& (0+255),f,b
  2492  00186A  33AB               	rrcf	(??___fttol+1)& (0+255),f,b
  2493  00186C                     u3410:
  2494  00186C  0100               	movlb	0	; () banked
  2495  00186E  2FAE               	decfsz	(??___fttol+4)& (0+255),f,b
  2496  001870  D7F8               	goto	u3415
  2497  001872  0100               	movlb	0	; () banked
  2498  001874  51AB               	movf	(??___fttol+1)& (0+255),w,b
  2499  001876  0100               	movlb	0	; () banked
  2500  001878  6FAF               	movwf	___fttol@sign1& (0+255),b
  2501                           
  2502                           ; BSR set to: 0
  2503  00187A  0100               	movlb	0	; () banked
  2504  00187C  8FA7               	bsf	(___fttol@f1+1)& (0+255),7,b
  2505                           
  2506                           ; BSR set to: 0
  2507  00187E  0EFF               	movlw	255
  2508  001880  0100               	movlb	0	; () banked
  2509  001882  17A6               	andwf	___fttol@f1& (0+255),f,b
  2510  001884  0EFF               	movlw	255
  2511  001886  0100               	movlb	0	; () banked
  2512  001888  17A7               	andwf	(___fttol@f1+1)& (0+255),f,b
  2513  00188A  0E00               	movlw	0
  2514  00188C  0100               	movlb	0	; () banked
  2515  00188E  17A8               	andwf	(___fttol@f1+2)& (0+255),f,b
  2516                           
  2517                           ; BSR set to: 0
  2518  001890  0100               	movlb	0	; () banked
  2519  001892  51A6               	movf	___fttol@f1& (0+255),w,b
  2520  001894  0100               	movlb	0	; () banked
  2521  001896  6FB0               	movwf	___fttol@lval& (0+255),b
  2522  001898  0100               	movlb	0	; () banked
  2523  00189A  51A7               	movf	(___fttol@f1+1)& (0+255),w,b
  2524  00189C  0100               	movlb	0	; () banked
  2525  00189E  6FB1               	movwf	(___fttol@lval+1)& (0+255),b
  2526  0018A0  0100               	movlb	0	; () banked
  2527  0018A2  51A8               	movf	(___fttol@f1+2)& (0+255),w,b
  2528  0018A4  0100               	movlb	0	; () banked
  2529  0018A6  6FB2               	movwf	(___fttol@lval+2)& (0+255),b
  2530  0018A8  0100               	movlb	0	; () banked
  2531  0018AA  6BB3               	clrf	(___fttol@lval+3)& (0+255),b
  2532                           
  2533                           ; BSR set to: 0
  2534  0018AC  0E8E               	movlw	142
  2535  0018AE  0100               	movlb	0	; () banked
  2536  0018B0  5FB4               	subwf	___fttol@exp1& (0+255),f,b
  2537                           
  2538                           ; BSR set to: 0
  2539  0018B2  0100               	movlb	0	; () banked
  2540  0018B4  AFB4               	btfss	___fttol@exp1& (0+255),7,b
  2541  0018B6  D01A               	goto	l3939
  2542                           
  2543                           ; BSR set to: 0
  2544  0018B8  0100               	movlb	0	; () banked
  2545  0018BA  51B4               	movf	___fttol@exp1& (0+255),w,b
  2546  0018BC  0A80               	xorlw	128
  2547  0018BE  0F8F               	addlw	143
  2548  0018C0  B0D8               	btfsc	status,0,c
  2549  0018C2  D00A               	goto	l3935
  2550                           
  2551                           ; BSR set to: 0
  2552  0018C4  0E00               	movlw	0
  2553  0018C6  0100               	movlb	0	; () banked
  2554  0018C8  6FA6               	movwf	?___fttol& (0+255),b
  2555  0018CA  0E00               	movlw	0
  2556  0018CC  6FA7               	movwf	(?___fttol+1)& (0+255),b
  2557  0018CE  0E00               	movlw	0
  2558  0018D0  6FA8               	movwf	(?___fttol+2)& (0+255),b
  2559  0018D2  0E00               	movlw	0
  2560  0018D4  6FA9               	movwf	(?___fttol+3)& (0+255),b
  2561                           
  2562                           ; BSR set to: 0
  2563  0018D6  0012               	return	
  2564  0018D8                     l3935:
  2565                           
  2566                           ; BSR set to: 0
  2567  0018D8  0100               	movlb	0	; () banked
  2568  0018DA  90D8               	bcf	status,0,c
  2569  0018DC  33B3               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2570  0018DE  33B2               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2571  0018E0  33B1               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2572  0018E2  33B0               	rrcf	___fttol@lval& (0+255),f,b
  2573                           
  2574                           ; BSR set to: 0
  2575  0018E4  0100               	movlb	0	; () banked
  2576  0018E6  3FB4               	incfsz	___fttol@exp1& (0+255),f,b
  2577  0018E8  D7F7               	goto	l3935
  2578                           
  2579                           ; BSR set to: 0
  2580  0018EA  D01B               	goto	l3949
  2581  0018EC                     l3939:
  2582                           
  2583                           ; BSR set to: 0
  2584  0018EC  0E17               	movlw	23
  2585  0018EE  0100               	movlb	0	; () banked
  2586  0018F0  65B4               	cpfsgt	___fttol@exp1& (0+255),b
  2587  0018F2  D012               	goto	l3947
  2588                           
  2589                           ; BSR set to: 0
  2590  0018F4  0E00               	movlw	0
  2591  0018F6  0100               	movlb	0	; () banked
  2592  0018F8  6FA6               	movwf	?___fttol& (0+255),b
  2593  0018FA  0E00               	movlw	0
  2594  0018FC  6FA7               	movwf	(?___fttol+1)& (0+255),b
  2595  0018FE  0E00               	movlw	0
  2596  001900  6FA8               	movwf	(?___fttol+2)& (0+255),b
  2597  001902  0E00               	movlw	0
  2598  001904  6FA9               	movwf	(?___fttol+3)& (0+255),b
  2599                           
  2600                           ; BSR set to: 0
  2601  001906  0012               	return	
  2602  001908                     l3945:
  2603                           
  2604                           ; BSR set to: 0
  2605  001908  0100               	movlb	0	; () banked
  2606  00190A  90D8               	bcf	status,0,c
  2607  00190C  37B0               	rlcf	___fttol@lval& (0+255),f,b
  2608  00190E  37B1               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2609  001910  37B2               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2610  001912  37B3               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2611  001914  0100               	movlb	0	; () banked
  2612  001916  07B4               	decf	___fttol@exp1& (0+255),f,b
  2613  001918                     l3947:
  2614                           
  2615                           ; BSR set to: 0
  2616  001918  0100               	movlb	0	; () banked
  2617  00191A  51B4               	movf	___fttol@exp1& (0+255),w,b
  2618  00191C  0100               	movlb	0	; () banked
  2619  00191E  A4D8               	btfss	status,2,c
  2620  001920  D7F3               	goto	l3945
  2621  001922                     l3949:
  2622                           
  2623                           ; BSR set to: 0
  2624  001922  0100               	movlb	0	; () banked
  2625  001924  51AF               	movf	___fttol@sign1& (0+255),w,b
  2626  001926  0100               	movlb	0	; () banked
  2627  001928  B4D8               	btfsc	status,2,c
  2628  00192A  D009               	goto	l3953
  2629                           
  2630                           ; BSR set to: 0
  2631  00192C  0100               	movlb	0	; () banked
  2632  00192E  1FB3               	comf	(___fttol@lval+3)& (0+255),f,b
  2633  001930  1FB2               	comf	(___fttol@lval+2)& (0+255),f,b
  2634  001932  1FB1               	comf	(___fttol@lval+1)& (0+255),f,b
  2635  001934  6DB0               	negf	___fttol@lval& (0+255),b
  2636  001936  0E00               	movlw	0
  2637  001938  23B1               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2638  00193A  23B2               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2639  00193C  23B3               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2640  00193E                     l3953:
  2641                           
  2642                           ; BSR set to: 0
  2643  00193E  C0B0  F0A6         	movff	___fttol@lval,?___fttol
  2644  001942  C0B1  F0A7         	movff	___fttol@lval+1,?___fttol+1
  2645  001946  C0B2  F0A8         	movff	___fttol@lval+2,?___fttol+2
  2646  00194A  C0B3  F0A9         	movff	___fttol@lval+3,?___fttol+3
  2647  00194E  0012               	return	
  2648  001950                     __end_of___fttol:
  2649                           	opt stack 0
  2650                           tblptru	equ	0xFF8
  2651                           tblptrh	equ	0xFF7
  2652                           tblptrl	equ	0xFF6
  2653                           tablat	equ	0xFF5
  2654                           intcon	equ	0xFF2
  2655                           intcon2	equ	0xFF1
  2656                           postinc0	equ	0xFEE
  2657                           wreg	equ	0xFE8
  2658                           postdec1	equ	0xFE5
  2659                           fsr1l	equ	0xFE1
  2660                           status	equ	0xFD8
  2661                           
  2662 ;; *************** function ___ftmul *****************
  2663 ;; Defined at:
  2664 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  2665 ;; Parameters:    Size  Location     Type
  2666 ;;  f1              3    8[BANK0 ] float 
  2667 ;;  f2              3   11[BANK0 ] float 
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;  f3_as_produc    3   18[BANK0 ] unsigned um
  2670 ;;  sign            1   22[BANK0 ] unsigned char 
  2671 ;;  cntr            1   21[BANK0 ] unsigned char 
  2672 ;;  exp             1   17[BANK0 ] unsigned char 
  2673 ;; Return value:  Size  Location     Type
  2674 ;;                  3    8[BANK0 ] float 
  2675 ;; Registers used:
  2676 ;;		wreg, status,2, status,0, cstack
  2677 ;; Tracked objects:
  2678 ;;		On entry : 0/0
  2679 ;;		On exit  : 0/0
  2680 ;;		Unchanged: 0/0
  2681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2682 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2683 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2684 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2685 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2686 ;;Total ram usage:       15 bytes
  2687 ;; Hardware stack levels used:    1
  2688 ;; Hardware stack levels required when called:    7
  2689 ;; This function calls:
  2690 ;;		___ftpack
  2691 ;; This function is called by:
  2692 ;;		_initializePicPins
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696                           	psect	text6
  2697  001562                     __ptext6:
  2698                           	opt stack 0
  2699  001562                     ___ftmul:
  2700                           	opt stack 21
  2701                           
  2702                           ; BSR set to: 0
  2703                           ;incstack = 0
  2704  001562  C08A  F08E         	movff	___ftmul@f1+2,??___ftmul
  2705  001566  0100               	movlb	0	; () banked
  2706  001568  6B8F               	clrf	(??___ftmul+1)& (0+255),b
  2707  00156A  6B90               	clrf	(??___ftmul+2)& (0+255),b
  2708  00156C  0100               	movlb	0	; () banked
  2709  00156E  3589               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  2710  001570  0100               	movlb	0	; () banked
  2711  001572  378E               	rlcf	??___ftmul& (0+255),f,b
  2712  001574  E301               	bnc	u3331
  2713  001576  818F               	bsf	(??___ftmul+1)& (0+255),0,b
  2714  001578                     u3331:
  2715  001578  0100               	movlb	0	; () banked
  2716  00157A  518E               	movf	??___ftmul& (0+255),w,b
  2717  00157C  0100               	movlb	0	; () banked
  2718  00157E  6F91               	movwf	___ftmul@exp& (0+255),b
  2719  001580  0100               	movlb	0	; () banked
  2720  001582  5191               	movf	___ftmul@exp& (0+255),w,b
  2721  001584  A4D8               	btfss	status,2,c
  2722  001586  D00A               	goto	l3869
  2723                           
  2724                           ; BSR set to: 0
  2725  001588  0E00               	movlw	0
  2726  00158A  0100               	movlb	0	; () banked
  2727  00158C  6F88               	movwf	?___ftmul& (0+255),b
  2728  00158E  0E00               	movlw	0
  2729  001590  0100               	movlb	0	; () banked
  2730  001592  6F89               	movwf	(?___ftmul+1)& (0+255),b
  2731  001594  0E00               	movlw	0
  2732  001596  0100               	movlb	0	; () banked
  2733  001598  6F8A               	movwf	(?___ftmul+2)& (0+255),b
  2734                           
  2735                           ; BSR set to: 0
  2736  00159A  0012               	return	
  2737  00159C                     l3869:
  2738                           
  2739                           ; BSR set to: 0
  2740  00159C  C08D  F08E         	movff	___ftmul@f2+2,??___ftmul
  2741  0015A0  0100               	movlb	0	; () banked
  2742  0015A2  6B8F               	clrf	(??___ftmul+1)& (0+255),b
  2743  0015A4  6B90               	clrf	(??___ftmul+2)& (0+255),b
  2744  0015A6  0100               	movlb	0	; () banked
  2745  0015A8  358C               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  2746  0015AA  0100               	movlb	0	; () banked
  2747  0015AC  378E               	rlcf	??___ftmul& (0+255),f,b
  2748  0015AE  E301               	bnc	u3351
  2749  0015B0  818F               	bsf	(??___ftmul+1)& (0+255),0,b
  2750  0015B2                     u3351:
  2751  0015B2  0100               	movlb	0	; () banked
  2752  0015B4  518E               	movf	??___ftmul& (0+255),w,b
  2753  0015B6  0100               	movlb	0	; () banked
  2754  0015B8  6F96               	movwf	___ftmul@sign& (0+255),b
  2755  0015BA  0100               	movlb	0	; () banked
  2756  0015BC  5196               	movf	___ftmul@sign& (0+255),w,b
  2757  0015BE  A4D8               	btfss	status,2,c
  2758  0015C0  D00A               	goto	l3875
  2759                           
  2760                           ; BSR set to: 0
  2761  0015C2  0E00               	movlw	0
  2762  0015C4  0100               	movlb	0	; () banked
  2763  0015C6  6F88               	movwf	?___ftmul& (0+255),b
  2764  0015C8  0E00               	movlw	0
  2765  0015CA  0100               	movlb	0	; () banked
  2766  0015CC  6F89               	movwf	(?___ftmul+1)& (0+255),b
  2767  0015CE  0E00               	movlw	0
  2768  0015D0  0100               	movlb	0	; () banked
  2769  0015D2  6F8A               	movwf	(?___ftmul+2)& (0+255),b
  2770                           
  2771                           ; BSR set to: 0
  2772  0015D4  0012               	return	
  2773  0015D6                     l3875:
  2774                           
  2775                           ; BSR set to: 0
  2776  0015D6  0100               	movlb	0	; () banked
  2777  0015D8  5196               	movf	___ftmul@sign& (0+255),w,b
  2778  0015DA  0F7B               	addlw	123
  2779  0015DC  0100               	movlb	0	; () banked
  2780  0015DE  2791               	addwf	___ftmul@exp& (0+255),f,b
  2781                           
  2782                           ; BSR set to: 0
  2783  0015E0  C08A  F096         	movff	___ftmul@f1+2,___ftmul@sign
  2784  0015E4  0100               	movlb	0	; () banked
  2785  0015E6  518D               	movf	(___ftmul@f2+2)& (0+255),w,b
  2786  0015E8  0100               	movlb	0	; () banked
  2787  0015EA  1B96               	xorwf	___ftmul@sign& (0+255),f,b
  2788  0015EC  0E80               	movlw	128
  2789  0015EE  0100               	movlb	0	; () banked
  2790  0015F0  1796               	andwf	___ftmul@sign& (0+255),f,b
  2791                           
  2792                           ; BSR set to: 0
  2793  0015F2  0100               	movlb	0	; () banked
  2794  0015F4  8F89               	bsf	(___ftmul@f1+1)& (0+255),7,b
  2795                           
  2796                           ; BSR set to: 0
  2797  0015F6  0100               	movlb	0	; () banked
  2798  0015F8  8F8C               	bsf	(___ftmul@f2+1)& (0+255),7,b
  2799                           
  2800                           ; BSR set to: 0
  2801  0015FA  0EFF               	movlw	255
  2802  0015FC  0100               	movlb	0	; () banked
  2803  0015FE  178B               	andwf	___ftmul@f2& (0+255),f,b
  2804  001600  0EFF               	movlw	255
  2805  001602  0100               	movlb	0	; () banked
  2806  001604  178C               	andwf	(___ftmul@f2+1)& (0+255),f,b
  2807  001606  0E00               	movlw	0
  2808  001608  0100               	movlb	0	; () banked
  2809  00160A  178D               	andwf	(___ftmul@f2+2)& (0+255),f,b
  2810                           
  2811                           ; BSR set to: 0
  2812  00160C  0E00               	movlw	0
  2813  00160E  0100               	movlb	0	; () banked
  2814  001610  6F92               	movwf	___ftmul@f3_as_product& (0+255),b
  2815  001612  0E00               	movlw	0
  2816  001614  0100               	movlb	0	; () banked
  2817  001616  6F93               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  2818  001618  0E00               	movlw	0
  2819  00161A  0100               	movlb	0	; () banked
  2820  00161C  6F94               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  2821                           
  2822                           ; BSR set to: 0
  2823  00161E  0E07               	movlw	7
  2824  001620  0100               	movlb	0	; () banked
  2825  001622  6F95               	movwf	___ftmul@cntr& (0+255),b
  2826  001624                     l3889:
  2827                           
  2828                           ; BSR set to: 0
  2829  001624  0100               	movlb	0	; () banked
  2830  001626  A188               	btfss	___ftmul@f1& (0+255),0,b
  2831  001628  D00C               	goto	l3893
  2832                           
  2833                           ; BSR set to: 0
  2834  00162A  0100               	movlb	0	; () banked
  2835  00162C  518B               	movf	___ftmul@f2& (0+255),w,b
  2836  00162E  0100               	movlb	0	; () banked
  2837  001630  2792               	addwf	___ftmul@f3_as_product& (0+255),f,b
  2838  001632  0100               	movlb	0	; () banked
  2839  001634  518C               	movf	(___ftmul@f2+1)& (0+255),w,b
  2840  001636  0100               	movlb	0	; () banked
  2841  001638  2393               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  2842  00163A  0100               	movlb	0	; () banked
  2843  00163C  518D               	movf	(___ftmul@f2+2)& (0+255),w,b
  2844  00163E  0100               	movlb	0	; () banked
  2845  001640  2394               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  2846  001642                     l3893:
  2847                           
  2848                           ; BSR set to: 0
  2849  001642  0100               	movlb	0	; () banked
  2850  001644  90D8               	bcf	status,0,c
  2851  001646  338A               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  2852  001648  3389               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  2853  00164A  3388               	rrcf	___ftmul@f1& (0+255),f,b
  2854  00164C  0100               	movlb	0	; () banked
  2855  00164E  90D8               	bcf	status,0,c
  2856  001650  378B               	rlcf	___ftmul@f2& (0+255),f,b
  2857  001652  378C               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  2858  001654  378D               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  2859                           
  2860                           ; BSR set to: 0
  2861  001656  0100               	movlb	0	; () banked
  2862  001658  2F95               	decfsz	___ftmul@cntr& (0+255),f,b
  2863  00165A  D7E4               	goto	l3889
  2864                           
  2865                           ; BSR set to: 0
  2866                           
  2867                           ; BSR set to: 0
  2868  00165C  0E09               	movlw	9
  2869  00165E  0100               	movlb	0	; () banked
  2870  001660  6F95               	movwf	___ftmul@cntr& (0+255),b
  2871  001662                     l3899:
  2872                           
  2873                           ; BSR set to: 0
  2874  001662  0100               	movlb	0	; () banked
  2875  001664  A188               	btfss	___ftmul@f1& (0+255),0,b
  2876  001666  D00C               	goto	l3903
  2877                           
  2878                           ; BSR set to: 0
  2879  001668  0100               	movlb	0	; () banked
  2880  00166A  518B               	movf	___ftmul@f2& (0+255),w,b
  2881  00166C  0100               	movlb	0	; () banked
  2882  00166E  2792               	addwf	___ftmul@f3_as_product& (0+255),f,b
  2883  001670  0100               	movlb	0	; () banked
  2884  001672  518C               	movf	(___ftmul@f2+1)& (0+255),w,b
  2885  001674  0100               	movlb	0	; () banked
  2886  001676  2393               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  2887  001678  0100               	movlb	0	; () banked
  2888  00167A  518D               	movf	(___ftmul@f2+2)& (0+255),w,b
  2889  00167C  0100               	movlb	0	; () banked
  2890  00167E  2394               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  2891  001680                     l3903:
  2892                           
  2893                           ; BSR set to: 0
  2894  001680  0100               	movlb	0	; () banked
  2895  001682  90D8               	bcf	status,0,c
  2896  001684  338A               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  2897  001686  3389               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  2898  001688  3388               	rrcf	___ftmul@f1& (0+255),f,b
  2899  00168A  0100               	movlb	0	; () banked
  2900  00168C  90D8               	bcf	status,0,c
  2901  00168E  3394               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  2902  001690  3393               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  2903  001692  3392               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  2904                           
  2905                           ; BSR set to: 0
  2906  001694  0100               	movlb	0	; () banked
  2907  001696  2F95               	decfsz	___ftmul@cntr& (0+255),f,b
  2908  001698  D7E4               	goto	l3899
  2909                           
  2910                           ; BSR set to: 0
  2911                           
  2912                           ; BSR set to: 0
  2913  00169A  C092  F080         	movff	___ftmul@f3_as_product,___ftpack@arg
  2914  00169E  C093  F081         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2915  0016A2  C094  F082         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2916  0016A6  C091  F083         	movff	___ftmul@exp,___ftpack@exp
  2917  0016AA  C096  F084         	movff	___ftmul@sign,___ftpack@sign
  2918  0016AE  EC07  F00F         	call	___ftpack	;wreg free
  2919  0016B2  C080  F088         	movff	?___ftpack,?___ftmul
  2920  0016B6  C081  F089         	movff	?___ftpack+1,?___ftmul+1
  2921  0016BA  C082  F08A         	movff	?___ftpack+2,?___ftmul+2
  2922  0016BE  0012               	return	
  2923  0016C0                     __end_of___ftmul:
  2924                           	opt stack 0
  2925                           tblptru	equ	0xFF8
  2926                           tblptrh	equ	0xFF7
  2927                           tblptrl	equ	0xFF6
  2928                           tablat	equ	0xFF5
  2929                           intcon	equ	0xFF2
  2930                           intcon2	equ	0xFF1
  2931                           postinc0	equ	0xFEE
  2932                           wreg	equ	0xFE8
  2933                           postdec1	equ	0xFE5
  2934                           fsr1l	equ	0xFE1
  2935                           status	equ	0xFD8
  2936                           
  2937 ;; *************** function ___ftdiv *****************
  2938 ;; Defined at:
  2939 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  2940 ;; Parameters:    Size  Location     Type
  2941 ;;  f1              3   23[BANK0 ] float 
  2942 ;;  f2              3   26[BANK0 ] float 
  2943 ;; Auto vars:     Size  Location     Type
  2944 ;;  f3              3   33[BANK0 ] float 
  2945 ;;  sign            1   37[BANK0 ] unsigned char 
  2946 ;;  exp             1   36[BANK0 ] unsigned char 
  2947 ;;  cntr            1   32[BANK0 ] unsigned char 
  2948 ;; Return value:  Size  Location     Type
  2949 ;;                  3   23[BANK0 ] float 
  2950 ;; Registers used:
  2951 ;;		wreg, status,2, status,0, cstack
  2952 ;; Tracked objects:
  2953 ;;		On entry : 0/0
  2954 ;;		On exit  : 0/0
  2955 ;;		Unchanged: 0/0
  2956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2957 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2958 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2959 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2960 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2961 ;;Total ram usage:       15 bytes
  2962 ;; Hardware stack levels used:    1
  2963 ;; Hardware stack levels required when called:    7
  2964 ;; This function calls:
  2965 ;;		___ftpack
  2966 ;; This function is called by:
  2967 ;;		_initializePicPins
  2968 ;; This function uses a non-reentrant model
  2969 ;;
  2970                           
  2971                           	psect	text7
  2972  0016C0                     __ptext7:
  2973                           	opt stack 0
  2974  0016C0                     ___ftdiv:
  2975                           	opt stack 21
  2976                           
  2977                           ;incstack = 0
  2978  0016C0  C099  F09D         	movff	___ftdiv@f1+2,??___ftdiv
  2979  0016C4  0100               	movlb	0	; () banked
  2980  0016C6  6B9E               	clrf	(??___ftdiv+1)& (0+255),b
  2981  0016C8  6B9F               	clrf	(??___ftdiv+2)& (0+255),b
  2982  0016CA  0100               	movlb	0	; () banked
  2983  0016CC  3598               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  2984  0016CE  0100               	movlb	0	; () banked
  2985  0016D0  379D               	rlcf	??___ftdiv& (0+255),f,b
  2986  0016D2  E301               	bnc	u3281
  2987  0016D4  819E               	bsf	(??___ftdiv+1)& (0+255),0,b
  2988  0016D6                     u3281:
  2989  0016D6  0100               	movlb	0	; () banked
  2990  0016D8  519D               	movf	??___ftdiv& (0+255),w,b
  2991  0016DA  0100               	movlb	0	; () banked
  2992  0016DC  6FA4               	movwf	___ftdiv@exp& (0+255),b
  2993  0016DE  0100               	movlb	0	; () banked
  2994  0016E0  51A4               	movf	___ftdiv@exp& (0+255),w,b
  2995  0016E2  A4D8               	btfss	status,2,c
  2996  0016E4  D00A               	goto	l3823
  2997                           
  2998                           ; BSR set to: 0
  2999  0016E6  0E00               	movlw	0
  3000  0016E8  0100               	movlb	0	; () banked
  3001  0016EA  6F97               	movwf	?___ftdiv& (0+255),b
  3002  0016EC  0E00               	movlw	0
  3003  0016EE  0100               	movlb	0	; () banked
  3004  0016F0  6F98               	movwf	(?___ftdiv+1)& (0+255),b
  3005  0016F2  0E00               	movlw	0
  3006  0016F4  0100               	movlb	0	; () banked
  3007  0016F6  6F99               	movwf	(?___ftdiv+2)& (0+255),b
  3008                           
  3009                           ; BSR set to: 0
  3010  0016F8  0012               	return	
  3011  0016FA                     l3823:
  3012                           
  3013                           ; BSR set to: 0
  3014  0016FA  C09C  F09D         	movff	___ftdiv@f2+2,??___ftdiv
  3015  0016FE  0100               	movlb	0	; () banked
  3016  001700  6B9E               	clrf	(??___ftdiv+1)& (0+255),b
  3017  001702  6B9F               	clrf	(??___ftdiv+2)& (0+255),b
  3018  001704  0100               	movlb	0	; () banked
  3019  001706  359B               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  3020  001708  0100               	movlb	0	; () banked
  3021  00170A  379D               	rlcf	??___ftdiv& (0+255),f,b
  3022  00170C  E301               	bnc	u3301
  3023  00170E  819E               	bsf	(??___ftdiv+1)& (0+255),0,b
  3024  001710                     u3301:
  3025  001710  0100               	movlb	0	; () banked
  3026  001712  519D               	movf	??___ftdiv& (0+255),w,b
  3027  001714  0100               	movlb	0	; () banked
  3028  001716  6FA5               	movwf	___ftdiv@sign& (0+255),b
  3029  001718  0100               	movlb	0	; () banked
  3030  00171A  51A5               	movf	___ftdiv@sign& (0+255),w,b
  3031  00171C  A4D8               	btfss	status,2,c
  3032  00171E  D00A               	goto	l3829
  3033                           
  3034                           ; BSR set to: 0
  3035  001720  0E00               	movlw	0
  3036  001722  0100               	movlb	0	; () banked
  3037  001724  6F97               	movwf	?___ftdiv& (0+255),b
  3038  001726  0E00               	movlw	0
  3039  001728  0100               	movlb	0	; () banked
  3040  00172A  6F98               	movwf	(?___ftdiv+1)& (0+255),b
  3041  00172C  0E00               	movlw	0
  3042  00172E  0100               	movlb	0	; () banked
  3043  001730  6F99               	movwf	(?___ftdiv+2)& (0+255),b
  3044                           
  3045                           ; BSR set to: 0
  3046  001732  0012               	return	
  3047  001734                     l3829:
  3048                           
  3049                           ; BSR set to: 0
  3050  001734  0E00               	movlw	0
  3051  001736  0100               	movlb	0	; () banked
  3052  001738  6FA1               	movwf	___ftdiv@f3& (0+255),b
  3053  00173A  0E00               	movlw	0
  3054  00173C  0100               	movlb	0	; () banked
  3055  00173E  6FA2               	movwf	(___ftdiv@f3+1)& (0+255),b
  3056  001740  0E00               	movlw	0
  3057  001742  0100               	movlb	0	; () banked
  3058  001744  6FA3               	movwf	(___ftdiv@f3+2)& (0+255),b
  3059                           
  3060                           ; BSR set to: 0
  3061  001746  0100               	movlb	0	; () banked
  3062  001748  51A5               	movf	___ftdiv@sign& (0+255),w,b
  3063  00174A  0F89               	addlw	137
  3064  00174C  0100               	movlb	0	; () banked
  3065  00174E  5FA4               	subwf	___ftdiv@exp& (0+255),f,b
  3066                           
  3067                           ; BSR set to: 0
  3068  001750  C099  F0A5         	movff	___ftdiv@f1+2,___ftdiv@sign
  3069                           
  3070                           ; BSR set to: 0
  3071  001754  0100               	movlb	0	; () banked
  3072  001756  519C               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3073  001758  0100               	movlb	0	; () banked
  3074  00175A  1BA5               	xorwf	___ftdiv@sign& (0+255),f,b
  3075                           
  3076                           ; BSR set to: 0
  3077  00175C  0E80               	movlw	128
  3078  00175E  0100               	movlb	0	; () banked
  3079  001760  17A5               	andwf	___ftdiv@sign& (0+255),f,b
  3080                           
  3081                           ; BSR set to: 0
  3082  001762  0100               	movlb	0	; () banked
  3083  001764  8F98               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  3084                           
  3085                           ; BSR set to: 0
  3086  001766  0EFF               	movlw	255
  3087  001768  0100               	movlb	0	; () banked
  3088  00176A  1797               	andwf	___ftdiv@f1& (0+255),f,b
  3089  00176C  0EFF               	movlw	255
  3090  00176E  0100               	movlb	0	; () banked
  3091  001770  1798               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  3092  001772  0E00               	movlw	0
  3093  001774  0100               	movlb	0	; () banked
  3094  001776  1799               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  3095                           
  3096                           ; BSR set to: 0
  3097  001778  0100               	movlb	0	; () banked
  3098  00177A  8F9B               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  3099                           
  3100                           ; BSR set to: 0
  3101  00177C  0EFF               	movlw	255
  3102  00177E  0100               	movlb	0	; () banked
  3103  001780  179A               	andwf	___ftdiv@f2& (0+255),f,b
  3104  001782  0EFF               	movlw	255
  3105  001784  0100               	movlb	0	; () banked
  3106  001786  179B               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  3107  001788  0E00               	movlw	0
  3108  00178A  0100               	movlb	0	; () banked
  3109  00178C  179C               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  3110                           
  3111                           ; BSR set to: 0
  3112  00178E  0E18               	movlw	24
  3113  001790  0100               	movlb	0	; () banked
  3114  001792  6FA0               	movwf	___ftdiv@cntr& (0+255),b
  3115  001794                     l3849:
  3116                           
  3117                           ; BSR set to: 0
  3118  001794  0100               	movlb	0	; () banked
  3119  001796  90D8               	bcf	status,0,c
  3120  001798  37A1               	rlcf	___ftdiv@f3& (0+255),f,b
  3121  00179A  37A2               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  3122  00179C  37A3               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  3123                           
  3124                           ; BSR set to: 0
  3125  00179E  0100               	movlb	0	; () banked
  3126  0017A0  519A               	movf	___ftdiv@f2& (0+255),w,b
  3127  0017A2  0100               	movlb	0	; () banked
  3128  0017A4  5D97               	subwf	___ftdiv@f1& (0+255),w,b
  3129  0017A6  0100               	movlb	0	; () banked
  3130  0017A8  519B               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3131  0017AA  0100               	movlb	0	; () banked
  3132  0017AC  5998               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  3133  0017AE  0100               	movlb	0	; () banked
  3134  0017B0  519C               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3135  0017B2  0100               	movlb	0	; () banked
  3136  0017B4  5999               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  3137  0017B6  A0D8               	btfss	status,0,c
  3138  0017B8  D00E               	goto	l893
  3139                           
  3140                           ; BSR set to: 0
  3141  0017BA  0100               	movlb	0	; () banked
  3142  0017BC  519A               	movf	___ftdiv@f2& (0+255),w,b
  3143  0017BE  0100               	movlb	0	; () banked
  3144  0017C0  5F97               	subwf	___ftdiv@f1& (0+255),f,b
  3145  0017C2  0100               	movlb	0	; () banked
  3146  0017C4  519B               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3147  0017C6  0100               	movlb	0	; () banked
  3148  0017C8  5B98               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  3149  0017CA  0100               	movlb	0	; () banked
  3150  0017CC  519C               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3151  0017CE  0100               	movlb	0	; () banked
  3152  0017D0  5B99               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  3153                           
  3154                           ; BSR set to: 0
  3155  0017D2  0100               	movlb	0	; () banked
  3156  0017D4  81A1               	bsf	___ftdiv@f3& (0+255),0,b
  3157  0017D6                     l893:
  3158                           
  3159                           ; BSR set to: 0
  3160  0017D6  0100               	movlb	0	; () banked
  3161  0017D8  90D8               	bcf	status,0,c
  3162  0017DA  3797               	rlcf	___ftdiv@f1& (0+255),f,b
  3163  0017DC  3798               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  3164  0017DE  3799               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  3165                           
  3166                           ; BSR set to: 0
  3167  0017E0  0100               	movlb	0	; () banked
  3168  0017E2  2FA0               	decfsz	___ftdiv@cntr& (0+255),f,b
  3169  0017E4  D7D7               	goto	l3849
  3170                           
  3171                           ; BSR set to: 0
  3172                           
  3173                           ; BSR set to: 0
  3174  0017E6  C0A1  F080         	movff	___ftdiv@f3,___ftpack@arg
  3175  0017EA  C0A2  F081         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3176  0017EE  C0A3  F082         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3177  0017F2  C0A4  F083         	movff	___ftdiv@exp,___ftpack@exp
  3178  0017F6  C0A5  F084         	movff	___ftdiv@sign,___ftpack@sign
  3179  0017FA  EC07  F00F         	call	___ftpack	;wreg free
  3180  0017FE  C080  F097         	movff	?___ftpack,?___ftdiv
  3181  001802  C081  F098         	movff	?___ftpack+1,?___ftdiv+1
  3182  001806  C082  F099         	movff	?___ftpack+2,?___ftdiv+2
  3183  00180A  0012               	return	
  3184  00180C                     __end_of___ftdiv:
  3185                           	opt stack 0
  3186                           tblptru	equ	0xFF8
  3187                           tblptrh	equ	0xFF7
  3188                           tblptrl	equ	0xFF6
  3189                           tablat	equ	0xFF5
  3190                           intcon	equ	0xFF2
  3191                           intcon2	equ	0xFF1
  3192                           postinc0	equ	0xFEE
  3193                           wreg	equ	0xFE8
  3194                           postdec1	equ	0xFE5
  3195                           fsr1l	equ	0xFE1
  3196                           status	equ	0xFD8
  3197                           
  3198 ;; *************** function ___ftpack *****************
  3199 ;; Defined at:
  3200 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
  3201 ;; Parameters:    Size  Location     Type
  3202 ;;  arg             3    0[BANK0 ] unsigned um
  3203 ;;  exp             1    3[BANK0 ] unsigned char 
  3204 ;;  sign            1    4[BANK0 ] unsigned char 
  3205 ;; Auto vars:     Size  Location     Type
  3206 ;;		None
  3207 ;; Return value:  Size  Location     Type
  3208 ;;                  3    0[BANK0 ] float 
  3209 ;; Registers used:
  3210 ;;		wreg, status,2, status,0
  3211 ;; Tracked objects:
  3212 ;;		On entry : 0/0
  3213 ;;		On exit  : 0/0
  3214 ;;		Unchanged: 0/0
  3215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3216 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3218 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3219 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;Total ram usage:        8 bytes
  3221 ;; Hardware stack levels used:    1
  3222 ;; Hardware stack levels required when called:    6
  3223 ;; This function calls:
  3224 ;;		Nothing
  3225 ;; This function is called by:
  3226 ;;		___ftdiv
  3227 ;;		___ftmul
  3228 ;; This function uses a non-reentrant model
  3229 ;;
  3230                           
  3231                           	psect	text8
  3232  001E0E                     __ptext8:
  3233                           	opt stack 0
  3234  001E0E                     ___ftpack:
  3235                           	opt stack 21
  3236                           
  3237                           ;incstack = 0
  3238  001E0E  0100               	movlb	0	; () banked
  3239  001E10  5183               	movf	___ftpack@exp& (0+255),w,b
  3240  001E12  0100               	movlb	0	; () banked
  3241  001E14  B4D8               	btfsc	status,2,c
  3242  001E16  D008               	goto	l3489
  3243                           
  3244                           ; BSR set to: 0
  3245  001E18  0100               	movlb	0	; () banked
  3246  001E1A  5180               	movf	___ftpack@arg& (0+255),w,b
  3247  001E1C  0100               	movlb	0	; () banked
  3248  001E1E  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  3249  001E20  0100               	movlb	0	; () banked
  3250  001E22  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  3251  001E24  A4D8               	btfss	status,2,c
  3252  001E26  D011               	goto	l3495
  3253  001E28                     l3489:
  3254                           
  3255                           ; BSR set to: 0
  3256  001E28  0E00               	movlw	0
  3257  001E2A  0100               	movlb	0	; () banked
  3258  001E2C  6F80               	movwf	?___ftpack& (0+255),b
  3259  001E2E  0E00               	movlw	0
  3260  001E30  0100               	movlb	0	; () banked
  3261  001E32  6F81               	movwf	(?___ftpack+1)& (0+255),b
  3262  001E34  0E00               	movlw	0
  3263  001E36  0100               	movlb	0	; () banked
  3264  001E38  6F82               	movwf	(?___ftpack+2)& (0+255),b
  3265                           
  3266                           ; BSR set to: 0
  3267  001E3A  0012               	return	
  3268  001E3C                     l3493:
  3269                           
  3270                           ; BSR set to: 0
  3271  001E3C  0100               	movlb	0	; () banked
  3272  001E3E  2B83               	incf	___ftpack@exp& (0+255),f,b
  3273  001E40  0100               	movlb	0	; () banked
  3274  001E42  90D8               	bcf	status,0,c
  3275  001E44  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  3276  001E46  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  3277  001E48  3380               	rrcf	___ftpack@arg& (0+255),f,b
  3278  001E4A                     l3495:
  3279                           
  3280                           ; BSR set to: 0
  3281  001E4A  0E00               	movlw	0
  3282  001E4C  0100               	movlb	0	; () banked
  3283  001E4E  1580               	andwf	___ftpack@arg& (0+255),w,b
  3284  001E50  0100               	movlb	0	; () banked
  3285  001E52  6F85               	movwf	??___ftpack& (0+255),b
  3286  001E54  0E00               	movlw	0
  3287  001E56  0100               	movlb	0	; () banked
  3288  001E58  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  3289  001E5A  0100               	movlb	0	; () banked
  3290  001E5C  6F86               	movwf	(??___ftpack+1)& (0+255),b
  3291  001E5E  0EFE               	movlw	254
  3292  001E60  0100               	movlb	0	; () banked
  3293  001E62  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  3294  001E64  0100               	movlb	0	; () banked
  3295  001E66  6F87               	movwf	(??___ftpack+2)& (0+255),b
  3296  001E68  0100               	movlb	0	; () banked
  3297  001E6A  5185               	movf	??___ftpack& (0+255),w,b
  3298  001E6C  0100               	movlb	0	; () banked
  3299  001E6E  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  3300  001E70  0100               	movlb	0	; () banked
  3301  001E72  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  3302  001E74  B4D8               	btfsc	status,2,c
  3303  001E76  D011               	goto	l3501
  3304  001E78  D7E1               	goto	l3493
  3305  001E7A                     l3497:
  3306                           
  3307                           ; BSR set to: 0
  3308  001E7A  0100               	movlb	0	; () banked
  3309  001E7C  2B83               	incf	___ftpack@exp& (0+255),f,b
  3310                           
  3311                           ; BSR set to: 0
  3312  001E7E  0E01               	movlw	1
  3313  001E80  0100               	movlb	0	; () banked
  3314  001E82  2780               	addwf	___ftpack@arg& (0+255),f,b
  3315  001E84  0E00               	movlw	0
  3316  001E86  0100               	movlb	0	; () banked
  3317  001E88  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  3318  001E8A  0E00               	movlw	0
  3319  001E8C  0100               	movlb	0	; () banked
  3320  001E8E  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  3321  001E90  0100               	movlb	0	; () banked
  3322  001E92  90D8               	bcf	status,0,c
  3323  001E94  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  3324  001E96  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  3325  001E98  3380               	rrcf	___ftpack@arg& (0+255),f,b
  3326  001E9A                     l3501:
  3327                           
  3328                           ; BSR set to: 0
  3329  001E9A  0E00               	movlw	0
  3330  001E9C  0100               	movlb	0	; () banked
  3331  001E9E  1580               	andwf	___ftpack@arg& (0+255),w,b
  3332  001EA0  0100               	movlb	0	; () banked
  3333  001EA2  6F85               	movwf	??___ftpack& (0+255),b
  3334  001EA4  0E00               	movlw	0
  3335  001EA6  0100               	movlb	0	; () banked
  3336  001EA8  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  3337  001EAA  0100               	movlb	0	; () banked
  3338  001EAC  6F86               	movwf	(??___ftpack+1)& (0+255),b
  3339  001EAE  0EFF               	movlw	255
  3340  001EB0  0100               	movlb	0	; () banked
  3341  001EB2  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  3342  001EB4  0100               	movlb	0	; () banked
  3343  001EB6  6F87               	movwf	(??___ftpack+2)& (0+255),b
  3344  001EB8  0100               	movlb	0	; () banked
  3345  001EBA  5185               	movf	??___ftpack& (0+255),w,b
  3346  001EBC  0100               	movlb	0	; () banked
  3347  001EBE  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  3348  001EC0  0100               	movlb	0	; () banked
  3349  001EC2  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  3350  001EC4  B4D8               	btfsc	status,2,c
  3351  001EC6  D008               	goto	l3505
  3352  001EC8  D7D8               	goto	l3497
  3353  001ECA                     l3503:
  3354                           
  3355                           ; BSR set to: 0
  3356  001ECA  0100               	movlb	0	; () banked
  3357  001ECC  0783               	decf	___ftpack@exp& (0+255),f,b
  3358  001ECE  0100               	movlb	0	; () banked
  3359  001ED0  90D8               	bcf	status,0,c
  3360  001ED2  3780               	rlcf	___ftpack@arg& (0+255),f,b
  3361  001ED4  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  3362  001ED6  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  3363  001ED8                     l3505:
  3364                           
  3365                           ; BSR set to: 0
  3366  001ED8  0100               	movlb	0	; () banked
  3367  001EDA  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  3368  001EDC  D004               	goto	l835
  3369                           
  3370                           ; BSR set to: 0
  3371  001EDE  0E02               	movlw	2
  3372  001EE0  0100               	movlb	0	; () banked
  3373  001EE2  6183               	cpfslt	___ftpack@exp& (0+255),b
  3374  001EE4  D7F2               	goto	l3503
  3375  001EE6                     l835:
  3376                           
  3377                           ; BSR set to: 0
  3378  001EE6  0100               	movlb	0	; () banked
  3379  001EE8  B183               	btfsc	___ftpack@exp& (0+255),0,b
  3380  001EEA  D002               	goto	l3511
  3381                           
  3382                           ; BSR set to: 0
  3383  001EEC  0100               	movlb	0	; () banked
  3384  001EEE  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  3385  001EF0                     l3511:
  3386                           
  3387                           ; BSR set to: 0
  3388  001EF0  0100               	movlb	0	; () banked
  3389  001EF2  90D8               	bcf	status,0,c
  3390  001EF4  3383               	rrcf	___ftpack@exp& (0+255),f,b
  3391  001EF6  0100               	movlb	0	; () banked
  3392  001EF8  5183               	movf	___ftpack@exp& (0+255),w,b
  3393  001EFA  0100               	movlb	0	; () banked
  3394  001EFC  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  3395                           
  3396                           ; BSR set to: 0
  3397  001EFE  0100               	movlb	0	; () banked
  3398  001F00  5184               	movf	___ftpack@sign& (0+255),w,b
  3399  001F02  0100               	movlb	0	; () banked
  3400  001F04  B4D8               	btfsc	status,2,c
  3401  001F06  D002               	goto	l3517
  3402                           
  3403                           ; BSR set to: 0
  3404  001F08  0100               	movlb	0	; () banked
  3405  001F0A  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  3406  001F0C                     l3517:
  3407                           
  3408                           ; BSR set to: 0
  3409  001F0C  C080  F080         	movff	___ftpack@arg,?___ftpack
  3410  001F10  C081  F081         	movff	___ftpack@arg+1,?___ftpack+1
  3411  001F14  C082  F082         	movff	___ftpack@arg+2,?___ftpack+2
  3412  001F18  0012               	return	
  3413  001F1A                     __end_of___ftpack:
  3414                           	opt stack 0
  3415                           tblptru	equ	0xFF8
  3416                           tblptrh	equ	0xFF7
  3417                           tblptrl	equ	0xFF6
  3418                           tablat	equ	0xFF5
  3419                           intcon	equ	0xFF2
  3420                           intcon2	equ	0xFF1
  3421                           postinc0	equ	0xFEE
  3422                           wreg	equ	0xFE8
  3423                           postdec1	equ	0xFE5
  3424                           fsr1l	equ	0xFE1
  3425                           status	equ	0xFD8
  3426                           
  3427 ;; *************** function _initializeLcdScreen *****************
  3428 ;; Defined at:
  3429 ;;		line 133 in file "main.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;		None
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;		None
  3434 ;; Return value:  Size  Location     Type
  3435 ;;                  1    wreg      void 
  3436 ;; Registers used:
  3437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3438 ;; Tracked objects:
  3439 ;;		On entry : 0/0
  3440 ;;		On exit  : 0/0
  3441 ;;		Unchanged: 0/0
  3442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3447 ;;Total ram usage:        0 bytes
  3448 ;; Hardware stack levels used:    1
  3449 ;; Hardware stack levels required when called:   12
  3450 ;; This function calls:
  3451 ;;		_displayMainProgramLcdScreen
  3452 ;;		_initializeLcdSettings
  3453 ;; This function is called by:
  3454 ;;		_initializePicSettings
  3455 ;; This function uses a non-reentrant model
  3456 ;;
  3457                           
  3458                           	psect	text9
  3459  00303E                     __ptext9:
  3460                           	opt stack 0
  3461  00303E                     _initializeLcdScreen:
  3462                           	opt stack 17
  3463                           
  3464                           ;main.c: 134: initializeLcdSettings();
  3465                           
  3466                           ; BSR set to: 0
  3467                           ;incstack = 0
  3468  00303E  EC58  F016         	call	_initializeLcdSettings	;wreg free
  3469                           
  3470                           ;main.c: 135: displayMainProgramLcdScreen(0);
  3471  003042  0E00               	movlw	0
  3472  003044  0100               	movlb	0	; () banked
  3473  003046  6FAD               	movwf	(?_displayMainProgramLcdScreen+1)& (0+255),b
  3474  003048  0E00               	movlw	0
  3475  00304A  6FAC               	movwf	?_displayMainProgramLcdScreen& (0+255),b
  3476  00304C  EC4D  F013         	call	_displayMainProgramLcdScreen	;wreg free
  3477  003050  0012               	return		;funcret
  3478  003052                     __end_of_initializeLcdScreen:
  3479                           	opt stack 0
  3480                           tblptru	equ	0xFF8
  3481                           tblptrh	equ	0xFF7
  3482                           tblptrl	equ	0xFF6
  3483                           tablat	equ	0xFF5
  3484                           intcon	equ	0xFF2
  3485                           intcon2	equ	0xFF1
  3486                           postinc0	equ	0xFEE
  3487                           wreg	equ	0xFE8
  3488                           postdec1	equ	0xFE5
  3489                           fsr1l	equ	0xFE1
  3490                           status	equ	0xFD8
  3491                           
  3492 ;; *************** function _initializeLcdSettings *****************
  3493 ;; Defined at:
  3494 ;;		line 14 in file "lcd.c"
  3495 ;; Parameters:    Size  Location     Type
  3496 ;;		None
  3497 ;; Auto vars:     Size  Location     Type
  3498 ;;		None
  3499 ;; Return value:  Size  Location     Type
  3500 ;;                  1    wreg      void 
  3501 ;; Registers used:
  3502 ;;		wreg, status,2, status,0, cstack
  3503 ;; Tracked objects:
  3504 ;;		On entry : 0/0
  3505 ;;		On exit  : 0/0
  3506 ;;		Unchanged: 0/0
  3507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3510 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3511 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;Total ram usage:        1 bytes
  3513 ;; Hardware stack levels used:    1
  3514 ;; Hardware stack levels required when called:    8
  3515 ;; This function calls:
  3516 ;;		_lcdInst
  3517 ;; This function is called by:
  3518 ;;		_initializeLcdScreen
  3519 ;; This function uses a non-reentrant model
  3520 ;;
  3521                           
  3522                           	psect	text10
  3523  002CB0                     __ptext10:
  3524                           	opt stack 0
  3525  002CB0                     _initializeLcdSettings:
  3526                           	opt stack 20
  3527                           
  3528                           ;lcd.c: 15: _delay((unsigned long)((15)*(8000000/4000.0)));
  3529                           
  3530                           ;incstack = 0
  3531  002CB0  0E27               	movlw	39
  3532  002CB2  0100               	movlb	0	; () banked
  3533  002CB4  6F83               	movwf	??_initializeLcdSettings& (0+255),b
  3534  002CB6  0EF5               	movlw	245
  3535  002CB8                     u8767:
  3536  002CB8  2EE8               	decfsz	wreg,f,c
  3537  002CBA  D7FE               	bra	u8767
  3538  002CBC  2F83               	decfsz	??_initializeLcdSettings& (0+255),f,b
  3539  002CBE  D7FC               	bra	u8767
  3540                           
  3541                           ;lcd.c: 16: lcdInst(0b00110011);
  3542  002CC0  0E33               	movlw	51
  3543  002CC2  EC46  F018         	call	_lcdInst
  3544                           
  3545                           ;lcd.c: 17: lcdInst(0b00110010);
  3546  002CC6  0E32               	movlw	50
  3547  002CC8  EC46  F018         	call	_lcdInst
  3548                           
  3549                           ;lcd.c: 18: lcdInst(0b00101000);
  3550  002CCC  0E28               	movlw	40
  3551  002CCE  EC46  F018         	call	_lcdInst
  3552                           
  3553                           ;lcd.c: 19: lcdInst(0b00001111);
  3554  002CD2  0E0F               	movlw	15
  3555  002CD4  EC46  F018         	call	_lcdInst
  3556                           
  3557                           ;lcd.c: 20: lcdInst(0b00000110);
  3558  002CD8  0E06               	movlw	6
  3559  002CDA  EC46  F018         	call	_lcdInst
  3560                           
  3561                           ;lcd.c: 21: lcdInst(0b00000001);
  3562  002CDE  0E01               	movlw	1
  3563  002CE0  EC46  F018         	call	_lcdInst
  3564                           
  3565                           ;lcd.c: 22: _delay((unsigned long)((15)*(8000000/4000.0)));
  3566  002CE4  0E27               	movlw	39
  3567  002CE6  0100               	movlb	0	; () banked
  3568  002CE8  6F83               	movwf	??_initializeLcdSettings& (0+255),b
  3569  002CEA  0EF5               	movlw	245
  3570  002CEC                     u8777:
  3571  002CEC  2EE8               	decfsz	wreg,f,c
  3572  002CEE  D7FE               	bra	u8777
  3573  002CF0  2F83               	decfsz	??_initializeLcdSettings& (0+255),f,b
  3574  002CF2  D7FC               	bra	u8777
  3575  002CF4  0012               	return		;funcret
  3576  002CF6                     __end_of_initializeLcdSettings:
  3577                           	opt stack 0
  3578                           tblptru	equ	0xFF8
  3579                           tblptrh	equ	0xFF7
  3580                           tblptrl	equ	0xFF6
  3581                           tablat	equ	0xFF5
  3582                           intcon	equ	0xFF2
  3583                           intcon2	equ	0xFF1
  3584                           postinc0	equ	0xFEE
  3585                           wreg	equ	0xFE8
  3586                           postdec1	equ	0xFE5
  3587                           fsr1l	equ	0xFE1
  3588                           status	equ	0xFD8
  3589                           
  3590 ;; *************** function _enterSelectedSubProgramFromMainProgram *****************
  3591 ;; Defined at:
  3592 ;;		line 154 in file "main.c"
  3593 ;; Parameters:    Size  Location     Type
  3594 ;;		None
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;		None
  3597 ;; Return value:  Size  Location     Type
  3598 ;;                  1    wreg      void 
  3599 ;; Registers used:
  3600 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3601 ;; Tracked objects:
  3602 ;;		On entry : 0/0
  3603 ;;		On exit  : 0/0
  3604 ;;		Unchanged: 0/0
  3605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3608 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3609 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3610 ;;Total ram usage:        2 bytes
  3611 ;; Hardware stack levels used:    1
  3612 ;; Hardware stack levels required when called:   14
  3613 ;; This function calls:
  3614 ;;		_EEPROM
  3615 ;;		_displayMainProgramLcdScreen
  3616 ;;		_operation
  3617 ;;		_past_run_access
  3618 ;;		_pushBottle
  3619 ;; This function is called by:
  3620 ;;		_main
  3621 ;; This function uses a non-reentrant model
  3622 ;;
  3623                           
  3624                           	psect	text11
  3625  002BD0                     __ptext11:
  3626                           	opt stack 0
  3627  002BD0                     _enterSelectedSubProgramFromMainProgram:
  3628                           	opt stack 16
  3629                           
  3630                           ;main.c: 155: switch(currentMainProgramScreen){
  3631                           
  3632                           ;incstack = 0
  3633  002BD0  D00C               	goto	l8111
  3634  002BD2                     l8101:
  3635  002BD2  EC1A  F006         	call	_operation	;wreg free
  3636                           
  3637                           ;main.c: 157: break;
  3638  002BD6  D020               	goto	l8113
  3639  002BD8                     l8103:
  3640  002BD8  EC60  F018         	call	_pushBottle	;wreg free
  3641                           
  3642                           ;main.c: 159: break;
  3643  002BDC  D01D               	goto	l8113
  3644  002BDE                     l8105:
  3645  002BDE  ECC9  F008         	call	_EEPROM	;wreg free
  3646                           
  3647                           ;main.c: 161: break;
  3648  002BE2  D01A               	goto	l8113
  3649  002BE4                     l8107:
  3650  002BE4  EC46  F012         	call	_past_run_access	;wreg free
  3651                           
  3652                           ;main.c: 164: }
  3653                           
  3654                           ;main.c: 163: break;
  3655  002BE8  D017               	goto	l8113
  3656  002BEA                     l8111:
  3657  002BEA  C0E7  F0D4         	movff	_currentMainProgramScreen,??_enterSelectedSubProgramFromMainProgram
  3658  002BEE  C0E8  F0D5         	movff	_currentMainProgramScreen+1,??_enterSelectedSubProgramFromMainProgram+1
  3659                           
  3660                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3661                           ; Switch size 1, requested type "space"
  3662                           ; Number of cases is 1, Range of values is 0 to 0
  3663                           ; switch strategies available:
  3664                           ; Name         Instructions Cycles
  3665                           ; simple_byte            4     3 (average)
  3666                           ;	Chosen strategy is simple_byte
  3667  002BF2  0100               	movlb	0	; () banked
  3668  002BF4  51D5               	movf	(??_enterSelectedSubProgramFromMainProgram+1)& (0+255),w,b
  3669  002BF6  0A00               	xorlw	0	; case 0
  3670  002BF8  A4D8               	btfss	status,2,c
  3671  002BFA  D00E               	goto	l8113
  3672                           
  3673                           ; BSR set to: 0
  3674                           ; Switch size 1, requested type "space"
  3675                           ; Number of cases is 4, Range of values is 0 to 3
  3676                           ; switch strategies available:
  3677                           ; Name         Instructions Cycles
  3678                           ; simple_byte           13     7 (average)
  3679                           ;	Chosen strategy is simple_byte
  3680  002BFC  0100               	movlb	0	; () banked
  3681  002BFE  51D4               	movf	??_enterSelectedSubProgramFromMainProgram& (0+255),w,b
  3682  002C00  0A00               	xorlw	0	; case 0
  3683  002C02  B4D8               	btfsc	status,2,c
  3684  002C04  D7E6               	goto	l8101
  3685  002C06  0A01               	xorlw	1	; case 1
  3686  002C08  B4D8               	btfsc	status,2,c
  3687  002C0A  D7E6               	goto	l8103
  3688  002C0C  0A03               	xorlw	3	; case 2
  3689  002C0E  B4D8               	btfsc	status,2,c
  3690  002C10  D7E6               	goto	l8105
  3691  002C12  0A01               	xorlw	1	; case 3
  3692  002C14  B4D8               	btfsc	status,2,c
  3693  002C16  D7E6               	goto	l8107
  3694  002C18                     l8113:
  3695                           
  3696                           ;main.c: 165: displayMainProgramLcdScreen();
  3697  002C18  EC4D  F013         	call	_displayMainProgramLcdScreen	;wreg free
  3698  002C1C  0012               	return		;funcret
  3699  002C1E                     __end_of_enterSelectedSubProgramFromMainProgram:
  3700                           	opt stack 0
  3701                           tblptru	equ	0xFF8
  3702                           tblptrh	equ	0xFF7
  3703                           tblptrl	equ	0xFF6
  3704                           tablat	equ	0xFF5
  3705                           intcon	equ	0xFF2
  3706                           intcon2	equ	0xFF1
  3707                           postinc0	equ	0xFEE
  3708                           wreg	equ	0xFE8
  3709                           postdec1	equ	0xFE5
  3710                           fsr1l	equ	0xFE1
  3711                           status	equ	0xFD8
  3712                           
  3713 ;; *************** function _pushBottle *****************
  3714 ;; Defined at:
  3715 ;;		line 474 in file "main.c"
  3716 ;; Parameters:    Size  Location     Type
  3717 ;;		None
  3718 ;; Auto vars:     Size  Location     Type
  3719 ;;		None
  3720 ;; Return value:  Size  Location     Type
  3721 ;;                  1    wreg      void 
  3722 ;; Registers used:
  3723 ;;		wreg, status,2, status,0, cstack
  3724 ;; Tracked objects:
  3725 ;;		On entry : 0/0
  3726 ;;		On exit  : 0/0
  3727 ;;		Unchanged: 0/0
  3728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3730 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3732 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3733 ;;Total ram usage:        0 bytes
  3734 ;; Hardware stack levels used:    1
  3735 ;; Hardware stack levels required when called:    7
  3736 ;; This function calls:
  3737 ;;		_extendSensorAreaArm
  3738 ;;		_retractSensorAreaArm
  3739 ;; This function is called by:
  3740 ;;		_enterSelectedSubProgramFromMainProgram
  3741 ;; This function uses a non-reentrant model
  3742 ;;
  3743                           
  3744                           	psect	text12
  3745  0030C0                     __ptext12:
  3746                           	opt stack 0
  3747  0030C0                     _pushBottle:
  3748                           	opt stack 22
  3749                           
  3750                           ;main.c: 475: retractSensorAreaArm();
  3751                           
  3752                           ;incstack = 0
  3753  0030C0  EC12  F014         	call	_retractSensorAreaArm	;wreg free
  3754                           
  3755                           ;main.c: 476: extendSensorAreaArm();
  3756  0030C4  EC34  F016         	call	_extendSensorAreaArm	;wreg free
  3757  0030C8  0012               	return		;funcret
  3758  0030CA                     __end_of_pushBottle:
  3759                           	opt stack 0
  3760                           tblptru	equ	0xFF8
  3761                           tblptrh	equ	0xFF7
  3762                           tblptrl	equ	0xFF6
  3763                           tablat	equ	0xFF5
  3764                           intcon	equ	0xFF2
  3765                           intcon2	equ	0xFF1
  3766                           postinc0	equ	0xFEE
  3767                           wreg	equ	0xFE8
  3768                           postdec1	equ	0xFE5
  3769                           fsr1l	equ	0xFE1
  3770                           status	equ	0xFD8
  3771                           
  3772 ;; *************** function _operation *****************
  3773 ;; Defined at:
  3774 ;;		line 312 in file "main.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;		None
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;  bottle          2   61[BANK0 ] int 
  3779 ;;  temp            1   56[BANK0 ] unsigned char 
  3780 ;;  i               2   63[BANK0 ] int 
  3781 ;;  bottle_cap      2   59[BANK0 ] int 
  3782 ;;  bottle_type     2   57[BANK0 ] int 
  3783 ;;  endingTime      2   54[BANK0 ] int 
  3784 ;;  startingTime    2   52[BANK0 ] int 
  3785 ;; Return value:  Size  Location     Type
  3786 ;;                  1    wreg      void 
  3787 ;; Registers used:
  3788 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3795 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3796 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3797 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3798 ;;Total ram usage:       15 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; Hardware stack levels required when called:   11
  3801 ;; This function calls:
  3802 ;;		_activateDCmotors
  3803 ;;		_disableDCmotors
  3804 ;;		_extendSensorAreaArm
  3805 ;;		_getCurrentTimeInSeconds
  3806 ;;		_getPressedKeypadKey
  3807 ;;		_lcdClear
  3808 ;;		_lcdInst
  3809 ;;		_moveBinServo
  3810 ;;		_printf
  3811 ;;		_retractSensorAreaArm
  3812 ;;		_saveEEPROM
  3813 ;;		_updateCurrentTime
  3814 ;; This function is called by:
  3815 ;;		_enterSelectedSubProgramFromMainProgram
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819                           	psect	text13
  3820  000C34                     __ptext13:
  3821                           	opt stack 0
  3822  000C34                     _operation:
  3823                           	opt stack 18
  3824                           
  3825                           ;main.c: 313: activateDCmotors();
  3826                           
  3827                           ;incstack = 0
  3828  000C34  EC73  F018         	call	_activateDCmotors	;wreg free
  3829                           
  3830                           ;main.c: 315: int bottle_type = 0;
  3831  000C38  0E00               	movlw	0
  3832  000C3A  0100               	movlb	0	; () banked
  3833  000C3C  6FBA               	movwf	(operation@bottle_type+1)& (0+255),b
  3834  000C3E  0E00               	movlw	0
  3835  000C40  6FB9               	movwf	operation@bottle_type& (0+255),b
  3836                           
  3837                           ; BSR set to: 0
  3838                           ;main.c: 316: int bottle_cap = 0;
  3839  000C42  0E00               	movlw	0
  3840  000C44  0100               	movlb	0	; () banked
  3841  000C46  6FBC               	movwf	(operation@bottle_cap+1)& (0+255),b
  3842  000C48  0E00               	movlw	0
  3843  000C4A  6FBB               	movwf	operation@bottle_cap& (0+255),b
  3844                           
  3845                           ; BSR set to: 0
  3846                           ;main.c: 317: int i;
  3847                           ;main.c: 318: for (i=0;i<6;i++){
  3848  000C4C  0E00               	movlw	0
  3849  000C4E  0100               	movlb	0	; () banked
  3850  000C50  6FC0               	movwf	(operation@i+1)& (0+255),b
  3851  000C52  0E00               	movlw	0
  3852  000C54  6FBF               	movwf	operation@i& (0+255),b
  3853  000C56                     l7903:
  3854                           
  3855                           ; BSR set to: 0
  3856  000C56  0100               	movlb	0	; () banked
  3857  000C58  BFC0               	btfsc	(operation@i+1)& (0+255),7,b
  3858  000C5A  D008               	goto	l7907
  3859  000C5C  0100               	movlb	0	; () banked
  3860  000C5E  51C0               	movf	(operation@i+1)& (0+255),w,b
  3861  000C60  E118               	bnz	l7913
  3862  000C62  0E06               	movlw	6
  3863  000C64  0100               	movlb	0	; () banked
  3864  000C66  5DBF               	subwf	operation@i& (0+255),w,b
  3865  000C68  B0D8               	btfsc	status,0,c
  3866  000C6A  D013               	goto	l7913
  3867  000C6C                     l7907:
  3868                           
  3869                           ; BSR set to: 0
  3870                           ;main.c: 319: runInfo[i] = 0;
  3871  000C6C  90D8               	bcf	status,0,c
  3872  000C6E  0100               	movlb	0	; () banked
  3873  000C70  35BF               	rlcf	operation@i& (0+255),w,b
  3874  000C72  6ED9               	movwf	fsr2l,c
  3875  000C74  0100               	movlb	0	; () banked
  3876  000C76  35C0               	rlcf	(operation@i+1)& (0+255),w,b
  3877  000C78  6EDA               	movwf	fsr2h,c
  3878  000C7A  0EE9               	movlw	low _runInfo
  3879  000C7C  26D9               	addwf	fsr2l,f,c
  3880  000C7E  0E00               	movlw	high _runInfo
  3881  000C80  22DA               	addwfc	fsr2h,f,c
  3882  000C82  0E00               	movlw	0
  3883  000C84  6EDE               	movwf	postinc2,c
  3884  000C86  0E00               	movlw	0
  3885  000C88  6EDD               	movwf	postdec2,c
  3886                           
  3887                           ; BSR set to: 0
  3888  000C8A  0100               	movlb	0	; () banked
  3889  000C8C  4BBF               	infsnz	operation@i& (0+255),f,b
  3890  000C8E  2BC0               	incf	(operation@i+1)& (0+255),f,b
  3891  000C90  D7E2               	goto	l7903
  3892  000C92                     l7913:
  3893                           
  3894                           ; BSR set to: 0
  3895                           ;main.c: 320: }
  3896                           ;main.c: 321: lcdClear();
  3897  000C92  EC4E  F017         	call	_lcdClear	;wreg free
  3898                           
  3899                           ;main.c: 322: printf("...Operating...");
  3900  000C96  0E30               	movlw	low STR_24
  3901  000C98  0100               	movlb	0	; () banked
  3902  000C9A  6F9E               	movwf	printf@f& (0+255),b
  3903  000C9C  0EFF               	movlw	high STR_24
  3904  000C9E  0100               	movlb	0	; () banked
  3905  000CA0  6F9F               	movwf	(printf@f+1)& (0+255),b
  3906  000CA2  EC0F  F016         	call	_printf	;wreg free
  3907                           
  3908                           ;main.c: 323: updateCurrentTime();
  3909  000CA6  ECD7  F013         	call	_updateCurrentTime	;wreg free
  3910                           
  3911                           ;main.c: 324: int startingTime = getCurrentTimeInSeconds();
  3912  000CAA  EC79  F00E         	call	_getCurrentTimeInSeconds	;wreg free
  3913  000CAE  C0AA  F0B4         	movff	?_getCurrentTimeInSeconds,operation@startingTime
  3914  000CB2  C0AB  F0B5         	movff	?_getCurrentTimeInSeconds+1,operation@startingTime+1
  3915                           
  3916                           ;main.c: 326: while (runInfo[1] < 10){
  3917  000CB6  D0B1               	goto	l7969
  3918  000CB8                     l7919:
  3919                           
  3920                           ;main.c: 327: lcdInst(0b11000000);;
  3921  000CB8  0EC0               	movlw	192
  3922  000CBA  EC46  F018         	call	_lcdInst
  3923                           
  3924                           ;main.c: 328: printf("NO BOTTLE    ");
  3925  000CBE  0E7F               	movlw	low STR_25
  3926  000CC0  0100               	movlb	0	; () banked
  3927  000CC2  6F9E               	movwf	printf@f& (0+255),b
  3928  000CC4  0EFF               	movlw	high STR_25
  3929  000CC6  0100               	movlb	0	; () banked
  3930  000CC8  6F9F               	movwf	(printf@f+1)& (0+255),b
  3931  000CCA  EC0F  F016         	call	_printf	;wreg free
  3932  000CCE                     l293:
  3933  000CCE  A080               	btfss	3968,0,c	;volatile
  3934  000CD0  D7FE               	goto	l293
  3935                           
  3936                           ;main.c: 330: if (PORTAbits.RA0){
  3937  000CD2  A080               	btfss	3968,0,c	;volatile
  3938  000CD4  D0A2               	goto	l7969
  3939                           
  3940                           ;main.c: 331: lcdInst(0b11000000);;
  3941  000CD6  0EC0               	movlw	192
  3942  000CD8  EC46  F018         	call	_lcdInst
  3943                           
  3944                           ;main.c: 332: printf("BOTTLE INSIDE   ");
  3945  000CDC  0EAB               	movlw	low STR_26
  3946  000CDE  0100               	movlb	0	; () banked
  3947  000CE0  6F9E               	movwf	printf@f& (0+255),b
  3948  000CE2  0EFE               	movlw	high STR_26
  3949  000CE4  0100               	movlb	0	; () banked
  3950  000CE6  6F9F               	movwf	(printf@f+1)& (0+255),b
  3951  000CE8  EC0F  F016         	call	_printf	;wreg free
  3952                           
  3953                           ;main.c: 333: retractSensorAreaArm();
  3954  000CEC  EC12  F014         	call	_retractSensorAreaArm	;wreg free
  3955                           
  3956                           ;main.c: 334: _delay((unsigned long)((1000)*(8000000/4000.0)));
  3957  000CF0  0E0B               	movlw	11
  3958  000CF2  0100               	movlb	0	; () banked
  3959  000CF4  6FB3               	movwf	(??_operation+1)& (0+255),b
  3960  000CF6  0E26               	movlw	38
  3961  000CF8  0100               	movlb	0	; () banked
  3962  000CFA  6FB2               	movwf	??_operation& (0+255),b
  3963  000CFC  0E5D               	movlw	93
  3964  000CFE                     u8787:
  3965  000CFE  2EE8               	decfsz	wreg,f,c
  3966  000D00  D7FE               	bra	u8787
  3967  000D02  2FB2               	decfsz	??_operation& (0+255),f,b
  3968  000D04  D7FC               	bra	u8787
  3969  000D06  2FB3               	decfsz	(??_operation+1)& (0+255),f,b
  3970  000D08  D7FA               	bra	u8787
  3971  000D0A  D000               	nop2	
  3972                           
  3973                           ;main.c: 335: if (PORTAbits.RA1 == 0){
  3974  000D0C  B280               	btfsc	3968,1,c	;volatile
  3975  000D0E  D010               	goto	l7939
  3976                           
  3977                           ;main.c: 336: lcdInst(0b11000000);;
  3978  000D10  0EC0               	movlw	192
  3979  000D12  EC46  F018         	call	_lcdInst
  3980                           
  3981                           ;main.c: 337: printf("YOP");
  3982  000D16  0EFB               	movlw	low STR_27
  3983  000D18  0100               	movlb	0	; () banked
  3984  000D1A  6F9E               	movwf	printf@f& (0+255),b
  3985  000D1C  0EFF               	movlw	high STR_27
  3986  000D1E  0100               	movlb	0	; () banked
  3987  000D20  6F9F               	movwf	(printf@f+1)& (0+255),b
  3988  000D22  EC0F  F016         	call	_printf	;wreg free
  3989                           
  3990                           ;main.c: 338: bottle_type = 0;
  3991  000D26  0E00               	movlw	0
  3992  000D28  0100               	movlb	0	; () banked
  3993  000D2A  6FBA               	movwf	(operation@bottle_type+1)& (0+255),b
  3994  000D2C  0E00               	movlw	0
  3995  000D2E  D00F               	goto	L1
  3996  000D30                     l7939:
  3997                           
  3998                           ;main.c: 340: lcdInst(0b11000000);;
  3999  000D30  0EC0               	movlw	192
  4000  000D32  EC46  F018         	call	_lcdInst
  4001                           
  4002                           ;main.c: 341: printf("ESKA");
  4003  000D36  0EF6               	movlw	low STR_28
  4004  000D38  0100               	movlb	0	; () banked
  4005  000D3A  6F9E               	movwf	printf@f& (0+255),b
  4006  000D3C  0EFF               	movlw	high STR_28
  4007  000D3E  0100               	movlb	0	; () banked
  4008  000D40  6F9F               	movwf	(printf@f+1)& (0+255),b
  4009  000D42  EC0F  F016         	call	_printf	;wreg free
  4010                           
  4011                           ;main.c: 342: bottle_type = 1;
  4012  000D46  0E00               	movlw	0
  4013  000D48  0100               	movlb	0	; () banked
  4014  000D4A  6FBA               	movwf	(operation@bottle_type+1)& (0+255),b
  4015  000D4C  0E01               	movlw	1
  4016  000D4E                     L1:
  4017  000D4E  6FB9               	movwf	operation@bottle_type& (0+255),b
  4018                           
  4019                           ; BSR set to: 0
  4020                           ;main.c: 343: }
  4021                           ;main.c: 344: if (PORTAbits.RA2 == 0||PORTAbits.RA3 == 0){
  4022                           
  4023                           ; BSR set to: 0
  4024  000D50  B480               	btfsc	3968,2,c	;volatile
  4025                           
  4026                           ; BSR set to: 0
  4027  000D52  A680               	btfss	3968,3,c	;volatile
  4028  000D54  D001               	goto	l7949
  4029  000D56  D00D               	goto	l7953
  4030  000D58                     l7949:
  4031                           
  4032                           ; BSR set to: 0
  4033                           ;main.c: 345: printf(" w/ Cap    ");
  4034  000D58  0EDF               	movlw	low STR_29
  4035  000D5A  0100               	movlb	0	; () banked
  4036  000D5C  6F9E               	movwf	printf@f& (0+255),b
  4037  000D5E  0EFF               	movlw	high STR_29
  4038  000D60  0100               	movlb	0	; () banked
  4039  000D62  6F9F               	movwf	(printf@f+1)& (0+255),b
  4040  000D64  EC0F  F016         	call	_printf	;wreg free
  4041                           
  4042                           ;main.c: 346: bottle_cap = 0;
  4043  000D68  0E00               	movlw	0
  4044  000D6A  0100               	movlb	0	; () banked
  4045  000D6C  6FBC               	movwf	(operation@bottle_cap+1)& (0+255),b
  4046  000D6E  0E00               	movlw	0
  4047  000D70  D00C               	goto	L2
  4048  000D72                     l7953:
  4049                           
  4050                           ; BSR set to: 0
  4051                           ;main.c: 348: printf(" w/o Cap    ");
  4052  000D72  0EC5               	movlw	low STR_30
  4053  000D74  0100               	movlb	0	; () banked
  4054  000D76  6F9E               	movwf	printf@f& (0+255),b
  4055  000D78  0EFF               	movlw	high STR_30
  4056  000D7A  0100               	movlb	0	; () banked
  4057  000D7C  6F9F               	movwf	(printf@f+1)& (0+255),b
  4058  000D7E  EC0F  F016         	call	_printf	;wreg free
  4059                           
  4060                           ;main.c: 349: bottle_cap = 1;
  4061  000D82  0E00               	movlw	0
  4062  000D84  0100               	movlb	0	; () banked
  4063  000D86  6FBC               	movwf	(operation@bottle_cap+1)& (0+255),b
  4064  000D88  0E01               	movlw	1
  4065  000D8A                     L2:
  4066  000D8A  6FBB               	movwf	operation@bottle_cap& (0+255),b
  4067                           
  4068                           ; BSR set to: 0
  4069                           ;main.c: 350: }
  4070                           ;main.c: 351: runInfo[1] += 1;
  4071                           
  4072                           ; BSR set to: 0
  4073  000D8C  0100               	movlb	0	; () banked
  4074  000D8E  4BEB               	infsnz	(_runInfo+2)& (0+255),f,b
  4075  000D90  2BEC               	incf	(_runInfo+3)& (0+255),f,b
  4076                           
  4077                           ; BSR set to: 0
  4078                           ;main.c: 352: int bottle = bottle_type*2 + bottle_cap + 2;
  4079  000D92  C0B9  F0B2         	movff	operation@bottle_type,??_operation
  4080  000D96  C0BA  F0B3         	movff	operation@bottle_type+1,??_operation+1
  4081  000D9A  90D8               	bcf	status,0,c
  4082  000D9C  0100               	movlb	0	; () banked
  4083  000D9E  37B2               	rlcf	??_operation& (0+255),f,b
  4084  000DA0  37B3               	rlcf	(??_operation+1)& (0+255),f,b
  4085  000DA2  0100               	movlb	0	; () banked
  4086  000DA4  51BB               	movf	operation@bottle_cap& (0+255),w,b
  4087  000DA6  0100               	movlb	0	; () banked
  4088  000DA8  27B2               	addwf	??_operation& (0+255),f,b
  4089  000DAA  0100               	movlb	0	; () banked
  4090  000DAC  51BC               	movf	(operation@bottle_cap+1)& (0+255),w,b
  4091  000DAE  0100               	movlb	0	; () banked
  4092  000DB0  23B3               	addwfc	(??_operation+1)& (0+255),f,b
  4093  000DB2  0E02               	movlw	2
  4094  000DB4  0100               	movlb	0	; () banked
  4095  000DB6  25B2               	addwf	??_operation& (0+255),w,b
  4096  000DB8  0100               	movlb	0	; () banked
  4097  000DBA  6FBD               	movwf	operation@bottle& (0+255),b
  4098  000DBC  0E00               	movlw	0
  4099  000DBE  0100               	movlb	0	; () banked
  4100  000DC0  21B3               	addwfc	(??_operation+1)& (0+255),w,b
  4101  000DC2  0100               	movlb	0	; () banked
  4102  000DC4  6FBE               	movwf	(operation@bottle+1)& (0+255),b
  4103                           
  4104                           ; BSR set to: 0
  4105                           ;main.c: 353: runInfo[bottle] += 1;
  4106  000DC6  90D8               	bcf	status,0,c
  4107  000DC8  0100               	movlb	0	; () banked
  4108  000DCA  35BD               	rlcf	operation@bottle& (0+255),w,b
  4109  000DCC  6ED9               	movwf	fsr2l,c
  4110  000DCE  0100               	movlb	0	; () banked
  4111  000DD0  35BE               	rlcf	(operation@bottle+1)& (0+255),w,b
  4112  000DD2  6EDA               	movwf	fsr2h,c
  4113  000DD4  0EE9               	movlw	low _runInfo
  4114  000DD6  26D9               	addwf	fsr2l,f,c
  4115  000DD8  0E00               	movlw	high _runInfo
  4116  000DDA  22DA               	addwfc	fsr2h,f,c
  4117  000DDC  2ADE               	incf	postinc2,f,c
  4118  000DDE  0E00               	movlw	0
  4119  000DE0  22DD               	addwfc	postdec2,f,c
  4120                           
  4121                           ; BSR set to: 0
  4122                           ;main.c: 355: _delay((unsigned long)((1000)*(8000000/4000.0)));
  4123  000DE2  0E0B               	movlw	11
  4124  000DE4  0100               	movlb	0	; () banked
  4125  000DE6  6FB3               	movwf	(??_operation+1)& (0+255),b
  4126  000DE8  0E26               	movlw	38
  4127  000DEA  0100               	movlb	0	; () banked
  4128  000DEC  6FB2               	movwf	??_operation& (0+255),b
  4129  000DEE  0E5D               	movlw	93
  4130  000DF0                     u8797:
  4131  000DF0  2EE8               	decfsz	wreg,f,c
  4132  000DF2  D7FE               	bra	u8797
  4133  000DF4  2FB2               	decfsz	??_operation& (0+255),f,b
  4134  000DF6  D7FC               	bra	u8797
  4135  000DF8  2FB3               	decfsz	(??_operation+1)& (0+255),f,b
  4136  000DFA  D7FA               	bra	u8797
  4137  000DFC  D000               	nop2	
  4138                           
  4139                           ;main.c: 356: moveBinServo(bottle - 2);
  4140  000DFE  0EFE               	movlw	254
  4141  000E00  0100               	movlb	0	; () banked
  4142  000E02  25BD               	addwf	operation@bottle& (0+255),w,b
  4143  000E04  0100               	movlb	0	; () banked
  4144  000E06  6F80               	movwf	moveBinServo@num& (0+255),b
  4145  000E08  0EFF               	movlw	255
  4146  000E0A  0100               	movlb	0	; () banked
  4147  000E0C  21BE               	addwfc	(operation@bottle+1)& (0+255),w,b
  4148  000E0E  0100               	movlb	0	; () banked
  4149  000E10  6F81               	movwf	(moveBinServo@num+1)& (0+255),b
  4150  000E12  EC46  F014         	call	_moveBinServo	;wreg free
  4151                           
  4152                           ;main.c: 357: extendSensorAreaArm();
  4153  000E16  EC34  F016         	call	_extendSensorAreaArm	;wreg free
  4154  000E1A                     l7969:
  4155  000E1A  0100               	movlb	0	; () banked
  4156  000E1C  BFEC               	btfsc	(_runInfo+3)& (0+255),7,b
  4157  000E1E  D74C               	goto	l7919
  4158  000E20  0100               	movlb	0	; () banked
  4159  000E22  51EC               	movf	(_runInfo+3)& (0+255),w,b
  4160  000E24  E105               	bnz	l7971
  4161  000E26  0E0A               	movlw	10
  4162  000E28  0100               	movlb	0	; () banked
  4163  000E2A  5DEB               	subwf	(_runInfo+2)& (0+255),w,b
  4164  000E2C  A0D8               	btfss	status,0,c
  4165  000E2E  D744               	goto	l7919
  4166  000E30                     l7971:
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;main.c: 358: }
  4170                           ;main.c: 359: }
  4171                           ;main.c: 360: disableDCmotors();
  4172  000E30  EC6F  F018         	call	_disableDCmotors	;wreg free
  4173                           
  4174                           ;main.c: 361: lcdClear();
  4175  000E34  EC4E  F017         	call	_lcdClear	;wreg free
  4176                           
  4177                           ;main.c: 362: printf("COMPLETED!!!     ");
  4178  000E38  0E54               	movlw	low STR_31
  4179  000E3A  0100               	movlb	0	; () banked
  4180  000E3C  6F9E               	movwf	printf@f& (0+255),b
  4181  000E3E  0EFE               	movlw	high STR_31
  4182  000E40  0100               	movlb	0	; () banked
  4183  000E42  6F9F               	movwf	(printf@f+1)& (0+255),b
  4184  000E44  EC0F  F016         	call	_printf	;wreg free
  4185                           
  4186                           ;main.c: 363: lcdInst(0b11000000);;
  4187  000E48  0EC0               	movlw	192
  4188  000E4A  EC46  F018         	call	_lcdInst
  4189                           
  4190                           ;main.c: 364: printf("A to back       ");
  4191  000E4E  0E9A               	movlw	low STR_32
  4192  000E50  0100               	movlb	0	; () banked
  4193  000E52  6F9E               	movwf	printf@f& (0+255),b
  4194  000E54  0EFE               	movlw	high STR_32
  4195  000E56  0100               	movlb	0	; () banked
  4196  000E58  6F9F               	movwf	(printf@f+1)& (0+255),b
  4197  000E5A  EC0F  F016         	call	_printf	;wreg free
  4198                           
  4199                           ;main.c: 365: updateCurrentTime();
  4200  000E5E  ECD7  F013         	call	_updateCurrentTime	;wreg free
  4201                           
  4202                           ;main.c: 366: int endingTime = getCurrentTimeInSeconds();
  4203  000E62  EC79  F00E         	call	_getCurrentTimeInSeconds	;wreg free
  4204  000E66  C0AA  F0B6         	movff	?_getCurrentTimeInSeconds,operation@endingTime
  4205  000E6A  C0AB  F0B7         	movff	?_getCurrentTimeInSeconds+1,operation@endingTime+1
  4206                           
  4207                           ;main.c: 367: runInfo[0] = endingTime - startingTime;
  4208  000E6E  C0B4  F0B2         	movff	operation@startingTime,??_operation
  4209  000E72  C0B5  F0B3         	movff	operation@startingTime+1,??_operation+1
  4210  000E76  0100               	movlb	0	; () banked
  4211  000E78  1FB2               	comf	??_operation& (0+255),f,b
  4212  000E7A  1FB3               	comf	(??_operation+1)& (0+255),f,b
  4213  000E7C  4BB2               	infsnz	??_operation& (0+255),f,b
  4214  000E7E  2BB3               	incf	(??_operation+1)& (0+255),f,b
  4215  000E80  0100               	movlb	0	; () banked
  4216  000E82  51B6               	movf	operation@endingTime& (0+255),w,b
  4217  000E84  0100               	movlb	0	; () banked
  4218  000E86  25B2               	addwf	??_operation& (0+255),w,b
  4219  000E88  0100               	movlb	0	; () banked
  4220  000E8A  6FE9               	movwf	_runInfo& (0+255),b
  4221  000E8C  0100               	movlb	0	; () banked
  4222  000E8E  51B7               	movf	(operation@endingTime+1)& (0+255),w,b
  4223  000E90  0100               	movlb	0	; () banked
  4224  000E92  21B3               	addwfc	(??_operation+1)& (0+255),w,b
  4225  000E94  0100               	movlb	0	; () banked
  4226  000E96  6FEA               	movwf	(_runInfo+1)& (0+255),b
  4227                           
  4228                           ; BSR set to: 0
  4229                           ;main.c: 368: for (i = 0; i<7;i++){
  4230  000E98  0E00               	movlw	0
  4231  000E9A  0100               	movlb	0	; () banked
  4232  000E9C  6FC0               	movwf	(operation@i+1)& (0+255),b
  4233  000E9E  0E00               	movlw	0
  4234  000EA0  6FBF               	movwf	operation@i& (0+255),b
  4235  000EA2                     l7989:
  4236                           
  4237                           ; BSR set to: 0
  4238  000EA2  0100               	movlb	0	; () banked
  4239  000EA4  BFC0               	btfsc	(operation@i+1)& (0+255),7,b
  4240  000EA6  D008               	goto	l7993
  4241  000EA8  0100               	movlb	0	; () banked
  4242  000EAA  51C0               	movf	(operation@i+1)& (0+255),w,b
  4243  000EAC  E11B               	bnz	l7999
  4244  000EAE  0E07               	movlw	7
  4245  000EB0  0100               	movlb	0	; () banked
  4246  000EB2  5DBF               	subwf	operation@i& (0+255),w,b
  4247  000EB4  B0D8               	btfsc	status,0,c
  4248  000EB6  D016               	goto	l7999
  4249  000EB8                     l7993:
  4250                           
  4251                           ; BSR set to: 0
  4252                           ;main.c: 369: lastRunTime[i] = time[i];
  4253  000EB8  0EE0               	movlw	low _time
  4254  000EBA  0100               	movlb	0	; () banked
  4255  000EBC  25BF               	addwf	operation@i& (0+255),w,b
  4256  000EBE  6ED9               	movwf	fsr2l,c
  4257  000EC0  0E00               	movlw	high _time
  4258  000EC2  0100               	movlb	0	; () banked
  4259  000EC4  21C0               	addwfc	(operation@i+1)& (0+255),w,b
  4260  000EC6  6EDA               	movwf	fsr2h,c
  4261  000EC8  0ED9               	movlw	low _lastRunTime
  4262  000ECA  0100               	movlb	0	; () banked
  4263  000ECC  25BF               	addwf	operation@i& (0+255),w,b
  4264  000ECE  6EE1               	movwf	fsr1l,c
  4265  000ED0  0E00               	movlw	high _lastRunTime
  4266  000ED2  0100               	movlb	0	; () banked
  4267  000ED4  21C0               	addwfc	(operation@i+1)& (0+255),w,b
  4268  000ED6  6EE2               	movwf	fsr1h,c
  4269  000ED8  CFDF FFE7          	movff	indf2,indf1
  4270                           
  4271                           ; BSR set to: 0
  4272  000EDC  0100               	movlb	0	; () banked
  4273  000EDE  4BBF               	infsnz	operation@i& (0+255),f,b
  4274  000EE0  2BC0               	incf	(operation@i+1)& (0+255),f,b
  4275  000EE2  D7DF               	goto	l7989
  4276  000EE4                     l7999:
  4277                           
  4278                           ; BSR set to: 0
  4279                           ;main.c: 370: }
  4280                           ;main.c: 371: saveEEPROM();
  4281  000EE4  EC84  F007         	call	_saveEEPROM	;wreg free
  4282  000EE8                     l8001:
  4283                           
  4284                           ;main.c: 373: unsigned char temp = getPressedKeypadKey();
  4285  000EE8  EC68  F017         	call	_getPressedKeypadKey	;wreg free
  4286  000EEC  0100               	movlb	0	; () banked
  4287  000EEE  6FB8               	movwf	operation@temp& (0+255),b
  4288                           
  4289                           ; BSR set to: 0
  4290                           ;main.c: 374: if (temp == keys[3]){
  4291  000EF0  0E2C               	movlw	low (_keys+3)
  4292  000EF2  6EF6               	movwf	tblptrl,c
  4293  000EF4  0EFE               	movlw	high (_keys+3)
  4294  000EF6  6EF7               	movwf	tblptrh,c
  4295  000EF8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  4296  000EF8  6AF8               	clrf	tblptru,c
  4297  000EFA                     	endif
  4298  000EFA                     	if	0	;tblptru may be non-zero
  4299  000EFA                     	endif
  4300  000EFA  0008               	tblrd		*
  4301  000EFC  50F5               	movf	tablat,w,c
  4302  000EFE  0100               	movlb	0	; () banked
  4303  000F00  19B8               	xorwf	operation@temp& (0+255),w,b
  4304  000F02  B4D8               	btfsc	status,2,c
  4305  000F04  0012               	return	
  4306  000F06  D7F0               	goto	l8001
  4307  000F08                     __end_of_operation:
  4308                           	opt stack 0
  4309                           tblptru	equ	0xFF8
  4310                           tblptrh	equ	0xFF7
  4311                           tblptrl	equ	0xFF6
  4312                           tablat	equ	0xFF5
  4313                           intcon	equ	0xFF2
  4314                           intcon2	equ	0xFF1
  4315                           postinc0	equ	0xFEE
  4316                           wreg	equ	0xFE8
  4317                           indf1	equ	0xFE7
  4318                           postdec1	equ	0xFE5
  4319                           fsr1h	equ	0xFE2
  4320                           fsr1l	equ	0xFE1
  4321                           indf2	equ	0xFDF
  4322                           postinc2	equ	0xFDE
  4323                           postdec2	equ	0xFDD
  4324                           fsr2h	equ	0xFDA
  4325                           fsr2l	equ	0xFD9
  4326                           status	equ	0xFD8
  4327                           
  4328 ;; *************** function _saveEEPROM *****************
  4329 ;; Defined at:
  4330 ;;		line 480 in file "main.c"
  4331 ;; Parameters:    Size  Location     Type
  4332 ;;		None
  4333 ;; Auto vars:     Size  Location     Type
  4334 ;;  i               2   12[BANK0 ] int 
  4335 ;;  temp            2   10[BANK0 ] int 
  4336 ;; Return value:  Size  Location     Type
  4337 ;;                  1    wreg      void 
  4338 ;; Registers used:
  4339 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4340 ;; Tracked objects:
  4341 ;;		On entry : 0/0
  4342 ;;		On exit  : 0/0
  4343 ;;		Unchanged: 0/0
  4344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4346 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4349 ;;Total ram usage:        5 bytes
  4350 ;; Hardware stack levels used:    1
  4351 ;; Hardware stack levels required when called:    7
  4352 ;; This function calls:
  4353 ;;		_Eeprom_ReadByte
  4354 ;;		_Eeprom_WriteByte
  4355 ;;		___wmul
  4356 ;; This function is called by:
  4357 ;;		_operation
  4358 ;; This function uses a non-reentrant model
  4359 ;;
  4360                           
  4361                           	psect	text14
  4362  000F08                     __ptext14:
  4363                           	opt stack 0
  4364  000F08                     _saveEEPROM:
  4365                           	opt stack 21
  4366                           
  4367                           ;main.c: 481: int i;
  4368                           ;main.c: 482: int temp;
  4369                           ;main.c: 483: for (i = 0; i<13; i++){
  4370                           
  4371                           ; BSR set to: 0
  4372                           ;incstack = 0
  4373  000F08  0E00               	movlw	0
  4374  000F0A  0100               	movlb	0	; () banked
  4375  000F0C  6F8D               	movwf	(saveEEPROM@i+1)& (0+255),b
  4376  000F0E  0E00               	movlw	0
  4377  000F10  6F8C               	movwf	saveEEPROM@i& (0+255),b
  4378  000F12                     l3735:
  4379                           
  4380                           ; BSR set to: 0
  4381  000F12  0100               	movlb	0	; () banked
  4382  000F14  BF8D               	btfsc	(saveEEPROM@i+1)& (0+255),7,b
  4383  000F16  D008               	goto	l3739
  4384  000F18  0100               	movlb	0	; () banked
  4385  000F1A  518D               	movf	(saveEEPROM@i+1)& (0+255),w,b
  4386  000F1C  E140               	bnz	l3745
  4387  000F1E  0E0D               	movlw	13
  4388  000F20  0100               	movlb	0	; () banked
  4389  000F22  5D8C               	subwf	saveEEPROM@i& (0+255),w,b
  4390  000F24  B0D8               	btfsc	status,0,c
  4391  000F26  D03B               	goto	l3745
  4392  000F28                     l3739:
  4393                           
  4394                           ; BSR set to: 0
  4395                           ;main.c: 484: temp = Eeprom_ReadByte(12*i+2*200);
  4396  000F28  C08C  F080         	movff	saveEEPROM@i,___wmul@multiplier
  4397  000F2C  C08D  F081         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  4398  000F30  0E00               	movlw	0
  4399  000F32  0100               	movlb	0	; () banked
  4400  000F34  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4401  000F36  0E0C               	movlw	12
  4402  000F38  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4403  000F3A  EC18  F017         	call	___wmul	;wreg free
  4404  000F3E  0E90               	movlw	144
  4405  000F40  0100               	movlb	0	; () banked
  4406  000F42  2580               	addwf	?___wmul& (0+255),w,b
  4407  000F44  0100               	movlb	0	; () banked
  4408  000F46  6F86               	movwf	Eeprom_ReadByte@address& (0+255),b
  4409  000F48  0E01               	movlw	1
  4410  000F4A  0100               	movlb	0	; () banked
  4411  000F4C  2181               	addwfc	(?___wmul+1)& (0+255),w,b
  4412  000F4E  0100               	movlb	0	; () banked
  4413  000F50  6F87               	movwf	(Eeprom_ReadByte@address+1)& (0+255),b
  4414  000F52  EC08  F018         	call	_Eeprom_ReadByte	;wreg free
  4415  000F56  0100               	movlb	0	; () banked
  4416  000F58  6F89               	movwf	??_saveEEPROM& (0+255),b
  4417  000F5A  0100               	movlb	0	; () banked
  4418  000F5C  5189               	movf	??_saveEEPROM& (0+255),w,b
  4419  000F5E  0100               	movlb	0	; () banked
  4420  000F60  6F8A               	movwf	saveEEPROM@temp& (0+255),b
  4421  000F62  6B8B               	clrf	(saveEEPROM@temp+1)& (0+255),b
  4422                           
  4423                           ;main.c: 485: Eeprom_WriteByte(12*i+3*200,temp);
  4424  000F64  C08C  F080         	movff	saveEEPROM@i,___wmul@multiplier
  4425  000F68  C08D  F081         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  4426  000F6C  0E00               	movlw	0
  4427  000F6E  0100               	movlb	0	; () banked
  4428  000F70  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4429  000F72  0E0C               	movlw	12
  4430  000F74  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4431  000F76  EC18  F017         	call	___wmul	;wreg free
  4432  000F7A  0E58               	movlw	88
  4433  000F7C  0100               	movlb	0	; () banked
  4434  000F7E  2580               	addwf	?___wmul& (0+255),w,b
  4435  000F80  0100               	movlb	0	; () banked
  4436  000F82  6F86               	movwf	Eeprom_WriteByte@address& (0+255),b
  4437  000F84  0E02               	movlw	2
  4438  000F86  0100               	movlb	0	; () banked
  4439  000F88  2181               	addwfc	(?___wmul+1)& (0+255),w,b
  4440  000F8A  0100               	movlb	0	; () banked
  4441  000F8C  6F87               	movwf	(Eeprom_WriteByte@address+1)& (0+255),b
  4442  000F8E  C08A  F088         	movff	saveEEPROM@temp,Eeprom_WriteByte@data
  4443  000F92  ECAE  F017         	call	_Eeprom_WriteByte	;wreg free
  4444  000F96  0100               	movlb	0	; () banked
  4445  000F98  4B8C               	infsnz	saveEEPROM@i& (0+255),f,b
  4446  000F9A  2B8D               	incf	(saveEEPROM@i+1)& (0+255),f,b
  4447  000F9C  D7BA               	goto	l3735
  4448  000F9E                     l3745:
  4449                           
  4450                           ; BSR set to: 0
  4451                           ;main.c: 486: }
  4452                           ;main.c: 487: for (i = 0; i<13; i++){
  4453  000F9E  0E00               	movlw	0
  4454  000FA0  0100               	movlb	0	; () banked
  4455  000FA2  6F8D               	movwf	(saveEEPROM@i+1)& (0+255),b
  4456  000FA4  0E00               	movlw	0
  4457  000FA6  6F8C               	movwf	saveEEPROM@i& (0+255),b
  4458  000FA8                     l3747:
  4459                           
  4460                           ; BSR set to: 0
  4461  000FA8  0100               	movlb	0	; () banked
  4462  000FAA  BF8D               	btfsc	(saveEEPROM@i+1)& (0+255),7,b
  4463  000FAC  D008               	goto	l3751
  4464  000FAE  0100               	movlb	0	; () banked
  4465  000FB0  518D               	movf	(saveEEPROM@i+1)& (0+255),w,b
  4466  000FB2  E140               	bnz	l3757
  4467  000FB4  0E0D               	movlw	13
  4468  000FB6  0100               	movlb	0	; () banked
  4469  000FB8  5D8C               	subwf	saveEEPROM@i& (0+255),w,b
  4470  000FBA  B0D8               	btfsc	status,0,c
  4471  000FBC  D03B               	goto	l3757
  4472  000FBE                     l3751:
  4473                           
  4474                           ; BSR set to: 0
  4475                           ;main.c: 488: temp = Eeprom_ReadByte(12*i+1*200);
  4476  000FBE  C08C  F080         	movff	saveEEPROM@i,___wmul@multiplier
  4477  000FC2  C08D  F081         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  4478  000FC6  0E00               	movlw	0
  4479  000FC8  0100               	movlb	0	; () banked
  4480  000FCA  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4481  000FCC  0E0C               	movlw	12
  4482  000FCE  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4483  000FD0  EC18  F017         	call	___wmul	;wreg free
  4484  000FD4  0EC8               	movlw	200
  4485  000FD6  0100               	movlb	0	; () banked
  4486  000FD8  2580               	addwf	?___wmul& (0+255),w,b
  4487  000FDA  0100               	movlb	0	; () banked
  4488  000FDC  6F86               	movwf	Eeprom_ReadByte@address& (0+255),b
  4489  000FDE  0E00               	movlw	0
  4490  000FE0  0100               	movlb	0	; () banked
  4491  000FE2  2181               	addwfc	(?___wmul+1)& (0+255),w,b
  4492  000FE4  0100               	movlb	0	; () banked
  4493  000FE6  6F87               	movwf	(Eeprom_ReadByte@address+1)& (0+255),b
  4494  000FE8  EC08  F018         	call	_Eeprom_ReadByte	;wreg free
  4495  000FEC  0100               	movlb	0	; () banked
  4496  000FEE  6F89               	movwf	??_saveEEPROM& (0+255),b
  4497  000FF0  0100               	movlb	0	; () banked
  4498  000FF2  5189               	movf	??_saveEEPROM& (0+255),w,b
  4499  000FF4  0100               	movlb	0	; () banked
  4500  000FF6  6F8A               	movwf	saveEEPROM@temp& (0+255),b
  4501  000FF8  6B8B               	clrf	(saveEEPROM@temp+1)& (0+255),b
  4502                           
  4503                           ;main.c: 489: Eeprom_WriteByte(12*i+2*200,temp);
  4504  000FFA  C08C  F080         	movff	saveEEPROM@i,___wmul@multiplier
  4505  000FFE  C08D  F081         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  4506  001002  0E00               	movlw	0
  4507  001004  0100               	movlb	0	; () banked
  4508  001006  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4509  001008  0E0C               	movlw	12
  4510  00100A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4511  00100C  EC18  F017         	call	___wmul	;wreg free
  4512  001010  0E90               	movlw	144
  4513  001012  0100               	movlb	0	; () banked
  4514  001014  2580               	addwf	?___wmul& (0+255),w,b
  4515  001016  0100               	movlb	0	; () banked
  4516  001018  6F86               	movwf	Eeprom_WriteByte@address& (0+255),b
  4517  00101A  0E01               	movlw	1
  4518  00101C  0100               	movlb	0	; () banked
  4519  00101E  2181               	addwfc	(?___wmul+1)& (0+255),w,b
  4520  001020  0100               	movlb	0	; () banked
  4521  001022  6F87               	movwf	(Eeprom_WriteByte@address+1)& (0+255),b
  4522  001024  C08A  F088         	movff	saveEEPROM@temp,Eeprom_WriteByte@data
  4523  001028  ECAE  F017         	call	_Eeprom_WriteByte	;wreg free
  4524  00102C  0100               	movlb	0	; () banked
  4525  00102E  4B8C               	infsnz	saveEEPROM@i& (0+255),f,b
  4526  001030  2B8D               	incf	(saveEEPROM@i+1)& (0+255),f,b
  4527  001032  D7BA               	goto	l3747
  4528  001034                     l3757:
  4529                           
  4530                           ; BSR set to: 0
  4531                           ;main.c: 490: }
  4532                           ;main.c: 491: for (i = 0; i<13; i++){
  4533  001034  0E00               	movlw	0
  4534  001036  0100               	movlb	0	; () banked
  4535  001038  6F8D               	movwf	(saveEEPROM@i+1)& (0+255),b
  4536  00103A  0E00               	movlw	0
  4537  00103C  6F8C               	movwf	saveEEPROM@i& (0+255),b
  4538  00103E                     l3759:
  4539                           
  4540                           ; BSR set to: 0
  4541  00103E  0100               	movlb	0	; () banked
  4542  001040  BF8D               	btfsc	(saveEEPROM@i+1)& (0+255),7,b
  4543  001042  D008               	goto	l3763
  4544  001044  0100               	movlb	0	; () banked
  4545  001046  518D               	movf	(saveEEPROM@i+1)& (0+255),w,b
  4546  001048  E13A               	bnz	l3769
  4547  00104A  0E0D               	movlw	13
  4548  00104C  0100               	movlb	0	; () banked
  4549  00104E  5D8C               	subwf	saveEEPROM@i& (0+255),w,b
  4550  001050  B0D8               	btfsc	status,0,c
  4551  001052  D035               	goto	l3769
  4552  001054                     l3763:
  4553                           
  4554                           ; BSR set to: 0
  4555                           ;main.c: 492: temp = Eeprom_ReadByte(12*i+0*200);
  4556  001054  C08C  F080         	movff	saveEEPROM@i,___wmul@multiplier
  4557  001058  C08D  F081         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  4558  00105C  0E00               	movlw	0
  4559  00105E  0100               	movlb	0	; () banked
  4560  001060  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4561  001062  0E0C               	movlw	12
  4562  001064  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4563  001066  EC18  F017         	call	___wmul	;wreg free
  4564  00106A  C080  F086         	movff	?___wmul,Eeprom_ReadByte@address
  4565  00106E  C081  F087         	movff	?___wmul+1,Eeprom_ReadByte@address+1
  4566  001072  EC08  F018         	call	_Eeprom_ReadByte	;wreg free
  4567  001076  0100               	movlb	0	; () banked
  4568  001078  6F89               	movwf	??_saveEEPROM& (0+255),b
  4569  00107A  0100               	movlb	0	; () banked
  4570  00107C  5189               	movf	??_saveEEPROM& (0+255),w,b
  4571  00107E  0100               	movlb	0	; () banked
  4572  001080  6F8A               	movwf	saveEEPROM@temp& (0+255),b
  4573  001082  6B8B               	clrf	(saveEEPROM@temp+1)& (0+255),b
  4574                           
  4575                           ;main.c: 493: Eeprom_WriteByte(12*i+1*200,temp);
  4576  001084  C08C  F080         	movff	saveEEPROM@i,___wmul@multiplier
  4577  001088  C08D  F081         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  4578  00108C  0E00               	movlw	0
  4579  00108E  0100               	movlb	0	; () banked
  4580  001090  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4581  001092  0E0C               	movlw	12
  4582  001094  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4583  001096  EC18  F017         	call	___wmul	;wreg free
  4584  00109A  0EC8               	movlw	200
  4585  00109C  0100               	movlb	0	; () banked
  4586  00109E  2580               	addwf	?___wmul& (0+255),w,b
  4587  0010A0  0100               	movlb	0	; () banked
  4588  0010A2  6F86               	movwf	Eeprom_WriteByte@address& (0+255),b
  4589  0010A4  0E00               	movlw	0
  4590  0010A6  0100               	movlb	0	; () banked
  4591  0010A8  2181               	addwfc	(?___wmul+1)& (0+255),w,b
  4592  0010AA  0100               	movlb	0	; () banked
  4593  0010AC  6F87               	movwf	(Eeprom_WriteByte@address+1)& (0+255),b
  4594  0010AE  C08A  F088         	movff	saveEEPROM@temp,Eeprom_WriteByte@data
  4595  0010B2  ECAE  F017         	call	_Eeprom_WriteByte	;wreg free
  4596  0010B6  0100               	movlb	0	; () banked
  4597  0010B8  4B8C               	infsnz	saveEEPROM@i& (0+255),f,b
  4598  0010BA  2B8D               	incf	(saveEEPROM@i+1)& (0+255),f,b
  4599  0010BC  D7C0               	goto	l3759
  4600  0010BE                     l3769:
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;main.c: 494: }
  4604                           ;main.c: 495: for (i = 0; i<6; i++){
  4605  0010BE  0E00               	movlw	0
  4606  0010C0  0100               	movlb	0	; () banked
  4607  0010C2  6F8D               	movwf	(saveEEPROM@i+1)& (0+255),b
  4608  0010C4  0E00               	movlw	0
  4609  0010C6  6F8C               	movwf	saveEEPROM@i& (0+255),b
  4610  0010C8                     l3771:
  4611                           
  4612                           ; BSR set to: 0
  4613  0010C8  0100               	movlb	0	; () banked
  4614  0010CA  BF8D               	btfsc	(saveEEPROM@i+1)& (0+255),7,b
  4615  0010CC  D008               	goto	l3775
  4616  0010CE  0100               	movlb	0	; () banked
  4617  0010D0  518D               	movf	(saveEEPROM@i+1)& (0+255),w,b
  4618  0010D2  E128               	bnz	l3781
  4619  0010D4  0E06               	movlw	6
  4620  0010D6  0100               	movlb	0	; () banked
  4621  0010D8  5D8C               	subwf	saveEEPROM@i& (0+255),w,b
  4622  0010DA  B0D8               	btfsc	status,0,c
  4623  0010DC  D023               	goto	l3781
  4624  0010DE                     l3775:
  4625                           
  4626                           ; BSR set to: 0
  4627                           ;main.c: 496: Eeprom_WriteByte(12*i,runInfo[i]);
  4628  0010DE  C08C  F080         	movff	saveEEPROM@i,___wmul@multiplier
  4629  0010E2  C08D  F081         	movff	saveEEPROM@i+1,___wmul@multiplier+1
  4630  0010E6  0E00               	movlw	0
  4631  0010E8  0100               	movlb	0	; () banked
  4632  0010EA  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4633  0010EC  0E0C               	movlw	12
  4634  0010EE  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4635  0010F0  EC18  F017         	call	___wmul	;wreg free
  4636  0010F4  C080  F086         	movff	?___wmul,Eeprom_WriteByte@address
  4637  0010F8  C081  F087         	movff	?___wmul+1,Eeprom_WriteByte@address+1
  4638  0010FC  90D8               	bcf	status,0,c
  4639  0010FE  0100               	movlb	0	; () banked
  4640  001100  358C               	rlcf	saveEEPROM@i& (0+255),w,b
  4641  001102  6ED9               	movwf	fsr2l,c
  4642  001104  0100               	movlb	0	; () banked
  4643  001106  358D               	rlcf	(saveEEPROM@i+1)& (0+255),w,b
  4644  001108  6EDA               	movwf	fsr2h,c
  4645  00110A  0EE9               	movlw	low _runInfo
  4646  00110C  26D9               	addwf	fsr2l,f,c
  4647  00110E  0E00               	movlw	high _runInfo
  4648  001110  22DA               	addwfc	fsr2h,f,c
  4649  001112  50DF               	movf	indf2,w,c
  4650  001114  0100               	movlb	0	; () banked
  4651  001116  6F88               	movwf	Eeprom_WriteByte@data& (0+255),b
  4652  001118  ECAE  F017         	call	_Eeprom_WriteByte	;wreg free
  4653  00111C  0100               	movlb	0	; () banked
  4654  00111E  4B8C               	infsnz	saveEEPROM@i& (0+255),f,b
  4655  001120  2B8D               	incf	(saveEEPROM@i+1)& (0+255),f,b
  4656  001122  D7D2               	goto	l3771
  4657  001124                     l3781:
  4658                           
  4659                           ; BSR set to: 0
  4660                           ;main.c: 497: }
  4661                           ;main.c: 498: for (i = 0; i<7; i++){
  4662  001124  0E00               	movlw	0
  4663  001126  0100               	movlb	0	; () banked
  4664  001128  6F8D               	movwf	(saveEEPROM@i+1)& (0+255),b
  4665  00112A  0E00               	movlw	0
  4666  00112C  6F8C               	movwf	saveEEPROM@i& (0+255),b
  4667  00112E                     l3783:
  4668                           
  4669                           ; BSR set to: 0
  4670  00112E  0100               	movlb	0	; () banked
  4671  001130  BF8D               	btfsc	(saveEEPROM@i+1)& (0+255),7,b
  4672  001132  D008               	goto	l3787
  4673  001134  0100               	movlb	0	; () banked
  4674  001136  518D               	movf	(saveEEPROM@i+1)& (0+255),w,b
  4675  001138  E12B               	bnz	l368
  4676  00113A  0E07               	movlw	7
  4677  00113C  0100               	movlb	0	; () banked
  4678  00113E  5D8C               	subwf	saveEEPROM@i& (0+255),w,b
  4679  001140  B0D8               	btfsc	status,0,c
  4680  001142  0012               	return	
  4681  001144                     l3787:
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;main.c: 499: Eeprom_WriteByte(12*(6+i),lastRunTime[i]);
  4685  001144  0E06               	movlw	6
  4686  001146  0100               	movlb	0	; () banked
  4687  001148  258C               	addwf	saveEEPROM@i& (0+255),w,b
  4688  00114A  0100               	movlb	0	; () banked
  4689  00114C  6F80               	movwf	___wmul@multiplier& (0+255),b
  4690  00114E  0E00               	movlw	0
  4691  001150  0100               	movlb	0	; () banked
  4692  001152  218D               	addwfc	(saveEEPROM@i+1)& (0+255),w,b
  4693  001154  0100               	movlb	0	; () banked
  4694  001156  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4695  001158  0E00               	movlw	0
  4696  00115A  0100               	movlb	0	; () banked
  4697  00115C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4698  00115E  0E0C               	movlw	12
  4699  001160  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4700  001162  EC18  F017         	call	___wmul	;wreg free
  4701  001166  C080  F086         	movff	?___wmul,Eeprom_WriteByte@address
  4702  00116A  C081  F087         	movff	?___wmul+1,Eeprom_WriteByte@address+1
  4703  00116E  0ED9               	movlw	low _lastRunTime
  4704  001170  0100               	movlb	0	; () banked
  4705  001172  258C               	addwf	saveEEPROM@i& (0+255),w,b
  4706  001174  6ED9               	movwf	fsr2l,c
  4707  001176  0E00               	movlw	high _lastRunTime
  4708  001178  0100               	movlb	0	; () banked
  4709  00117A  218D               	addwfc	(saveEEPROM@i+1)& (0+255),w,b
  4710  00117C  6EDA               	movwf	fsr2h,c
  4711  00117E  50DF               	movf	indf2,w,c
  4712  001180  0100               	movlb	0	; () banked
  4713  001182  6F88               	movwf	Eeprom_WriteByte@data& (0+255),b
  4714  001184  ECAE  F017         	call	_Eeprom_WriteByte	;wreg free
  4715  001188  0100               	movlb	0	; () banked
  4716  00118A  4B8C               	infsnz	saveEEPROM@i& (0+255),f,b
  4717  00118C  2B8D               	incf	(saveEEPROM@i+1)& (0+255),f,b
  4718  00118E  D7CF               	goto	l3783
  4719  001190                     l368:
  4720                           
  4721                           ; BSR set to: 0
  4722  001190  0012               	return		;funcret
  4723  001192                     __end_of_saveEEPROM:
  4724                           	opt stack 0
  4725                           tblptru	equ	0xFF8
  4726                           tblptrh	equ	0xFF7
  4727                           tblptrl	equ	0xFF6
  4728                           tablat	equ	0xFF5
  4729                           intcon	equ	0xFF2
  4730                           intcon2	equ	0xFF1
  4731                           postinc0	equ	0xFEE
  4732                           wreg	equ	0xFE8
  4733                           indf1	equ	0xFE7
  4734                           postdec1	equ	0xFE5
  4735                           fsr1h	equ	0xFE2
  4736                           fsr1l	equ	0xFE1
  4737                           indf2	equ	0xFDF
  4738                           postinc2	equ	0xFDE
  4739                           postdec2	equ	0xFDD
  4740                           fsr2h	equ	0xFDA
  4741                           fsr2l	equ	0xFD9
  4742                           status	equ	0xFD8
  4743                           
  4744 ;; *************** function _Eeprom_WriteByte *****************
  4745 ;; Defined at:
  4746 ;;		line 561 in file "main.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;  address         2    6[BANK0 ] unsigned int 
  4749 ;;  data            1    8[BANK0 ] unsigned char 
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;		None
  4752 ;; Return value:  Size  Location     Type
  4753 ;;                  1    wreg      void 
  4754 ;; Registers used:
  4755 ;;		wreg, status,2
  4756 ;; Tracked objects:
  4757 ;;		On entry : 0/0
  4758 ;;		On exit  : 0/0
  4759 ;;		Unchanged: 0/0
  4760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4761 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4762 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4763 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4764 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4765 ;;Total ram usage:        3 bytes
  4766 ;; Hardware stack levels used:    1
  4767 ;; Hardware stack levels required when called:    6
  4768 ;; This function calls:
  4769 ;;		Nothing
  4770 ;; This function is called by:
  4771 ;;		_saveEEPROM
  4772 ;; This function uses a non-reentrant model
  4773 ;;
  4774                           
  4775                           	psect	text15
  4776  002F5C                     __ptext15:
  4777                           	opt stack 0
  4778  002F5C                     _Eeprom_WriteByte:
  4779                           	opt stack 21
  4780                           
  4781                           ;main.c: 564: EEADRH = (uint8_t)(address >> 8);
  4782                           
  4783                           ; BSR set to: 0
  4784                           ;incstack = 0
  4785  002F5C  0100               	movlb	0	; () banked
  4786  002F5E  5187               	movf	(Eeprom_WriteByte@address+1)& (0+255),w,b
  4787  002F60  6EAA               	movwf	4010,c	;volatile
  4788                           
  4789                           ; BSR set to: 0
  4790                           ;main.c: 565: EEADR = (uint8_t)address;
  4791  002F62  C086  FFA9         	movff	Eeprom_WriteByte@address,4009	;volatile
  4792                           
  4793                           ; BSR set to: 0
  4794                           ;main.c: 567: EEDATA = data;
  4795  002F66  C088  FFA8         	movff	Eeprom_WriteByte@data,4008	;volatile
  4796                           
  4797                           ; BSR set to: 0
  4798                           ;main.c: 568: EECON1bits.EEPGD = 0;
  4799  002F6A  9EA6               	bcf	4006,7,c	;volatile
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;main.c: 569: EECON1bits.CFGS = 0;
  4803  002F6C  9CA6               	bcf	4006,6,c	;volatile
  4804                           
  4805                           ; BSR set to: 0
  4806                           ;main.c: 570: EECON1bits.WREN = 1;
  4807  002F6E  84A6               	bsf	4006,2,c	;volatile
  4808                           
  4809                           ;main.c: 574: EECON2 = 0x55;
  4810  002F70  0E55               	movlw	85
  4811  002F72  6EA7               	movwf	4007,c	;volatile
  4812                           
  4813                           ;main.c: 575: EECON2 = 0xAA;
  4814  002F74  0EAA               	movlw	170
  4815  002F76  6EA7               	movwf	4007,c	;volatile
  4816                           
  4817                           ; BSR set to: 0
  4818                           ;main.c: 576: EECON1bits.WR = 1;
  4819  002F78  82A6               	bsf	4006,1,c	;volatile
  4820  002F7A                     l395:
  4821  002F7A  A8A1               	btfss	4001,4,c	;volatile
  4822  002F7C  D7FE               	goto	l395
  4823                           
  4824                           ;main.c: 582: }
  4825                           ;main.c: 584: PIR2bits.EEIF = 0;
  4826  002F7E  98A1               	bcf	4001,4,c	;volatile
  4827                           
  4828                           ;main.c: 585: EECON1bits.WREN = 0;
  4829  002F80  94A6               	bcf	4006,2,c	;volatile
  4830  002F82  0012               	return		;funcret
  4831  002F84                     __end_of_Eeprom_WriteByte:
  4832                           	opt stack 0
  4833                           tblptru	equ	0xFF8
  4834                           tblptrh	equ	0xFF7
  4835                           tblptrl	equ	0xFF6
  4836                           tablat	equ	0xFF5
  4837                           intcon	equ	0xFF2
  4838                           intcon2	equ	0xFF1
  4839                           postinc0	equ	0xFEE
  4840                           wreg	equ	0xFE8
  4841                           indf1	equ	0xFE7
  4842                           postdec1	equ	0xFE5
  4843                           fsr1h	equ	0xFE2
  4844                           fsr1l	equ	0xFE1
  4845                           indf2	equ	0xFDF
  4846                           postinc2	equ	0xFDE
  4847                           postdec2	equ	0xFDD
  4848                           fsr2h	equ	0xFDA
  4849                           fsr2l	equ	0xFD9
  4850                           status	equ	0xFD8
  4851                           
  4852 ;; *************** function _retractSensorAreaArm *****************
  4853 ;; Defined at:
  4854 ;;		line 450 in file "main.c"
  4855 ;; Parameters:    Size  Location     Type
  4856 ;;		None
  4857 ;; Auto vars:     Size  Location     Type
  4858 ;;  i               2    2[BANK0 ] unsigned int 
  4859 ;; Return value:  Size  Location     Type
  4860 ;;                  1    wreg      void 
  4861 ;; Registers used:
  4862 ;;		wreg, status,2, status,0
  4863 ;; Tracked objects:
  4864 ;;		On entry : 0/0
  4865 ;;		On exit  : 0/0
  4866 ;;		Unchanged: 0/0
  4867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4869 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4870 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4871 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4872 ;;Total ram usage:        4 bytes
  4873 ;; Hardware stack levels used:    1
  4874 ;; Hardware stack levels required when called:    6
  4875 ;; This function calls:
  4876 ;;		Nothing
  4877 ;; This function is called by:
  4878 ;;		_operation
  4879 ;;		_pushBottle
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883                           	psect	text16
  4884  002824                     __ptext16:
  4885                           	opt stack 0
  4886  002824                     _retractSensorAreaArm:
  4887                           	opt stack 22
  4888                           
  4889                           ;main.c: 451: unsigned int i;
  4890                           ;main.c: 452: for(i=0;i<10;i++){
  4891                           
  4892                           ;incstack = 0
  4893  002824  0E00               	movlw	0
  4894  002826  0100               	movlb	0	; () banked
  4895  002828  6F83               	movwf	(retractSensorAreaArm@i+1)& (0+255),b
  4896  00282A  0E00               	movlw	0
  4897  00282C  6F82               	movwf	retractSensorAreaArm@i& (0+255),b
  4898  00282E                     l3707:
  4899                           
  4900                           ; BSR set to: 0
  4901  00282E  0100               	movlb	0	; () banked
  4902  002830  5183               	movf	(retractSensorAreaArm@i+1)& (0+255),w,b
  4903  002832  E11D               	bnz	l3717
  4904  002834  0E0A               	movlw	10
  4905  002836  0100               	movlb	0	; () banked
  4906  002838  5D82               	subwf	retractSensorAreaArm@i& (0+255),w,b
  4907  00283A  B0D8               	btfsc	status,0,c
  4908  00283C  D018               	goto	l3717
  4909                           
  4910                           ; BSR set to: 0
  4911                           ;main.c: 453: PORTCbits.RC2 = 1;
  4912                           
  4913                           ; BSR set to: 0
  4914  00283E  8482               	bsf	3970,2,c	;volatile
  4915                           
  4916                           ; BSR set to: 0
  4917                           ;main.c: 454: _delay((unsigned long)((2200)*(8000000/4000000.0)));
  4918  002840  0E06               	movlw	6
  4919  002842  0100               	movlb	0	; () banked
  4920  002844  6F80               	movwf	??_retractSensorAreaArm& (0+255),b
  4921  002846  0EB5               	movlw	181
  4922  002848                     u8807:
  4923  002848  2EE8               	decfsz	wreg,f,c
  4924  00284A  D7FE               	bra	u8807
  4925  00284C  2F80               	decfsz	??_retractSensorAreaArm& (0+255),f,b
  4926  00284E  D7FC               	bra	u8807
  4927  002850  D000               	nop2	
  4928                           
  4929                           ;main.c: 455: PORTCbits.RC2 = 0;
  4930  002852  9482               	bcf	3970,2,c	;volatile
  4931                           
  4932                           ;main.c: 456: _delay((unsigned long)((17800)*(8000000/4000000.0)));
  4933  002854  0E2F               	movlw	47
  4934  002856  0100               	movlb	0	; () banked
  4935  002858  6F80               	movwf	??_retractSensorAreaArm& (0+255),b
  4936  00285A  0E3A               	movlw	58
  4937  00285C                     u8817:
  4938  00285C  2EE8               	decfsz	wreg,f,c
  4939  00285E  D7FE               	bra	u8817
  4940  002860  2F80               	decfsz	??_retractSensorAreaArm& (0+255),f,b
  4941  002862  D7FC               	bra	u8817
  4942  002864  F000               	nop	
  4943  002866  0100               	movlb	0	; () banked
  4944  002868  4B82               	infsnz	retractSensorAreaArm@i& (0+255),f,b
  4945  00286A  2B83               	incf	(retractSensorAreaArm@i+1)& (0+255),f,b
  4946  00286C  D7E0               	goto	l3707
  4947  00286E                     l3717:
  4948                           
  4949                           ; BSR set to: 0
  4950                           ;main.c: 457: }
  4951                           ;main.c: 458: _delay((unsigned long)((500)*(8000000/4000.0)));
  4952  00286E  0E06               	movlw	6
  4953  002870  0100               	movlb	0	; () banked
  4954  002872  6F81               	movwf	(??_retractSensorAreaArm+1)& (0+255),b
  4955  002874  0E13               	movlw	19
  4956  002876  0100               	movlb	0	; () banked
  4957  002878  6F80               	movwf	??_retractSensorAreaArm& (0+255),b
  4958  00287A  0EAD               	movlw	173
  4959  00287C                     u8827:
  4960  00287C  2EE8               	decfsz	wreg,f,c
  4961  00287E  D7FE               	bra	u8827
  4962  002880  2F80               	decfsz	??_retractSensorAreaArm& (0+255),f,b
  4963  002882  D7FC               	bra	u8827
  4964  002884  2F81               	decfsz	(??_retractSensorAreaArm+1)& (0+255),f,b
  4965  002886  D7FA               	bra	u8827
  4966  002888  D000               	nop2	
  4967  00288A  0012               	return		;funcret
  4968  00288C                     __end_of_retractSensorAreaArm:
  4969                           	opt stack 0
  4970                           tblptru	equ	0xFF8
  4971                           tblptrh	equ	0xFF7
  4972                           tblptrl	equ	0xFF6
  4973                           tablat	equ	0xFF5
  4974                           intcon	equ	0xFF2
  4975                           intcon2	equ	0xFF1
  4976                           postinc0	equ	0xFEE
  4977                           wreg	equ	0xFE8
  4978                           indf1	equ	0xFE7
  4979                           postdec1	equ	0xFE5
  4980                           fsr1h	equ	0xFE2
  4981                           fsr1l	equ	0xFE1
  4982                           indf2	equ	0xFDF
  4983                           postinc2	equ	0xFDE
  4984                           postdec2	equ	0xFDD
  4985                           fsr2h	equ	0xFDA
  4986                           fsr2l	equ	0xFD9
  4987                           status	equ	0xFD8
  4988                           
  4989 ;; *************** function _moveBinServo *****************
  4990 ;; Defined at:
  4991 ;;		line 439 in file "main.c"
  4992 ;; Parameters:    Size  Location     Type
  4993 ;;  num             2    0[BANK0 ] int 
  4994 ;; Auto vars:     Size  Location     Type
  4995 ;;  i               2    4[BANK0 ] unsigned int 
  4996 ;; Return value:  Size  Location     Type
  4997 ;;                  1    wreg      void 
  4998 ;; Registers used:
  4999 ;;		wreg, status,2, status,0
  5000 ;; Tracked objects:
  5001 ;;		On entry : 0/0
  5002 ;;		On exit  : 0/0
  5003 ;;		Unchanged: 0/0
  5004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5005 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5006 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5007 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5008 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5009 ;;Total ram usage:        6 bytes
  5010 ;; Hardware stack levels used:    1
  5011 ;; Hardware stack levels required when called:    6
  5012 ;; This function calls:
  5013 ;;		Nothing
  5014 ;; This function is called by:
  5015 ;;		_main
  5016 ;;		_operation
  5017 ;; This function uses a non-reentrant model
  5018 ;;
  5019                           
  5020                           	psect	text17
  5021  00288C                     __ptext17:
  5022                           	opt stack 0
  5023  00288C                     _moveBinServo:
  5024                           	opt stack 24
  5025                           
  5026                           ;main.c: 440: unsigned int i;
  5027                           ;main.c: 441: for(i=0;i<20;i++){
  5028                           
  5029                           ;incstack = 0
  5030  00288C  0E00               	movlw	0
  5031  00288E  0100               	movlb	0	; () banked
  5032  002890  6F85               	movwf	(moveBinServo@i+1)& (0+255),b
  5033  002892  0E00               	movlw	0
  5034  002894  6F84               	movwf	moveBinServo@i& (0+255),b
  5035  002896                     l3609:
  5036                           
  5037                           ; BSR set to: 0
  5038  002896  0100               	movlb	0	; () banked
  5039  002898  5185               	movf	(moveBinServo@i+1)& (0+255),w,b
  5040  00289A  E11D               	bnz	l3619
  5041  00289C  0E14               	movlw	20
  5042  00289E  0100               	movlb	0	; () banked
  5043  0028A0  5D84               	subwf	moveBinServo@i& (0+255),w,b
  5044  0028A2  B0D8               	btfsc	status,0,c
  5045  0028A4  D018               	goto	l3619
  5046                           
  5047                           ; BSR set to: 0
  5048                           ;main.c: 442: PORTDbits.RD1 = 1;
  5049                           
  5050                           ; BSR set to: 0
  5051  0028A6  8283               	bsf	3971,1,c	;volatile
  5052                           
  5053                           ; BSR set to: 0
  5054                           ;main.c: 443: _delay((unsigned long)((2200)*(8000000/4000000.0)));
  5055  0028A8  0E06               	movlw	6
  5056  0028AA  0100               	movlb	0	; () banked
  5057  0028AC  6F82               	movwf	??_moveBinServo& (0+255),b
  5058  0028AE  0EB5               	movlw	181
  5059  0028B0                     u8837:
  5060  0028B0  2EE8               	decfsz	wreg,f,c
  5061  0028B2  D7FE               	bra	u8837
  5062  0028B4  2F82               	decfsz	??_moveBinServo& (0+255),f,b
  5063  0028B6  D7FC               	bra	u8837
  5064  0028B8  D000               	nop2	
  5065                           
  5066                           ;main.c: 444: PORTDbits.RD1 = 0;
  5067  0028BA  9283               	bcf	3971,1,c	;volatile
  5068                           
  5069                           ;main.c: 445: _delay((unsigned long)((17800)*(8000000/4000000.0)));
  5070  0028BC  0E2F               	movlw	47
  5071  0028BE  0100               	movlb	0	; () banked
  5072  0028C0  6F82               	movwf	??_moveBinServo& (0+255),b
  5073  0028C2  0E3A               	movlw	58
  5074  0028C4                     u8847:
  5075  0028C4  2EE8               	decfsz	wreg,f,c
  5076  0028C6  D7FE               	bra	u8847
  5077  0028C8  2F82               	decfsz	??_moveBinServo& (0+255),f,b
  5078  0028CA  D7FC               	bra	u8847
  5079  0028CC  F000               	nop	
  5080  0028CE  0100               	movlb	0	; () banked
  5081  0028D0  4B84               	infsnz	moveBinServo@i& (0+255),f,b
  5082  0028D2  2B85               	incf	(moveBinServo@i+1)& (0+255),f,b
  5083  0028D4  D7E0               	goto	l3609
  5084  0028D6                     l3619:
  5085                           
  5086                           ; BSR set to: 0
  5087                           ;main.c: 446: }
  5088                           ;main.c: 447: _delay((unsigned long)((2000)*(8000000/4000.0)));
  5089  0028D6  0E15               	movlw	21
  5090  0028D8  0100               	movlb	0	; () banked
  5091  0028DA  6F83               	movwf	(??_moveBinServo+1)& (0+255),b
  5092  0028DC  0E4B               	movlw	75
  5093  0028DE  0100               	movlb	0	; () banked
  5094  0028E0  6F82               	movwf	??_moveBinServo& (0+255),b
  5095  0028E2  0EBE               	movlw	190
  5096  0028E4                     u8857:
  5097  0028E4  2EE8               	decfsz	wreg,f,c
  5098  0028E6  D7FE               	bra	u8857
  5099  0028E8  2F82               	decfsz	??_moveBinServo& (0+255),f,b
  5100  0028EA  D7FC               	bra	u8857
  5101  0028EC  2F83               	decfsz	(??_moveBinServo+1)& (0+255),f,b
  5102  0028EE  D7FA               	bra	u8857
  5103  0028F0  F000               	nop	
  5104  0028F2  0012               	return		;funcret
  5105  0028F4                     __end_of_moveBinServo:
  5106                           	opt stack 0
  5107                           tblptru	equ	0xFF8
  5108                           tblptrh	equ	0xFF7
  5109                           tblptrl	equ	0xFF6
  5110                           tablat	equ	0xFF5
  5111                           intcon	equ	0xFF2
  5112                           intcon2	equ	0xFF1
  5113                           postinc0	equ	0xFEE
  5114                           wreg	equ	0xFE8
  5115                           indf1	equ	0xFE7
  5116                           postdec1	equ	0xFE5
  5117                           fsr1h	equ	0xFE2
  5118                           fsr1l	equ	0xFE1
  5119                           indf2	equ	0xFDF
  5120                           postinc2	equ	0xFDE
  5121                           postdec2	equ	0xFDD
  5122                           fsr2h	equ	0xFDA
  5123                           fsr2l	equ	0xFD9
  5124                           status	equ	0xFD8
  5125                           
  5126 ;; *************** function _getCurrentTimeInSeconds *****************
  5127 ;; Defined at:
  5128 ;;		line 210 in file "main.c"
  5129 ;; Parameters:    Size  Location     Type
  5130 ;;		None
  5131 ;; Auto vars:     Size  Location     Type
  5132 ;;  str             2   48[BANK0 ] unsigned char [2]
  5133 ;;  currentTime     2   44[BANK0 ] int 
  5134 ;; Return value:  Size  Location     Type
  5135 ;;                  2   42[BANK0 ] int 
  5136 ;; Registers used:
  5137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5138 ;; Tracked objects:
  5139 ;;		On entry : 0/0
  5140 ;;		On exit  : 0/0
  5141 ;;		Unchanged: 0/0
  5142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5143 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5144 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5146 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5147 ;;Total ram usage:        8 bytes
  5148 ;; Hardware stack levels used:    1
  5149 ;; Hardware stack levels required when called:   10
  5150 ;; This function calls:
  5151 ;;		___wmul
  5152 ;;		_atoi
  5153 ;;		_sprintf
  5154 ;; This function is called by:
  5155 ;;		_operation
  5156 ;; This function uses a non-reentrant model
  5157 ;;
  5158                           
  5159                           	psect	text18
  5160  001CF2                     __ptext18:
  5161                           	opt stack 0
  5162  001CF2                     _getCurrentTimeInSeconds:
  5163                           	opt stack 18
  5164                           
  5165                           ;main.c: 211: int currentTime = 0;
  5166                           
  5167                           ;incstack = 0
  5168  001CF2  0E00               	movlw	0
  5169  001CF4  0100               	movlb	0	; () banked
  5170  001CF6  6FAD               	movwf	(getCurrentTimeInSeconds@currentTime+1)& (0+255),b
  5171  001CF8  0E00               	movlw	0
  5172  001CFA  6FAC               	movwf	getCurrentTimeInSeconds@currentTime& (0+255),b
  5173                           
  5174                           ; BSR set to: 0
  5175                           ;main.c: 212: char str[2];
  5176                           ;main.c: 213: sprintf(str, "%02x",time[0]);
  5177  001CFC  0EB0               	movlw	low getCurrentTimeInSeconds@str
  5178  001CFE  0100               	movlb	0	; () banked
  5179  001D00  6F9E               	movwf	sprintf@wh& (0+255),b
  5180  001D02  0E00               	movlw	high getCurrentTimeInSeconds@str
  5181  001D04  0100               	movlb	0	; () banked
  5182  001D06  6F9F               	movwf	(sprintf@wh+1)& (0+255),b
  5183  001D08  0E7A               	movlw	low (STR_2+10)
  5184  001D0A  0100               	movlb	0	; () banked
  5185  001D0C  6FA0               	movwf	sprintf@f& (0+255),b
  5186  001D0E  0EFF               	movlw	high (STR_2+10)
  5187  001D10  0100               	movlb	0	; () banked
  5188  001D12  6FA1               	movwf	(sprintf@f+1)& (0+255),b
  5189  001D14  C0E0  F0A2         	movff	_time,?_sprintf+4
  5190  001D18  0100               	movlb	0	; () banked
  5191  001D1A  6BA3               	clrf	(?_sprintf+5)& (0+255),b
  5192  001D1C  EC6E  F015         	call	_sprintf	;wreg free
  5193                           
  5194                           ;main.c: 214: currentTime += atoi(str);
  5195  001D20  0EB0               	movlw	low getCurrentTimeInSeconds@str
  5196  001D22  0100               	movlb	0	; () banked
  5197  001D24  6F86               	movwf	atoi@s& (0+255),b
  5198  001D26  0E00               	movlw	high getCurrentTimeInSeconds@str
  5199  001D28  0100               	movlb	0	; () banked
  5200  001D2A  6F87               	movwf	(atoi@s+1)& (0+255),b
  5201  001D2C  ECFC  F010         	call	_atoi	;wreg free
  5202  001D30  0100               	movlb	0	; () banked
  5203  001D32  5186               	movf	?_atoi& (0+255),w,b
  5204  001D34  0100               	movlb	0	; () banked
  5205  001D36  27AC               	addwf	getCurrentTimeInSeconds@currentTime& (0+255),f,b
  5206  001D38  0100               	movlb	0	; () banked
  5207  001D3A  5187               	movf	(?_atoi+1)& (0+255),w,b
  5208  001D3C  0100               	movlb	0	; () banked
  5209  001D3E  23AD               	addwfc	(getCurrentTimeInSeconds@currentTime+1)& (0+255),f,b
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;main.c: 215: sprintf(str, "%02x",time[1]);
  5213  001D40  0EB0               	movlw	low getCurrentTimeInSeconds@str
  5214  001D42  0100               	movlb	0	; () banked
  5215  001D44  6F9E               	movwf	sprintf@wh& (0+255),b
  5216  001D46  0E00               	movlw	high getCurrentTimeInSeconds@str
  5217  001D48  0100               	movlb	0	; () banked
  5218  001D4A  6F9F               	movwf	(sprintf@wh+1)& (0+255),b
  5219  001D4C  0E7A               	movlw	low (STR_2+10)
  5220  001D4E  0100               	movlb	0	; () banked
  5221  001D50  6FA0               	movwf	sprintf@f& (0+255),b
  5222  001D52  0EFF               	movlw	high (STR_2+10)
  5223  001D54  0100               	movlb	0	; () banked
  5224  001D56  6FA1               	movwf	(sprintf@f+1)& (0+255),b
  5225  001D58  C0E1  F0A2         	movff	_time+1,?_sprintf+4
  5226  001D5C  0100               	movlb	0	; () banked
  5227  001D5E  6BA3               	clrf	(?_sprintf+5)& (0+255),b
  5228  001D60  EC6E  F015         	call	_sprintf	;wreg free
  5229                           
  5230                           ;main.c: 216: currentTime += atoi(str)*60;
  5231  001D64  0EB0               	movlw	low getCurrentTimeInSeconds@str
  5232  001D66  0100               	movlb	0	; () banked
  5233  001D68  6F86               	movwf	atoi@s& (0+255),b
  5234  001D6A  0E00               	movlw	high getCurrentTimeInSeconds@str
  5235  001D6C  0100               	movlb	0	; () banked
  5236  001D6E  6F87               	movwf	(atoi@s+1)& (0+255),b
  5237  001D70  ECFC  F010         	call	_atoi	;wreg free
  5238  001D74  C086  F0AE         	movff	?_atoi,_getCurrentTimeInSeconds$1663
  5239  001D78  C087  F0AF         	movff	?_atoi+1,_getCurrentTimeInSeconds$1663+1
  5240                           
  5241                           ;main.c: 216: currentTime += atoi(str)*60;
  5242  001D7C  C0AE  F080         	movff	_getCurrentTimeInSeconds$1663,___wmul@multiplier
  5243  001D80  C0AF  F081         	movff	_getCurrentTimeInSeconds$1663+1,___wmul@multiplier+1
  5244  001D84  0E00               	movlw	0
  5245  001D86  0100               	movlb	0	; () banked
  5246  001D88  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5247  001D8A  0E3C               	movlw	60
  5248  001D8C  6F82               	movwf	___wmul@multiplicand& (0+255),b
  5249  001D8E  EC18  F017         	call	___wmul	;wreg free
  5250  001D92  0100               	movlb	0	; () banked
  5251  001D94  5180               	movf	?___wmul& (0+255),w,b
  5252  001D96  0100               	movlb	0	; () banked
  5253  001D98  27AC               	addwf	getCurrentTimeInSeconds@currentTime& (0+255),f,b
  5254  001D9A  0100               	movlb	0	; () banked
  5255  001D9C  5181               	movf	(?___wmul+1)& (0+255),w,b
  5256  001D9E  0100               	movlb	0	; () banked
  5257  001DA0  23AD               	addwfc	(getCurrentTimeInSeconds@currentTime+1)& (0+255),f,b
  5258                           
  5259                           ; BSR set to: 0
  5260                           ;main.c: 217: sprintf(str, "%02x",time[2]);
  5261  001DA2  0EB0               	movlw	low getCurrentTimeInSeconds@str
  5262  001DA4  0100               	movlb	0	; () banked
  5263  001DA6  6F9E               	movwf	sprintf@wh& (0+255),b
  5264  001DA8  0E00               	movlw	high getCurrentTimeInSeconds@str
  5265  001DAA  0100               	movlb	0	; () banked
  5266  001DAC  6F9F               	movwf	(sprintf@wh+1)& (0+255),b
  5267  001DAE  0E7A               	movlw	low (STR_2+10)
  5268  001DB0  0100               	movlb	0	; () banked
  5269  001DB2  6FA0               	movwf	sprintf@f& (0+255),b
  5270  001DB4  0EFF               	movlw	high (STR_2+10)
  5271  001DB6  0100               	movlb	0	; () banked
  5272  001DB8  6FA1               	movwf	(sprintf@f+1)& (0+255),b
  5273  001DBA  C0E2  F0A2         	movff	_time+2,?_sprintf+4
  5274  001DBE  0100               	movlb	0	; () banked
  5275  001DC0  6BA3               	clrf	(?_sprintf+5)& (0+255),b
  5276  001DC2  EC6E  F015         	call	_sprintf	;wreg free
  5277                           
  5278                           ;main.c: 218: currentTime += atoi(str)*3600;
  5279  001DC6  0EB0               	movlw	low getCurrentTimeInSeconds@str
  5280  001DC8  0100               	movlb	0	; () banked
  5281  001DCA  6F86               	movwf	atoi@s& (0+255),b
  5282  001DCC  0E00               	movlw	high getCurrentTimeInSeconds@str
  5283  001DCE  0100               	movlb	0	; () banked
  5284  001DD0  6F87               	movwf	(atoi@s+1)& (0+255),b
  5285  001DD2  ECFC  F010         	call	_atoi	;wreg free
  5286  001DD6  C086  F0AE         	movff	?_atoi,_getCurrentTimeInSeconds$1663
  5287  001DDA  C087  F0AF         	movff	?_atoi+1,_getCurrentTimeInSeconds$1663+1
  5288                           
  5289                           ;main.c: 218: currentTime += atoi(str)*3600;
  5290  001DDE  C0AE  F080         	movff	_getCurrentTimeInSeconds$1663,___wmul@multiplier
  5291  001DE2  C0AF  F081         	movff	_getCurrentTimeInSeconds$1663+1,___wmul@multiplier+1
  5292  001DE6  0E0E               	movlw	14
  5293  001DE8  0100               	movlb	0	; () banked
  5294  001DEA  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5295  001DEC  0E10               	movlw	16
  5296  001DEE  6F82               	movwf	___wmul@multiplicand& (0+255),b
  5297  001DF0  EC18  F017         	call	___wmul	;wreg free
  5298  001DF4  0100               	movlb	0	; () banked
  5299  001DF6  5180               	movf	?___wmul& (0+255),w,b
  5300  001DF8  0100               	movlb	0	; () banked
  5301  001DFA  27AC               	addwf	getCurrentTimeInSeconds@currentTime& (0+255),f,b
  5302  001DFC  0100               	movlb	0	; () banked
  5303  001DFE  5181               	movf	(?___wmul+1)& (0+255),w,b
  5304  001E00  0100               	movlb	0	; () banked
  5305  001E02  23AD               	addwfc	(getCurrentTimeInSeconds@currentTime+1)& (0+255),f,b
  5306                           
  5307                           ; BSR set to: 0
  5308                           ;main.c: 219: return currentTime;
  5309  001E04  C0AC  F0AA         	movff	getCurrentTimeInSeconds@currentTime,?_getCurrentTimeInSeconds
  5310  001E08  C0AD  F0AB         	movff	getCurrentTimeInSeconds@currentTime+1,?_getCurrentTimeInSeconds+1
  5311  001E0C  0012               	return	
  5312  001E0E                     __end_of_getCurrentTimeInSeconds:
  5313                           	opt stack 0
  5314                           tblptru	equ	0xFF8
  5315                           tblptrh	equ	0xFF7
  5316                           tblptrl	equ	0xFF6
  5317                           tablat	equ	0xFF5
  5318                           intcon	equ	0xFF2
  5319                           intcon2	equ	0xFF1
  5320                           postinc0	equ	0xFEE
  5321                           wreg	equ	0xFE8
  5322                           indf1	equ	0xFE7
  5323                           postdec1	equ	0xFE5
  5324                           fsr1h	equ	0xFE2
  5325                           fsr1l	equ	0xFE1
  5326                           indf2	equ	0xFDF
  5327                           postinc2	equ	0xFDE
  5328                           postdec2	equ	0xFDD
  5329                           fsr2h	equ	0xFDA
  5330                           fsr2l	equ	0xFD9
  5331                           status	equ	0xFD8
  5332                           
  5333 ;; *************** function _sprintf *****************
  5334 ;; Defined at:
  5335 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprintf.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;  wh              2   30[BANK0 ] PTR unsigned char 
  5338 ;;		 -> getCurrentTimeInSeconds@str(2), 
  5339 ;;  f               2   32[BANK0 ] PTR const unsigned char 
  5340 ;;		 -> STR_5(5), STR_4(5), STR_3(5), 
  5341 ;; Auto vars:     Size  Location     Type
  5342 ;;  pb              4   38[BANK0 ] struct __prbuf
  5343 ;;  ap              2   36[BANK0 ] PTR void [1]
  5344 ;;		 -> ?_sprintf(2), ?_printf(2), 
  5345 ;; Return value:  Size  Location     Type
  5346 ;;                  2   30[BANK0 ] int 
  5347 ;; Registers used:
  5348 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5349 ;; Tracked objects:
  5350 ;;		On entry : 0/0
  5351 ;;		On exit  : 0/0
  5352 ;;		Unchanged: 0/0
  5353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5354 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5355 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5357 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5358 ;;Total ram usage:       12 bytes
  5359 ;; Hardware stack levels used:    1
  5360 ;; Hardware stack levels required when called:    9
  5361 ;; This function calls:
  5362 ;;		__doprnt
  5363 ;; This function is called by:
  5364 ;;		_getCurrentTimeInSeconds
  5365 ;; This function uses a non-reentrant model
  5366 ;;
  5367                           
  5368                           	psect	text19
  5369  002ADC                     __ptext19:
  5370                           	opt stack 0
  5371  002ADC                     _sprintf:
  5372                           	opt stack 18
  5373                           
  5374                           ; BSR set to: 0
  5375                           ;incstack = 0
  5376  002ADC  C09E  F0A6         	movff	sprintf@wh,sprintf@pb
  5377  002AE0  C09F  F0A7         	movff	sprintf@wh+1,sprintf@pb+1
  5378  002AE4  0E00               	movlw	0
  5379  002AE6  0100               	movlb	0	; () banked
  5380  002AE8  6FA8               	movwf	(sprintf@pb+2)& (0+255),b
  5381  002AEA  0E00               	movlw	0
  5382  002AEC  0100               	movlb	0	; () banked
  5383  002AEE  6FA9               	movwf	(sprintf@pb+3)& (0+255),b
  5384  002AF0  0EA2               	movlw	low (?_sprintf+4)
  5385  002AF2  0100               	movlb	0	; () banked
  5386  002AF4  6FA4               	movwf	sprintf@ap& (0+255),b
  5387  002AF6  0E00               	movlw	high (?_sprintf+4)
  5388  002AF8  0100               	movlb	0	; () banked
  5389  002AFA  6FA5               	movwf	(sprintf@ap+1)& (0+255),b
  5390                           
  5391                           ; BSR set to: 0
  5392  002AFC  0EA6               	movlw	low sprintf@pb
  5393  002AFE  0100               	movlb	0	; () banked
  5394  002B00  6F8C               	movwf	__doprnt@pb& (0+255),b
  5395  002B02  0E00               	movlw	high sprintf@pb
  5396  002B04  0100               	movlb	0	; () banked
  5397  002B06  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  5398  002B08  C0A0  F08E         	movff	sprintf@f,__doprnt@f
  5399  002B0C  C0A1  F08F         	movff	sprintf@f+1,__doprnt@f+1
  5400  002B10  0EA4               	movlw	low sprintf@ap
  5401  002B12  0100               	movlb	0	; () banked
  5402  002B14  6F90               	movwf	__doprnt@ap& (0+255),b
  5403  002B16  0E00               	movlw	high sprintf@ap
  5404  002B18  0100               	movlb	0	; () banked
  5405  002B1A  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  5406  002B1C  EC09  F000         	call	__doprnt	;wreg free
  5407  002B20  C0A6  FFD9         	movff	sprintf@pb,fsr2l
  5408  002B24  C0A7  FFDA         	movff	sprintf@pb+1,fsr2h
  5409  002B28  0E00               	movlw	0
  5410  002B2A  6EDF               	movwf	indf2,c
  5411  002B2C  0012               	return	
  5412  002B2E                     __end_of_sprintf:
  5413                           	opt stack 0
  5414                           tblptru	equ	0xFF8
  5415                           tblptrh	equ	0xFF7
  5416                           tblptrl	equ	0xFF6
  5417                           tablat	equ	0xFF5
  5418                           intcon	equ	0xFF2
  5419                           intcon2	equ	0xFF1
  5420                           postinc0	equ	0xFEE
  5421                           wreg	equ	0xFE8
  5422                           indf1	equ	0xFE7
  5423                           postdec1	equ	0xFE5
  5424                           fsr1h	equ	0xFE2
  5425                           fsr1l	equ	0xFE1
  5426                           indf2	equ	0xFDF
  5427                           postinc2	equ	0xFDE
  5428                           postdec2	equ	0xFDD
  5429                           fsr2h	equ	0xFDA
  5430                           fsr2l	equ	0xFD9
  5431                           status	equ	0xFD8
  5432                           
  5433 ;; *************** function _atoi *****************
  5434 ;; Defined at:
  5435 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\atoi.c"
  5436 ;; Parameters:    Size  Location     Type
  5437 ;;  s               2    6[BANK0 ] PTR const unsigned char 
  5438 ;;		 -> getCurrentTimeInSeconds@str(2), 
  5439 ;; Auto vars:     Size  Location     Type
  5440 ;;  a               2   11[BANK0 ] int 
  5441 ;;  sign            1   10[BANK0 ] unsigned char 
  5442 ;; Return value:  Size  Location     Type
  5443 ;;                  2    6[BANK0 ] int 
  5444 ;; Registers used:
  5445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5446 ;; Tracked objects:
  5447 ;;		On entry : 0/0
  5448 ;;		On exit  : 0/0
  5449 ;;		Unchanged: 0/0
  5450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5451 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5452 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5453 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5454 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5455 ;;Total ram usage:        7 bytes
  5456 ;; Hardware stack levels used:    1
  5457 ;; Hardware stack levels required when called:    7
  5458 ;; This function calls:
  5459 ;;		___wmul
  5460 ;;		_isdigit
  5461 ;; This function is called by:
  5462 ;;		_getCurrentTimeInSeconds
  5463 ;; This function uses a non-reentrant model
  5464 ;;
  5465                           
  5466                           	psect	text20
  5467  0021F8                     __ptext20:
  5468                           	opt stack 0
  5469  0021F8                     _atoi:
  5470                           	opt stack 20
  5471                           
  5472                           ;incstack = 0
  5473  0021F8  D003               	goto	l3405
  5474  0021FA                     l3403:
  5475  0021FA  0100               	movlb	0	; () banked
  5476  0021FC  4B86               	infsnz	atoi@s& (0+255),f,b
  5477  0021FE  2B87               	incf	(atoi@s+1)& (0+255),f,b
  5478  002200                     l3405:
  5479  002200  C086  FFD9         	movff	atoi@s,fsr2l
  5480  002204  C087  FFDA         	movff	atoi@s+1,fsr2h
  5481  002208  0E20               	movlw	32
  5482  00220A  18DE               	xorwf	postinc2,w,c
  5483  00220C  B4D8               	btfsc	status,2,c
  5484  00220E  D7F5               	goto	l3403
  5485  002210  C086  FFD9         	movff	atoi@s,fsr2l
  5486  002214  C087  FFDA         	movff	atoi@s+1,fsr2h
  5487  002218  0E09               	movlw	9
  5488  00221A  18DE               	xorwf	postinc2,w,c
  5489  00221C  B4D8               	btfsc	status,2,c
  5490  00221E  D7ED               	goto	l3403
  5491  002220  0E00               	movlw	0
  5492  002222  0100               	movlb	0	; () banked
  5493  002224  6F8C               	movwf	(atoi@a+1)& (0+255),b
  5494  002226  0E00               	movlw	0
  5495  002228  6F8B               	movwf	atoi@a& (0+255),b
  5496  00222A  0E00               	movlw	0
  5497  00222C  0100               	movlb	0	; () banked
  5498  00222E  6F8A               	movwf	atoi@sign& (0+255),b
  5499                           
  5500                           ; BSR set to: 0
  5501  002230  C086  FFD9         	movff	atoi@s,fsr2l
  5502  002234  C087  FFDA         	movff	atoi@s+1,fsr2h
  5503  002238  0E2D               	movlw	45
  5504  00223A  18DE               	xorwf	postinc2,w,c
  5505  00223C  A4D8               	btfss	status,2,c
  5506  00223E  D003               	goto	l3415
  5507                           
  5508                           ; BSR set to: 0
  5509  002240  0100               	movlb	0	; () banked
  5510  002242  2B8A               	incf	atoi@sign& (0+255),f,b
  5511  002244  D02E               	goto	l3421
  5512  002246                     l3415:
  5513                           
  5514                           ; BSR set to: 0
  5515  002246  C086  FFD9         	movff	atoi@s,fsr2l
  5516  00224A  C087  FFDA         	movff	atoi@s+1,fsr2h
  5517  00224E  0E2B               	movlw	43
  5518  002250  18DE               	xorwf	postinc2,w,c
  5519  002252  A4D8               	btfss	status,2,c
  5520  002254  D029               	goto	l3423
  5521  002256  D025               	goto	l3421
  5522  002258                     l3419:
  5523  002258  C08B  F080         	movff	atoi@a,___wmul@multiplier
  5524  00225C  C08C  F081         	movff	atoi@a+1,___wmul@multiplier+1
  5525  002260  0E00               	movlw	0
  5526  002262  0100               	movlb	0	; () banked
  5527  002264  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5528  002266  0E0A               	movlw	10
  5529  002268  6F82               	movwf	___wmul@multiplicand& (0+255),b
  5530  00226A  EC18  F017         	call	___wmul	;wreg free
  5531  00226E  C086  FFD9         	movff	atoi@s,fsr2l
  5532  002272  C087  FFDA         	movff	atoi@s+1,fsr2h
  5533  002276  50DF               	movf	indf2,w,c
  5534  002278  0100               	movlb	0	; () banked
  5535  00227A  6F88               	movwf	??_atoi& (0+255),b
  5536  00227C  6B89               	clrf	(??_atoi+1)& (0+255),b
  5537  00227E  0100               	movlb	0	; () banked
  5538  002280  5180               	movf	?___wmul& (0+255),w,b
  5539  002282  0100               	movlb	0	; () banked
  5540  002284  2788               	addwf	??_atoi& (0+255),f,b
  5541  002286  0100               	movlb	0	; () banked
  5542  002288  5181               	movf	(?___wmul+1)& (0+255),w,b
  5543  00228A  0100               	movlb	0	; () banked
  5544  00228C  2389               	addwfc	(??_atoi+1)& (0+255),f,b
  5545  00228E  0ED0               	movlw	208
  5546  002290  0100               	movlb	0	; () banked
  5547  002292  2588               	addwf	??_atoi& (0+255),w,b
  5548  002294  0100               	movlb	0	; () banked
  5549  002296  6F8B               	movwf	atoi@a& (0+255),b
  5550  002298  0EFF               	movlw	255
  5551  00229A  0100               	movlb	0	; () banked
  5552  00229C  2189               	addwfc	(??_atoi+1)& (0+255),w,b
  5553  00229E  0100               	movlb	0	; () banked
  5554  0022A0  6F8C               	movwf	(atoi@a+1)& (0+255),b
  5555  0022A2                     l3421:
  5556                           
  5557                           ; BSR set to: 0
  5558  0022A2  0100               	movlb	0	; () banked
  5559  0022A4  4B86               	infsnz	atoi@s& (0+255),f,b
  5560  0022A6  2B87               	incf	(atoi@s+1)& (0+255),f,b
  5561  0022A8                     l3423:
  5562                           
  5563                           ; BSR set to: 0
  5564  0022A8  C086  FFD9         	movff	atoi@s,fsr2l
  5565  0022AC  C087  FFDA         	movff	atoi@s+1,fsr2h
  5566  0022B0  50DF               	movf	indf2,w,c
  5567  0022B2  EC99  F017         	call	_isdigit
  5568  0022B6  B0D8               	btfsc	status,0,c
  5569  0022B8  D7CF               	goto	l3419
  5570  0022BA  0100               	movlb	0	; () banked
  5571  0022BC  518A               	movf	atoi@sign& (0+255),w,b
  5572  0022BE  0100               	movlb	0	; () banked
  5573  0022C0  B4D8               	btfsc	status,2,c
  5574  0022C2  D00E               	goto	l768
  5575                           
  5576                           ; BSR set to: 0
  5577  0022C4  C08B  F088         	movff	atoi@a,??_atoi
  5578  0022C8  C08C  F089         	movff	atoi@a+1,??_atoi+1
  5579  0022CC  0100               	movlb	0	; () banked
  5580  0022CE  1F88               	comf	??_atoi& (0+255),f,b
  5581  0022D0  1F89               	comf	(??_atoi+1)& (0+255),f,b
  5582  0022D2  4B88               	infsnz	??_atoi& (0+255),f,b
  5583  0022D4  2B89               	incf	(??_atoi+1)& (0+255),f,b
  5584  0022D6  C088  F086         	movff	??_atoi,?_atoi
  5585  0022DA  C089  F087         	movff	??_atoi+1,?_atoi+1
  5586  0022DE  0012               	return	
  5587  0022E0                     l768:
  5588                           
  5589                           ; BSR set to: 0
  5590  0022E0  C08B  F086         	movff	atoi@a,?_atoi
  5591  0022E4  C08C  F087         	movff	atoi@a+1,?_atoi+1
  5592                           
  5593                           ; BSR set to: 0
  5594  0022E8  0012               	return		;funcret
  5595  0022EA                     __end_of_atoi:
  5596                           	opt stack 0
  5597                           tblptru	equ	0xFF8
  5598                           tblptrh	equ	0xFF7
  5599                           tblptrl	equ	0xFF6
  5600                           tablat	equ	0xFF5
  5601                           intcon	equ	0xFF2
  5602                           intcon2	equ	0xFF1
  5603                           postinc0	equ	0xFEE
  5604                           wreg	equ	0xFE8
  5605                           indf1	equ	0xFE7
  5606                           postdec1	equ	0xFE5
  5607                           fsr1h	equ	0xFE2
  5608                           fsr1l	equ	0xFE1
  5609                           indf2	equ	0xFDF
  5610                           postinc2	equ	0xFDE
  5611                           postdec2	equ	0xFDD
  5612                           fsr2h	equ	0xFDA
  5613                           fsr2l	equ	0xFD9
  5614                           status	equ	0xFD8
  5615                           
  5616 ;; *************** function _extendSensorAreaArm *****************
  5617 ;; Defined at:
  5618 ;;		line 462 in file "main.c"
  5619 ;; Parameters:    Size  Location     Type
  5620 ;;		None
  5621 ;; Auto vars:     Size  Location     Type
  5622 ;;  i               2    1[BANK0 ] unsigned int 
  5623 ;; Return value:  Size  Location     Type
  5624 ;;                  1    wreg      void 
  5625 ;; Registers used:
  5626 ;;		wreg, status,2, status,0
  5627 ;; Tracked objects:
  5628 ;;		On entry : 0/0
  5629 ;;		On exit  : 0/0
  5630 ;;		Unchanged: 0/0
  5631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5633 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5634 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5635 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5636 ;;Total ram usage:        3 bytes
  5637 ;; Hardware stack levels used:    1
  5638 ;; Hardware stack levels required when called:    6
  5639 ;; This function calls:
  5640 ;;		Nothing
  5641 ;; This function is called by:
  5642 ;;		_operation
  5643 ;;		_pushBottle
  5644 ;; This function uses a non-reentrant model
  5645 ;;
  5646                           
  5647                           	psect	text21
  5648  002C68                     __ptext21:
  5649                           	opt stack 0
  5650  002C68                     _extendSensorAreaArm:
  5651                           	opt stack 22
  5652                           
  5653                           ;main.c: 463: unsigned int i;
  5654                           ;main.c: 464: for(i=0;i<10;i++){
  5655                           
  5656                           ; BSR set to: 0
  5657                           ;incstack = 0
  5658  002C68  0E00               	movlw	0
  5659  002C6A  0100               	movlb	0	; () banked
  5660  002C6C  6F82               	movwf	(extendSensorAreaArm@i+1)& (0+255),b
  5661  002C6E  0E00               	movlw	0
  5662  002C70  6F81               	movwf	extendSensorAreaArm@i& (0+255),b
  5663  002C72                     l3721:
  5664                           
  5665                           ; BSR set to: 0
  5666  002C72  0100               	movlb	0	; () banked
  5667  002C74  5182               	movf	(extendSensorAreaArm@i+1)& (0+255),w,b
  5668  002C76  E11B               	bnz	l352
  5669  002C78  0E0A               	movlw	10
  5670  002C7A  0100               	movlb	0	; () banked
  5671  002C7C  5D81               	subwf	extendSensorAreaArm@i& (0+255),w,b
  5672  002C7E  B0D8               	btfsc	status,0,c
  5673  002C80  0012               	return	
  5674                           
  5675                           ; BSR set to: 0
  5676                           ;main.c: 465: PORTCbits.RC2 = 1;
  5677                           
  5678                           ; BSR set to: 0
  5679  002C82  8482               	bsf	3970,2,c	;volatile
  5680                           
  5681                           ; BSR set to: 0
  5682                           ;main.c: 466: _delay((unsigned long)((800)*(8000000/4000000.0)));
  5683  002C84  0EE4               	movlw	228
  5684  002C86                     u8867:
  5685  002C86  D000               	nop2	
  5686  002C88  D000               	nop2	
  5687  002C8A  2EE8               	decfsz	wreg,f,c
  5688  002C8C  D7FC               	bra	u8867
  5689  002C8E  D000               	nop2	
  5690  002C90  D000               	nop2	
  5691                           
  5692                           ;main.c: 467: PORTCbits.RC2 = 0;
  5693  002C92  9482               	bcf	3970,2,c	;volatile
  5694                           
  5695                           ;main.c: 468: _delay((unsigned long)((19200)*(8000000/4000000.0)));
  5696  002C94  0E32               	movlw	50
  5697  002C96  0100               	movlb	0	; () banked
  5698  002C98  6F80               	movwf	??_extendSensorAreaArm& (0+255),b
  5699  002C9A  0EDD               	movlw	221
  5700  002C9C                     u8877:
  5701  002C9C  2EE8               	decfsz	wreg,f,c
  5702  002C9E  D7FE               	bra	u8877
  5703  002CA0  2F80               	decfsz	??_extendSensorAreaArm& (0+255),f,b
  5704  002CA2  D7FC               	bra	u8877
  5705  002CA4  D000               	nop2	
  5706  002CA6  0100               	movlb	0	; () banked
  5707  002CA8  4B81               	infsnz	extendSensorAreaArm@i& (0+255),f,b
  5708  002CAA  2B82               	incf	(extendSensorAreaArm@i+1)& (0+255),f,b
  5709  002CAC  D7E2               	goto	l3721
  5710  002CAE                     l352:
  5711                           
  5712                           ; BSR set to: 0
  5713  002CAE  0012               	return		;funcret
  5714  002CB0                     __end_of_extendSensorAreaArm:
  5715                           	opt stack 0
  5716                           tblptru	equ	0xFF8
  5717                           tblptrh	equ	0xFF7
  5718                           tblptrl	equ	0xFF6
  5719                           tablat	equ	0xFF5
  5720                           intcon	equ	0xFF2
  5721                           intcon2	equ	0xFF1
  5722                           postinc0	equ	0xFEE
  5723                           wreg	equ	0xFE8
  5724                           indf1	equ	0xFE7
  5725                           postdec1	equ	0xFE5
  5726                           fsr1h	equ	0xFE2
  5727                           fsr1l	equ	0xFE1
  5728                           indf2	equ	0xFDF
  5729                           postinc2	equ	0xFDE
  5730                           postdec2	equ	0xFDD
  5731                           fsr2h	equ	0xFDA
  5732                           fsr2l	equ	0xFD9
  5733                           status	equ	0xFD8
  5734                           
  5735 ;; *************** function _disableDCmotors *****************
  5736 ;; Defined at:
  5737 ;;		line 396 in file "main.c"
  5738 ;; Parameters:    Size  Location     Type
  5739 ;;		None
  5740 ;; Auto vars:     Size  Location     Type
  5741 ;;		None
  5742 ;; Return value:  Size  Location     Type
  5743 ;;                  1    wreg      void 
  5744 ;; Registers used:
  5745 ;;		None
  5746 ;; Tracked objects:
  5747 ;;		On entry : 0/0
  5748 ;;		On exit  : 0/0
  5749 ;;		Unchanged: 0/0
  5750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5755 ;;Total ram usage:        0 bytes
  5756 ;; Hardware stack levels used:    1
  5757 ;; Hardware stack levels required when called:    6
  5758 ;; This function calls:
  5759 ;;		Nothing
  5760 ;; This function is called by:
  5761 ;;		_operation
  5762 ;; This function uses a non-reentrant model
  5763 ;;
  5764                           
  5765                           	psect	text22
  5766  0030DE                     __ptext22:
  5767                           	opt stack 0
  5768  0030DE                     _disableDCmotors:
  5769                           	opt stack 22
  5770                           
  5771                           ;main.c: 397: (INTCONbits.GIE = 0);
  5772                           
  5773                           ; BSR set to: 0
  5774                           ;incstack = 0
  5775  0030DE  9EF2               	bcf	intcon,7,c	;volatile
  5776                           
  5777                           ;main.c: 398: TMR0IE = 1;
  5778  0030E0  8AF2               	bsf	intcon,5,c	;volatile
  5779                           
  5780                           ;main.c: 399: TMR1IE = 0;
  5781  0030E2  909D               	bcf	3997,0,c	;volatile
  5782  0030E4  0012               	return		;funcret
  5783  0030E6                     __end_of_disableDCmotors:
  5784                           	opt stack 0
  5785                           tblptru	equ	0xFF8
  5786                           tblptrh	equ	0xFF7
  5787                           tblptrl	equ	0xFF6
  5788                           tablat	equ	0xFF5
  5789                           intcon	equ	0xFF2
  5790                           intcon2	equ	0xFF1
  5791                           postinc0	equ	0xFEE
  5792                           wreg	equ	0xFE8
  5793                           indf1	equ	0xFE7
  5794                           postdec1	equ	0xFE5
  5795                           fsr1h	equ	0xFE2
  5796                           fsr1l	equ	0xFE1
  5797                           indf2	equ	0xFDF
  5798                           postinc2	equ	0xFDE
  5799                           postdec2	equ	0xFDD
  5800                           fsr2h	equ	0xFDA
  5801                           fsr2l	equ	0xFD9
  5802                           status	equ	0xFD8
  5803                           
  5804 ;; *************** function _activateDCmotors *****************
  5805 ;; Defined at:
  5806 ;;		line 380 in file "main.c"
  5807 ;; Parameters:    Size  Location     Type
  5808 ;;		None
  5809 ;; Auto vars:     Size  Location     Type
  5810 ;;		None
  5811 ;; Return value:  Size  Location     Type
  5812 ;;                  1    wreg      void 
  5813 ;; Registers used:
  5814 ;;		None
  5815 ;; Tracked objects:
  5816 ;;		On entry : 0/0
  5817 ;;		On exit  : 0/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5823 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5824 ;;Total ram usage:        0 bytes
  5825 ;; Hardware stack levels used:    1
  5826 ;; Hardware stack levels required when called:    6
  5827 ;; This function calls:
  5828 ;;		Nothing
  5829 ;; This function is called by:
  5830 ;;		_operation
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           	psect	text23
  5835  0030E6                     __ptext23:
  5836                           	opt stack 0
  5837  0030E6                     _activateDCmotors:
  5838                           	opt stack 22
  5839                           
  5840                           ;main.c: 381: TMR0IE = 0;
  5841                           
  5842                           ;incstack = 0
  5843  0030E6  9AF2               	bcf	intcon,5,c	;volatile
  5844                           
  5845                           ;main.c: 382: TMR1IE = 1;
  5846  0030E8  809D               	bsf	3997,0,c	;volatile
  5847                           
  5848                           ;main.c: 383: (INTCONbits.GIE = 1);
  5849  0030EA  8EF2               	bsf	intcon,7,c	;volatile
  5850  0030EC  0012               	return		;funcret
  5851  0030EE                     __end_of_activateDCmotors:
  5852                           	opt stack 0
  5853                           tblptru	equ	0xFF8
  5854                           tblptrh	equ	0xFF7
  5855                           tblptrl	equ	0xFF6
  5856                           tablat	equ	0xFF5
  5857                           intcon	equ	0xFF2
  5858                           intcon2	equ	0xFF1
  5859                           postinc0	equ	0xFEE
  5860                           wreg	equ	0xFE8
  5861                           indf1	equ	0xFE7
  5862                           postdec1	equ	0xFE5
  5863                           fsr1h	equ	0xFE2
  5864                           fsr1l	equ	0xFE1
  5865                           indf2	equ	0xFDF
  5866                           postinc2	equ	0xFDE
  5867                           postdec2	equ	0xFDD
  5868                           fsr2h	equ	0xFDA
  5869                           fsr2l	equ	0xFD9
  5870                           status	equ	0xFD8
  5871                           
  5872 ;; *************** function _displayMainProgramLcdScreen *****************
  5873 ;; Defined at:
  5874 ;;		line 223 in file "main.c"
  5875 ;; Parameters:    Size  Location     Type
  5876 ;;		None
  5877 ;; Auto vars:     Size  Location     Type
  5878 ;;		None
  5879 ;; Return value:  Size  Location     Type
  5880 ;;                  1    wreg      void 
  5881 ;; Registers used:
  5882 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5883 ;; Tracked objects:
  5884 ;;		On entry : 0/0
  5885 ;;		On exit  : 0/0
  5886 ;;		Unchanged: 0/0
  5887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5888 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5890 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5891 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5892 ;;Total ram usage:        4 bytes
  5893 ;; Hardware stack levels used:    1
  5894 ;; Hardware stack levels required when called:   11
  5895 ;; This function calls:
  5896 ;;		_lcdClear
  5897 ;;		_lcdInst
  5898 ;;		_printTime
  5899 ;;		_printf
  5900 ;;		_toggleRTCBasedOnCurrentMainProgramScreen
  5901 ;;		_updateCurrentTime
  5902 ;; This function is called by:
  5903 ;;		_main
  5904 ;;		_initializeLcdScreen
  5905 ;;		_enterSelectedSubProgramFromMainProgram
  5906 ;; This function uses a non-reentrant model
  5907 ;;
  5908                           
  5909                           	psect	text24
  5910  00269A                     __ptext24:
  5911                           	opt stack 0
  5912  00269A                     _displayMainProgramLcdScreen:
  5913                           	opt stack 17
  5914                           
  5915                           ;main.c: 224: lcdClear();
  5916                           
  5917                           ;incstack = 0
  5918  00269A  EC4E  F017         	call	_lcdClear	;wreg free
  5919                           
  5920                           ;main.c: 225: switch(currentMainProgramScreen){
  5921  00269E  D026               	goto	l7645
  5922  0026A0                     l7633:
  5923                           
  5924                           ;main.c: 227: lcdClear();
  5925  0026A0  EC4E  F017         	call	_lcdClear	;wreg free
  5926                           
  5927                           ;main.c: 228: printf("Begin Sorting");
  5928  0026A4  0E9B               	movlw	low STR_6
  5929  0026A6  0100               	movlb	0	; () banked
  5930  0026A8  6F9E               	movwf	printf@f& (0+255),b
  5931  0026AA  0EFF               	movlw	high STR_6
  5932  0026AC  0100               	movlb	0	; () banked
  5933  0026AE  6F9F               	movwf	(printf@f+1)& (0+255),b
  5934  0026B0  EC0F  F016         	call	_printf	;wreg free
  5935                           
  5936                           ;main.c: 229: break;
  5937  0026B4  D032               	goto	l7647
  5938  0026B6                     l7635:
  5939                           
  5940                           ;main.c: 231: updateCurrentTime();
  5941  0026B6  ECD7  F013         	call	_updateCurrentTime	;wreg free
  5942                           
  5943                           ;main.c: 232: printTime();
  5944  0026BA  ECC0  F015         	call	_printTime	;wreg free
  5945                           
  5946                           ;main.c: 233: break;
  5947  0026BE  D02D               	goto	l7647
  5948  0026C0                     l7639:
  5949                           
  5950                           ;main.c: 235: lcdClear();
  5951  0026C0  EC4E  F017         	call	_lcdClear	;wreg free
  5952                           
  5953                           ;main.c: 236: printf("Access EEPROM");
  5954  0026C4  0E8D               	movlw	low STR_7
  5955  0026C6  0100               	movlb	0	; () banked
  5956  0026C8  6F9E               	movwf	printf@f& (0+255),b
  5957  0026CA  0EFF               	movlw	high STR_7
  5958  0026CC  0100               	movlb	0	; () banked
  5959  0026CE  6F9F               	movwf	(printf@f+1)& (0+255),b
  5960  0026D0  EC0F  F016         	call	_printf	;wreg free
  5961                           
  5962                           ;main.c: 237: break;
  5963  0026D4  D022               	goto	l7647
  5964  0026D6                     l7641:
  5965                           
  5966                           ;main.c: 239: lcdClear();
  5967  0026D6  EC4E  F017         	call	_lcdClear	;wreg free
  5968                           
  5969                           ;main.c: 240: printf("Access Last Run ");
  5970  0026DA  0EBC               	movlw	low STR_8
  5971  0026DC  0100               	movlb	0	; () banked
  5972  0026DE  6F9E               	movwf	printf@f& (0+255),b
  5973  0026E0  0EFE               	movlw	high STR_8
  5974  0026E2  0100               	movlb	0	; () banked
  5975  0026E4  6F9F               	movwf	(printf@f+1)& (0+255),b
  5976  0026E6  EC0F  F016         	call	_printf	;wreg free
  5977                           
  5978                           ;main.c: 242: }
  5979                           
  5980                           ;main.c: 241: break;
  5981  0026EA  D017               	goto	l7647
  5982  0026EC                     l7645:
  5983  0026EC  C0E7  F0AE         	movff	_currentMainProgramScreen,??_displayMainProgramLcdScreen
  5984  0026F0  C0E8  F0AF         	movff	_currentMainProgramScreen+1,??_displayMainProgramLcdScreen+1
  5985                           
  5986                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5987                           ; Switch size 1, requested type "space"
  5988                           ; Number of cases is 1, Range of values is 0 to 0
  5989                           ; switch strategies available:
  5990                           ; Name         Instructions Cycles
  5991                           ; simple_byte            4     3 (average)
  5992                           ;	Chosen strategy is simple_byte
  5993  0026F4  0100               	movlb	0	; () banked
  5994  0026F6  51AF               	movf	(??_displayMainProgramLcdScreen+1)& (0+255),w,b
  5995  0026F8  0A00               	xorlw	0	; case 0
  5996  0026FA  A4D8               	btfss	status,2,c
  5997  0026FC  D00E               	goto	l7647
  5998                           
  5999                           ; BSR set to: 0
  6000                           ; Switch size 1, requested type "space"
  6001                           ; Number of cases is 4, Range of values is 0 to 3
  6002                           ; switch strategies available:
  6003                           ; Name         Instructions Cycles
  6004                           ; simple_byte           13     7 (average)
  6005                           ;	Chosen strategy is simple_byte
  6006  0026FE  0100               	movlb	0	; () banked
  6007  002700  51AE               	movf	??_displayMainProgramLcdScreen& (0+255),w,b
  6008  002702  0A00               	xorlw	0	; case 0
  6009  002704  B4D8               	btfsc	status,2,c
  6010  002706  D7CC               	goto	l7633
  6011  002708  0A01               	xorlw	1	; case 1
  6012  00270A  B4D8               	btfsc	status,2,c
  6013  00270C  D7D4               	goto	l7635
  6014  00270E  0A03               	xorlw	3	; case 2
  6015  002710  B4D8               	btfsc	status,2,c
  6016  002712  D7D6               	goto	l7639
  6017  002714  0A01               	xorlw	1	; case 3
  6018  002716  B4D8               	btfsc	status,2,c
  6019  002718  D7DE               	goto	l7641
  6020  00271A                     l7647:
  6021                           
  6022                           ;main.c: 243: lcdInst(0b11000000);;
  6023  00271A  0EC0               	movlw	192
  6024  00271C  EC46  F018         	call	_lcdInst
  6025                           
  6026                           ;main.c: 244: printf("<4  Start: A  6>");
  6027  002720  0ECD               	movlw	low STR_9
  6028  002722  0100               	movlb	0	; () banked
  6029  002724  6F9E               	movwf	printf@f& (0+255),b
  6030  002726  0EFE               	movlw	high STR_9
  6031  002728  0100               	movlb	0	; () banked
  6032  00272A  6F9F               	movwf	(printf@f+1)& (0+255),b
  6033  00272C  EC0F  F016         	call	_printf	;wreg free
  6034                           
  6035                           ;main.c: 245: toggleRTCBasedOnCurrentMainProgramScreen();
  6036  002730  EC33  F018         	call	_toggleRTCBasedOnCurrentMainProgramScreen	;wreg free
  6037  002734  0012               	return		;funcret
  6038  002736                     __end_of_displayMainProgramLcdScreen:
  6039                           	opt stack 0
  6040                           tblptru	equ	0xFF8
  6041                           tblptrh	equ	0xFF7
  6042                           tblptrl	equ	0xFF6
  6043                           tablat	equ	0xFF5
  6044                           intcon	equ	0xFF2
  6045                           intcon2	equ	0xFF1
  6046                           postinc0	equ	0xFEE
  6047                           wreg	equ	0xFE8
  6048                           indf1	equ	0xFE7
  6049                           postdec1	equ	0xFE5
  6050                           fsr1h	equ	0xFE2
  6051                           fsr1l	equ	0xFE1
  6052                           indf2	equ	0xFDF
  6053                           postinc2	equ	0xFDE
  6054                           postdec2	equ	0xFDD
  6055                           fsr2h	equ	0xFDA
  6056                           fsr2l	equ	0xFD9
  6057                           status	equ	0xFD8
  6058                           
  6059 ;; *************** function _updateCurrentTime *****************
  6060 ;; Defined at:
  6061 ;;		line 193 in file "main.c"
  6062 ;; Parameters:    Size  Location     Type
  6063 ;;		None
  6064 ;; Auto vars:     Size  Location     Type
  6065 ;;  i               1    3[BANK0 ] unsigned char 
  6066 ;; Return value:  Size  Location     Type
  6067 ;;                  1    wreg      void 
  6068 ;; Registers used:
  6069 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6070 ;; Tracked objects:
  6071 ;;		On entry : 0/0
  6072 ;;		On exit  : 0/0
  6073 ;;		Unchanged: 0/0
  6074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6076 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6078 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6079 ;;Total ram usage:        1 bytes
  6080 ;; Hardware stack levels used:    1
  6081 ;; Hardware stack levels required when called:    8
  6082 ;; This function calls:
  6083 ;;		_I2C_Master_Read
  6084 ;;		_I2C_Master_Start
  6085 ;;		_I2C_Master_Stop
  6086 ;;		_I2C_Master_Write
  6087 ;; This function is called by:
  6088 ;;		_displayMainProgramLcdScreen
  6089 ;;		_operation
  6090 ;; This function uses a non-reentrant model
  6091 ;;
  6092                           
  6093                           	psect	text25
  6094  0027AE                     __ptext25:
  6095                           	opt stack 0
  6096  0027AE                     _updateCurrentTime:
  6097                           	opt stack 19
  6098                           
  6099                           ;main.c: 195: I2C_Master_Start();
  6100                           
  6101                           ;incstack = 0
  6102  0027AE  EC7B  F018         	call	_I2C_Master_Start	;wreg free
  6103                           
  6104                           ;main.c: 196: I2C_Master_Write(0b11010000);
  6105  0027B2  0E00               	movlw	0
  6106  0027B4  0100               	movlb	0	; () banked
  6107  0027B6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6108  0027B8  0ED0               	movlw	208
  6109  0027BA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6110  0027BC  EC65  F018         	call	_I2C_Master_Write	;wreg free
  6111                           
  6112                           ;main.c: 197: I2C_Master_Write(0x00);
  6113  0027C0  0E00               	movlw	0
  6114  0027C2  0100               	movlb	0	; () banked
  6115  0027C4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6116  0027C6  0E00               	movlw	0
  6117  0027C8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6118  0027CA  EC65  F018         	call	_I2C_Master_Write	;wreg free
  6119                           
  6120                           ;main.c: 198: I2C_Master_Stop();
  6121  0027CE  EC77  F018         	call	_I2C_Master_Stop	;wreg free
  6122                           
  6123                           ;main.c: 201: I2C_Master_Start();
  6124  0027D2  EC7B  F018         	call	_I2C_Master_Start	;wreg free
  6125                           
  6126                           ;main.c: 202: I2C_Master_Write(0b11010001);
  6127  0027D6  0E00               	movlw	0
  6128  0027D8  0100               	movlb	0	; () banked
  6129  0027DA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6130  0027DC  0ED1               	movlw	209
  6131  0027DE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6132  0027E0  EC65  F018         	call	_I2C_Master_Write	;wreg free
  6133                           
  6134                           ;main.c: 203: for(unsigned char i=0;i<0x06;i++){
  6135  0027E4  0E00               	movlw	0
  6136  0027E6  0100               	movlb	0	; () banked
  6137  0027E8  6F83               	movwf	updateCurrentTime@i& (0+255),b
  6138  0027EA                     l3381:
  6139                           
  6140                           ; BSR set to: 0
  6141  0027EA  0E05               	movlw	5
  6142  0027EC  0100               	movlb	0	; () banked
  6143  0027EE  6583               	cpfsgt	updateCurrentTime@i& (0+255),b
  6144  0027F0  D001               	goto	l3385
  6145  0027F2  D010               	goto	l3391
  6146  0027F4                     l3385:
  6147                           
  6148                           ; BSR set to: 0
  6149                           ;main.c: 204: time[i] = I2C_Master_Read(1);
  6150  0027F4  0100               	movlb	0	; () banked
  6151  0027F6  5183               	movf	updateCurrentTime@i& (0+255),w,b
  6152  0027F8  0D01               	mullw	1
  6153  0027FA  0EE0               	movlw	low _time
  6154  0027FC  24F3               	addwf	prodl,w,c
  6155  0027FE  6ED9               	movwf	fsr2l,c
  6156  002800  0E00               	movlw	high _time
  6157  002802  20F4               	addwfc	prodh,w,c
  6158  002804  6EDA               	movwf	fsr2h,c
  6159  002806  0E01               	movlw	1
  6160  002808  EC82  F017         	call	_I2C_Master_Read
  6161  00280C  6EDF               	movwf	indf2,c
  6162  00280E  0100               	movlb	0	; () banked
  6163  002810  2B83               	incf	updateCurrentTime@i& (0+255),f,b
  6164  002812  D7EB               	goto	l3381
  6165  002814                     l3391:
  6166                           
  6167                           ; BSR set to: 0
  6168                           ;main.c: 205: }
  6169                           ;main.c: 206: time[6] = I2C_Master_Read(0);
  6170  002814  0E00               	movlw	0
  6171  002816  EC82  F017         	call	_I2C_Master_Read
  6172  00281A  0100               	movlb	0	; () banked
  6173  00281C  6FE6               	movwf	(_time+6)& (0+255),b
  6174                           
  6175                           ;main.c: 207: I2C_Master_Stop();
  6176  00281E  EC77  F018         	call	_I2C_Master_Stop	;wreg free
  6177  002822  0012               	return		;funcret
  6178  002824                     __end_of_updateCurrentTime:
  6179                           	opt stack 0
  6180                           tblptru	equ	0xFF8
  6181                           tblptrh	equ	0xFF7
  6182                           tblptrl	equ	0xFF6
  6183                           tablat	equ	0xFF5
  6184                           prodh	equ	0xFF4
  6185                           prodl	equ	0xFF3
  6186                           intcon	equ	0xFF2
  6187                           intcon2	equ	0xFF1
  6188                           postinc0	equ	0xFEE
  6189                           wreg	equ	0xFE8
  6190                           indf1	equ	0xFE7
  6191                           postdec1	equ	0xFE5
  6192                           fsr1h	equ	0xFE2
  6193                           fsr1l	equ	0xFE1
  6194                           indf2	equ	0xFDF
  6195                           postinc2	equ	0xFDE
  6196                           postdec2	equ	0xFDD
  6197                           fsr2h	equ	0xFDA
  6198                           fsr2l	equ	0xFD9
  6199                           status	equ	0xFD8
  6200                           
  6201 ;; *************** function _I2C_Master_Write *****************
  6202 ;; Defined at:
  6203 ;;		line 47 in file "I2C.c"
  6204 ;; Parameters:    Size  Location     Type
  6205 ;;  d               2    1[BANK0 ] unsigned int 
  6206 ;; Auto vars:     Size  Location     Type
  6207 ;;		None
  6208 ;; Return value:  Size  Location     Type
  6209 ;;                  1    wreg      void 
  6210 ;; Registers used:
  6211 ;;		wreg, status,2, status,0, cstack
  6212 ;; Tracked objects:
  6213 ;;		On entry : 0/0
  6214 ;;		On exit  : 0/0
  6215 ;;		Unchanged: 0/0
  6216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6217 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6218 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6220 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6221 ;;Total ram usage:        2 bytes
  6222 ;; Hardware stack levels used:    1
  6223 ;; Hardware stack levels required when called:    7
  6224 ;; This function calls:
  6225 ;;		_I2C_Master_Wait
  6226 ;; This function is called by:
  6227 ;;		_updateCurrentTime
  6228 ;; This function uses a non-reentrant model
  6229 ;;
  6230                           
  6231                           	psect	text26
  6232  0030CA                     __ptext26:
  6233                           	opt stack 0
  6234  0030CA                     _I2C_Master_Write:
  6235                           	opt stack 19
  6236                           
  6237                           ;I2C.c: 49: I2C_Master_Wait();
  6238                           
  6239                           ;incstack = 0
  6240  0030CA  EC29  F018         	call	_I2C_Master_Wait	;wreg free
  6241                           
  6242                           ;I2C.c: 50: SSPBUF = d;
  6243  0030CE  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  6244  0030D2  0012               	return		;funcret
  6245  0030D4                     __end_of_I2C_Master_Write:
  6246                           	opt stack 0
  6247                           tblptru	equ	0xFF8
  6248                           tblptrh	equ	0xFF7
  6249                           tblptrl	equ	0xFF6
  6250                           tablat	equ	0xFF5
  6251                           prodh	equ	0xFF4
  6252                           prodl	equ	0xFF3
  6253                           intcon	equ	0xFF2
  6254                           intcon2	equ	0xFF1
  6255                           postinc0	equ	0xFEE
  6256                           wreg	equ	0xFE8
  6257                           indf1	equ	0xFE7
  6258                           postdec1	equ	0xFE5
  6259                           fsr1h	equ	0xFE2
  6260                           fsr1l	equ	0xFE1
  6261                           indf2	equ	0xFDF
  6262                           postinc2	equ	0xFDE
  6263                           postdec2	equ	0xFDD
  6264                           fsr2h	equ	0xFDA
  6265                           fsr2l	equ	0xFD9
  6266                           status	equ	0xFD8
  6267                           
  6268 ;; *************** function _I2C_Master_Stop *****************
  6269 ;; Defined at:
  6270 ;;		line 41 in file "I2C.c"
  6271 ;; Parameters:    Size  Location     Type
  6272 ;;		None
  6273 ;; Auto vars:     Size  Location     Type
  6274 ;;		None
  6275 ;; Return value:  Size  Location     Type
  6276 ;;                  2  126[None  ] int 
  6277 ;; Registers used:
  6278 ;;		wreg, status,2, status,0, cstack
  6279 ;; Tracked objects:
  6280 ;;		On entry : 0/0
  6281 ;;		On exit  : 0/0
  6282 ;;		Unchanged: 0/0
  6283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6285 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6287 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6288 ;;Total ram usage:        0 bytes
  6289 ;; Hardware stack levels used:    1
  6290 ;; Hardware stack levels required when called:    7
  6291 ;; This function calls:
  6292 ;;		_I2C_Master_Wait
  6293 ;; This function is called by:
  6294 ;;		_updateCurrentTime
  6295 ;; This function uses a non-reentrant model
  6296 ;;
  6297                           
  6298                           	psect	text27
  6299  0030EE                     __ptext27:
  6300                           	opt stack 0
  6301  0030EE                     _I2C_Master_Stop:
  6302                           	opt stack 19
  6303                           
  6304                           ;I2C.c: 43: I2C_Master_Wait();
  6305                           
  6306                           ;incstack = 0
  6307  0030EE  EC29  F018         	call	_I2C_Master_Wait	;wreg free
  6308                           
  6309                           ;I2C.c: 44: PEN = 1;
  6310  0030F2  84C5               	bsf	4037,2,c	;volatile
  6311  0030F4  0012               	return		;funcret
  6312  0030F6                     __end_of_I2C_Master_Stop:
  6313                           	opt stack 0
  6314                           tblptru	equ	0xFF8
  6315                           tblptrh	equ	0xFF7
  6316                           tblptrl	equ	0xFF6
  6317                           tablat	equ	0xFF5
  6318                           prodh	equ	0xFF4
  6319                           prodl	equ	0xFF3
  6320                           intcon	equ	0xFF2
  6321                           intcon2	equ	0xFF1
  6322                           postinc0	equ	0xFEE
  6323                           wreg	equ	0xFE8
  6324                           indf1	equ	0xFE7
  6325                           postdec1	equ	0xFE5
  6326                           fsr1h	equ	0xFE2
  6327                           fsr1l	equ	0xFE1
  6328                           indf2	equ	0xFDF
  6329                           postinc2	equ	0xFDE
  6330                           postdec2	equ	0xFDD
  6331                           fsr2h	equ	0xFDA
  6332                           fsr2l	equ	0xFD9
  6333                           status	equ	0xFD8
  6334                           
  6335 ;; *************** function _I2C_Master_Start *****************
  6336 ;; Defined at:
  6337 ;;		line 29 in file "I2C.c"
  6338 ;; Parameters:    Size  Location     Type
  6339 ;;		None
  6340 ;; Auto vars:     Size  Location     Type
  6341 ;;		None
  6342 ;; Return value:  Size  Location     Type
  6343 ;;                  2  122[None  ] int 
  6344 ;; Registers used:
  6345 ;;		wreg, status,2, status,0, cstack
  6346 ;; Tracked objects:
  6347 ;;		On entry : 0/0
  6348 ;;		On exit  : 0/0
  6349 ;;		Unchanged: 0/0
  6350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6351 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6352 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6353 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6354 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6355 ;;Total ram usage:        0 bytes
  6356 ;; Hardware stack levels used:    1
  6357 ;; Hardware stack levels required when called:    7
  6358 ;; This function calls:
  6359 ;;		_I2C_Master_Wait
  6360 ;; This function is called by:
  6361 ;;		_updateCurrentTime
  6362 ;; This function uses a non-reentrant model
  6363 ;;
  6364                           
  6365                           	psect	text28
  6366  0030F6                     __ptext28:
  6367                           	opt stack 0
  6368  0030F6                     _I2C_Master_Start:
  6369                           	opt stack 19
  6370                           
  6371                           ;I2C.c: 31: I2C_Master_Wait();
  6372                           
  6373                           ;incstack = 0
  6374  0030F6  EC29  F018         	call	_I2C_Master_Wait	;wreg free
  6375                           
  6376                           ;I2C.c: 32: SEN = 1;
  6377  0030FA  80C5               	bsf	4037,0,c	;volatile
  6378  0030FC  0012               	return		;funcret
  6379  0030FE                     __end_of_I2C_Master_Start:
  6380                           	opt stack 0
  6381                           tblptru	equ	0xFF8
  6382                           tblptrh	equ	0xFF7
  6383                           tblptrl	equ	0xFF6
  6384                           tablat	equ	0xFF5
  6385                           prodh	equ	0xFF4
  6386                           prodl	equ	0xFF3
  6387                           intcon	equ	0xFF2
  6388                           intcon2	equ	0xFF1
  6389                           postinc0	equ	0xFEE
  6390                           wreg	equ	0xFE8
  6391                           indf1	equ	0xFE7
  6392                           postdec1	equ	0xFE5
  6393                           fsr1h	equ	0xFE2
  6394                           fsr1l	equ	0xFE1
  6395                           indf2	equ	0xFDF
  6396                           postinc2	equ	0xFDE
  6397                           postdec2	equ	0xFDD
  6398                           fsr2h	equ	0xFDA
  6399                           fsr2l	equ	0xFD9
  6400                           status	equ	0xFD8
  6401                           
  6402 ;; *************** function _I2C_Master_Read *****************
  6403 ;; Defined at:
  6404 ;;		line 53 in file "I2C.c"
  6405 ;; Parameters:    Size  Location     Type
  6406 ;;  a               1    wreg     unsigned char 
  6407 ;; Auto vars:     Size  Location     Type
  6408 ;;  a               1    1[BANK0 ] unsigned char 
  6409 ;;  temp            1    2[BANK0 ] unsigned char 
  6410 ;; Return value:  Size  Location     Type
  6411 ;;                  1    wreg      unsigned char 
  6412 ;; Registers used:
  6413 ;;		wreg, status,2, status,0, cstack
  6414 ;; Tracked objects:
  6415 ;;		On entry : 0/0
  6416 ;;		On exit  : 0/0
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6420 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6422 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6423 ;;Total ram usage:        2 bytes
  6424 ;; Hardware stack levels used:    1
  6425 ;; Hardware stack levels required when called:    7
  6426 ;; This function calls:
  6427 ;;		_I2C_Master_Wait
  6428 ;; This function is called by:
  6429 ;;		_updateCurrentTime
  6430 ;; This function uses a non-reentrant model
  6431 ;;
  6432                           
  6433                           	psect	text29
  6434  002F04                     __ptext29:
  6435                           	opt stack 0
  6436  002F04                     _I2C_Master_Read:
  6437                           	opt stack 19
  6438                           
  6439                           ;incstack = 0
  6440                           ;I2C_Master_Read@a stored from wreg
  6441  002F04  0100               	movlb	0	; () banked
  6442  002F06  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  6443                           
  6444                           ;I2C.c: 55: unsigned char temp;
  6445                           ;I2C.c: 56: I2C_Master_Wait();
  6446  002F08  EC29  F018         	call	_I2C_Master_Wait	;wreg free
  6447                           
  6448                           ;I2C.c: 57: RCEN = 1;
  6449  002F0C  86C5               	bsf	4037,3,c	;volatile
  6450                           
  6451                           ;I2C.c: 58: I2C_Master_Wait();
  6452  002F0E  EC29  F018         	call	_I2C_Master_Wait	;wreg free
  6453                           
  6454                           ;I2C.c: 59: temp = SSPBUF;
  6455  002F12  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  6456                           
  6457                           ;I2C.c: 60: I2C_Master_Wait();
  6458  002F16  EC29  F018         	call	_I2C_Master_Wait	;wreg free
  6459                           
  6460                           ;I2C.c: 61: ACKDT = (a)?0:1;
  6461  002F1A  0100               	movlb	0	; () banked
  6462  002F1C  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  6463  002F1E  0100               	movlb	0	; () banked
  6464  002F20  A4D8               	btfss	status,2,c
  6465  002F22  D002               	goto	u2720
  6466  002F24  8AC5               	bsf	4037,5,c	;volatile
  6467  002F26  D001               	goto	l3315
  6468  002F28                     u2720:
  6469  002F28  9AC5               	bcf	4037,5,c	;volatile
  6470  002F2A                     l3315:
  6471                           
  6472                           ;I2C.c: 62: ACKEN = 1;
  6473  002F2A  88C5               	bsf	4037,4,c	;volatile
  6474                           
  6475                           ;I2C.c: 63: return temp;
  6476  002F2C  0100               	movlb	0	; () banked
  6477  002F2E  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  6478  002F30  0012               	return	
  6479  002F32                     __end_of_I2C_Master_Read:
  6480                           	opt stack 0
  6481                           tblptru	equ	0xFF8
  6482                           tblptrh	equ	0xFF7
  6483                           tblptrl	equ	0xFF6
  6484                           tablat	equ	0xFF5
  6485                           prodh	equ	0xFF4
  6486                           prodl	equ	0xFF3
  6487                           intcon	equ	0xFF2
  6488                           intcon2	equ	0xFF1
  6489                           postinc0	equ	0xFEE
  6490                           wreg	equ	0xFE8
  6491                           indf1	equ	0xFE7
  6492                           postdec1	equ	0xFE5
  6493                           fsr1h	equ	0xFE2
  6494                           fsr1l	equ	0xFE1
  6495                           indf2	equ	0xFDF
  6496                           postinc2	equ	0xFDE
  6497                           postdec2	equ	0xFDD
  6498                           fsr2h	equ	0xFDA
  6499                           fsr2l	equ	0xFD9
  6500                           status	equ	0xFD8
  6501                           
  6502 ;; *************** function _I2C_Master_Wait *****************
  6503 ;; Defined at:
  6504 ;;		line 24 in file "I2C.c"
  6505 ;; Parameters:    Size  Location     Type
  6506 ;;		None
  6507 ;; Auto vars:     Size  Location     Type
  6508 ;;		None
  6509 ;; Return value:  Size  Location     Type
  6510 ;;                  1    wreg      void 
  6511 ;; Registers used:
  6512 ;;		wreg, status,2, status,0
  6513 ;; Tracked objects:
  6514 ;;		On entry : 0/0
  6515 ;;		On exit  : 0/0
  6516 ;;		Unchanged: 0/0
  6517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6520 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6521 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6522 ;;Total ram usage:        1 bytes
  6523 ;; Hardware stack levels used:    1
  6524 ;; Hardware stack levels required when called:    6
  6525 ;; This function calls:
  6526 ;;		Nothing
  6527 ;; This function is called by:
  6528 ;;		_I2C_Master_Start
  6529 ;;		_I2C_Master_Stop
  6530 ;;		_I2C_Master_Write
  6531 ;;		_I2C_Master_Read
  6532 ;;		_I2C_Master_RepeatedStart
  6533 ;; This function uses a non-reentrant model
  6534 ;;
  6535                           
  6536                           	psect	text30
  6537  003052                     __ptext30:
  6538                           	opt stack 0
  6539  003052                     _I2C_Master_Wait:
  6540                           	opt stack 19
  6541  003052                     l459:
  6542  003052  B4C7               	btfsc	4039,2,c	;volatile
  6543  003054  D7FE               	goto	l459
  6544  003056  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  6545  00305A  0E1F               	movlw	31
  6546  00305C  0100               	movlb	0	; () banked
  6547  00305E  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  6548  003060  B4D8               	btfsc	status,2,c
  6549  003062  0012               	return	
  6550  003064  D7F6               	goto	l459
  6551  003066                     __end_of_I2C_Master_Wait:
  6552                           	opt stack 0
  6553                           tblptru	equ	0xFF8
  6554                           tblptrh	equ	0xFF7
  6555                           tblptrl	equ	0xFF6
  6556                           tablat	equ	0xFF5
  6557                           prodh	equ	0xFF4
  6558                           prodl	equ	0xFF3
  6559                           intcon	equ	0xFF2
  6560                           intcon2	equ	0xFF1
  6561                           postinc0	equ	0xFEE
  6562                           wreg	equ	0xFE8
  6563                           indf1	equ	0xFE7
  6564                           postdec1	equ	0xFE5
  6565                           fsr1h	equ	0xFE2
  6566                           fsr1l	equ	0xFE1
  6567                           indf2	equ	0xFDF
  6568                           postinc2	equ	0xFDE
  6569                           postdec2	equ	0xFDD
  6570                           fsr2h	equ	0xFDA
  6571                           fsr2l	equ	0xFD9
  6572                           status	equ	0xFD8
  6573                           
  6574 ;; *************** function _toggleRTCBasedOnCurrentMainProgramScreen *****************
  6575 ;; Defined at:
  6576 ;;		line 184 in file "main.c"
  6577 ;; Parameters:    Size  Location     Type
  6578 ;;		None
  6579 ;; Auto vars:     Size  Location     Type
  6580 ;;		None
  6581 ;; Return value:  Size  Location     Type
  6582 ;;                  1    wreg      void 
  6583 ;; Registers used:
  6584 ;;		wreg, status,2, status,0
  6585 ;; Tracked objects:
  6586 ;;		On entry : 0/0
  6587 ;;		On exit  : 0/0
  6588 ;;		Unchanged: 0/0
  6589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6591 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6592 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6593 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6594 ;;Total ram usage:        0 bytes
  6595 ;; Hardware stack levels used:    1
  6596 ;; Hardware stack levels required when called:    6
  6597 ;; This function calls:
  6598 ;;		Nothing
  6599 ;; This function is called by:
  6600 ;;		_displayMainProgramLcdScreen
  6601 ;; This function uses a non-reentrant model
  6602 ;;
  6603                           
  6604                           	psect	text31
  6605  003066                     __ptext31:
  6606                           	opt stack 0
  6607  003066                     _toggleRTCBasedOnCurrentMainProgramScreen:
  6608                           	opt stack 21
  6609                           
  6610                           ;main.c: 185: if (currentMainProgramScreen == 1){
  6611                           
  6612                           ; BSR set to: 0
  6613                           ;incstack = 0
  6614  003066  0100               	movlb	0	; () banked
  6615  003068  05E7               	decf	_currentMainProgramScreen& (0+255),w,b
  6616  00306A  0100               	movlb	0	; () banked
  6617  00306C  11E8               	iorwf	(_currentMainProgramScreen+1)& (0+255),w,b
  6618  00306E  A4D8               	btfss	status,2,c
  6619  003070  D002               	goto	l246
  6620                           
  6621                           ; BSR set to: 0
  6622                           ;main.c: 186: (INTCONbits.GIE = 1);
  6623  003072  8EF2               	bsf	intcon,7,c	;volatile
  6624                           
  6625                           ;main.c: 187: }else{
  6626  003074  0012               	return	
  6627  003076                     l246:
  6628                           
  6629                           ; BSR set to: 0
  6630                           ;main.c: 188: (INTCONbits.GIE = 0);
  6631  003076  9EF2               	bcf	intcon,7,c	;volatile
  6632  003078  0012               	return	
  6633  00307A                     __end_of_toggleRTCBasedOnCurrentMainProgramScreen:
  6634                           	opt stack 0
  6635                           tblptru	equ	0xFF8
  6636                           tblptrh	equ	0xFF7
  6637                           tblptrl	equ	0xFF6
  6638                           tablat	equ	0xFF5
  6639                           prodh	equ	0xFF4
  6640                           prodl	equ	0xFF3
  6641                           intcon	equ	0xFF2
  6642                           intcon2	equ	0xFF1
  6643                           postinc0	equ	0xFEE
  6644                           wreg	equ	0xFE8
  6645                           indf1	equ	0xFE7
  6646                           postdec1	equ	0xFE5
  6647                           fsr1h	equ	0xFE2
  6648                           fsr1l	equ	0xFE1
  6649                           indf2	equ	0xFDF
  6650                           postinc2	equ	0xFDE
  6651                           postdec2	equ	0xFDD
  6652                           fsr2h	equ	0xFDA
  6653                           fsr2l	equ	0xFD9
  6654                           status	equ	0xFD8
  6655                           
  6656 ;; *************** function _printTime *****************
  6657 ;; Defined at:
  6658 ;;		line 148 in file "main.c"
  6659 ;; Parameters:    Size  Location     Type
  6660 ;;		None
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;		None
  6663 ;; Return value:  Size  Location     Type
  6664 ;;                  1    wreg      void 
  6665 ;; Registers used:
  6666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6667 ;; Tracked objects:
  6668 ;;		On entry : 0/0
  6669 ;;		On exit  : 0/0
  6670 ;;		Unchanged: 0/0
  6671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6676 ;;Total ram usage:        0 bytes
  6677 ;; Hardware stack levels used:    1
  6678 ;; Hardware stack levels required when called:   10
  6679 ;; This function calls:
  6680 ;;		_lcdInst
  6681 ;;		_printf
  6682 ;; This function is called by:
  6683 ;;		_displayMainProgramLcdScreen
  6684 ;; This function uses a non-reentrant model
  6685 ;;
  6686                           
  6687                           	psect	text32
  6688  002B80                     __ptext32:
  6689                           	opt stack 0
  6690  002B80                     _printTime:
  6691                           	opt stack 17
  6692                           
  6693                           ;main.c: 149: lcdInst(0b10000000);
  6694                           
  6695                           ; BSR set to: 0
  6696                           ;incstack = 0
  6697  002B80  0E80               	movlw	128
  6698  002B82  EC46  F018         	call	_lcdInst
  6699                           
  6700                           ;main.c: 150: printf("%02x/%02x   ", time[5],time[4]);
  6701  002B86  0ED2               	movlw	low STR_1
  6702  002B88  0100               	movlb	0	; () banked
  6703  002B8A  6F9E               	movwf	printf@f& (0+255),b
  6704  002B8C  0EFF               	movlw	high STR_1
  6705  002B8E  0100               	movlb	0	; () banked
  6706  002B90  6F9F               	movwf	(printf@f+1)& (0+255),b
  6707  002B92  C0E5  F0A0         	movff	_time+5,?_printf+2
  6708  002B96  0100               	movlb	0	; () banked
  6709  002B98  6BA1               	clrf	(?_printf+3)& (0+255),b
  6710  002B9A  C0E4  F0A2         	movff	_time+4,?_printf+4
  6711  002B9E  0100               	movlb	0	; () banked
  6712  002BA0  6BA3               	clrf	(?_printf+5)& (0+255),b
  6713  002BA2  EC0F  F016         	call	_printf	;wreg free
  6714                           
  6715                           ;main.c: 151: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
  6716  002BA6  0E70               	movlw	low STR_2
  6717  002BA8  0100               	movlb	0	; () banked
  6718  002BAA  6F9E               	movwf	printf@f& (0+255),b
  6719  002BAC  0EFF               	movlw	high STR_2
  6720  002BAE  0100               	movlb	0	; () banked
  6721  002BB0  6F9F               	movwf	(printf@f+1)& (0+255),b
  6722  002BB2  C0E2  F0A0         	movff	_time+2,?_printf+2
  6723  002BB6  0100               	movlb	0	; () banked
  6724  002BB8  6BA1               	clrf	(?_printf+3)& (0+255),b
  6725  002BBA  C0E1  F0A2         	movff	_time+1,?_printf+4
  6726  002BBE  0100               	movlb	0	; () banked
  6727  002BC0  6BA3               	clrf	(?_printf+5)& (0+255),b
  6728  002BC2  C0E0  F0A4         	movff	_time,?_printf+6
  6729  002BC6  0100               	movlb	0	; () banked
  6730  002BC8  6BA5               	clrf	(?_printf+7)& (0+255),b
  6731  002BCA  EC0F  F016         	call	_printf	;wreg free
  6732  002BCE  0012               	return		;funcret
  6733  002BD0                     __end_of_printTime:
  6734                           	opt stack 0
  6735                           tblptru	equ	0xFF8
  6736                           tblptrh	equ	0xFF7
  6737                           tblptrl	equ	0xFF6
  6738                           tablat	equ	0xFF5
  6739                           prodh	equ	0xFF4
  6740                           prodl	equ	0xFF3
  6741                           intcon	equ	0xFF2
  6742                           intcon2	equ	0xFF1
  6743                           postinc0	equ	0xFEE
  6744                           wreg	equ	0xFE8
  6745                           indf1	equ	0xFE7
  6746                           postdec1	equ	0xFE5
  6747                           fsr1h	equ	0xFE2
  6748                           fsr1l	equ	0xFE1
  6749                           indf2	equ	0xFDF
  6750                           postinc2	equ	0xFDE
  6751                           postdec2	equ	0xFDD
  6752                           fsr2h	equ	0xFDA
  6753                           fsr2l	equ	0xFD9
  6754                           status	equ	0xFD8
  6755                           
  6756 ;; *************** function _EEPROM *****************
  6757 ;; Defined at:
  6758 ;;		line 403 in file "main.c"
  6759 ;; Parameters:    Size  Location     Type
  6760 ;;		None
  6761 ;; Auto vars:     Size  Location     Type
  6762 ;;  timeStorage    14   53[BANK0 ] int [7]
  6763 ;;  storage        12   67[BANK0 ] int [6]
  6764 ;;  i               2   82[BANK0 ] int 
  6765 ;;  temp            1   79[BANK0 ] unsigned char 
  6766 ;;  screen_state    2   80[BANK0 ] int 
  6767 ;; Return value:  Size  Location     Type
  6768 ;;                  1    wreg      void 
  6769 ;; Registers used:
  6770 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6771 ;; Tracked objects:
  6772 ;;		On entry : 0/0
  6773 ;;		On exit  : 0/0
  6774 ;;		Unchanged: 0/0
  6775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6777 ;;      Locals:         0      31       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6778 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6779 ;;      Totals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6780 ;;Total ram usage:       33 bytes
  6781 ;; Hardware stack levels used:    1
  6782 ;; Hardware stack levels required when called:   13
  6783 ;; This function calls:
  6784 ;;		_cycleProgramScreenLeft
  6785 ;;		_cycleProgramScreenRight
  6786 ;;		_getEEPROM
  6787 ;;		_getPressedKeypadKey
  6788 ;;		_past_run_access
  6789 ;;		_update_eeprom_screen_state
  6790 ;; This function is called by:
  6791 ;;		_enterSelectedSubProgramFromMainProgram
  6792 ;; This function uses a non-reentrant model
  6793 ;;
  6794                           
  6795                           	psect	text33
  6796  001192                     __ptext33:
  6797                           	opt stack 0
  6798  001192                     _EEPROM:
  6799                           	opt stack 16
  6800                           
  6801                           ;main.c: 404: int screen_state = 0;
  6802                           
  6803                           ;incstack = 0
  6804  001192  0E00               	movlw	0
  6805  001194  0100               	movlb	0	; () banked
  6806  001196  6FD1               	movwf	(EEPROM@screen_state+1)& (0+255),b
  6807  001198  0E00               	movlw	0
  6808  00119A  6FD0               	movwf	EEPROM@screen_state& (0+255),b
  6809                           
  6810                           ; BSR set to: 0
  6811                           ;main.c: 405: update_eeprom_screen_state(screen_state);
  6812  00119C  C0D0  F0AC         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  6813  0011A0  C0D1  F0AD         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  6814  0011A4  ECFB  F012         	call	_update_eeprom_screen_state	;wreg free
  6815  0011A8                     l8011:
  6816                           
  6817                           ;main.c: 408: unsigned char temp = getPressedKeypadKey();
  6818  0011A8  EC68  F017         	call	_getPressedKeypadKey	;wreg free
  6819  0011AC  0100               	movlb	0	; () banked
  6820  0011AE  6FCF               	movwf	EEPROM@temp& (0+255),b
  6821                           
  6822                           ; BSR set to: 0
  6823                           ;main.c: 409: if (temp == keys[3]){
  6824  0011B0  0E2C               	movlw	low (_keys+3)
  6825  0011B2  6EF6               	movwf	tblptrl,c
  6826  0011B4  0EFE               	movlw	high (_keys+3)
  6827  0011B6  6EF7               	movwf	tblptrh,c
  6828  0011B8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  6829  0011B8  6AF8               	clrf	tblptru,c
  6830  0011BA                     	endif
  6831  0011BA                     	if	0	;tblptru may be non-zero
  6832  0011BA                     	endif
  6833  0011BA  0008               	tblrd		*
  6834  0011BC  50F5               	movf	tablat,w,c
  6835  0011BE  0100               	movlb	0	; () banked
  6836  0011C0  19CF               	xorwf	EEPROM@temp& (0+255),w,b
  6837  0011C2  A4D8               	btfss	status,2,c
  6838  0011C4  D0CB               	goto	l8069
  6839                           
  6840                           ; BSR set to: 0
  6841                           ;main.c: 410: int storage[6], timeStorage[7], i;
  6842                           ;main.c: 411: for (i = 0; i <6; i++){
  6843  0011C6  0E00               	movlw	0
  6844  0011C8  0100               	movlb	0	; () banked
  6845  0011CA  6FD3               	movwf	(EEPROM@i+1)& (0+255),b
  6846  0011CC  0E00               	movlw	0
  6847  0011CE  6FD2               	movwf	EEPROM@i& (0+255),b
  6848  0011D0                     l8017:
  6849                           
  6850                           ; BSR set to: 0
  6851  0011D0  0100               	movlb	0	; () banked
  6852  0011D2  BFD3               	btfsc	(EEPROM@i+1)& (0+255),7,b
  6853  0011D4  D008               	goto	l8021
  6854  0011D6  0100               	movlb	0	; () banked
  6855  0011D8  51D3               	movf	(EEPROM@i+1)& (0+255),w,b
  6856  0011DA  E123               	bnz	l8027
  6857  0011DC  0E06               	movlw	6
  6858  0011DE  0100               	movlb	0	; () banked
  6859  0011E0  5DD2               	subwf	EEPROM@i& (0+255),w,b
  6860  0011E2  B0D8               	btfsc	status,0,c
  6861  0011E4  D01E               	goto	l8027
  6862  0011E6                     l8021:
  6863                           
  6864                           ; BSR set to: 0
  6865                           ;main.c: 412: storage[i] = runInfo[i];
  6866  0011E6  90D8               	bcf	status,0,c
  6867  0011E8  0100               	movlb	0	; () banked
  6868  0011EA  35D2               	rlcf	EEPROM@i& (0+255),w,b
  6869  0011EC  6ED9               	movwf	fsr2l,c
  6870  0011EE  0100               	movlb	0	; () banked
  6871  0011F0  35D3               	rlcf	(EEPROM@i+1)& (0+255),w,b
  6872  0011F2  6EDA               	movwf	fsr2h,c
  6873  0011F4  0EE9               	movlw	low _runInfo
  6874  0011F6  26D9               	addwf	fsr2l,f,c
  6875  0011F8  0E00               	movlw	high _runInfo
  6876  0011FA  22DA               	addwfc	fsr2h,f,c
  6877  0011FC  90D8               	bcf	status,0,c
  6878  0011FE  0100               	movlb	0	; () banked
  6879  001200  35D2               	rlcf	EEPROM@i& (0+255),w,b
  6880  001202  6EE1               	movwf	fsr1l,c
  6881  001204  0100               	movlb	0	; () banked
  6882  001206  35D3               	rlcf	(EEPROM@i+1)& (0+255),w,b
  6883  001208  6EE2               	movwf	fsr1h,c
  6884  00120A  0EC3               	movlw	low EEPROM@storage
  6885  00120C  26E1               	addwf	fsr1l,f,c
  6886  00120E  0E00               	movlw	high EEPROM@storage
  6887  001210  22E2               	addwfc	fsr1h,f,c
  6888  001212  CFDE FFE6          	movff	postinc2,postinc1
  6889  001216  CFDD FFE5          	movff	postdec2,postdec1
  6890                           
  6891                           ; BSR set to: 0
  6892  00121A  0100               	movlb	0	; () banked
  6893  00121C  4BD2               	infsnz	EEPROM@i& (0+255),f,b
  6894  00121E  2BD3               	incf	(EEPROM@i+1)& (0+255),f,b
  6895  001220  D7D7               	goto	l8017
  6896  001222                     l8027:
  6897                           
  6898                           ; BSR set to: 0
  6899                           ;main.c: 413: }
  6900                           ;main.c: 414: for (i = 0; i<7; i++){
  6901  001222  0E00               	movlw	0
  6902  001224  0100               	movlb	0	; () banked
  6903  001226  6FD3               	movwf	(EEPROM@i+1)& (0+255),b
  6904  001228  0E00               	movlw	0
  6905  00122A  6FD2               	movwf	EEPROM@i& (0+255),b
  6906  00122C                     l8029:
  6907                           
  6908                           ; BSR set to: 0
  6909  00122C  0100               	movlb	0	; () banked
  6910  00122E  BFD3               	btfsc	(EEPROM@i+1)& (0+255),7,b
  6911  001230  D008               	goto	l8033
  6912  001232  0100               	movlb	0	; () banked
  6913  001234  51D3               	movf	(EEPROM@i+1)& (0+255),w,b
  6914  001236  E124               	bnz	l8039
  6915  001238  0E07               	movlw	7
  6916  00123A  0100               	movlb	0	; () banked
  6917  00123C  5DD2               	subwf	EEPROM@i& (0+255),w,b
  6918  00123E  B0D8               	btfsc	status,0,c
  6919  001240  D01F               	goto	l8039
  6920  001242                     l8033:
  6921                           
  6922                           ; BSR set to: 0
  6923                           ;main.c: 415: timeStorage[i] = lastRunTime[i];
  6924  001242  0ED9               	movlw	low _lastRunTime
  6925  001244  0100               	movlb	0	; () banked
  6926  001246  25D2               	addwf	EEPROM@i& (0+255),w,b
  6927  001248  6ED9               	movwf	fsr2l,c
  6928  00124A  0E00               	movlw	high _lastRunTime
  6929  00124C  0100               	movlb	0	; () banked
  6930  00124E  21D3               	addwfc	(EEPROM@i+1)& (0+255),w,b
  6931  001250  6EDA               	movwf	fsr2h,c
  6932  001252  50DF               	movf	indf2,w,c
  6933  001254  0100               	movlb	0	; () banked
  6934  001256  6FB3               	movwf	??_EEPROM& (0+255),b
  6935  001258  6BB4               	clrf	(??_EEPROM+1)& (0+255),b
  6936  00125A  90D8               	bcf	status,0,c
  6937  00125C  0100               	movlb	0	; () banked
  6938  00125E  35D2               	rlcf	EEPROM@i& (0+255),w,b
  6939  001260  6ED9               	movwf	fsr2l,c
  6940  001262  0100               	movlb	0	; () banked
  6941  001264  35D3               	rlcf	(EEPROM@i+1)& (0+255),w,b
  6942  001266  6EDA               	movwf	fsr2h,c
  6943  001268  0EB5               	movlw	low EEPROM@timeStorage
  6944  00126A  26D9               	addwf	fsr2l,f,c
  6945  00126C  0E00               	movlw	high EEPROM@timeStorage
  6946  00126E  22DA               	addwfc	fsr2h,f,c
  6947  001270  C0B3  FFDE         	movff	??_EEPROM,postinc2
  6948  001274  C0B4  FFDD         	movff	??_EEPROM+1,postdec2
  6949                           
  6950                           ; BSR set to: 0
  6951  001278  0100               	movlb	0	; () banked
  6952  00127A  4BD2               	infsnz	EEPROM@i& (0+255),f,b
  6953  00127C  2BD3               	incf	(EEPROM@i+1)& (0+255),f,b
  6954  00127E  D7D6               	goto	l8029
  6955  001280                     l8039:
  6956                           
  6957                           ; BSR set to: 0
  6958                           ;main.c: 416: }
  6959                           ;main.c: 417: getEEPROM(screen_state);
  6960  001280  C0D0  F088         	movff	EEPROM@screen_state,getEEPROM@num
  6961  001284  C0D1  F089         	movff	EEPROM@screen_state+1,getEEPROM@num+1
  6962  001288  ECDF  F00D         	call	_getEEPROM	;wreg free
  6963                           
  6964                           ;main.c: 418: past_run_access();
  6965  00128C  EC46  F012         	call	_past_run_access	;wreg free
  6966                           
  6967                           ;main.c: 419: update_eeprom_screen_state(screen_state);
  6968  001290  C0D0  F0AC         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  6969  001294  C0D1  F0AD         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  6970  001298  ECFB  F012         	call	_update_eeprom_screen_state	;wreg free
  6971                           
  6972                           ;main.c: 420: for (i = 0; i <6; i++){
  6973  00129C  0E00               	movlw	0
  6974  00129E  0100               	movlb	0	; () banked
  6975  0012A0  6FD3               	movwf	(EEPROM@i+1)& (0+255),b
  6976  0012A2  0E00               	movlw	0
  6977  0012A4  6FD2               	movwf	EEPROM@i& (0+255),b
  6978  0012A6                     l8047:
  6979                           
  6980                           ; BSR set to: 0
  6981  0012A6  0100               	movlb	0	; () banked
  6982  0012A8  BFD3               	btfsc	(EEPROM@i+1)& (0+255),7,b
  6983  0012AA  D008               	goto	l8051
  6984  0012AC  0100               	movlb	0	; () banked
  6985  0012AE  51D3               	movf	(EEPROM@i+1)& (0+255),w,b
  6986  0012B0  E123               	bnz	l8057
  6987  0012B2  0E06               	movlw	6
  6988  0012B4  0100               	movlb	0	; () banked
  6989  0012B6  5DD2               	subwf	EEPROM@i& (0+255),w,b
  6990  0012B8  B0D8               	btfsc	status,0,c
  6991  0012BA  D01E               	goto	l8057
  6992  0012BC                     l8051:
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;main.c: 421: runInfo[i] = storage[i];
  6996  0012BC  90D8               	bcf	status,0,c
  6997  0012BE  0100               	movlb	0	; () banked
  6998  0012C0  35D2               	rlcf	EEPROM@i& (0+255),w,b
  6999  0012C2  6ED9               	movwf	fsr2l,c
  7000  0012C4  0100               	movlb	0	; () banked
  7001  0012C6  35D3               	rlcf	(EEPROM@i+1)& (0+255),w,b
  7002  0012C8  6EDA               	movwf	fsr2h,c
  7003  0012CA  0EC3               	movlw	low EEPROM@storage
  7004  0012CC  26D9               	addwf	fsr2l,f,c
  7005  0012CE  0E00               	movlw	high EEPROM@storage
  7006  0012D0  22DA               	addwfc	fsr2h,f,c
  7007  0012D2  90D8               	bcf	status,0,c
  7008  0012D4  0100               	movlb	0	; () banked
  7009  0012D6  35D2               	rlcf	EEPROM@i& (0+255),w,b
  7010  0012D8  6EE1               	movwf	fsr1l,c
  7011  0012DA  0100               	movlb	0	; () banked
  7012  0012DC  35D3               	rlcf	(EEPROM@i+1)& (0+255),w,b
  7013  0012DE  6EE2               	movwf	fsr1h,c
  7014  0012E0  0EE9               	movlw	low _runInfo
  7015  0012E2  26E1               	addwf	fsr1l,f,c
  7016  0012E4  0E00               	movlw	high _runInfo
  7017  0012E6  22E2               	addwfc	fsr1h,f,c
  7018  0012E8  CFDE FFE6          	movff	postinc2,postinc1
  7019  0012EC  CFDD FFE5          	movff	postdec2,postdec1
  7020                           
  7021                           ; BSR set to: 0
  7022  0012F0  0100               	movlb	0	; () banked
  7023  0012F2  4BD2               	infsnz	EEPROM@i& (0+255),f,b
  7024  0012F4  2BD3               	incf	(EEPROM@i+1)& (0+255),f,b
  7025  0012F6  D7D7               	goto	l8047
  7026  0012F8                     l8057:
  7027                           
  7028                           ; BSR set to: 0
  7029                           ;main.c: 422: }
  7030                           ;main.c: 423: for (i = 0; i<7; i++){
  7031  0012F8  0E00               	movlw	0
  7032  0012FA  0100               	movlb	0	; () banked
  7033  0012FC  6FD3               	movwf	(EEPROM@i+1)& (0+255),b
  7034  0012FE  0E00               	movlw	0
  7035  001300  6FD2               	movwf	EEPROM@i& (0+255),b
  7036                           
  7037                           ; BSR set to: 0
  7038  001302  0100               	movlb	0	; () banked
  7039  001304  BFD3               	btfsc	(EEPROM@i+1)& (0+255),7,b
  7040  001306  D00A               	goto	l8063
  7041  001308  0100               	movlb	0	; () banked
  7042  00130A  51D3               	movf	(EEPROM@i+1)& (0+255),w,b
  7043  00130C  E106               	bnz	u8610
  7044  00130E  0E07               	movlw	7
  7045  001310  0100               	movlb	0	; () banked
  7046  001312  5DD2               	subwf	EEPROM@i& (0+255),w,b
  7047  001314  B0D8               	btfsc	status,0,c
  7048  001316  D748               	goto	l8011
  7049  001318  D001               	goto	l8063
  7050  00131A                     u8610:
  7051                           
  7052                           ; BSR set to: 0
  7053  00131A  D746               	goto	l8011
  7054  00131C                     l8063:
  7055                           
  7056                           ; BSR set to: 0
  7057                           ;main.c: 424: lastRunTime[i] = timeStorage[i];
  7058  00131C  90D8               	bcf	status,0,c
  7059  00131E  0100               	movlb	0	; () banked
  7060  001320  35D2               	rlcf	EEPROM@i& (0+255),w,b
  7061  001322  6ED9               	movwf	fsr2l,c
  7062  001324  0100               	movlb	0	; () banked
  7063  001326  35D3               	rlcf	(EEPROM@i+1)& (0+255),w,b
  7064  001328  6EDA               	movwf	fsr2h,c
  7065  00132A  0EB5               	movlw	low EEPROM@timeStorage
  7066  00132C  26D9               	addwf	fsr2l,f,c
  7067  00132E  0E00               	movlw	high EEPROM@timeStorage
  7068  001330  22DA               	addwfc	fsr2h,f,c
  7069  001332  0ED9               	movlw	low _lastRunTime
  7070  001334  0100               	movlb	0	; () banked
  7071  001336  25D2               	addwf	EEPROM@i& (0+255),w,b
  7072  001338  6EE1               	movwf	fsr1l,c
  7073  00133A  0E00               	movlw	high _lastRunTime
  7074  00133C  0100               	movlb	0	; () banked
  7075  00133E  21D3               	addwfc	(EEPROM@i+1)& (0+255),w,b
  7076  001340  6EE2               	movwf	fsr1h,c
  7077  001342  CFDF FFE7          	movff	indf2,indf1
  7078                           
  7079                           ; BSR set to: 0
  7080  001346  0100               	movlb	0	; () banked
  7081  001348  4BD2               	infsnz	EEPROM@i& (0+255),f,b
  7082  00134A  2BD3               	incf	(EEPROM@i+1)& (0+255),f,b
  7083                           
  7084                           ; BSR set to: 0
  7085  00134C  0100               	movlb	0	; () banked
  7086  00134E  BFD3               	btfsc	(EEPROM@i+1)& (0+255),7,b
  7087  001350  D7E5               	goto	l8063
  7088  001352  0100               	movlb	0	; () banked
  7089  001354  51D3               	movf	(EEPROM@i+1)& (0+255),w,b
  7090  001356  E101               	bnz	u8620
  7091  001358  D7DA               	goto	L3
  7092  00135A                     u8620:
  7093                           
  7094                           ; BSR set to: 0
  7095                           ;main.c: 425: }
  7096                           ;main.c: 426: }else if (temp == keys[15]){
  7097  00135A  D726               	goto	l8011
  7098  00135C                     l8069:
  7099                           
  7100                           ; BSR set to: 0
  7101  00135C  0E38               	movlw	low (_keys+15)
  7102  00135E  6EF6               	movwf	tblptrl,c
  7103  001360  0EFE               	movlw	high (_keys+15)
  7104  001362  6EF7               	movwf	tblptrh,c
  7105  001364                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7106  001364  6AF8               	clrf	tblptru,c
  7107  001366                     	endif
  7108  001366                     	if	0	;tblptru may be non-zero
  7109  001366                     	endif
  7110  001366  0008               	tblrd		*
  7111  001368  50F5               	movf	tablat,w,c
  7112  00136A  0100               	movlb	0	; () banked
  7113  00136C  19CF               	xorwf	EEPROM@temp& (0+255),w,b
  7114  00136E  B4D8               	btfsc	status,2,c
  7115  001370  0012               	return	
  7116                           
  7117                           ; BSR set to: 0
  7118                           
  7119                           ; BSR set to: 0
  7120                           
  7121                           ; BSR set to: 0
  7122                           ;main.c: 428: }else if (temp == keys[4]){
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;main.c: 427: break;
  7126  001372  0E2D               	movlw	low (_keys+4)
  7127  001374  6EF6               	movwf	tblptrl,c
  7128  001376  0EFE               	movlw	high (_keys+4)
  7129  001378  6EF7               	movwf	tblptrh,c
  7130  00137A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7131  00137A  6AF8               	clrf	tblptru,c
  7132  00137C                     	endif
  7133  00137C                     	if	0	;tblptru may be non-zero
  7134  00137C                     	endif
  7135  00137C  0008               	tblrd		*
  7136  00137E  50F5               	movf	tablat,w,c
  7137  001380  0100               	movlb	0	; () banked
  7138  001382  19CF               	xorwf	EEPROM@temp& (0+255),w,b
  7139  001384  A4D8               	btfss	status,2,c
  7140  001386  D019               	goto	l8081
  7141                           
  7142                           ; BSR set to: 0
  7143                           ;main.c: 429: cycleProgramScreenLeft(&screen_state,0,3);
  7144  001388  0ED0               	movlw	low EEPROM@screen_state
  7145  00138A  0100               	movlb	0	; () banked
  7146  00138C  6F80               	movwf	cycleProgramScreenLeft@programScreen& (0+255),b
  7147  00138E  0E00               	movlw	high EEPROM@screen_state
  7148  001390  0100               	movlb	0	; () banked
  7149  001392  6F81               	movwf	(cycleProgramScreenLeft@programScreen+1)& (0+255),b
  7150  001394  0E00               	movlw	0
  7151  001396  0100               	movlb	0	; () banked
  7152  001398  6F83               	movwf	(cycleProgramScreenLeft@min+1)& (0+255),b
  7153  00139A  0E00               	movlw	0
  7154  00139C  6F82               	movwf	cycleProgramScreenLeft@min& (0+255),b
  7155  00139E  0E00               	movlw	0
  7156  0013A0  0100               	movlb	0	; () banked
  7157  0013A2  6F85               	movwf	(cycleProgramScreenLeft@max+1)& (0+255),b
  7158  0013A4  0E03               	movlw	3
  7159  0013A6  6F84               	movwf	cycleProgramScreenLeft@max& (0+255),b
  7160  0013A8  ECFA  F016         	call	_cycleProgramScreenLeft	;wreg free
  7161                           
  7162                           ;main.c: 430: update_eeprom_screen_state(screen_state);
  7163  0013AC  C0D0  F0AC         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  7164  0013B0  C0D1  F0AD         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  7165  0013B4  ECFB  F012         	call	_update_eeprom_screen_state	;wreg free
  7166                           
  7167                           ;main.c: 431: }else if (temp == keys[6]){
  7168  0013B8  D6F7               	goto	l8011
  7169  0013BA                     l8081:
  7170  0013BA  0E2F               	movlw	low (_keys+6)
  7171  0013BC  6EF6               	movwf	tblptrl,c
  7172  0013BE  0EFE               	movlw	high (_keys+6)
  7173  0013C0  6EF7               	movwf	tblptrh,c
  7174  0013C2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7175  0013C2  6AF8               	clrf	tblptru,c
  7176  0013C4                     	endif
  7177  0013C4                     	if	0	;tblptru may be non-zero
  7178  0013C4                     	endif
  7179  0013C4  0008               	tblrd		*
  7180  0013C6  50F5               	movf	tablat,w,c
  7181  0013C8  0100               	movlb	0	; () banked
  7182  0013CA  19CF               	xorwf	EEPROM@temp& (0+255),w,b
  7183  0013CC  A4D8               	btfss	status,2,c
  7184  0013CE  D6EC               	goto	l8011
  7185                           
  7186                           ; BSR set to: 0
  7187                           ;main.c: 432: cycleProgramScreenRight(&screen_state,0,3);
  7188  0013D0  0ED0               	movlw	low EEPROM@screen_state
  7189  0013D2  0100               	movlb	0	; () banked
  7190  0013D4  6F80               	movwf	cycleProgramScreenRight@programScreen& (0+255),b
  7191  0013D6  0E00               	movlw	high EEPROM@screen_state
  7192  0013D8  0100               	movlb	0	; () banked
  7193  0013DA  6F81               	movwf	(cycleProgramScreenRight@programScreen+1)& (0+255),b
  7194  0013DC  0E00               	movlw	0
  7195  0013DE  0100               	movlb	0	; () banked
  7196  0013E0  6F83               	movwf	(cycleProgramScreenRight@min+1)& (0+255),b
  7197  0013E2  0E00               	movlw	0
  7198  0013E4  6F82               	movwf	cycleProgramScreenRight@min& (0+255),b
  7199  0013E6  0E00               	movlw	0
  7200  0013E8  0100               	movlb	0	; () banked
  7201  0013EA  6F85               	movwf	(cycleProgramScreenRight@max+1)& (0+255),b
  7202  0013EC  0E03               	movlw	3
  7203  0013EE  6F84               	movwf	cycleProgramScreenRight@max& (0+255),b
  7204  0013F0  ECDC  F016         	call	_cycleProgramScreenRight	;wreg free
  7205                           
  7206                           ;main.c: 433: update_eeprom_screen_state(screen_state);
  7207  0013F4  C0D0  F0AC         	movff	EEPROM@screen_state,update_eeprom_screen_state@num
  7208  0013F8  C0D1  F0AD         	movff	EEPROM@screen_state+1,update_eeprom_screen_state@num+1
  7209  0013FC  ECFB  F012         	call	_update_eeprom_screen_state	;wreg free
  7210  001400  D6D3               	goto	l8011
  7211  001402                     __end_of_EEPROM:
  7212                           	opt stack 0
  7213                           tblptru	equ	0xFF8
  7214                           tblptrh	equ	0xFF7
  7215                           tblptrl	equ	0xFF6
  7216                           tablat	equ	0xFF5
  7217                           prodh	equ	0xFF4
  7218                           prodl	equ	0xFF3
  7219                           intcon	equ	0xFF2
  7220                           intcon2	equ	0xFF1
  7221                           postinc0	equ	0xFEE
  7222                           wreg	equ	0xFE8
  7223                           indf1	equ	0xFE7
  7224                           postinc1	equ	0xFE6
  7225                           postdec1	equ	0xFE5
  7226                           fsr1h	equ	0xFE2
  7227                           fsr1l	equ	0xFE1
  7228                           indf2	equ	0xFDF
  7229                           postinc2	equ	0xFDE
  7230                           postdec2	equ	0xFDD
  7231                           fsr2h	equ	0xFDA
  7232                           fsr2l	equ	0xFD9
  7233                           status	equ	0xFD8
  7234                           
  7235 ;; *************** function _update_eeprom_screen_state *****************
  7236 ;; Defined at:
  7237 ;;		line 249 in file "main.c"
  7238 ;; Parameters:    Size  Location     Type
  7239 ;;  num             2   44[BANK0 ] int 
  7240 ;; Auto vars:     Size  Location     Type
  7241 ;;		None
  7242 ;; Return value:  Size  Location     Type
  7243 ;;                  1    wreg      void 
  7244 ;; Registers used:
  7245 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7246 ;; Tracked objects:
  7247 ;;		On entry : 0/0
  7248 ;;		On exit  : 0/0
  7249 ;;		Unchanged: 0/0
  7250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7251 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7253 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7254 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7255 ;;Total ram usage:        4 bytes
  7256 ;; Hardware stack levels used:    1
  7257 ;; Hardware stack levels required when called:   11
  7258 ;; This function calls:
  7259 ;;		_lcdClear
  7260 ;;		_lcdInst
  7261 ;;		_printf
  7262 ;; This function is called by:
  7263 ;;		_EEPROM
  7264 ;; This function uses a non-reentrant model
  7265 ;;
  7266                           
  7267                           	psect	text34
  7268  0025F6                     __ptext34:
  7269                           	opt stack 0
  7270  0025F6                     _update_eeprom_screen_state:
  7271                           	opt stack 17
  7272                           
  7273                           ;main.c: 250: lcdClear();
  7274                           
  7275                           ;incstack = 0
  7276  0025F6  EC4E  F017         	call	_lcdClear	;wreg free
  7277                           
  7278                           ;main.c: 251: switch(num){
  7279  0025FA  D02C               	goto	l7715
  7280  0025FC                     l7705:
  7281                           
  7282                           ;main.c: 253: lcdClear();
  7283  0025FC  EC4E  F017         	call	_lcdClear	;wreg free
  7284                           
  7285                           ;main.c: 254: printf("Recent Run");
  7286  002600  0EEB               	movlw	low STR_10
  7287  002602  0100               	movlb	0	; () banked
  7288  002604  6F9E               	movwf	printf@f& (0+255),b
  7289  002606  0EFF               	movlw	high STR_10
  7290  002608  0100               	movlb	0	; () banked
  7291  00260A  6F9F               	movwf	(printf@f+1)& (0+255),b
  7292  00260C  EC0F  F016         	call	_printf	;wreg free
  7293                           
  7294                           ;main.c: 255: break;
  7295  002610  D038               	goto	l7717
  7296  002612                     l7707:
  7297                           
  7298                           ;main.c: 257: lcdClear();
  7299  002612  EC4E  F017         	call	_lcdClear	;wreg free
  7300                           
  7301                           ;main.c: 258: printf("   Past Run 2  ");
  7302  002616  0E00               	movlw	low STR_11
  7303  002618  0100               	movlb	0	; () banked
  7304  00261A  6F9E               	movwf	printf@f& (0+255),b
  7305  00261C  0EFF               	movlw	high STR_11
  7306  00261E  0100               	movlb	0	; () banked
  7307  002620  6F9F               	movwf	(printf@f+1)& (0+255),b
  7308  002622  EC0F  F016         	call	_printf	;wreg free
  7309                           
  7310                           ;main.c: 259: break;
  7311  002626  D02D               	goto	l7717
  7312  002628                     l7709:
  7313                           
  7314                           ;main.c: 261: lcdClear();
  7315  002628  EC4E  F017         	call	_lcdClear	;wreg free
  7316                           
  7317                           ;main.c: 262: printf("   Past Run 3  ");
  7318  00262C  0E10               	movlw	low STR_12
  7319  00262E  0100               	movlb	0	; () banked
  7320  002630  6F9E               	movwf	printf@f& (0+255),b
  7321  002632  0EFF               	movlw	high STR_12
  7322  002634  0100               	movlb	0	; () banked
  7323  002636  6F9F               	movwf	(printf@f+1)& (0+255),b
  7324  002638  EC0F  F016         	call	_printf	;wreg free
  7325                           
  7326                           ;main.c: 263: break;
  7327  00263C  D022               	goto	l7717
  7328  00263E                     l7711:
  7329                           
  7330                           ;main.c: 265: lcdClear();
  7331  00263E  EC4E  F017         	call	_lcdClear	;wreg free
  7332                           
  7333                           ;main.c: 266: printf("   Past Run 4  ");
  7334  002642  0E20               	movlw	low STR_13
  7335  002644  0100               	movlb	0	; () banked
  7336  002646  6F9E               	movwf	printf@f& (0+255),b
  7337  002648  0EFF               	movlw	high STR_13
  7338  00264A  0100               	movlb	0	; () banked
  7339  00264C  6F9F               	movwf	(printf@f+1)& (0+255),b
  7340  00264E  EC0F  F016         	call	_printf	;wreg free
  7341                           
  7342                           ;main.c: 268: }
  7343                           
  7344                           ;main.c: 267: break;
  7345  002652  D017               	goto	l7717
  7346  002654                     l7715:
  7347  002654  C0AC  F0AE         	movff	update_eeprom_screen_state@num,??_update_eeprom_screen_state
  7348  002658  C0AD  F0AF         	movff	update_eeprom_screen_state@num+1,??_update_eeprom_screen_state+1
  7349                           
  7350                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7351                           ; Switch size 1, requested type "space"
  7352                           ; Number of cases is 1, Range of values is 0 to 0
  7353                           ; switch strategies available:
  7354                           ; Name         Instructions Cycles
  7355                           ; simple_byte            4     3 (average)
  7356                           ;	Chosen strategy is simple_byte
  7357  00265C  0100               	movlb	0	; () banked
  7358  00265E  51AF               	movf	(??_update_eeprom_screen_state+1)& (0+255),w,b
  7359  002660  0A00               	xorlw	0	; case 0
  7360  002662  A4D8               	btfss	status,2,c
  7361  002664  D00E               	goto	l7717
  7362                           
  7363                           ; BSR set to: 0
  7364                           ; Switch size 1, requested type "space"
  7365                           ; Number of cases is 4, Range of values is 0 to 3
  7366                           ; switch strategies available:
  7367                           ; Name         Instructions Cycles
  7368                           ; simple_byte           13     7 (average)
  7369                           ;	Chosen strategy is simple_byte
  7370  002666  0100               	movlb	0	; () banked
  7371  002668  51AE               	movf	??_update_eeprom_screen_state& (0+255),w,b
  7372  00266A  0A00               	xorlw	0	; case 0
  7373  00266C  B4D8               	btfsc	status,2,c
  7374  00266E  D7C6               	goto	l7705
  7375  002670  0A01               	xorlw	1	; case 1
  7376  002672  B4D8               	btfsc	status,2,c
  7377  002674  D7CE               	goto	l7707
  7378  002676  0A03               	xorlw	3	; case 2
  7379  002678  B4D8               	btfsc	status,2,c
  7380  00267A  D7D6               	goto	l7709
  7381  00267C  0A01               	xorlw	1	; case 3
  7382  00267E  B4D8               	btfsc	status,2,c
  7383  002680  D7DE               	goto	l7711
  7384  002682                     l7717:
  7385                           
  7386                           ;main.c: 269: lcdInst(0b11000000);;
  7387  002682  0EC0               	movlw	192
  7388  002684  EC46  F018         	call	_lcdInst
  7389                           
  7390                           ;main.c: 270: printf("<4  Nav: A/D  6>");
  7391  002688  0EDE               	movlw	low STR_14
  7392  00268A  0100               	movlb	0	; () banked
  7393  00268C  6F9E               	movwf	printf@f& (0+255),b
  7394  00268E  0EFE               	movlw	high STR_14
  7395  002690  0100               	movlb	0	; () banked
  7396  002692  6F9F               	movwf	(printf@f+1)& (0+255),b
  7397  002694  EC0F  F016         	call	_printf	;wreg free
  7398  002698  0012               	return		;funcret
  7399  00269A                     __end_of_update_eeprom_screen_state:
  7400                           	opt stack 0
  7401                           tblptru	equ	0xFF8
  7402                           tblptrh	equ	0xFF7
  7403                           tblptrl	equ	0xFF6
  7404                           tablat	equ	0xFF5
  7405                           prodh	equ	0xFF4
  7406                           prodl	equ	0xFF3
  7407                           intcon	equ	0xFF2
  7408                           intcon2	equ	0xFF1
  7409                           postinc0	equ	0xFEE
  7410                           wreg	equ	0xFE8
  7411                           indf1	equ	0xFE7
  7412                           postinc1	equ	0xFE6
  7413                           postdec1	equ	0xFE5
  7414                           fsr1h	equ	0xFE2
  7415                           fsr1l	equ	0xFE1
  7416                           indf2	equ	0xFDF
  7417                           postinc2	equ	0xFDE
  7418                           postdec2	equ	0xFDD
  7419                           fsr2h	equ	0xFDA
  7420                           fsr2l	equ	0xFD9
  7421                           status	equ	0xFD8
  7422                           
  7423 ;; *************** function _past_run_access *****************
  7424 ;; Defined at:
  7425 ;;		line 515 in file "main.c"
  7426 ;; Parameters:    Size  Location     Type
  7427 ;;		None
  7428 ;; Auto vars:     Size  Location     Type
  7429 ;;  temp            1   48[BANK0 ] unsigned char 
  7430 ;;  screen_state    2   49[BANK0 ] int 
  7431 ;; Return value:  Size  Location     Type
  7432 ;;                  1    wreg      void 
  7433 ;; Registers used:
  7434 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7435 ;; Tracked objects:
  7436 ;;		On entry : 0/0
  7437 ;;		On exit  : 0/0
  7438 ;;		Unchanged: 0/0
  7439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7441 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7443 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7444 ;;Total ram usage:        3 bytes
  7445 ;; Hardware stack levels used:    1
  7446 ;; Hardware stack levels required when called:   12
  7447 ;; This function calls:
  7448 ;;		_cycleProgramScreenLeft
  7449 ;;		_cycleProgramScreenRight
  7450 ;;		_getPressedKeypadKey
  7451 ;;		_update_past_run_screen_state
  7452 ;; This function is called by:
  7453 ;;		_enterSelectedSubProgramFromMainProgram
  7454 ;;		_EEPROM
  7455 ;; This function uses a non-reentrant model
  7456 ;;
  7457                           
  7458                           	psect	text35
  7459  00248C                     __ptext35:
  7460                           	opt stack 0
  7461  00248C                     _past_run_access:
  7462                           	opt stack 17
  7463                           
  7464                           ;main.c: 516: int screen_state = 6;
  7465                           
  7466                           ;incstack = 0
  7467  00248C  0E00               	movlw	0
  7468  00248E  0100               	movlb	0	; () banked
  7469  002490  6FB2               	movwf	(past_run_access@screen_state+1)& (0+255),b
  7470  002492  0E06               	movlw	6
  7471  002494  6FB1               	movwf	past_run_access@screen_state& (0+255),b
  7472                           
  7473                           ; BSR set to: 0
  7474                           ;main.c: 517: update_past_run_screen_state(screen_state);
  7475  002496  C0B1  F0AC         	movff	past_run_access@screen_state,update_past_run_screen_state@num
  7476  00249A  C0B2  F0AD         	movff	past_run_access@screen_state+1,update_past_run_screen_state@num+1
  7477  00249E  EC01  F00A         	call	_update_past_run_screen_state	;wreg free
  7478  0024A2                     l7661:
  7479                           
  7480                           ;main.c: 519: unsigned char temp = getPressedKeypadKey();
  7481  0024A2  EC68  F017         	call	_getPressedKeypadKey	;wreg free
  7482  0024A6  0100               	movlb	0	; () banked
  7483  0024A8  6FB0               	movwf	past_run_access@temp& (0+255),b
  7484                           
  7485                           ; BSR set to: 0
  7486                           ;main.c: 520: if (temp == keys[15]){
  7487  0024AA  0E38               	movlw	low (_keys+15)
  7488  0024AC  6EF6               	movwf	tblptrl,c
  7489  0024AE  0EFE               	movlw	high (_keys+15)
  7490  0024B0  6EF7               	movwf	tblptrh,c
  7491  0024B2                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7492  0024B2  6AF8               	clrf	tblptru,c
  7493  0024B4                     	endif
  7494  0024B4                     	if	0	;tblptru may be non-zero
  7495  0024B4                     	endif
  7496  0024B4  0008               	tblrd		*
  7497  0024B6  50F5               	movf	tablat,w,c
  7498  0024B8  0100               	movlb	0	; () banked
  7499  0024BA  19B0               	xorwf	past_run_access@temp& (0+255),w,b
  7500  0024BC  B4D8               	btfsc	status,2,c
  7501  0024BE  0012               	return	
  7502                           
  7503                           ; BSR set to: 0
  7504                           
  7505                           ; BSR set to: 0
  7506                           
  7507                           ; BSR set to: 0
  7508                           ;main.c: 522: }else if (temp == keys[4]){
  7509                           
  7510                           ; BSR set to: 0
  7511                           ;main.c: 521: break;
  7512  0024C0  0E2D               	movlw	low (_keys+4)
  7513  0024C2  6EF6               	movwf	tblptrl,c
  7514  0024C4  0EFE               	movlw	high (_keys+4)
  7515  0024C6  6EF7               	movwf	tblptrh,c
  7516  0024C8                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7517  0024C8  6AF8               	clrf	tblptru,c
  7518  0024CA                     	endif
  7519  0024CA                     	if	0	;tblptru may be non-zero
  7520  0024CA                     	endif
  7521  0024CA  0008               	tblrd		*
  7522  0024CC  50F5               	movf	tablat,w,c
  7523  0024CE  0100               	movlb	0	; () banked
  7524  0024D0  19B0               	xorwf	past_run_access@temp& (0+255),w,b
  7525  0024D2  A4D8               	btfss	status,2,c
  7526  0024D4  D017               	goto	l7675
  7527                           
  7528                           ; BSR set to: 0
  7529                           ;main.c: 523: cycleProgramScreenLeft(screen_state,0,6);
  7530  0024D6  C0B1  F080         	movff	past_run_access@screen_state,cycleProgramScreenLeft@programScreen
  7531  0024DA  C0B2  F081         	movff	past_run_access@screen_state+1,cycleProgramScreenLeft@programScreen+1
  7532  0024DE  0E00               	movlw	0
  7533  0024E0  0100               	movlb	0	; () banked
  7534  0024E2  6F83               	movwf	(cycleProgramScreenLeft@min+1)& (0+255),b
  7535  0024E4  0E00               	movlw	0
  7536  0024E6  6F82               	movwf	cycleProgramScreenLeft@min& (0+255),b
  7537  0024E8  0E00               	movlw	0
  7538  0024EA  0100               	movlb	0	; () banked
  7539  0024EC  6F85               	movwf	(cycleProgramScreenLeft@max+1)& (0+255),b
  7540  0024EE  0E06               	movlw	6
  7541  0024F0  6F84               	movwf	cycleProgramScreenLeft@max& (0+255),b
  7542  0024F2  ECFA  F016         	call	_cycleProgramScreenLeft	;wreg free
  7543                           
  7544                           ;main.c: 524: update_past_run_screen_state(screen_state);
  7545  0024F6  C0B1  F0AC         	movff	past_run_access@screen_state,update_past_run_screen_state@num
  7546  0024FA  C0B2  F0AD         	movff	past_run_access@screen_state+1,update_past_run_screen_state@num+1
  7547  0024FE  EC01  F00A         	call	_update_past_run_screen_state	;wreg free
  7548                           
  7549                           ;main.c: 525: }else if (temp == keys[6]){
  7550  002502  D7CF               	goto	l7661
  7551  002504                     l7675:
  7552  002504  0E2F               	movlw	low (_keys+6)
  7553  002506  6EF6               	movwf	tblptrl,c
  7554  002508  0EFE               	movlw	high (_keys+6)
  7555  00250A  6EF7               	movwf	tblptrh,c
  7556  00250C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  7557  00250C  6AF8               	clrf	tblptru,c
  7558  00250E                     	endif
  7559  00250E                     	if	0	;tblptru may be non-zero
  7560  00250E                     	endif
  7561  00250E  0008               	tblrd		*
  7562  002510  50F5               	movf	tablat,w,c
  7563  002512  0100               	movlb	0	; () banked
  7564  002514  19B0               	xorwf	past_run_access@temp& (0+255),w,b
  7565  002516  A4D8               	btfss	status,2,c
  7566  002518  D7C4               	goto	l7661
  7567                           
  7568                           ; BSR set to: 0
  7569                           ;main.c: 526: cycleProgramScreenRight(screen_state,0,6);
  7570  00251A  C0B1  F080         	movff	past_run_access@screen_state,cycleProgramScreenRight@programScreen
  7571  00251E  C0B2  F081         	movff	past_run_access@screen_state+1,cycleProgramScreenRight@programScreen+1
  7572  002522  0E00               	movlw	0
  7573  002524  0100               	movlb	0	; () banked
  7574  002526  6F83               	movwf	(cycleProgramScreenRight@min+1)& (0+255),b
  7575  002528  0E00               	movlw	0
  7576  00252A  6F82               	movwf	cycleProgramScreenRight@min& (0+255),b
  7577  00252C  0E00               	movlw	0
  7578  00252E  0100               	movlb	0	; () banked
  7579  002530  6F85               	movwf	(cycleProgramScreenRight@max+1)& (0+255),b
  7580  002532  0E06               	movlw	6
  7581  002534  6F84               	movwf	cycleProgramScreenRight@max& (0+255),b
  7582  002536  ECDC  F016         	call	_cycleProgramScreenRight	;wreg free
  7583                           
  7584                           ;main.c: 527: update_past_run_screen_state(screen_state);
  7585  00253A  C0B1  F0AC         	movff	past_run_access@screen_state,update_past_run_screen_state@num
  7586  00253E  C0B2  F0AD         	movff	past_run_access@screen_state+1,update_past_run_screen_state@num+1
  7587  002542  EC01  F00A         	call	_update_past_run_screen_state	;wreg free
  7588  002546  D7AD               	goto	l7661
  7589  002548                     __end_of_past_run_access:
  7590                           	opt stack 0
  7591                           tblptru	equ	0xFF8
  7592                           tblptrh	equ	0xFF7
  7593                           tblptrl	equ	0xFF6
  7594                           tablat	equ	0xFF5
  7595                           prodh	equ	0xFF4
  7596                           prodl	equ	0xFF3
  7597                           intcon	equ	0xFF2
  7598                           intcon2	equ	0xFF1
  7599                           postinc0	equ	0xFEE
  7600                           wreg	equ	0xFE8
  7601                           indf1	equ	0xFE7
  7602                           postinc1	equ	0xFE6
  7603                           postdec1	equ	0xFE5
  7604                           fsr1h	equ	0xFE2
  7605                           fsr1l	equ	0xFE1
  7606                           indf2	equ	0xFDF
  7607                           postinc2	equ	0xFDE
  7608                           postdec2	equ	0xFDD
  7609                           fsr2h	equ	0xFDA
  7610                           fsr2l	equ	0xFD9
  7611                           status	equ	0xFD8
  7612                           
  7613 ;; *************** function _update_past_run_screen_state *****************
  7614 ;; Defined at:
  7615 ;;		line 274 in file "main.c"
  7616 ;; Parameters:    Size  Location     Type
  7617 ;;  num             2   44[BANK0 ] int 
  7618 ;; Auto vars:     Size  Location     Type
  7619 ;;		None
  7620 ;; Return value:  Size  Location     Type
  7621 ;;                  1    wreg      void 
  7622 ;; Registers used:
  7623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7624 ;; Tracked objects:
  7625 ;;		On entry : 0/0
  7626 ;;		On exit  : 0/0
  7627 ;;		Unchanged: 0/0
  7628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7629 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7631 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7632 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7633 ;;Total ram usage:        4 bytes
  7634 ;; Hardware stack levels used:    1
  7635 ;; Hardware stack levels required when called:   11
  7636 ;; This function calls:
  7637 ;;		_lcdClear
  7638 ;;		_lcdInst
  7639 ;;		_printf
  7640 ;; This function is called by:
  7641 ;;		_past_run_access
  7642 ;; This function uses a non-reentrant model
  7643 ;;
  7644                           
  7645                           	psect	text36
  7646  001402                     __ptext36:
  7647                           	opt stack 0
  7648  001402                     _update_past_run_screen_state:
  7649                           	opt stack 17
  7650                           
  7651                           ;main.c: 275: lcdClear();
  7652                           
  7653                           ;incstack = 0
  7654  001402  EC4E  F017         	call	_lcdClear	;wreg free
  7655                           
  7656                           ;main.c: 276: switch(num){
  7657  001406  D081               	goto	l7621
  7658  001408                     l7605:
  7659                           
  7660                           ;main.c: 278: lcdClear();
  7661  001408  EC4E  F017         	call	_lcdClear	;wreg free
  7662                           
  7663                           ;main.c: 279: printf("Time taken: %is", runInfo[0]);
  7664  00140C  0E60               	movlw	low STR_15
  7665  00140E  0100               	movlb	0	; () banked
  7666  001410  6F9E               	movwf	printf@f& (0+255),b
  7667  001412  0EFF               	movlw	high STR_15
  7668  001414  0100               	movlb	0	; () banked
  7669  001416  6F9F               	movwf	(printf@f+1)& (0+255),b
  7670  001418  C0E9  F0A0         	movff	_runInfo,?_printf+2
  7671  00141C  C0EA  F0A1         	movff	_runInfo+1,?_printf+3
  7672  001420  EC0F  F016         	call	_printf	;wreg free
  7673                           
  7674                           ;main.c: 280: break;
  7675  001424  D092               	goto	l7623
  7676  001426                     l7607:
  7677                           
  7678                           ;main.c: 282: lcdClear();
  7679  001426  EC4E  F017         	call	_lcdClear	;wreg free
  7680                           
  7681                           ;main.c: 283: printf("# Bottles: %i", runInfo[1]);
  7682  00142A  0EB7               	movlw	low STR_16
  7683  00142C  0100               	movlb	0	; () banked
  7684  00142E  6F9E               	movwf	printf@f& (0+255),b
  7685  001430  0EFF               	movlw	high STR_16
  7686  001432  0100               	movlb	0	; () banked
  7687  001434  6F9F               	movwf	(printf@f+1)& (0+255),b
  7688  001436  C0EB  F0A0         	movff	_runInfo+2,?_printf+2
  7689  00143A  C0EC  F0A1         	movff	_runInfo+3,?_printf+3
  7690  00143E  EC0F  F016         	call	_printf	;wreg free
  7691                           
  7692                           ;main.c: 284: break;
  7693  001442  D083               	goto	l7623
  7694  001444                     l7609:
  7695                           
  7696                           ;main.c: 286: lcdClear();
  7697  001444  EC4E  F017         	call	_lcdClear	;wreg free
  7698                           
  7699                           ;main.c: 287: printf("Yop w/Cap: %i", runInfo[2]);
  7700  001448  0EA9               	movlw	low STR_17
  7701  00144A  0100               	movlb	0	; () banked
  7702  00144C  6F9E               	movwf	printf@f& (0+255),b
  7703  00144E  0EFF               	movlw	high STR_17
  7704  001450  0100               	movlb	0	; () banked
  7705  001452  6F9F               	movwf	(printf@f+1)& (0+255),b
  7706  001454  C0ED  F0A0         	movff	_runInfo+4,?_printf+2
  7707  001458  C0EE  F0A1         	movff	_runInfo+5,?_printf+3
  7708  00145C  EC0F  F016         	call	_printf	;wreg free
  7709                           
  7710                           ;main.c: 288: break;
  7711  001460  D074               	goto	l7623
  7712  001462                     l7611:
  7713                           
  7714                           ;main.c: 290: lcdClear();
  7715  001462  EC4E  F017         	call	_lcdClear	;wreg free
  7716                           
  7717                           ;main.c: 291: printf("Yop w/o Cap: %i", runInfo[3]);
  7718  001466  0E50               	movlw	low STR_18
  7719  001468  0100               	movlb	0	; () banked
  7720  00146A  6F9E               	movwf	printf@f& (0+255),b
  7721  00146C  0EFF               	movlw	high STR_18
  7722  00146E  0100               	movlb	0	; () banked
  7723  001470  6F9F               	movwf	(printf@f+1)& (0+255),b
  7724  001472  C0EF  F0A0         	movff	_runInfo+6,?_printf+2
  7725  001476  C0F0  F0A1         	movff	_runInfo+7,?_printf+3
  7726  00147A  EC0F  F016         	call	_printf	;wreg free
  7727                           
  7728                           ;main.c: 292: break;
  7729  00147E  D065               	goto	l7623
  7730  001480                     l7613:
  7731                           
  7732                           ;main.c: 294: lcdClear();
  7733  001480  EC4E  F017         	call	_lcdClear	;wreg free
  7734                           
  7735                           ;main.c: 295: printf("Eska w/ Cap: %i", runInfo[4]);
  7736  001484  0E40               	movlw	low STR_19
  7737  001486  0100               	movlb	0	; () banked
  7738  001488  6F9E               	movwf	printf@f& (0+255),b
  7739  00148A  0EFF               	movlw	high STR_19
  7740  00148C  0100               	movlb	0	; () banked
  7741  00148E  6F9F               	movwf	(printf@f+1)& (0+255),b
  7742  001490  C0F1  F0A0         	movff	_runInfo+8,?_printf+2
  7743  001494  C0F2  F0A1         	movff	_runInfo+9,?_printf+3
  7744  001498  EC0F  F016         	call	_printf	;wreg free
  7745                           
  7746                           ;main.c: 296: break;
  7747  00149C  D056               	goto	l7623
  7748  00149E                     l7615:
  7749                           
  7750                           ;main.c: 298: lcdClear();
  7751  00149E  EC4E  F017         	call	_lcdClear	;wreg free
  7752                           
  7753                           ;main.c: 299: printf("Eska w/o Cap: %i", runInfo[5]);
  7754  0014A2  0EEF               	movlw	low STR_20
  7755  0014A4  0100               	movlb	0	; () banked
  7756  0014A6  6F9E               	movwf	printf@f& (0+255),b
  7757  0014A8  0EFE               	movlw	high STR_20
  7758  0014AA  0100               	movlb	0	; () banked
  7759  0014AC  6F9F               	movwf	(printf@f+1)& (0+255),b
  7760  0014AE  C0F3  F0A0         	movff	_runInfo+10,?_printf+2
  7761  0014B2  C0F4  F0A1         	movff	_runInfo+11,?_printf+3
  7762  0014B6  EC0F  F016         	call	_printf	;wreg free
  7763                           
  7764                           ;main.c: 300: break;
  7765  0014BA  D047               	goto	l7623
  7766  0014BC                     l7617:
  7767                           
  7768                           ;main.c: 302: lcdClear();
  7769  0014BC  EC4E  F017         	call	_lcdClear	;wreg free
  7770                           
  7771                           ;main.c: 303: printf("%02x/%02x   ", lastRunTime[5], lastRunTime[4]);
  7772  0014C0  0ED2               	movlw	low STR_1
  7773  0014C2  0100               	movlb	0	; () banked
  7774  0014C4  6F9E               	movwf	printf@f& (0+255),b
  7775  0014C6  0EFF               	movlw	high STR_1
  7776  0014C8  0100               	movlb	0	; () banked
  7777  0014CA  6F9F               	movwf	(printf@f+1)& (0+255),b
  7778  0014CC  C0DE  F0A0         	movff	_lastRunTime+5,?_printf+2
  7779  0014D0  0100               	movlb	0	; () banked
  7780  0014D2  6BA1               	clrf	(?_printf+3)& (0+255),b
  7781  0014D4  C0DD  F0A2         	movff	_lastRunTime+4,?_printf+4
  7782  0014D8  0100               	movlb	0	; () banked
  7783  0014DA  6BA3               	clrf	(?_printf+5)& (0+255),b
  7784  0014DC  EC0F  F016         	call	_printf	;wreg free
  7785                           
  7786                           ;main.c: 304: printf("%02x:%02x:%02x", lastRunTime[2], lastRunTime[1], lastRunTime[0]);
  7787  0014E0  0E70               	movlw	low STR_2
  7788  0014E2  0100               	movlb	0	; () banked
  7789  0014E4  6F9E               	movwf	printf@f& (0+255),b
  7790  0014E6  0EFF               	movlw	high STR_2
  7791  0014E8  0100               	movlb	0	; () banked
  7792  0014EA  6F9F               	movwf	(printf@f+1)& (0+255),b
  7793  0014EC  C0DB  F0A0         	movff	_lastRunTime+2,?_printf+2
  7794  0014F0  0100               	movlb	0	; () banked
  7795  0014F2  6BA1               	clrf	(?_printf+3)& (0+255),b
  7796  0014F4  C0DA  F0A2         	movff	_lastRunTime+1,?_printf+4
  7797  0014F8  0100               	movlb	0	; () banked
  7798  0014FA  6BA3               	clrf	(?_printf+5)& (0+255),b
  7799  0014FC  C0D9  F0A4         	movff	_lastRunTime,?_printf+6
  7800  001500  0100               	movlb	0	; () banked
  7801  001502  6BA5               	clrf	(?_printf+7)& (0+255),b
  7802  001504  EC0F  F016         	call	_printf	;wreg free
  7803                           
  7804                           ;main.c: 306: }
  7805                           
  7806                           ;main.c: 305: break;
  7807  001508  D020               	goto	l7623
  7808  00150A                     l7621:
  7809  00150A  C0AC  F0AE         	movff	update_past_run_screen_state@num,??_update_past_run_screen_state
  7810  00150E  C0AD  F0AF         	movff	update_past_run_screen_state@num+1,??_update_past_run_screen_state+1
  7811                           
  7812                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7813                           ; Switch size 1, requested type "space"
  7814                           ; Number of cases is 1, Range of values is 0 to 0
  7815                           ; switch strategies available:
  7816                           ; Name         Instructions Cycles
  7817                           ; simple_byte            4     3 (average)
  7818                           ;	Chosen strategy is simple_byte
  7819  001512  0100               	movlb	0	; () banked
  7820  001514  51AF               	movf	(??_update_past_run_screen_state+1)& (0+255),w,b
  7821  001516  0A00               	xorlw	0	; case 0
  7822  001518  A4D8               	btfss	status,2,c
  7823  00151A  D017               	goto	l7623
  7824                           
  7825                           ; BSR set to: 0
  7826                           ; Switch size 1, requested type "space"
  7827                           ; Number of cases is 7, Range of values is 0 to 6
  7828                           ; switch strategies available:
  7829                           ; Name         Instructions Cycles
  7830                           ; simple_byte           22    12 (average)
  7831                           ;	Chosen strategy is simple_byte
  7832  00151C  0100               	movlb	0	; () banked
  7833  00151E  51AE               	movf	??_update_past_run_screen_state& (0+255),w,b
  7834  001520  0A00               	xorlw	0	; case 0
  7835  001522  B4D8               	btfsc	status,2,c
  7836  001524  D771               	goto	l7605
  7837  001526  0A01               	xorlw	1	; case 1
  7838  001528  B4D8               	btfsc	status,2,c
  7839  00152A  D77D               	goto	l7607
  7840  00152C  0A03               	xorlw	3	; case 2
  7841  00152E  B4D8               	btfsc	status,2,c
  7842  001530  D789               	goto	l7609
  7843  001532  0A01               	xorlw	1	; case 3
  7844  001534  B4D8               	btfsc	status,2,c
  7845  001536  D795               	goto	l7611
  7846  001538  0A07               	xorlw	7	; case 4
  7847  00153A  B4D8               	btfsc	status,2,c
  7848  00153C  D7A1               	goto	l7613
  7849  00153E  0A01               	xorlw	1	; case 5
  7850  001540  B4D8               	btfsc	status,2,c
  7851  001542  D7AD               	goto	l7615
  7852  001544  0A03               	xorlw	3	; case 6
  7853  001546  B4D8               	btfsc	status,2,c
  7854  001548  D7B9               	goto	l7617
  7855  00154A                     l7623:
  7856                           
  7857                           ;main.c: 307: lcdInst(0b11000000);;
  7858  00154A  0EC0               	movlw	192
  7859  00154C  EC46  F018         	call	_lcdInst
  7860                           
  7861                           ;main.c: 308: printf("<4  Back:  D  6> ");
  7862  001550  0E66               	movlw	low STR_23
  7863  001552  0100               	movlb	0	; () banked
  7864  001554  6F9E               	movwf	printf@f& (0+255),b
  7865  001556  0EFE               	movlw	high STR_23
  7866  001558  0100               	movlb	0	; () banked
  7867  00155A  6F9F               	movwf	(printf@f+1)& (0+255),b
  7868  00155C  EC0F  F016         	call	_printf	;wreg free
  7869  001560  0012               	return		;funcret
  7870  001562                     __end_of_update_past_run_screen_state:
  7871                           	opt stack 0
  7872                           tblptru	equ	0xFF8
  7873                           tblptrh	equ	0xFF7
  7874                           tblptrl	equ	0xFF6
  7875                           tablat	equ	0xFF5
  7876                           prodh	equ	0xFF4
  7877                           prodl	equ	0xFF3
  7878                           intcon	equ	0xFF2
  7879                           intcon2	equ	0xFF1
  7880                           postinc0	equ	0xFEE
  7881                           wreg	equ	0xFE8
  7882                           indf1	equ	0xFE7
  7883                           postinc1	equ	0xFE6
  7884                           postdec1	equ	0xFE5
  7885                           fsr1h	equ	0xFE2
  7886                           fsr1l	equ	0xFE1
  7887                           indf2	equ	0xFDF
  7888                           postinc2	equ	0xFDE
  7889                           postdec2	equ	0xFDD
  7890                           fsr2h	equ	0xFDA
  7891                           fsr2l	equ	0xFD9
  7892                           status	equ	0xFD8
  7893                           
  7894 ;; *************** function _lcdClear *****************
  7895 ;; Defined at:
  7896 ;;		line 35 in file "lcd.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;		None
  7899 ;; Auto vars:     Size  Location     Type
  7900 ;;		None
  7901 ;; Return value:  Size  Location     Type
  7902 ;;                  2  134[None  ] int 
  7903 ;; Registers used:
  7904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7905 ;; Tracked objects:
  7906 ;;		On entry : 0/0
  7907 ;;		On exit  : 0/0
  7908 ;;		Unchanged: 0/0
  7909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7910 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7913 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7914 ;;Total ram usage:        0 bytes
  7915 ;; Hardware stack levels used:    1
  7916 ;; Hardware stack levels required when called:   10
  7917 ;; This function calls:
  7918 ;;		_lcdInst
  7919 ;;		_printf
  7920 ;; This function is called by:
  7921 ;;		_displayMainProgramLcdScreen
  7922 ;;		_update_eeprom_screen_state
  7923 ;;		_update_past_run_screen_state
  7924 ;;		_operation
  7925 ;; This function uses a non-reentrant model
  7926 ;;
  7927                           
  7928                           	psect	text37
  7929  002E9C                     __ptext37:
  7930                           	opt stack 0
  7931  002E9C                     _lcdClear:
  7932                           	opt stack 17
  7933                           
  7934                           ;lcd.c: 36: lcdInst(0b10000000);
  7935                           
  7936                           ;incstack = 0
  7937  002E9C  0E80               	movlw	128
  7938  002E9E  EC46  F018         	call	_lcdInst
  7939                           
  7940                           ;lcd.c: 37: printf("                ");
  7941  002EA2  0E89               	movlw	low STR_33
  7942  002EA4  0100               	movlb	0	; () banked
  7943  002EA6  6F9E               	movwf	printf@f& (0+255),b
  7944  002EA8  0EFE               	movlw	high STR_33
  7945  002EAA  0100               	movlb	0	; () banked
  7946  002EAC  6F9F               	movwf	(printf@f+1)& (0+255),b
  7947  002EAE  EC0F  F016         	call	_printf	;wreg free
  7948                           
  7949                           ;lcd.c: 38: lcdInst(0b11000000);
  7950  002EB2  0EC0               	movlw	192
  7951  002EB4  EC46  F018         	call	_lcdInst
  7952                           
  7953                           ;lcd.c: 39: printf("                ");
  7954  002EB8  0E89               	movlw	low STR_33
  7955  002EBA  0100               	movlb	0	; () banked
  7956  002EBC  6F9E               	movwf	printf@f& (0+255),b
  7957  002EBE  0EFE               	movlw	high STR_33
  7958  002EC0  0100               	movlb	0	; () banked
  7959  002EC2  6F9F               	movwf	(printf@f+1)& (0+255),b
  7960  002EC4  EC0F  F016         	call	_printf	;wreg free
  7961                           
  7962                           ;lcd.c: 40: lcdInst(0b10000000);
  7963  002EC8  0E80               	movlw	128
  7964  002ECA  EC46  F018         	call	_lcdInst
  7965  002ECE  0012               	return		;funcret
  7966  002ED0                     __end_of_lcdClear:
  7967                           	opt stack 0
  7968                           tblptru	equ	0xFF8
  7969                           tblptrh	equ	0xFF7
  7970                           tblptrl	equ	0xFF6
  7971                           tablat	equ	0xFF5
  7972                           prodh	equ	0xFF4
  7973                           prodl	equ	0xFF3
  7974                           intcon	equ	0xFF2
  7975                           intcon2	equ	0xFF1
  7976                           postinc0	equ	0xFEE
  7977                           wreg	equ	0xFE8
  7978                           indf1	equ	0xFE7
  7979                           postinc1	equ	0xFE6
  7980                           postdec1	equ	0xFE5
  7981                           fsr1h	equ	0xFE2
  7982                           fsr1l	equ	0xFE1
  7983                           indf2	equ	0xFDF
  7984                           postinc2	equ	0xFDE
  7985                           postdec2	equ	0xFDD
  7986                           fsr2h	equ	0xFDA
  7987                           fsr2l	equ	0xFD9
  7988                           status	equ	0xFD8
  7989                           
  7990 ;; *************** function _printf *****************
  7991 ;; Defined at:
  7992 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
  7993 ;; Parameters:    Size  Location     Type
  7994 ;;  f               2   30[BANK0 ] PTR const unsigned char 
  7995 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(18), 
  7996 ;;		 -> STR_30(13), STR_29(12), STR_28(5), STR_27(4), 
  7997 ;;		 -> STR_26(17), STR_25(14), STR_24(16), STR_23(18), 
  7998 ;;		 -> STR_22(15), STR_21(13), STR_20(17), STR_19(16), 
  7999 ;;		 -> STR_18(16), STR_17(14), STR_16(14), STR_15(16), 
  8000 ;;		 -> STR_14(17), STR_13(16), STR_12(16), STR_11(16), 
  8001 ;;		 -> STR_10(11), STR_9(17), STR_8(17), STR_7(14), 
  8002 ;;		 -> STR_6(14), STR_2(15), STR_1(13), 
  8003 ;; Auto vars:     Size  Location     Type
  8004 ;;  pb              4   40[BANK0 ] struct __prbuf
  8005 ;;  ap              2   38[BANK0 ] PTR void [1]
  8006 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
  8007 ;; Return value:  Size  Location     Type
  8008 ;;                  2   30[BANK0 ] int 
  8009 ;; Registers used:
  8010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8011 ;; Tracked objects:
  8012 ;;		On entry : 0/0
  8013 ;;		On exit  : 0/0
  8014 ;;		Unchanged: 0/0
  8015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8016 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8017 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8019 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8020 ;;Total ram usage:       14 bytes
  8021 ;; Hardware stack levels used:    1
  8022 ;; Hardware stack levels required when called:    9
  8023 ;; This function calls:
  8024 ;;		__doprnt
  8025 ;; This function is called by:
  8026 ;;		_printTime
  8027 ;;		_displayMainProgramLcdScreen
  8028 ;;		_update_eeprom_screen_state
  8029 ;;		_update_past_run_screen_state
  8030 ;;		_operation
  8031 ;;		_lcdClear
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           	psect	text38
  8036  002C1E                     __ptext38:
  8037                           	opt stack 0
  8038  002C1E                     _printf:
  8039                           	opt stack 18
  8040                           
  8041                           ;incstack = 0
  8042  002C1E  0E00               	movlw	0
  8043  002C20  0100               	movlb	0	; () banked
  8044  002C22  6FA8               	movwf	printf@pb& (0+255),b
  8045  002C24  0E00               	movlw	0
  8046  002C26  0100               	movlb	0	; () banked
  8047  002C28  6FA9               	movwf	(printf@pb+1)& (0+255),b
  8048  002C2A  0E28               	movlw	low _putch
  8049  002C2C  0100               	movlb	0	; () banked
  8050  002C2E  6FAA               	movwf	(printf@pb+2)& (0+255),b
  8051  002C30  0E30               	movlw	high _putch
  8052  002C32  0100               	movlb	0	; () banked
  8053  002C34  6FAB               	movwf	(printf@pb+3)& (0+255),b
  8054  002C36  0EA0               	movlw	low (?_printf+2)
  8055  002C38  0100               	movlb	0	; () banked
  8056  002C3A  6FA6               	movwf	printf@ap& (0+255),b
  8057  002C3C  0E00               	movlw	high (?_printf+2)
  8058  002C3E  0100               	movlb	0	; () banked
  8059  002C40  6FA7               	movwf	(printf@ap+1)& (0+255),b
  8060                           
  8061                           ; BSR set to: 0
  8062                           ;	Return value of _printf is never used
  8063  002C42  0EA8               	movlw	low printf@pb
  8064  002C44  0100               	movlb	0	; () banked
  8065  002C46  6F8C               	movwf	__doprnt@pb& (0+255),b
  8066  002C48  0E00               	movlw	high printf@pb
  8067  002C4A  0100               	movlb	0	; () banked
  8068  002C4C  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  8069  002C4E  C09E  F08E         	movff	printf@f,__doprnt@f
  8070  002C52  C09F  F08F         	movff	printf@f+1,__doprnt@f+1
  8071  002C56  0EA6               	movlw	low printf@ap
  8072  002C58  0100               	movlb	0	; () banked
  8073  002C5A  6F90               	movwf	__doprnt@ap& (0+255),b
  8074  002C5C  0E00               	movlw	high printf@ap
  8075  002C5E  0100               	movlb	0	; () banked
  8076  002C60  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  8077  002C62  EC09  F000         	call	__doprnt	;wreg free
  8078  002C66  0012               	return	
  8079  002C68                     __end_of_printf:
  8080                           	opt stack 0
  8081                           tblptru	equ	0xFF8
  8082                           tblptrh	equ	0xFF7
  8083                           tblptrl	equ	0xFF6
  8084                           tablat	equ	0xFF5
  8085                           prodh	equ	0xFF4
  8086                           prodl	equ	0xFF3
  8087                           intcon	equ	0xFF2
  8088                           intcon2	equ	0xFF1
  8089                           postinc0	equ	0xFEE
  8090                           wreg	equ	0xFE8
  8091                           indf1	equ	0xFE7
  8092                           postinc1	equ	0xFE6
  8093                           postdec1	equ	0xFE5
  8094                           fsr1h	equ	0xFE2
  8095                           fsr1l	equ	0xFE1
  8096                           indf2	equ	0xFDF
  8097                           postinc2	equ	0xFDE
  8098                           postdec2	equ	0xFDD
  8099                           fsr2h	equ	0xFDA
  8100                           fsr2l	equ	0xFD9
  8101                           status	equ	0xFD8
  8102                           
  8103 ;; *************** function __doprnt *****************
  8104 ;; Defined at:
  8105 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  8106 ;; Parameters:    Size  Location     Type
  8107 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
  8108 ;;		 -> sprintf@pb(4), printf@pb(4), 
  8109 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  8110 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(18), 
  8111 ;;		 -> STR_30(13), STR_29(12), STR_28(5), STR_27(4), 
  8112 ;;		 -> STR_26(17), STR_25(14), STR_24(16), STR_23(18), 
  8113 ;;		 -> STR_22(15), STR_21(13), STR_20(17), STR_19(16), 
  8114 ;;		 -> STR_18(16), STR_17(14), STR_16(14), STR_15(16), 
  8115 ;;		 -> STR_14(17), STR_13(16), STR_12(16), STR_11(16), 
  8116 ;;		 -> STR_10(11), STR_9(17), STR_8(17), STR_7(14), 
  8117 ;;		 -> STR_6(14), STR_5(5), STR_4(5), STR_3(5), 
  8118 ;;		 -> STR_2(15), STR_1(13), 
  8119 ;;  ap              2   16[BANK0 ] PTR PTR void 
  8120 ;;		 -> sprintf@ap(2), printf@ap(2), 
  8121 ;; Auto vars:     Size  Location     Type
  8122 ;;  idx             1   22[BANK0 ] unsigned char 
  8123 ;;  tmpval          4    0        struct .
  8124 ;;  cp              3    0        PTR const unsigned char 
  8125 ;;  width           2   27[BANK0 ] int 
  8126 ;;  val             2   24[BANK0 ] unsigned int 
  8127 ;;  len             2    0        unsigned int 
  8128 ;;  c               1   29[BANK0 ] char 
  8129 ;;  flag            1   26[BANK0 ] unsigned char 
  8130 ;;  prec            1   23[BANK0 ] char 
  8131 ;; Return value:  Size  Location     Type
  8132 ;;                  2   12[BANK0 ] int 
  8133 ;; Registers used:
  8134 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8135 ;; Tracked objects:
  8136 ;;		On entry : 0/0
  8137 ;;		On exit  : 0/0
  8138 ;;		Unchanged: 0/0
  8139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8140 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8141 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8142 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8143 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8144 ;;Total ram usage:       18 bytes
  8145 ;; Hardware stack levels used:    1
  8146 ;; Hardware stack levels required when called:    8
  8147 ;; This function calls:
  8148 ;;		Absolute function
  8149 ;;		___lwdiv
  8150 ;;		___lwmod
  8151 ;;		___wmul
  8152 ;;		_isdigit
  8153 ;;		_putch
  8154 ;; This function is called by:
  8155 ;;		_printf
  8156 ;;		_sprintf
  8157 ;; This function uses a non-reentrant model
  8158 ;;
  8159                           
  8160                           	psect	text39
  8161  000012                     __ptext39:
  8162                           	opt stack 0
  8163  000012                     __doprnt:
  8164                           	opt stack 18
  8165                           
  8166                           ;doprnt.c: 499: signed char c;
  8167                           ;doprnt.c: 501: int width;
  8168                           ;doprnt.c: 506: signed char prec;
  8169                           ;doprnt.c: 508: unsigned char flag;
  8170                           ;doprnt.c: 523: union {
  8171                           ;doprnt.c: 524: unsigned long vd;
  8172                           ;doprnt.c: 525: double integ;
  8173                           ;doprnt.c: 526: } tmpval;
  8174                           ;doprnt.c: 528: unsigned int val;
  8175                           ;doprnt.c: 529: unsigned len;
  8176                           ;doprnt.c: 530: const char * cp;
  8177                           ;doprnt.c: 536: while(c = *f++) {
  8178                           
  8179                           ;incstack = 0
  8180  000012  D324               	goto	l7569
  8181  000014                     l7411:
  8182                           
  8183                           ;doprnt.c: 538: if(c != '%')
  8184  000014  0E25               	movlw	37
  8185  000016  0100               	movlb	0	; () banked
  8186  000018  199D               	xorwf	__doprnt@c& (0+255),w,b
  8187  00001A  B4D8               	btfsc	status,2,c
  8188  00001C  D03A               	goto	l7421
  8189                           
  8190                           ; BSR set to: 0
  8191                           ;doprnt.c: 540: {
  8192                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  8193  00001E  0100               	movlb	0	; () banked
  8194  000020  EE20 F002          	lfsr	2,2
  8195  000024  518C               	movf	__doprnt@pb& (0+255),w,b
  8196  000026  26D9               	addwf	fsr2l,f,c
  8197  000028  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  8198  00002A  22DA               	addwfc	fsr2h,f,c
  8199  00002C  50DE               	movf	postinc2,w,c
  8200  00002E  10DE               	iorwf	postinc2,w,c
  8201  000030  B4D8               	btfsc	status,2,c
  8202  000032  D019               	goto	l7417
  8203                           
  8204                           ; BSR set to: 0
  8205  000034  0100               	movlb	0	; () banked
  8206  000036  EE20 F002          	lfsr	2,2
  8207  00003A  518C               	movf	__doprnt@pb& (0+255),w,b
  8208  00003C  26D9               	addwf	fsr2l,f,c
  8209  00003E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  8210  000040  22DA               	addwfc	fsr2h,f,c
  8211  000042  CFDE F092          	movff	postinc2,??__doprnt
  8212  000046  CFDD F093          	movff	postdec2,??__doprnt+1
  8213  00004A  D801               	call	u7728
  8214  00004C  D307               	goto	l7569
  8215  00004E                     u7728:
  8216  00004E  0005               	push	
  8217  000050  6EFA               	movwf	pclath,c
  8218  000052  0100               	movlb	0	; () banked
  8219  000054  5192               	movf	??__doprnt& (0+255),w,b
  8220  000056  6EFD               	movwf	tosl,c
  8221  000058  5193               	movf	(??__doprnt+1)& (0+255),w,b
  8222  00005A  6EFE               	movwf	tosh,c
  8223  00005C  6AFF               	clrf	tosu,c
  8224  00005E  50FA               	movf	pclath,w,c
  8225  000060  0100               	movlb	0	; () banked
  8226  000062  519D               	movf	__doprnt@c& (0+255),w,b
  8227  000064  0012               	return		;indir
  8228  000066                     l7417:
  8229  000066  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  8230  00006A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  8231  00006E  CFDE F092          	movff	postinc2,??__doprnt
  8232  000072  CFDD F093          	movff	postdec2,??__doprnt+1
  8233  000076  C092  FFD9         	movff	??__doprnt,fsr2l
  8234  00007A  C093  FFDA         	movff	??__doprnt+1,fsr2h
  8235  00007E  C09D  FFDF         	movff	__doprnt@c,indf2
  8236  000082  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  8237  000086  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  8238  00008A  2ADE               	incf	postinc2,f,c
  8239  00008C  0E00               	movlw	0
  8240  00008E  22DD               	addwfc	postdec2,f,c
  8241                           
  8242                           ;doprnt.c: 542: continue;
  8243  000090  D2E5               	goto	l7569
  8244  000092                     l7421:
  8245                           
  8246                           ;doprnt.c: 543: }
  8247                           ;doprnt.c: 546: width = 0;
  8248  000092  0E00               	movlw	0
  8249  000094  0100               	movlb	0	; () banked
  8250  000096  6F9C               	movwf	(__doprnt@width+1)& (0+255),b
  8251  000098  0E00               	movlw	0
  8252  00009A  6F9B               	movwf	__doprnt@width& (0+255),b
  8253                           
  8254                           ;doprnt.c: 548: flag = 0;
  8255  00009C  0E00               	movlw	0
  8256  00009E  0100               	movlb	0	; () banked
  8257  0000A0  6F9A               	movwf	__doprnt@flag& (0+255),b
  8258                           
  8259                           ; BSR set to: 0
  8260                           ;doprnt.c: 551: switch(*f) {
  8261                           
  8262                           ;doprnt.c: 550: for(;;) {
  8263  0000A2  D005               	goto	l7427
  8264  0000A4                     l7423:
  8265                           
  8266                           ;doprnt.c: 580: flag |= 0x04;
  8267  0000A4  0100               	movlb	0	; () banked
  8268  0000A6  859A               	bsf	__doprnt@flag& (0+255),2,b
  8269                           
  8270                           ;doprnt.c: 581: f++;
  8271  0000A8  0100               	movlb	0	; () banked
  8272  0000AA  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  8273  0000AC  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  8274  0000AE                     l7427:
  8275  0000AE  C08E  FFF6         	movff	__doprnt@f,tblptrl
  8276  0000B2  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  8277  0000B6                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8278  0000B6  6AF8               	clrf	tblptru,c
  8279  0000B8                     	endif
  8280  0000B8                     	if	0	;tblptru may be non-zero
  8281  0000B8                     	endif
  8282  0000B8  0008               	tblrd		*
  8283  0000BA  50F5               	movf	tablat,w,c
  8284                           
  8285                           ; Switch size 1, requested type "space"
  8286                           ; Number of cases is 1, Range of values is 48 to 48
  8287                           ; switch strategies available:
  8288                           ; Name         Instructions Cycles
  8289                           ; simple_byte            4     3 (average)
  8290                           ;	Chosen strategy is simple_byte
  8291  0000BC  0A30               	xorlw	48	; case 48
  8292  0000BE  B4D8               	btfsc	status,2,c
  8293  0000C0  D7F1               	goto	l7423
  8294                           
  8295                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8296                           
  8297                           ;doprnt.c: 586: }
  8298                           
  8299                           ;doprnt.c: 585: break;
  8300  0000C2  C08E  FFF6         	movff	__doprnt@f,tblptrl
  8301  0000C6  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  8302  0000CA                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8303  0000CA  6AF8               	clrf	tblptru,c
  8304  0000CC                     	endif
  8305  0000CC                     	if	0	;tblptru may be non-zero
  8306  0000CC                     	endif
  8307  0000CC  0008               	tblrd		*
  8308  0000CE  50F5               	movf	tablat,w,c
  8309  0000D0  EC99  F017         	call	_isdigit
  8310  0000D4  A0D8               	btfss	status,0,c
  8311  0000D6  D046               	goto	l7445
  8312                           
  8313                           ;doprnt.c: 598: width = 0;
  8314  0000D8  0E00               	movlw	0
  8315  0000DA  0100               	movlb	0	; () banked
  8316  0000DC  6F9C               	movwf	(__doprnt@width+1)& (0+255),b
  8317  0000DE  0E00               	movlw	0
  8318  0000E0  6F9B               	movwf	__doprnt@width& (0+255),b
  8319  0000E2                     l7433:
  8320                           
  8321                           ;doprnt.c: 600: width *= 10;
  8322  0000E2  C09B  F080         	movff	__doprnt@width,___wmul@multiplier
  8323  0000E6  C09C  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
  8324  0000EA  0E00               	movlw	0
  8325  0000EC  0100               	movlb	0	; () banked
  8326  0000EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8327  0000F0  0E0A               	movlw	10
  8328  0000F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
  8329  0000F4  EC18  F017         	call	___wmul	;wreg free
  8330  0000F8  C080  F09B         	movff	?___wmul,__doprnt@width
  8331  0000FC  C081  F09C         	movff	?___wmul+1,__doprnt@width+1
  8332                           
  8333                           ;doprnt.c: 601: width += *f++ - '0';
  8334  000100  0ED0               	movlw	208
  8335  000102  0100               	movlb	0	; () banked
  8336  000104  6F92               	movwf	??__doprnt& (0+255),b
  8337  000106  0EFF               	movlw	255
  8338  000108  0100               	movlb	0	; () banked
  8339  00010A  6F93               	movwf	(??__doprnt+1)& (0+255),b
  8340  00010C  C08E  FFF6         	movff	__doprnt@f,tblptrl
  8341  000110  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  8342  000114                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8343  000114  6AF8               	clrf	tblptru,c
  8344  000116                     	endif
  8345  000116                     	if	0	;tblptru may be non-zero
  8346  000116                     	endif
  8347  000116  0008               	tblrd		*
  8348  000118  50F5               	movf	tablat,w,c
  8349  00011A  0100               	movlb	0	; () banked
  8350  00011C  6F94               	movwf	(??__doprnt+2)& (0+255),b
  8351  00011E  6B95               	clrf	(??__doprnt+3)& (0+255),b
  8352  000120  0100               	movlb	0	; () banked
  8353  000122  5192               	movf	??__doprnt& (0+255),w,b
  8354  000124  0100               	movlb	0	; () banked
  8355  000126  2794               	addwf	(??__doprnt+2)& (0+255),f,b
  8356  000128  0100               	movlb	0	; () banked
  8357  00012A  5193               	movf	(??__doprnt+1)& (0+255),w,b
  8358  00012C  0100               	movlb	0	; () banked
  8359  00012E  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
  8360  000130  0100               	movlb	0	; () banked
  8361  000132  5194               	movf	(??__doprnt+2)& (0+255),w,b
  8362  000134  0100               	movlb	0	; () banked
  8363  000136  279B               	addwf	__doprnt@width& (0+255),f,b
  8364  000138  0100               	movlb	0	; () banked
  8365  00013A  5195               	movf	(??__doprnt+3)& (0+255),w,b
  8366  00013C  0100               	movlb	0	; () banked
  8367  00013E  239C               	addwfc	(__doprnt@width+1)& (0+255),f,b
  8368                           
  8369                           ; BSR set to: 0
  8370  000140  0100               	movlb	0	; () banked
  8371  000142  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  8372  000144  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  8373                           
  8374                           ; BSR set to: 0
  8375                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8376  000146  C08E  FFF6         	movff	__doprnt@f,tblptrl
  8377  00014A  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  8378  00014E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8379  00014E  6AF8               	clrf	tblptru,c
  8380  000150                     	endif
  8381  000150                     	if	0	;tblptru may be non-zero
  8382  000150                     	endif
  8383  000150  0008               	tblrd		*
  8384  000152  50F5               	movf	tablat,w,c
  8385  000154  EC99  F017         	call	_isdigit
  8386  000158  A0D8               	btfss	status,0,c
  8387  00015A  D004               	goto	l7445
  8388  00015C  D7C2               	goto	l7433
  8389  00015E                     l7441:
  8390                           
  8391                           ;doprnt.c: 721: flag |= 0x80;
  8392  00015E  0100               	movlb	0	; () banked
  8393  000160  8F9A               	bsf	__doprnt@flag& (0+255),7,b
  8394                           
  8395                           ;doprnt.c: 723: break;
  8396  000162  D01A               	goto	l548
  8397  000164                     l7445:
  8398  000164  C08E  FFF6         	movff	__doprnt@f,tblptrl
  8399  000168  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  8400  00016C  0100               	movlb	0	; () banked
  8401  00016E  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  8402  000170  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  8403  000172                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  8404  000172  6AF8               	clrf	tblptru,c
  8405  000174                     	endif
  8406  000174                     	if	0	;tblptru may be non-zero
  8407  000174                     	endif
  8408  000174  0008               	tblrd		*
  8409  000176  CFF5 F09D          	movff	tablat,__doprnt@c
  8410  00017A  0100               	movlb	0	; () banked
  8411  00017C  519D               	movf	__doprnt@c& (0+255),w,b
  8412                           
  8413                           ; Switch size 1, requested type "space"
  8414                           ; Number of cases is 4, Range of values is 0 to 120
  8415                           ; switch strategies available:
  8416                           ; Name         Instructions Cycles
  8417                           ; simple_byte           13     7 (average)
  8418                           ;	Chosen strategy is simple_byte
  8419  00017E  0A00               	xorlw	0	; case 0
  8420  000180  B4D8               	btfsc	status,2,c
  8421  000182  D27B               	goto	l7571
  8422  000184  0A64               	xorlw	100	; case 100
  8423  000186  B4D8               	btfsc	status,2,c
  8424  000188  D007               	goto	l548
  8425  00018A  0A0D               	xorlw	13	; case 105
  8426  00018C  B4D8               	btfsc	status,2,c
  8427  00018E  D004               	goto	l548
  8428  000190  0A11               	xorlw	17	; case 120
  8429  000192  B4D8               	btfsc	status,2,c
  8430  000194  D7E4               	goto	l7441
  8431  000196  D262               	goto	l7569
  8432  000198                     l548:
  8433                           
  8434                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  8435  000198  0100               	movlb	0	; () banked
  8436  00019A  BF9A               	btfsc	__doprnt@flag& (0+255),7,b
  8437  00019C  D020               	goto	l7455
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;doprnt.c: 1253: {
  8441                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8442  00019E  C090  FFD9         	movff	__doprnt@ap,fsr2l
  8443  0001A2  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  8444  0001A6  CFDF F092          	movff	indf2,??__doprnt
  8445  0001AA  0E02               	movlw	2
  8446  0001AC  26DE               	addwf	postinc2,f,c
  8447  0001AE  CFDF F093          	movff	indf2,??__doprnt+1
  8448  0001B2  0E00               	movlw	0
  8449  0001B4  22DD               	addwfc	postdec2,f,c
  8450  0001B6  C092  FFD9         	movff	??__doprnt,fsr2l
  8451  0001BA  C093  FFDA         	movff	??__doprnt+1,fsr2h
  8452  0001BE  CFDE F098          	movff	postinc2,__doprnt@val
  8453  0001C2  CFDD F099          	movff	postdec2,__doprnt@val+1
  8454                           
  8455                           ; BSR set to: 0
  8456                           ;doprnt.c: 1261: if((int)val < 0) {
  8457  0001C6  0100               	movlb	0	; () banked
  8458  0001C8  AF99               	btfss	(__doprnt@val+1)& (0+255),7,b
  8459  0001CA  D060               	goto	l7487
  8460                           
  8461                           ; BSR set to: 0
  8462                           ;doprnt.c: 1262: flag |= 0x03;
  8463  0001CC  0E03               	movlw	3
  8464  0001CE  0100               	movlb	0	; () banked
  8465  0001D0  139A               	iorwf	__doprnt@flag& (0+255),f,b
  8466                           
  8467                           ; BSR set to: 0
  8468                           ;doprnt.c: 1263: val = -val;
  8469  0001D2  0100               	movlb	0	; () banked
  8470  0001D4  6D98               	negf	__doprnt@val& (0+255),b
  8471  0001D6  1F99               	comf	(__doprnt@val+1)& (0+255),f,b
  8472  0001D8  B0D8               	btfsc	status,0,c
  8473  0001DA  2B99               	incf	(__doprnt@val+1)& (0+255),f,b
  8474                           
  8475                           ; BSR set to: 0
  8476                           ;doprnt.c: 1264: }
  8477                           ;doprnt.c: 1266: }
  8478  0001DC  D057               	goto	l7487
  8479  0001DE                     l7455:
  8480                           
  8481                           ; BSR set to: 0
  8482                           ;doprnt.c: 1268: else
  8483                           ;doprnt.c: 1273: {
  8484                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8485  0001DE  C090  FFD9         	movff	__doprnt@ap,fsr2l
  8486  0001E2  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  8487  0001E6  CFDF F092          	movff	indf2,??__doprnt
  8488  0001EA  0E02               	movlw	2
  8489  0001EC  26DE               	addwf	postinc2,f,c
  8490  0001EE  CFDF F093          	movff	indf2,??__doprnt+1
  8491  0001F2  0E00               	movlw	0
  8492  0001F4  22DD               	addwfc	postdec2,f,c
  8493  0001F6  C092  FFD9         	movff	??__doprnt,fsr2l
  8494  0001FA  C093  FFDA         	movff	??__doprnt+1,fsr2h
  8495  0001FE  CFDE F098          	movff	postinc2,__doprnt@val
  8496  000202  CFDD F099          	movff	postdec2,__doprnt@val+1
  8497                           
  8498                           ; BSR set to: 0
  8499                           ;doprnt.c: 1287: }
  8500                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  8501  000206  D042               	goto	l7487
  8502  000208                     l7457:
  8503                           
  8504                           ; BSR set to: 0
  8505                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8506  000208  0E01               	movlw	1
  8507  00020A  0100               	movlb	0	; () banked
  8508  00020C  6F9D               	movwf	__doprnt@c& (0+255),b
  8509  00020E                     l7459:
  8510                           
  8511                           ; BSR set to: 0
  8512  00020E  0E05               	movlw	5
  8513  000210  0100               	movlb	0	; () banked
  8514  000212  199D               	xorwf	__doprnt@c& (0+255),w,b
  8515  000214  B4D8               	btfsc	status,2,c
  8516  000216  D043               	goto	l7489
  8517                           
  8518                           ; BSR set to: 0
  8519                           ;doprnt.c: 1306: if(val < dpowers[c])
  8520                           
  8521                           ; BSR set to: 0
  8522                           
  8523                           ; BSR set to: 0
  8524  000218  0100               	movlb	0	; () banked
  8525  00021A  519D               	movf	__doprnt@c& (0+255),w,b
  8526  00021C  0D02               	mullw	2
  8527  00021E  0E3A               	movlw	low _dpowers
  8528  000220  24F3               	addwf	prodl,w,c
  8529  000222  6EF6               	movwf	tblptrl,c
  8530  000224  0EFE               	movlw	high _dpowers
  8531  000226  20F4               	addwfc	prodh,w,c
  8532  000228  6EF7               	movwf	tblptrh,c
  8533  00022A                     	if	1	;There are 3 active tblptr bytes
  8534  00022A  6AF8               	clrf	tblptru,c
  8535  00022C  0E00               	movlw	low (__mediumconst shr (0+16))
  8536  00022E  22F8               	addwfc	tblptru,f,c
  8537  000230                     	endif
  8538  000230  0009               	tblrd		*+
  8539  000232  50F5               	movf	tablat,w,c
  8540  000234  0100               	movlb	0	; () banked
  8541  000236  5D98               	subwf	__doprnt@val& (0+255),w,b
  8542  000238  0009               	tblrd		*+
  8543  00023A  50F5               	movf	tablat,w,c
  8544  00023C  0100               	movlb	0	; () banked
  8545  00023E  5999               	subwfb	(__doprnt@val+1)& (0+255),w,b
  8546  000240  A0D8               	btfss	status,0,c
  8547  000242  D02D               	goto	l7489
  8548                           
  8549                           ; BSR set to: 0
  8550                           
  8551                           ; BSR set to: 0
  8552                           
  8553                           ; BSR set to: 0
  8554                           ;doprnt.c: 1307: break;
  8555  000244  0100               	movlb	0	; () banked
  8556  000246  2B9D               	incf	__doprnt@c& (0+255),f,b
  8557  000248  D7E2               	goto	l7459
  8558  00024A                     l7471:
  8559                           
  8560                           ; BSR set to: 0
  8561                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8562  00024A  0E01               	movlw	1
  8563  00024C  0100               	movlb	0	; () banked
  8564  00024E  6F9D               	movwf	__doprnt@c& (0+255),b
  8565  000250                     l7473:
  8566                           
  8567                           ; BSR set to: 0
  8568  000250  0E04               	movlw	4
  8569  000252  0100               	movlb	0	; () banked
  8570  000254  199D               	xorwf	__doprnt@c& (0+255),w,b
  8571  000256  B4D8               	btfsc	status,2,c
  8572  000258  D022               	goto	l7489
  8573                           
  8574                           ; BSR set to: 0
  8575                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8576                           
  8577                           ; BSR set to: 0
  8578                           
  8579                           ; BSR set to: 0
  8580  00025A  0100               	movlb	0	; () banked
  8581  00025C  519D               	movf	__doprnt@c& (0+255),w,b
  8582  00025E  0D02               	mullw	2
  8583  000260  0E44               	movlw	low _hexpowers
  8584  000262  24F3               	addwf	prodl,w,c
  8585  000264  6EF6               	movwf	tblptrl,c
  8586  000266  0EFE               	movlw	high _hexpowers
  8587  000268  20F4               	addwfc	prodh,w,c
  8588  00026A  6EF7               	movwf	tblptrh,c
  8589  00026C                     	if	1	;There are 3 active tblptr bytes
  8590  00026C  6AF8               	clrf	tblptru,c
  8591  00026E  0E00               	movlw	low (__mediumconst shr (0+16))
  8592  000270  22F8               	addwfc	tblptru,f,c
  8593  000272                     	endif
  8594  000272  0009               	tblrd		*+
  8595  000274  50F5               	movf	tablat,w,c
  8596  000276  0100               	movlb	0	; () banked
  8597  000278  5D98               	subwf	__doprnt@val& (0+255),w,b
  8598  00027A  0009               	tblrd		*+
  8599  00027C  50F5               	movf	tablat,w,c
  8600  00027E  0100               	movlb	0	; () banked
  8601  000280  5999               	subwfb	(__doprnt@val+1)& (0+255),w,b
  8602  000282  A0D8               	btfss	status,0,c
  8603  000284  D00C               	goto	l7489
  8604                           
  8605                           ; BSR set to: 0
  8606                           
  8607                           ; BSR set to: 0
  8608                           
  8609                           ; BSR set to: 0
  8610                           ;doprnt.c: 1318: break;
  8611  000286  0100               	movlb	0	; () banked
  8612  000288  2B9D               	incf	__doprnt@c& (0+255),f,b
  8613  00028A  D7E2               	goto	l7473
  8614  00028C                     l7487:
  8615                           
  8616                           ; BSR set to: 0
  8617  00028C  0100               	movlb	0	; () banked
  8618  00028E  519A               	movf	__doprnt@flag& (0+255),w,b
  8619  000290  0B80               	andlw	128
  8620                           
  8621                           ; Switch size 1, requested type "space"
  8622                           ; Number of cases is 2, Range of values is 0 to 128
  8623                           ; switch strategies available:
  8624                           ; Name         Instructions Cycles
  8625                           ; simple_byte            7     4 (average)
  8626                           ;	Chosen strategy is simple_byte
  8627  000292  0A00               	xorlw	0	; case 0
  8628  000294  B4D8               	btfsc	status,2,c
  8629  000296  D7B8               	goto	l7457
  8630  000298  0A80               	xorlw	128	; case 128
  8631  00029A  B4D8               	btfsc	status,2,c
  8632  00029C  D7D6               	goto	l7471
  8633  00029E                     l7489:
  8634                           
  8635                           ; BSR set to: 0
  8636                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8637  00029E  0100               	movlb	0	; () banked
  8638  0002A0  519B               	movf	__doprnt@width& (0+255),w,b
  8639  0002A2  0100               	movlb	0	; () banked
  8640  0002A4  119C               	iorwf	(__doprnt@width+1)& (0+255),w,b
  8641  0002A6  B4D8               	btfsc	status,2,c
  8642  0002A8  D00B               	goto	l7495
  8643                           
  8644                           ; BSR set to: 0
  8645  0002AA  C09A  F092         	movff	__doprnt@flag,??__doprnt
  8646  0002AE  0E03               	movlw	3
  8647  0002B0  0100               	movlb	0	; () banked
  8648  0002B2  1792               	andwf	??__doprnt& (0+255),f,b
  8649  0002B4  B4D8               	btfsc	status,2,c
  8650  0002B6  D004               	goto	l7495
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;doprnt.c: 1346: width--;
  8654  0002B8  0100               	movlb	0	; () banked
  8655  0002BA  079B               	decf	__doprnt@width& (0+255),f,b
  8656  0002BC  A0D8               	btfss	status,0,c
  8657  0002BE  079C               	decf	(__doprnt@width+1)& (0+255),f,b
  8658  0002C0                     l7495:
  8659                           
  8660                           ; BSR set to: 0
  8661                           ;doprnt.c: 1381: if(width > c)
  8662  0002C0  0E80               	movlw	128
  8663  0002C2  0100               	movlb	0	; () banked
  8664  0002C4  BF9D               	btfsc	__doprnt@c& (0+255),7,b
  8665  0002C6  0E7F               	movlw	127
  8666  0002C8  0100               	movlb	0	; () banked
  8667  0002CA  6F92               	movwf	??__doprnt& (0+255),b
  8668  0002CC  0100               	movlb	0	; () banked
  8669  0002CE  519B               	movf	__doprnt@width& (0+255),w,b
  8670  0002D0  0100               	movlb	0	; () banked
  8671  0002D2  5D9D               	subwf	__doprnt@c& (0+255),w,b
  8672  0002D4  0100               	movlb	0	; () banked
  8673  0002D6  519C               	movf	(__doprnt@width+1)& (0+255),w,b
  8674  0002D8  0A80               	xorlw	128
  8675  0002DA  0100               	movlb	0	; () banked
  8676  0002DC  5992               	subwfb	??__doprnt& (0+255),w,b
  8677  0002DE  B0D8               	btfsc	status,0,c
  8678  0002E0  D00B               	goto	l7499
  8679                           
  8680                           ; BSR set to: 0
  8681                           ;doprnt.c: 1382: width -= c;
  8682  0002E2  0100               	movlb	0	; () banked
  8683  0002E4  519D               	movf	__doprnt@c& (0+255),w,b
  8684  0002E6  0100               	movlb	0	; () banked
  8685  0002E8  5F9B               	subwf	__doprnt@width& (0+255),f,b
  8686  0002EA  0E00               	movlw	0
  8687  0002EC  0100               	movlb	0	; () banked
  8688  0002EE  BF9D               	btfsc	__doprnt@c& (0+255),7,b
  8689  0002F0  0EFF               	movlw	255
  8690  0002F2  0100               	movlb	0	; () banked
  8691  0002F4  5B9C               	subwfb	(__doprnt@width+1)& (0+255),f,b
  8692  0002F6  D005               	goto	l7501
  8693  0002F8                     l7499:
  8694                           
  8695                           ; BSR set to: 0
  8696                           ;doprnt.c: 1383: else
  8697                           ;doprnt.c: 1384: width = 0;
  8698  0002F8  0E00               	movlw	0
  8699  0002FA  0100               	movlb	0	; () banked
  8700  0002FC  6F9C               	movwf	(__doprnt@width+1)& (0+255),b
  8701  0002FE  0E00               	movlw	0
  8702  000300  6F9B               	movwf	__doprnt@width& (0+255),b
  8703  000302                     l7501:
  8704                           
  8705                           ; BSR set to: 0
  8706                           ;doprnt.c: 1387: if(flag & 0x04) {
  8707  000302  0100               	movlb	0	; () banked
  8708  000304  A59A               	btfss	__doprnt@flag& (0+255),2,b
  8709  000306  D082               	goto	l7525
  8710                           
  8711                           ; BSR set to: 0
  8712                           ;doprnt.c: 1392: if(flag & 0x03)
  8713  000308  C09A  F092         	movff	__doprnt@flag,??__doprnt
  8714  00030C  0E03               	movlw	3
  8715  00030E  0100               	movlb	0	; () banked
  8716  000310  1792               	andwf	??__doprnt& (0+255),f,b
  8717  000312  B4D8               	btfsc	status,2,c
  8718  000314  D038               	goto	l7513
  8719                           
  8720                           ; BSR set to: 0
  8721                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  8722  000316  0100               	movlb	0	; () banked
  8723  000318  EE20 F002          	lfsr	2,2
  8724  00031C  518C               	movf	__doprnt@pb& (0+255),w,b
  8725  00031E  26D9               	addwf	fsr2l,f,c
  8726  000320  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  8727  000322  22DA               	addwfc	fsr2h,f,c
  8728  000324  50DE               	movf	postinc2,w,c
  8729  000326  10DE               	iorwf	postinc2,w,c
  8730  000328  B4D8               	btfsc	status,2,c
  8731  00032A  D018               	goto	l7509
  8732                           
  8733                           ; BSR set to: 0
  8734  00032C  0100               	movlb	0	; () banked
  8735  00032E  EE20 F002          	lfsr	2,2
  8736  000332  518C               	movf	__doprnt@pb& (0+255),w,b
  8737  000334  26D9               	addwf	fsr2l,f,c
  8738  000336  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  8739  000338  22DA               	addwfc	fsr2h,f,c
  8740  00033A  CFDE F092          	movff	postinc2,??__doprnt
  8741  00033E  CFDD F093          	movff	postdec2,??__doprnt+1
  8742  000342  D801               	call	u7898
  8743  000344  D020               	goto	l7513
  8744  000346                     u7898:
  8745  000346  0005               	push	
  8746  000348  6EFA               	movwf	pclath,c
  8747  00034A  0100               	movlb	0	; () banked
  8748  00034C  5192               	movf	??__doprnt& (0+255),w,b
  8749  00034E  6EFD               	movwf	tosl,c
  8750  000350  5193               	movf	(??__doprnt+1)& (0+255),w,b
  8751  000352  6EFE               	movwf	tosh,c
  8752  000354  6AFF               	clrf	tosu,c
  8753  000356  50FA               	movf	pclath,w,c
  8754  000358  0E2D               	movlw	45
  8755  00035A  0012               	return		;indir
  8756  00035C                     l7509:
  8757  00035C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  8758  000360  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  8759  000364  CFDE F092          	movff	postinc2,??__doprnt
  8760  000368  CFDD F093          	movff	postdec2,??__doprnt+1
  8761  00036C  C092  FFD9         	movff	??__doprnt,fsr2l
  8762  000370  C093  FFDA         	movff	??__doprnt+1,fsr2h
  8763  000374  0E2D               	movlw	45
  8764  000376  6EDF               	movwf	indf2,c
  8765  000378  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  8766  00037C  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  8767  000380  2ADE               	incf	postinc2,f,c
  8768  000382  0E00               	movlw	0
  8769  000384  22DD               	addwfc	postdec2,f,c
  8770  000386                     l7513:
  8771                           
  8772                           ;doprnt.c: 1415: if(width)
  8773  000386  0100               	movlb	0	; () banked
  8774  000388  519B               	movf	__doprnt@width& (0+255),w,b
  8775  00038A  0100               	movlb	0	; () banked
  8776  00038C  119C               	iorwf	(__doprnt@width+1)& (0+255),w,b
  8777  00038E  B4D8               	btfsc	status,2,c
  8778  000390  D0C4               	goto	l7547
  8779                           
  8780                           ; BSR set to: 0
  8781                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  8782                           
  8783                           ; BSR set to: 0
  8784                           
  8785                           ;doprnt.c: 1416: do
  8786  000392  0100               	movlb	0	; () banked
  8787  000394  EE20 F002          	lfsr	2,2
  8788  000398  518C               	movf	__doprnt@pb& (0+255),w,b
  8789  00039A  26D9               	addwf	fsr2l,f,c
  8790  00039C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  8791  00039E  22DA               	addwfc	fsr2h,f,c
  8792  0003A0  50DE               	movf	postinc2,w,c
  8793  0003A2  10DE               	iorwf	postinc2,w,c
  8794  0003A4  B4D8               	btfsc	status,2,c
  8795  0003A6  D018               	goto	l7519
  8796                           
  8797                           ; BSR set to: 0
  8798  0003A8  0100               	movlb	0	; () banked
  8799  0003AA  EE20 F002          	lfsr	2,2
  8800  0003AE  518C               	movf	__doprnt@pb& (0+255),w,b
  8801  0003B0  26D9               	addwf	fsr2l,f,c
  8802  0003B2  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  8803  0003B4  22DA               	addwfc	fsr2h,f,c
  8804  0003B6  CFDE F092          	movff	postinc2,??__doprnt
  8805  0003BA  CFDD F093          	movff	postdec2,??__doprnt+1
  8806  0003BE  D801               	call	u7928
  8807  0003C0  D020               	goto	l7523
  8808  0003C2                     u7928:
  8809  0003C2  0005               	push	
  8810  0003C4  6EFA               	movwf	pclath,c
  8811  0003C6  0100               	movlb	0	; () banked
  8812  0003C8  5192               	movf	??__doprnt& (0+255),w,b
  8813  0003CA  6EFD               	movwf	tosl,c
  8814  0003CC  5193               	movf	(??__doprnt+1)& (0+255),w,b
  8815  0003CE  6EFE               	movwf	tosh,c
  8816  0003D0  6AFF               	clrf	tosu,c
  8817  0003D2  50FA               	movf	pclath,w,c
  8818  0003D4  0E30               	movlw	48
  8819  0003D6  0012               	return		;indir
  8820  0003D8                     l7519:
  8821  0003D8  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  8822  0003DC  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  8823  0003E0  CFDE F092          	movff	postinc2,??__doprnt
  8824  0003E4  CFDD F093          	movff	postdec2,??__doprnt+1
  8825  0003E8  C092  FFD9         	movff	??__doprnt,fsr2l
  8826  0003EC  C093  FFDA         	movff	??__doprnt+1,fsr2h
  8827  0003F0  0E30               	movlw	48
  8828  0003F2  6EDF               	movwf	indf2,c
  8829  0003F4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  8830  0003F8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  8831  0003FC  2ADE               	incf	postinc2,f,c
  8832  0003FE  0E00               	movlw	0
  8833  000400  22DD               	addwfc	postdec2,f,c
  8834  000402                     l7523:
  8835                           
  8836                           ;doprnt.c: 1418: while(--width);
  8837  000402  0100               	movlb	0	; () banked
  8838  000404  079B               	decf	__doprnt@width& (0+255),f,b
  8839  000406  A0D8               	btfss	status,0,c
  8840  000408  079C               	decf	(__doprnt@width+1)& (0+255),f,b
  8841  00040A  D7BD               	goto	l7513
  8842  00040C                     l7525:
  8843                           
  8844                           ; BSR set to: 0
  8845                           ;doprnt.c: 1422: {
  8846                           ;doprnt.c: 1424: if(width
  8847                           ;doprnt.c: 1428: )
  8848  00040C  0100               	movlb	0	; () banked
  8849  00040E  519B               	movf	__doprnt@width& (0+255),w,b
  8850  000410  0100               	movlb	0	; () banked
  8851  000412  119C               	iorwf	(__doprnt@width+1)& (0+255),w,b
  8852  000414  B4D8               	btfsc	status,2,c
  8853  000416  D042               	goto	l7537
  8854  000418                     l7527:
  8855                           
  8856                           ; BSR set to: 0
  8857                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  8858  000418  0100               	movlb	0	; () banked
  8859  00041A  EE20 F002          	lfsr	2,2
  8860  00041E  518C               	movf	__doprnt@pb& (0+255),w,b
  8861  000420  26D9               	addwf	fsr2l,f,c
  8862  000422  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  8863  000424  22DA               	addwfc	fsr2h,f,c
  8864  000426  50DE               	movf	postinc2,w,c
  8865  000428  10DE               	iorwf	postinc2,w,c
  8866  00042A  B4D8               	btfsc	status,2,c
  8867  00042C  D018               	goto	l7531
  8868                           
  8869                           ; BSR set to: 0
  8870  00042E  0100               	movlb	0	; () banked
  8871  000430  EE20 F002          	lfsr	2,2
  8872  000434  518C               	movf	__doprnt@pb& (0+255),w,b
  8873  000436  26D9               	addwf	fsr2l,f,c
  8874  000438  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  8875  00043A  22DA               	addwfc	fsr2h,f,c
  8876  00043C  CFDE F092          	movff	postinc2,??__doprnt
  8877  000440  CFDD F093          	movff	postdec2,??__doprnt+1
  8878  000444  D801               	call	u7968
  8879  000446  D020               	goto	l7535
  8880  000448                     u7968:
  8881  000448  0005               	push	
  8882  00044A  6EFA               	movwf	pclath,c
  8883  00044C  0100               	movlb	0	; () banked
  8884  00044E  5192               	movf	??__doprnt& (0+255),w,b
  8885  000450  6EFD               	movwf	tosl,c
  8886  000452  5193               	movf	(??__doprnt+1)& (0+255),w,b
  8887  000454  6EFE               	movwf	tosh,c
  8888  000456  6AFF               	clrf	tosu,c
  8889  000458  50FA               	movf	pclath,w,c
  8890  00045A  0E20               	movlw	32
  8891  00045C  0012               	return		;indir
  8892  00045E                     l7531:
  8893  00045E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  8894  000462  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  8895  000466  CFDE F092          	movff	postinc2,??__doprnt
  8896  00046A  CFDD F093          	movff	postdec2,??__doprnt+1
  8897  00046E  C092  FFD9         	movff	??__doprnt,fsr2l
  8898  000472  C093  FFDA         	movff	??__doprnt+1,fsr2h
  8899  000476  0E20               	movlw	32
  8900  000478  6EDF               	movwf	indf2,c
  8901  00047A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  8902  00047E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  8903  000482  2ADE               	incf	postinc2,f,c
  8904  000484  0E00               	movlw	0
  8905  000486  22DD               	addwfc	postdec2,f,c
  8906  000488                     l7535:
  8907                           
  8908                           ;doprnt.c: 1431: while(--width);
  8909  000488  0100               	movlb	0	; () banked
  8910  00048A  079B               	decf	__doprnt@width& (0+255),f,b
  8911  00048C  A0D8               	btfss	status,0,c
  8912  00048E  079C               	decf	(__doprnt@width+1)& (0+255),f,b
  8913  000490  0100               	movlb	0	; () banked
  8914  000492  519B               	movf	__doprnt@width& (0+255),w,b
  8915  000494  0100               	movlb	0	; () banked
  8916  000496  119C               	iorwf	(__doprnt@width+1)& (0+255),w,b
  8917  000498  A4D8               	btfss	status,2,c
  8918  00049A  D7BE               	goto	l7527
  8919  00049C                     l7537:
  8920                           
  8921                           ; BSR set to: 0
  8922                           ;doprnt.c: 1438: if(flag & 0x03)
  8923  00049C  C09A  F092         	movff	__doprnt@flag,??__doprnt
  8924  0004A0  0E03               	movlw	3
  8925  0004A2  0100               	movlb	0	; () banked
  8926  0004A4  1792               	andwf	??__doprnt& (0+255),f,b
  8927  0004A6  B4D8               	btfsc	status,2,c
  8928  0004A8  D038               	goto	l7547
  8929                           
  8930                           ; BSR set to: 0
  8931                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  8932  0004AA  0100               	movlb	0	; () banked
  8933  0004AC  EE20 F002          	lfsr	2,2
  8934  0004B0  518C               	movf	__doprnt@pb& (0+255),w,b
  8935  0004B2  26D9               	addwf	fsr2l,f,c
  8936  0004B4  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  8937  0004B6  22DA               	addwfc	fsr2h,f,c
  8938  0004B8  50DE               	movf	postinc2,w,c
  8939  0004BA  10DE               	iorwf	postinc2,w,c
  8940  0004BC  B4D8               	btfsc	status,2,c
  8941  0004BE  D018               	goto	l7543
  8942                           
  8943                           ; BSR set to: 0
  8944  0004C0  0100               	movlb	0	; () banked
  8945  0004C2  EE20 F002          	lfsr	2,2
  8946  0004C6  518C               	movf	__doprnt@pb& (0+255),w,b
  8947  0004C8  26D9               	addwf	fsr2l,f,c
  8948  0004CA  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  8949  0004CC  22DA               	addwfc	fsr2h,f,c
  8950  0004CE  CFDE F092          	movff	postinc2,??__doprnt
  8951  0004D2  CFDD F093          	movff	postdec2,??__doprnt+1
  8952  0004D6  D801               	call	u8008
  8953  0004D8  D020               	goto	l7547
  8954  0004DA                     u8008:
  8955  0004DA  0005               	push	
  8956  0004DC  6EFA               	movwf	pclath,c
  8957  0004DE  0100               	movlb	0	; () banked
  8958  0004E0  5192               	movf	??__doprnt& (0+255),w,b
  8959  0004E2  6EFD               	movwf	tosl,c
  8960  0004E4  5193               	movf	(??__doprnt+1)& (0+255),w,b
  8961  0004E6  6EFE               	movwf	tosh,c
  8962  0004E8  6AFF               	clrf	tosu,c
  8963  0004EA  50FA               	movf	pclath,w,c
  8964  0004EC  0E2D               	movlw	45
  8965  0004EE  0012               	return		;indir
  8966  0004F0                     l7543:
  8967  0004F0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  8968  0004F4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  8969  0004F8  CFDE F092          	movff	postinc2,??__doprnt
  8970  0004FC  CFDD F093          	movff	postdec2,??__doprnt+1
  8971  000500  C092  FFD9         	movff	??__doprnt,fsr2l
  8972  000504  C093  FFDA         	movff	??__doprnt+1,fsr2h
  8973  000508  0E2D               	movlw	45
  8974  00050A  6EDF               	movwf	indf2,c
  8975  00050C  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  8976  000510  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  8977  000514  2ADE               	incf	postinc2,f,c
  8978  000516  0E00               	movlw	0
  8979  000518  22DD               	addwfc	postdec2,f,c
  8980  00051A                     l7547:
  8981                           
  8982                           ;doprnt.c: 1469: }
  8983                           ;doprnt.c: 1472: prec = c;
  8984  00051A  C09D  F097         	movff	__doprnt@c,__doprnt@prec
  8985                           
  8986                           ;doprnt.c: 1474: while(prec--) {
  8987  00051E  D098               	goto	l7567
  8988  000520                     l7549:
  8989                           
  8990                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  8991  000520  0100               	movlb	0	; () banked
  8992  000522  5197               	movf	__doprnt@prec& (0+255),w,b
  8993  000524  0D02               	mullw	2
  8994  000526  0E3A               	movlw	low _dpowers
  8995  000528  24F3               	addwf	prodl,w,c
  8996  00052A  6EF6               	movwf	tblptrl,c
  8997  00052C  0EFE               	movlw	high _dpowers
  8998  00052E  20F4               	addwfc	prodh,w,c
  8999  000530  6EF7               	movwf	tblptrh,c
  9000  000532                     	if	1	;There are 3 active tblptr bytes
  9001  000532  6AF8               	clrf	tblptru,c
  9002  000534  0E00               	movlw	low (__mediumconst shr (0+16))
  9003  000536  22F8               	addwfc	tblptru,f,c
  9004  000538                     	endif
  9005  000538  0009               	tblrd		*+
  9006  00053A  CFF5 F082          	movff	tablat,___lwdiv@divisor
  9007  00053E  000A               	tblrd		*-
  9008  000540  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  9009  000544  C098  F080         	movff	__doprnt@val,___lwdiv@dividend
  9010  000548  C099  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
  9011  00054C  EC9B  F013         	call	___lwdiv
  9012  000550  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  9013  000554  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  9014  000558  0E00               	movlw	0
  9015  00055A  0100               	movlb	0	; () banked
  9016  00055C  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  9017  00055E  0E0A               	movlw	10
  9018  000560  6F89               	movwf	___lwmod@divisor& (0+255),b
  9019  000562  ECE2  F014         	call	___lwmod	;wreg free
  9020  000566  0100               	movlb	0	; () banked
  9021  000568  5187               	movf	?___lwmod& (0+255),w,b
  9022  00056A  0F30               	addlw	48
  9023  00056C  0100               	movlb	0	; () banked
  9024  00056E  6F9D               	movwf	__doprnt@c& (0+255),b
  9025                           
  9026                           ;doprnt.c: 1491: break;
  9027  000570  D036               	goto	l7559
  9028  000572                     l7551:
  9029                           
  9030                           ; BSR set to: 0
  9031                           ;doprnt.c: 1499: {
  9032                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9033  000572  C098  F080         	movff	__doprnt@val,___lwdiv@dividend
  9034  000576  C099  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
  9035  00057A  0100               	movlb	0	; () banked
  9036  00057C  5197               	movf	__doprnt@prec& (0+255),w,b
  9037  00057E  0D02               	mullw	2
  9038  000580  0E44               	movlw	low _hexpowers
  9039  000582  24F3               	addwf	prodl,w,c
  9040  000584  6EF6               	movwf	tblptrl,c
  9041  000586  0EFE               	movlw	high _hexpowers
  9042  000588  20F4               	addwfc	prodh,w,c
  9043  00058A  6EF7               	movwf	tblptrh,c
  9044  00058C                     	if	1	;There are 3 active tblptr bytes
  9045  00058C  6AF8               	clrf	tblptru,c
  9046  00058E  0E00               	movlw	low (__mediumconst shr (0+16))
  9047  000590  22F8               	addwfc	tblptru,f,c
  9048  000592                     	endif
  9049  000592  0009               	tblrd		*+
  9050  000594  CFF5 F082          	movff	tablat,___lwdiv@divisor
  9051  000598  000A               	tblrd		*-
  9052  00059A  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  9053  00059E  EC9B  F013         	call	___lwdiv	;wreg free
  9054  0005A2  0100               	movlb	0	; () banked
  9055  0005A4  5180               	movf	?___lwdiv& (0+255),w,b
  9056  0005A6  0B0F               	andlw	15
  9057  0005A8  0100               	movlb	0	; () banked
  9058  0005AA  6F96               	movwf	__doprnt@idx& (0+255),b
  9059                           
  9060                           ; BSR set to: 0
  9061                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  9062  0005AC  0100               	movlb	0	; () banked
  9063  0005AE  5196               	movf	__doprnt@idx& (0+255),w,b
  9064  0005B0  0D01               	mullw	1
  9065  0005B2  0E78               	movlw	low STR_35
  9066  0005B4  24F3               	addwf	prodl,w,c
  9067  0005B6  6EF6               	movwf	tblptrl,c
  9068  0005B8  0EFE               	movlw	high STR_35
  9069  0005BA  20F4               	addwfc	prodh,w,c
  9070  0005BC  6EF7               	movwf	tblptrh,c
  9071  0005BE                     	if	1	;There are 3 active tblptr bytes
  9072  0005BE  6AF8               	clrf	tblptru,c
  9073  0005C0  0E00               	movlw	low (__mediumconst shr (0+16))
  9074  0005C2  22F8               	addwfc	tblptru,f,c
  9075  0005C4                     	endif
  9076  0005C4  0008               	tblrd		*
  9077  0005C6  CFF5 F09D          	movff	tablat,__doprnt@c
  9078                           
  9079                           ; BSR set to: 0
  9080                           ;doprnt.c: 1523: }
  9081                           
  9082                           ;doprnt.c: 1508: }
  9083                           ;doprnt.c: 1510: break;
  9084  0005CA  D009               	goto	l7559
  9085  0005CC                     l7557:
  9086  0005CC  0100               	movlb	0	; () banked
  9087  0005CE  519A               	movf	__doprnt@flag& (0+255),w,b
  9088  0005D0  0B80               	andlw	128
  9089                           
  9090                           ; Switch size 1, requested type "space"
  9091                           ; Number of cases is 2, Range of values is 0 to 128
  9092                           ; switch strategies available:
  9093                           ; Name         Instructions Cycles
  9094                           ; simple_byte            7     4 (average)
  9095                           ;	Chosen strategy is simple_byte
  9096  0005D2  0A00               	xorlw	0	; case 0
  9097  0005D4  B4D8               	btfsc	status,2,c
  9098  0005D6  D7A4               	goto	l7549
  9099  0005D8  0A80               	xorlw	128	; case 128
  9100  0005DA  B4D8               	btfsc	status,2,c
  9101  0005DC  D7CA               	goto	l7551
  9102  0005DE                     l7559:
  9103                           
  9104                           ; BSR set to: 0
  9105                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  9106  0005DE  0100               	movlb	0	; () banked
  9107  0005E0  EE20 F002          	lfsr	2,2
  9108  0005E4  518C               	movf	__doprnt@pb& (0+255),w,b
  9109  0005E6  26D9               	addwf	fsr2l,f,c
  9110  0005E8  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  9111  0005EA  22DA               	addwfc	fsr2h,f,c
  9112  0005EC  50DE               	movf	postinc2,w,c
  9113  0005EE  10DE               	iorwf	postinc2,w,c
  9114  0005F0  B4D8               	btfsc	status,2,c
  9115  0005F2  D019               	goto	l7563
  9116                           
  9117                           ; BSR set to: 0
  9118  0005F4  0100               	movlb	0	; () banked
  9119  0005F6  EE20 F002          	lfsr	2,2
  9120  0005FA  518C               	movf	__doprnt@pb& (0+255),w,b
  9121  0005FC  26D9               	addwf	fsr2l,f,c
  9122  0005FE  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  9123  000600  22DA               	addwfc	fsr2h,f,c
  9124  000602  CFDE F092          	movff	postinc2,??__doprnt
  9125  000606  CFDD F093          	movff	postdec2,??__doprnt+1
  9126  00060A  D801               	call	u8028
  9127  00060C  D021               	goto	l7567
  9128  00060E                     u8028:
  9129  00060E  0005               	push	
  9130  000610  6EFA               	movwf	pclath,c
  9131  000612  0100               	movlb	0	; () banked
  9132  000614  5192               	movf	??__doprnt& (0+255),w,b
  9133  000616  6EFD               	movwf	tosl,c
  9134  000618  5193               	movf	(??__doprnt+1)& (0+255),w,b
  9135  00061A  6EFE               	movwf	tosh,c
  9136  00061C  6AFF               	clrf	tosu,c
  9137  00061E  50FA               	movf	pclath,w,c
  9138  000620  0100               	movlb	0	; () banked
  9139  000622  519D               	movf	__doprnt@c& (0+255),w,b
  9140  000624  0012               	return		;indir
  9141  000626                     l7563:
  9142  000626  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  9143  00062A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  9144  00062E  CFDE F092          	movff	postinc2,??__doprnt
  9145  000632  CFDD F093          	movff	postdec2,??__doprnt+1
  9146  000636  C092  FFD9         	movff	??__doprnt,fsr2l
  9147  00063A  C093  FFDA         	movff	??__doprnt+1,fsr2h
  9148  00063E  C09D  FFDF         	movff	__doprnt@c,indf2
  9149  000642  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  9150  000646  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  9151  00064A  2ADE               	incf	postinc2,f,c
  9152  00064C  0E00               	movlw	0
  9153  00064E  22DD               	addwfc	postdec2,f,c
  9154  000650                     l7567:
  9155  000650  0100               	movlb	0	; () banked
  9156  000652  0797               	decf	__doprnt@prec& (0+255),f,b
  9157  000654  0100               	movlb	0	; () banked
  9158  000656  2997               	incf	__doprnt@prec& (0+255),w,b
  9159  000658  A4D8               	btfss	status,2,c
  9160  00065A  D7B8               	goto	l7557
  9161  00065C                     l7569:
  9162  00065C  C08E  FFF6         	movff	__doprnt@f,tblptrl
  9163  000660  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  9164  000664  0100               	movlb	0	; () banked
  9165  000666  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  9166  000668  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  9167  00066A                     	if	1	;Program memory is < 0x10000, tblptru is always zero
  9168  00066A  6AF8               	clrf	tblptru,c
  9169  00066C                     	endif
  9170  00066C                     	if	0	;tblptru may be non-zero
  9171  00066C                     	endif
  9172  00066C  0008               	tblrd		*
  9173  00066E  CFF5 F09D          	movff	tablat,__doprnt@c
  9174  000672  0100               	movlb	0	; () banked
  9175  000674  519D               	movf	__doprnt@c& (0+255),w,b
  9176  000676  A4D8               	btfss	status,2,c
  9177  000678  D4CD               	goto	l7411
  9178  00067A                     l7571:
  9179                           
  9180                           ;doprnt.c: 1540: return 0;
  9181  00067A  0E00               	movlw	0
  9182  00067C  0100               	movlb	0	; () banked
  9183  00067E  6F8D               	movwf	(?__doprnt+1)& (0+255),b
  9184  000680  0E00               	movlw	0
  9185  000682  6F8C               	movwf	?__doprnt& (0+255),b
  9186  000684  0012               	return	
  9187  000686                     __end_of__doprnt:
  9188                           	opt stack 0
  9189                           tosu	equ	0xFFF
  9190                           tosh	equ	0xFFE
  9191                           tosl	equ	0xFFD
  9192                           pclath	equ	0xFFA
  9193                           tblptru	equ	0xFF8
  9194                           tblptrh	equ	0xFF7
  9195                           tblptrl	equ	0xFF6
  9196                           tablat	equ	0xFF5
  9197                           prodh	equ	0xFF4
  9198                           prodl	equ	0xFF3
  9199                           intcon	equ	0xFF2
  9200                           intcon2	equ	0xFF1
  9201                           postinc0	equ	0xFEE
  9202                           wreg	equ	0xFE8
  9203                           indf1	equ	0xFE7
  9204                           postinc1	equ	0xFE6
  9205                           postdec1	equ	0xFE5
  9206                           fsr1h	equ	0xFE2
  9207                           fsr1l	equ	0xFE1
  9208                           indf2	equ	0xFDF
  9209                           postinc2	equ	0xFDE
  9210                           postdec2	equ	0xFDD
  9211                           fsr2h	equ	0xFDA
  9212                           fsr2l	equ	0xFD9
  9213                           status	equ	0xFD8
  9214                           
  9215 ;; *************** function _putch *****************
  9216 ;; Defined at:
  9217 ;;		line 30 in file "lcd.c"
  9218 ;; Parameters:    Size  Location     Type
  9219 ;;  data            1    wreg     unsigned char 
  9220 ;; Auto vars:     Size  Location     Type
  9221 ;;  data            1    2[BANK0 ] unsigned char 
  9222 ;; Return value:  Size  Location     Type
  9223 ;;                  1    wreg      void 
  9224 ;; Registers used:
  9225 ;;		wreg, status,2, status,0, cstack
  9226 ;; Tracked objects:
  9227 ;;		On entry : 0/0
  9228 ;;		On exit  : 0/0
  9229 ;;		Unchanged: 0/0
  9230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9232 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9234 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9235 ;;Total ram usage:        1 bytes
  9236 ;; Hardware stack levels used:    1
  9237 ;; Hardware stack levels required when called:    7
  9238 ;; This function calls:
  9239 ;;		_lcdNibble
  9240 ;; This function is called by:
  9241 ;;		_printf
  9242 ;;		__doprnt
  9243 ;;		i2__doprnt
  9244 ;; This function uses a non-reentrant model
  9245 ;;
  9246                           
  9247                           	psect	text40
  9248  003028                     __ptext40:
  9249                           	opt stack 0
  9250  003028                     _putch:
  9251                           	opt stack 0
  9252                           
  9253                           ; BSR set to: 0
  9254                           ;Skip over the trampoline to the duplicate function for level 2
  9255  003028  B24F               	btfsc	btemp,1,c
  9256  00302A  EF54  F018         	goto	i2_putch
  9257  00302E                     _putch$intlevel0:
  9258                           	opt stack 18
  9259                           
  9260                           ;incstack = 0
  9261                           ;putch@data stored from wreg
  9262  00302E  0100               	movlb	0	; () banked
  9263  003030  6F82               	movwf	putch@data& (0+255),b
  9264                           
  9265                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  9266  003032  848C               	bsf	3980,2,c	;volatile
  9267                           
  9268                           ;lcd.c: 32: lcdNibble(data);
  9269  003034  0100               	movlb	0	; () banked
  9270  003036  5182               	movf	putch@data& (0+255),w,b
  9271  003038  EC7A  F014         	call	_lcdNibble
  9272  00303C  0012               	return		;funcret
  9273  00303E                     __end_of_putch:
  9274                           	opt stack 0
  9275                           tosu	equ	0xFFF
  9276                           tosh	equ	0xFFE
  9277                           tosl	equ	0xFFD
  9278                           pclath	equ	0xFFA
  9279                           tblptru	equ	0xFF8
  9280                           tblptrh	equ	0xFF7
  9281                           tblptrl	equ	0xFF6
  9282                           tablat	equ	0xFF5
  9283                           prodh	equ	0xFF4
  9284                           prodl	equ	0xFF3
  9285                           intcon	equ	0xFF2
  9286                           intcon2	equ	0xFF1
  9287                           postinc0	equ	0xFEE
  9288                           wreg	equ	0xFE8
  9289                           indf1	equ	0xFE7
  9290                           postinc1	equ	0xFE6
  9291                           postdec1	equ	0xFE5
  9292                           fsr1h	equ	0xFE2
  9293                           fsr1l	equ	0xFE1
  9294                           indf2	equ	0xFDF
  9295                           postinc2	equ	0xFDE
  9296                           postdec2	equ	0xFDD
  9297                           fsr2h	equ	0xFDA
  9298                           fsr2l	equ	0xFD9
  9299                           status	equ	0xFD8
  9300                           
  9301 ;; *************** function _isdigit *****************
  9302 ;; Defined at:
  9303 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  9304 ;; Parameters:    Size  Location     Type
  9305 ;;  c               1    wreg     unsigned char 
  9306 ;; Auto vars:     Size  Location     Type
  9307 ;;  c               1    2[BANK0 ] unsigned char 
  9308 ;; Return value:  Size  Location     Type
  9309 ;;		None               void
  9310 ;; Registers used:
  9311 ;;		wreg, status,2, status,0
  9312 ;; Tracked objects:
  9313 ;;		On entry : 0/0
  9314 ;;		On exit  : 0/0
  9315 ;;		Unchanged: 0/0
  9316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9318 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9319 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9320 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9321 ;;Total ram usage:        3 bytes
  9322 ;; Hardware stack levels used:    1
  9323 ;; Hardware stack levels required when called:    6
  9324 ;; This function calls:
  9325 ;;		Nothing
  9326 ;; This function is called by:
  9327 ;;		__doprnt
  9328 ;;		_atoi
  9329 ;; This function uses a non-reentrant model
  9330 ;;
  9331                           
  9332                           	psect	text41
  9333  002F32                     __ptext41:
  9334                           	opt stack 0
  9335  002F32                     _isdigit:
  9336                           	opt stack 19
  9337                           
  9338                           ;incstack = 0
  9339                           ;isdigit@c stored from wreg
  9340  002F32  0100               	movlb	0	; () banked
  9341  002F34  6F82               	movwf	isdigit@c& (0+255),b
  9342  002F36  0E00               	movlw	0
  9343  002F38  0100               	movlb	0	; () banked
  9344  002F3A  6F81               	movwf	_isdigit$1284& (0+255),b
  9345                           
  9346                           ; BSR set to: 0
  9347  002F3C  0E3A               	movlw	58
  9348  002F3E  0100               	movlb	0	; () banked
  9349  002F40  6182               	cpfslt	isdigit@c& (0+255),b
  9350  002F42  D007               	goto	l3067
  9351                           
  9352                           ; BSR set to: 0
  9353  002F44  0E2F               	movlw	47
  9354  002F46  0100               	movlb	0	; () banked
  9355  002F48  6582               	cpfsgt	isdigit@c& (0+255),b
  9356  002F4A  D003               	goto	l3067
  9357                           
  9358                           ; BSR set to: 0
  9359  002F4C  0E01               	movlw	1
  9360  002F4E  0100               	movlb	0	; () banked
  9361  002F50  6F81               	movwf	_isdigit$1284& (0+255),b
  9362  002F52                     l3067:
  9363                           
  9364                           ; BSR set to: 0
  9365  002F52  C081  F080         	movff	_isdigit$1284,??_isdigit
  9366  002F56  0100               	movlb	0	; () banked
  9367  002F58  3180               	rrcf	??_isdigit& (0+255),w,b
  9368  002F5A  0012               	return	
  9369  002F5C                     __end_of_isdigit:
  9370                           	opt stack 0
  9371                           tosu	equ	0xFFF
  9372                           tosh	equ	0xFFE
  9373                           tosl	equ	0xFFD
  9374                           pclath	equ	0xFFA
  9375                           tblptru	equ	0xFF8
  9376                           tblptrh	equ	0xFF7
  9377                           tblptrl	equ	0xFF6
  9378                           tablat	equ	0xFF5
  9379                           prodh	equ	0xFF4
  9380                           prodl	equ	0xFF3
  9381                           intcon	equ	0xFF2
  9382                           intcon2	equ	0xFF1
  9383                           postinc0	equ	0xFEE
  9384                           wreg	equ	0xFE8
  9385                           indf1	equ	0xFE7
  9386                           postinc1	equ	0xFE6
  9387                           postdec1	equ	0xFE5
  9388                           fsr1h	equ	0xFE2
  9389                           fsr1l	equ	0xFE1
  9390                           indf2	equ	0xFDF
  9391                           postinc2	equ	0xFDE
  9392                           postdec2	equ	0xFDD
  9393                           fsr2h	equ	0xFDA
  9394                           fsr2l	equ	0xFD9
  9395                           status	equ	0xFD8
  9396                           
  9397 ;; *************** function ___lwmod *****************
  9398 ;; Defined at:
  9399 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  9400 ;; Parameters:    Size  Location     Type
  9401 ;;  dividend        2    7[BANK0 ] unsigned int 
  9402 ;;  divisor         2    9[BANK0 ] unsigned int 
  9403 ;; Auto vars:     Size  Location     Type
  9404 ;;  counter         1   11[BANK0 ] unsigned char 
  9405 ;; Return value:  Size  Location     Type
  9406 ;;                  2    7[BANK0 ] unsigned int 
  9407 ;; Registers used:
  9408 ;;		wreg, status,2, status,0
  9409 ;; Tracked objects:
  9410 ;;		On entry : 0/0
  9411 ;;		On exit  : 0/0
  9412 ;;		Unchanged: 0/0
  9413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9414 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9415 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9417 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9418 ;;Total ram usage:        5 bytes
  9419 ;; Hardware stack levels used:    1
  9420 ;; Hardware stack levels required when called:    6
  9421 ;; This function calls:
  9422 ;;		Nothing
  9423 ;; This function is called by:
  9424 ;;		__doprnt
  9425 ;; This function uses a non-reentrant model
  9426 ;;
  9427                           
  9428                           	psect	text42
  9429  0029C4                     __ptext42:
  9430                           	opt stack 0
  9431  0029C4                     ___lwmod:
  9432                           	opt stack 19
  9433                           
  9434                           ; BSR set to: 0
  9435                           ;incstack = 0
  9436  0029C4  0100               	movlb	0	; () banked
  9437  0029C6  5189               	movf	___lwmod@divisor& (0+255),w,b
  9438  0029C8  0100               	movlb	0	; () banked
  9439  0029CA  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  9440  0029CC  B4D8               	btfsc	status,2,c
  9441  0029CE  D026               	goto	l1028
  9442                           
  9443                           ; BSR set to: 0
  9444  0029D0  0E01               	movlw	1
  9445  0029D2  0100               	movlb	0	; () banked
  9446  0029D4  6F8B               	movwf	___lwmod@counter& (0+255),b
  9447  0029D6  D006               	goto	l3105
  9448  0029D8                     l3103:
  9449                           
  9450                           ; BSR set to: 0
  9451  0029D8  0100               	movlb	0	; () banked
  9452  0029DA  90D8               	bcf	status,0,c
  9453  0029DC  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  9454  0029DE  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  9455  0029E0  0100               	movlb	0	; () banked
  9456  0029E2  2B8B               	incf	___lwmod@counter& (0+255),f,b
  9457  0029E4                     l3105:
  9458                           
  9459                           ; BSR set to: 0
  9460  0029E4  0100               	movlb	0	; () banked
  9461  0029E6  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  9462  0029E8  D7F7               	goto	l3103
  9463  0029EA                     l3107:
  9464                           
  9465                           ; BSR set to: 0
  9466  0029EA  0100               	movlb	0	; () banked
  9467  0029EC  5189               	movf	___lwmod@divisor& (0+255),w,b
  9468  0029EE  0100               	movlb	0	; () banked
  9469  0029F0  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  9470  0029F2  0100               	movlb	0	; () banked
  9471  0029F4  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  9472  0029F6  0100               	movlb	0	; () banked
  9473  0029F8  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  9474  0029FA  A0D8               	btfss	status,0,c
  9475  0029FC  D008               	goto	l3111
  9476                           
  9477                           ; BSR set to: 0
  9478  0029FE  0100               	movlb	0	; () banked
  9479  002A00  5189               	movf	___lwmod@divisor& (0+255),w,b
  9480  002A02  0100               	movlb	0	; () banked
  9481  002A04  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  9482  002A06  0100               	movlb	0	; () banked
  9483  002A08  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  9484  002A0A  0100               	movlb	0	; () banked
  9485  002A0C  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  9486  002A0E                     l3111:
  9487                           
  9488                           ; BSR set to: 0
  9489  002A0E  0100               	movlb	0	; () banked
  9490  002A10  90D8               	bcf	status,0,c
  9491  002A12  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  9492  002A14  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  9493                           
  9494                           ; BSR set to: 0
  9495  002A16  0100               	movlb	0	; () banked
  9496  002A18  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  9497  002A1A  D7E7               	goto	l3107
  9498  002A1C                     l1028:
  9499                           
  9500                           ; BSR set to: 0
  9501  002A1C  C087  F087         	movff	___lwmod@dividend,?___lwmod
  9502  002A20  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  9503                           
  9504                           ; BSR set to: 0
  9505  002A24  0012               	return		;funcret
  9506  002A26                     __end_of___lwmod:
  9507                           	opt stack 0
  9508                           tosu	equ	0xFFF
  9509                           tosh	equ	0xFFE
  9510                           tosl	equ	0xFFD
  9511                           pclath	equ	0xFFA
  9512                           tblptru	equ	0xFF8
  9513                           tblptrh	equ	0xFF7
  9514                           tblptrl	equ	0xFF6
  9515                           tablat	equ	0xFF5
  9516                           prodh	equ	0xFF4
  9517                           prodl	equ	0xFF3
  9518                           intcon	equ	0xFF2
  9519                           intcon2	equ	0xFF1
  9520                           postinc0	equ	0xFEE
  9521                           wreg	equ	0xFE8
  9522                           indf1	equ	0xFE7
  9523                           postinc1	equ	0xFE6
  9524                           postdec1	equ	0xFE5
  9525                           fsr1h	equ	0xFE2
  9526                           fsr1l	equ	0xFE1
  9527                           indf2	equ	0xFDF
  9528                           postinc2	equ	0xFDE
  9529                           postdec2	equ	0xFDD
  9530                           fsr2h	equ	0xFDA
  9531                           fsr2l	equ	0xFD9
  9532                           status	equ	0xFD8
  9533                           
  9534 ;; *************** function ___lwdiv *****************
  9535 ;; Defined at:
  9536 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  9537 ;; Parameters:    Size  Location     Type
  9538 ;;  dividend        2    0[BANK0 ] unsigned int 
  9539 ;;  divisor         2    2[BANK0 ] unsigned int 
  9540 ;; Auto vars:     Size  Location     Type
  9541 ;;  quotient        2    4[BANK0 ] unsigned int 
  9542 ;;  counter         1    6[BANK0 ] unsigned char 
  9543 ;; Return value:  Size  Location     Type
  9544 ;;                  2    0[BANK0 ] unsigned int 
  9545 ;; Registers used:
  9546 ;;		wreg, status,2, status,0
  9547 ;; Tracked objects:
  9548 ;;		On entry : 0/0
  9549 ;;		On exit  : 0/0
  9550 ;;		Unchanged: 0/0
  9551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9552 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9553 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9554 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9555 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9556 ;;Total ram usage:        7 bytes
  9557 ;; Hardware stack levels used:    1
  9558 ;; Hardware stack levels required when called:    6
  9559 ;; This function calls:
  9560 ;;		Nothing
  9561 ;; This function is called by:
  9562 ;;		__doprnt
  9563 ;; This function uses a non-reentrant model
  9564 ;;
  9565                           
  9566                           	psect	text43
  9567  002736                     __ptext43:
  9568                           	opt stack 0
  9569  002736                     ___lwdiv:
  9570                           	opt stack 19
  9571                           
  9572                           ; BSR set to: 0
  9573                           ;incstack = 0
  9574  002736  0E00               	movlw	0
  9575  002738  0100               	movlb	0	; () banked
  9576  00273A  6F85               	movwf	(___lwdiv@quotient+1)& (0+255),b
  9577  00273C  0E00               	movlw	0
  9578  00273E  6F84               	movwf	___lwdiv@quotient& (0+255),b
  9579                           
  9580                           ; BSR set to: 0
  9581  002740  0100               	movlb	0	; () banked
  9582  002742  5182               	movf	___lwdiv@divisor& (0+255),w,b
  9583  002744  0100               	movlb	0	; () banked
  9584  002746  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  9585  002748  B4D8               	btfsc	status,2,c
  9586  00274A  D02C               	goto	l1018
  9587                           
  9588                           ; BSR set to: 0
  9589  00274C  0E01               	movlw	1
  9590  00274E  0100               	movlb	0	; () banked
  9591  002750  6F86               	movwf	___lwdiv@counter& (0+255),b
  9592  002752  D006               	goto	l3085
  9593  002754                     l3083:
  9594                           
  9595                           ; BSR set to: 0
  9596  002754  0100               	movlb	0	; () banked
  9597  002756  90D8               	bcf	status,0,c
  9598  002758  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  9599  00275A  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  9600  00275C  0100               	movlb	0	; () banked
  9601  00275E  2B86               	incf	___lwdiv@counter& (0+255),f,b
  9602  002760                     l3085:
  9603                           
  9604                           ; BSR set to: 0
  9605  002760  0100               	movlb	0	; () banked
  9606  002762  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  9607  002764  D7F7               	goto	l3083
  9608  002766                     l3087:
  9609                           
  9610                           ; BSR set to: 0
  9611  002766  0100               	movlb	0	; () banked
  9612  002768  90D8               	bcf	status,0,c
  9613  00276A  3784               	rlcf	___lwdiv@quotient& (0+255),f,b
  9614  00276C  3785               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  9615                           
  9616                           ; BSR set to: 0
  9617  00276E  0100               	movlb	0	; () banked
  9618  002770  5182               	movf	___lwdiv@divisor& (0+255),w,b
  9619  002772  0100               	movlb	0	; () banked
  9620  002774  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  9621  002776  0100               	movlb	0	; () banked
  9622  002778  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9623  00277A  0100               	movlb	0	; () banked
  9624  00277C  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  9625  00277E  A0D8               	btfss	status,0,c
  9626  002780  D00A               	goto	l3095
  9627                           
  9628                           ; BSR set to: 0
  9629  002782  0100               	movlb	0	; () banked
  9630  002784  5182               	movf	___lwdiv@divisor& (0+255),w,b
  9631  002786  0100               	movlb	0	; () banked
  9632  002788  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  9633  00278A  0100               	movlb	0	; () banked
  9634  00278C  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9635  00278E  0100               	movlb	0	; () banked
  9636  002790  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  9637                           
  9638                           ; BSR set to: 0
  9639  002792  0100               	movlb	0	; () banked
  9640  002794  8184               	bsf	___lwdiv@quotient& (0+255),0,b
  9641  002796                     l3095:
  9642                           
  9643                           ; BSR set to: 0
  9644  002796  0100               	movlb	0	; () banked
  9645  002798  90D8               	bcf	status,0,c
  9646  00279A  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  9647  00279C  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  9648                           
  9649                           ; BSR set to: 0
  9650  00279E  0100               	movlb	0	; () banked
  9651  0027A0  2F86               	decfsz	___lwdiv@counter& (0+255),f,b
  9652  0027A2  D7E1               	goto	l3087
  9653  0027A4                     l1018:
  9654                           
  9655                           ; BSR set to: 0
  9656  0027A4  C084  F080         	movff	___lwdiv@quotient,?___lwdiv
  9657  0027A8  C085  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9658                           
  9659                           ; BSR set to: 0
  9660  0027AC  0012               	return		;funcret
  9661  0027AE                     __end_of___lwdiv:
  9662                           	opt stack 0
  9663                           tosu	equ	0xFFF
  9664                           tosh	equ	0xFFE
  9665                           tosl	equ	0xFFD
  9666                           pclath	equ	0xFFA
  9667                           tblptru	equ	0xFF8
  9668                           tblptrh	equ	0xFF7
  9669                           tblptrl	equ	0xFF6
  9670                           tablat	equ	0xFF5
  9671                           prodh	equ	0xFF4
  9672                           prodl	equ	0xFF3
  9673                           intcon	equ	0xFF2
  9674                           intcon2	equ	0xFF1
  9675                           postinc0	equ	0xFEE
  9676                           wreg	equ	0xFE8
  9677                           indf1	equ	0xFE7
  9678                           postinc1	equ	0xFE6
  9679                           postdec1	equ	0xFE5
  9680                           fsr1h	equ	0xFE2
  9681                           fsr1l	equ	0xFE1
  9682                           indf2	equ	0xFDF
  9683                           postinc2	equ	0xFDE
  9684                           postdec2	equ	0xFDD
  9685                           fsr2h	equ	0xFDA
  9686                           fsr2l	equ	0xFD9
  9687                           status	equ	0xFD8
  9688                           
  9689 ;; *************** function _lcdInst *****************
  9690 ;; Defined at:
  9691 ;;		line 25 in file "lcd.c"
  9692 ;; Parameters:    Size  Location     Type
  9693 ;;  data            1    wreg     unsigned char 
  9694 ;; Auto vars:     Size  Location     Type
  9695 ;;  data            1    2[BANK0 ] unsigned char 
  9696 ;; Return value:  Size  Location     Type
  9697 ;;                  1    wreg      void 
  9698 ;; Registers used:
  9699 ;;		wreg, status,2, status,0, cstack
  9700 ;; Tracked objects:
  9701 ;;		On entry : 0/0
  9702 ;;		On exit  : 0/0
  9703 ;;		Unchanged: 0/0
  9704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9705 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9706 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9707 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9708 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9709 ;;Total ram usage:        1 bytes
  9710 ;; Hardware stack levels used:    1
  9711 ;; Hardware stack levels required when called:    7
  9712 ;; This function calls:
  9713 ;;		_lcdNibble
  9714 ;; This function is called by:
  9715 ;;		_printTime
  9716 ;;		_displayMainProgramLcdScreen
  9717 ;;		_update_eeprom_screen_state
  9718 ;;		_update_past_run_screen_state
  9719 ;;		_operation
  9720 ;;		_initializeLcdSettings
  9721 ;;		_lcdClear
  9722 ;; This function uses a non-reentrant model
  9723 ;;
  9724                           
  9725                           	psect	text44
  9726  00308C                     __ptext44:
  9727                           	opt stack 0
  9728  00308C                     _lcdInst:
  9729                           	opt stack 20
  9730                           
  9731                           ; BSR set to: 0
  9732                           ;incstack = 0
  9733                           ;lcdInst@data stored from wreg
  9734  00308C  0100               	movlb	0	; () banked
  9735  00308E  6F82               	movwf	lcdInst@data& (0+255),b
  9736                           
  9737                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  9738  003090  948C               	bcf	3980,2,c	;volatile
  9739                           
  9740                           ;lcd.c: 27: lcdNibble(data);
  9741  003092  0100               	movlb	0	; () banked
  9742  003094  5182               	movf	lcdInst@data& (0+255),w,b
  9743  003096  EC7A  F014         	call	_lcdNibble
  9744  00309A  0012               	return		;funcret
  9745  00309C                     __end_of_lcdInst:
  9746                           	opt stack 0
  9747                           tosu	equ	0xFFF
  9748                           tosh	equ	0xFFE
  9749                           tosl	equ	0xFFD
  9750                           pclath	equ	0xFFA
  9751                           tblptru	equ	0xFF8
  9752                           tblptrh	equ	0xFF7
  9753                           tblptrl	equ	0xFF6
  9754                           tablat	equ	0xFF5
  9755                           prodh	equ	0xFF4
  9756                           prodl	equ	0xFF3
  9757                           intcon	equ	0xFF2
  9758                           intcon2	equ	0xFF1
  9759                           postinc0	equ	0xFEE
  9760                           wreg	equ	0xFE8
  9761                           indf1	equ	0xFE7
  9762                           postinc1	equ	0xFE6
  9763                           postdec1	equ	0xFE5
  9764                           fsr1h	equ	0xFE2
  9765                           fsr1l	equ	0xFE1
  9766                           indf2	equ	0xFDF
  9767                           postinc2	equ	0xFDE
  9768                           postdec2	equ	0xFDD
  9769                           fsr2h	equ	0xFDA
  9770                           fsr2l	equ	0xFD9
  9771                           status	equ	0xFD8
  9772                           
  9773 ;; *************** function _lcdNibble *****************
  9774 ;; Defined at:
  9775 ;;		line 43 in file "lcd.c"
  9776 ;; Parameters:    Size  Location     Type
  9777 ;;  data            1    wreg     unsigned char 
  9778 ;; Auto vars:     Size  Location     Type
  9779 ;;  data            1    1[BANK0 ] unsigned char 
  9780 ;;  temp            1    0[BANK0 ] unsigned char 
  9781 ;; Return value:  Size  Location     Type
  9782 ;;                  1    wreg      void 
  9783 ;; Registers used:
  9784 ;;		wreg, status,2, status,0
  9785 ;; Tracked objects:
  9786 ;;		On entry : 0/0
  9787 ;;		On exit  : 0/0
  9788 ;;		Unchanged: 0/0
  9789 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9790 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9791 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9792 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9793 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9794 ;;Total ram usage:        2 bytes
  9795 ;; Hardware stack levels used:    1
  9796 ;; Hardware stack levels required when called:    6
  9797 ;; This function calls:
  9798 ;;		Nothing
  9799 ;; This function is called by:
  9800 ;;		_lcdInst
  9801 ;;		_putch
  9802 ;; This function uses a non-reentrant model
  9803 ;;
  9804                           
  9805                           	psect	text45
  9806  0028F4                     __ptext45:
  9807                           	opt stack 0
  9808  0028F4                     _lcdNibble:
  9809                           	opt stack 20
  9810                           
  9811                           ;incstack = 0
  9812                           ;lcdNibble@data stored from wreg
  9813  0028F4  0100               	movlb	0	; () banked
  9814  0028F6  6F81               	movwf	lcdNibble@data& (0+255),b
  9815                           
  9816                           ;lcd.c: 45: char temp = data & 0xF0;
  9817  0028F8  0100               	movlb	0	; () banked
  9818  0028FA  5181               	movf	lcdNibble@data& (0+255),w,b
  9819  0028FC  0BF0               	andlw	240
  9820  0028FE  0100               	movlb	0	; () banked
  9821  002900  6F80               	movwf	lcdNibble@temp& (0+255),b
  9822                           
  9823                           ;lcd.c: 46: LATD = LATD & 0x0F;
  9824  002902  508C               	movf	3980,w,c	;volatile
  9825  002904  0B0F               	andlw	15
  9826  002906  6E8C               	movwf	3980,c	;volatile
  9827                           
  9828                           ;lcd.c: 47: LATD = temp | LATD;
  9829  002908  0100               	movlb	0	; () banked
  9830  00290A  5180               	movf	lcdNibble@temp& (0+255),w,b
  9831  00290C  108C               	iorwf	3980,w,c	;volatile
  9832  00290E  6E8C               	movwf	3980,c	;volatile
  9833                           
  9834                           ; BSR set to: 0
  9835                           ;lcd.c: 49: LATDbits.LATD3 = 0;
  9836  002910  968C               	bcf	3980,3,c	;volatile
  9837                           
  9838                           ; BSR set to: 0
  9839                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
  9840  002912  0E10               	movlw	16
  9841  002914                     u8887:
  9842  002914  2EE8               	decfsz	wreg,f,c
  9843  002916  D7FE               	bra	u8887
  9844  002918  D000               	nop2	
  9845                           
  9846                           ;lcd.c: 51: LATDbits.LATD3 = 1;
  9847  00291A  868C               	bsf	3980,3,c	;volatile
  9848                           
  9849                           ;lcd.c: 52: _delay((unsigned long)((25)*(8000000/4000000.0)));
  9850  00291C  0E10               	movlw	16
  9851  00291E                     u8897:
  9852  00291E  2EE8               	decfsz	wreg,f,c
  9853  002920  D7FE               	bra	u8897
  9854  002922  D000               	nop2	
  9855                           
  9856                           ;lcd.c: 54: data = data << 4;
  9857  002924  0100               	movlb	0	; () banked
  9858  002926  3981               	swapf	lcdNibble@data& (0+255),w,b
  9859  002928  0BF0               	andlw	240
  9860  00292A  0100               	movlb	0	; () banked
  9861  00292C  6F81               	movwf	lcdNibble@data& (0+255),b
  9862                           
  9863                           ;lcd.c: 56: temp = data & 0xF0;
  9864  00292E  0100               	movlb	0	; () banked
  9865  002930  5181               	movf	lcdNibble@data& (0+255),w,b
  9866  002932  0BF0               	andlw	240
  9867  002934  0100               	movlb	0	; () banked
  9868  002936  6F80               	movwf	lcdNibble@temp& (0+255),b
  9869                           
  9870                           ;lcd.c: 57: LATD = LATD & 0x0F;
  9871  002938  508C               	movf	3980,w,c	;volatile
  9872  00293A  0B0F               	andlw	15
  9873  00293C  6E8C               	movwf	3980,c	;volatile
  9874                           
  9875                           ;lcd.c: 58: LATD = temp | LATD;
  9876  00293E  0100               	movlb	0	; () banked
  9877  002940  5180               	movf	lcdNibble@temp& (0+255),w,b
  9878  002942  108C               	iorwf	3980,w,c	;volatile
  9879  002944  6E8C               	movwf	3980,c	;volatile
  9880                           
  9881                           ; BSR set to: 0
  9882                           ;lcd.c: 60: LATDbits.LATD3 = 0;
  9883  002946  968C               	bcf	3980,3,c	;volatile
  9884                           
  9885                           ; BSR set to: 0
  9886                           ;lcd.c: 61: _delay((unsigned long)((25)*(8000000/4000000.0)));
  9887  002948  0E10               	movlw	16
  9888  00294A                     u8907:
  9889  00294A  2EE8               	decfsz	wreg,f,c
  9890  00294C  D7FE               	bra	u8907
  9891  00294E  D000               	nop2	
  9892                           
  9893                           ;lcd.c: 62: LATDbits.LATD3 = 1;
  9894  002950  868C               	bsf	3980,3,c	;volatile
  9895                           
  9896                           ;lcd.c: 63: _delay((unsigned long)((25)*(8000000/4000000.0)));
  9897  002952  0E10               	movlw	16
  9898  002954                     u8917:
  9899  002954  2EE8               	decfsz	wreg,f,c
  9900  002956  D7FE               	bra	u8917
  9901  002958  D000               	nop2	
  9902  00295A  0012               	return		;funcret
  9903  00295C                     __end_of_lcdNibble:
  9904                           	opt stack 0
  9905                           tosu	equ	0xFFF
  9906                           tosh	equ	0xFFE
  9907                           tosl	equ	0xFFD
  9908                           pclath	equ	0xFFA
  9909                           tblptru	equ	0xFF8
  9910                           tblptrh	equ	0xFF7
  9911                           tblptrl	equ	0xFF6
  9912                           tablat	equ	0xFF5
  9913                           prodh	equ	0xFF4
  9914                           prodl	equ	0xFF3
  9915                           intcon	equ	0xFF2
  9916                           intcon2	equ	0xFF1
  9917                           postinc0	equ	0xFEE
  9918                           wreg	equ	0xFE8
  9919                           indf1	equ	0xFE7
  9920                           postinc1	equ	0xFE6
  9921                           postdec1	equ	0xFE5
  9922                           fsr1h	equ	0xFE2
  9923                           fsr1l	equ	0xFE1
  9924                           indf2	equ	0xFDF
  9925                           postinc2	equ	0xFDE
  9926                           postdec2	equ	0xFDD
  9927                           fsr2h	equ	0xFDA
  9928                           fsr2l	equ	0xFD9
  9929                           status	equ	0xFD8
  9930                           
  9931 ;; *************** function _getPressedKeypadKey *****************
  9932 ;; Defined at:
  9933 ;;		line 138 in file "main.c"
  9934 ;; Parameters:    Size  Location     Type
  9935 ;;		None
  9936 ;; Auto vars:     Size  Location     Type
  9937 ;;  keypress        1    0[BANK0 ] unsigned char 
  9938 ;; Return value:  Size  Location     Type
  9939 ;;                  1    wreg      unsigned char 
  9940 ;; Registers used:
  9941 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  9942 ;; Tracked objects:
  9943 ;;		On entry : 0/0
  9944 ;;		On exit  : 0/0
  9945 ;;		Unchanged: 0/0
  9946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9948 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9950 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9951 ;;Total ram usage:        1 bytes
  9952 ;; Hardware stack levels used:    1
  9953 ;; Hardware stack levels required when called:    6
  9954 ;; This function calls:
  9955 ;;		Nothing
  9956 ;; This function is called by:
  9957 ;;		_main
  9958 ;;		_operation
  9959 ;;		_EEPROM
  9960 ;;		_past_run_access
  9961 ;; This function uses a non-reentrant model
  9962 ;;
  9963                           
  9964                           	psect	text46
  9965  002ED0                     __ptext46:
  9966                           	opt stack 0
  9967  002ED0                     _getPressedKeypadKey:
  9968                           	opt stack 24
  9969  002ED0                     l215:
  9970  002ED0  A281               	btfss	3969,1,c	;volatile
  9971  002ED2  D7FE               	goto	l215
  9972                           
  9973                           ;main.c: 140: unsigned char keypress = (PORTB & 0xF0)>>4;
  9974  002ED4  3881               	swapf	3969,w,c	;volatile
  9975  002ED6  0B0F               	andlw	15
  9976  002ED8  0B0F               	andlw	15
  9977  002EDA  0100               	movlb	0	; () banked
  9978  002EDC  6F80               	movwf	getPressedKeypadKey@keypress& (0+255),b
  9979  002EDE                     l218:
  9980  002EDE  B281               	btfsc	3969,1,c	;volatile
  9981  002EE0  D7FE               	goto	l218
  9982                           
  9983                           ;main.c: 142: }
  9984                           ;main.c: 143: __nop();
  9985  002EE2  F000               	nop	
  9986                           
  9987                           ;main.c: 144: __nop();
  9988  002EE4  F000               	nop	
  9989                           
  9990                           ;main.c: 145: return keys[keypress];
  9991  002EE6  0100               	movlb	0	; () banked
  9992  002EE8  5180               	movf	getPressedKeypadKey@keypress& (0+255),w,b
  9993  002EEA  0D01               	mullw	1
  9994  002EEC  0E29               	movlw	low _keys
  9995  002EEE  24F3               	addwf	prodl,w,c
  9996  002EF0  6EF6               	movwf	tblptrl,c
  9997  002EF2  0EFE               	movlw	high _keys
  9998  002EF4  20F4               	addwfc	prodh,w,c
  9999  002EF6  6EF7               	movwf	tblptrh,c
 10000  002EF8                     	if	1	;There are 3 active tblptr bytes
 10001  002EF8  6AF8               	clrf	tblptru,c
 10002  002EFA  0E00               	movlw	low (__mediumconst shr (0+16))
 10003  002EFC  22F8               	addwfc	tblptru,f,c
 10004  002EFE                     	endif
 10005  002EFE  0008               	tblrd		*
 10006  002F00  50F5               	movf	tablat,w,c
 10007  002F02  0012               	return	
 10008  002F04                     __end_of_getPressedKeypadKey:
 10009                           	opt stack 0
 10010                           tosu	equ	0xFFF
 10011                           tosh	equ	0xFFE
 10012                           tosl	equ	0xFFD
 10013                           pclath	equ	0xFFA
 10014                           tblptru	equ	0xFF8
 10015                           tblptrh	equ	0xFF7
 10016                           tblptrl	equ	0xFF6
 10017                           tablat	equ	0xFF5
 10018                           prodh	equ	0xFF4
 10019                           prodl	equ	0xFF3
 10020                           intcon	equ	0xFF2
 10021                           intcon2	equ	0xFF1
 10022                           postinc0	equ	0xFEE
 10023                           wreg	equ	0xFE8
 10024                           indf1	equ	0xFE7
 10025                           postinc1	equ	0xFE6
 10026                           postdec1	equ	0xFE5
 10027                           fsr1h	equ	0xFE2
 10028                           fsr1l	equ	0xFE1
 10029                           indf2	equ	0xFDF
 10030                           postinc2	equ	0xFDE
 10031                           postdec2	equ	0xFDD
 10032                           fsr2h	equ	0xFDA
 10033                           fsr2l	equ	0xFD9
 10034                           status	equ	0xFD8
 10035                           
 10036 ;; *************** function _cycleProgramScreenRight *****************
 10037 ;; Defined at:
 10038 ;;		line 176 in file "main.c"
 10039 ;; Parameters:    Size  Location     Type
 10040 ;;  programScree    2    0[BANK0 ] PTR int 
 10041 ;;		 -> RAM(3967), EEPROM@screen_state(2), currentMainProgramScreen(2), 
 10042 ;;  min             2    2[BANK0 ] int 
 10043 ;;  max             2    4[BANK0 ] int 
 10044 ;; Auto vars:     Size  Location     Type
 10045 ;;		None
 10046 ;; Return value:  Size  Location     Type
 10047 ;;                  1    wreg      void 
 10048 ;; Registers used:
 10049 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10050 ;; Tracked objects:
 10051 ;;		On entry : 0/0
 10052 ;;		On exit  : 0/0
 10053 ;;		Unchanged: 0/0
 10054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10055 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10056 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10057 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10058 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10059 ;;Total ram usage:        8 bytes
 10060 ;; Hardware stack levels used:    1
 10061 ;; Hardware stack levels required when called:    6
 10062 ;; This function calls:
 10063 ;;		Nothing
 10064 ;; This function is called by:
 10065 ;;		_main
 10066 ;;		_EEPROM
 10067 ;;		_past_run_access
 10068 ;; This function uses a non-reentrant model
 10069 ;;
 10070                           
 10071                           	psect	text47
 10072  002DB8                     __ptext47:
 10073                           	opt stack 0
 10074  002DB8                     _cycleProgramScreenRight:
 10075                           	opt stack 22
 10076                           
 10077                           ;main.c: 177: if (*programScreen == max){
 10078                           
 10079                           ; BSR set to: 0
 10080                           ;incstack = 0
 10081  002DB8  C080  FFD9         	movff	cycleProgramScreenRight@programScreen,fsr2l
 10082  002DBC  C081  FFDA         	movff	cycleProgramScreenRight@programScreen+1,fsr2h
 10083  002DC0  0100               	movlb	0	; () banked
 10084  002DC2  5184               	movf	cycleProgramScreenRight@max& (0+255),w,b
 10085  002DC4  18DE               	xorwf	postinc2,w,c
 10086  002DC6  E10E               	bnz	l3365
 10087  002DC8  0100               	movlb	0	; () banked
 10088  002DCA  5185               	movf	(cycleProgramScreenRight@max+1)& (0+255),w,b
 10089  002DCC  18DE               	xorwf	postinc2,w,c
 10090  002DCE  A4D8               	btfss	status,2,c
 10091  002DD0  D009               	goto	l3365
 10092                           
 10093                           ; BSR set to: 0
 10094                           ;main.c: 178: *programScreen = min;
 10095  002DD2  C080  FFD9         	movff	cycleProgramScreenRight@programScreen,fsr2l
 10096  002DD6  C081  FFDA         	movff	cycleProgramScreenRight@programScreen+1,fsr2h
 10097  002DDA  C082  FFDE         	movff	cycleProgramScreenRight@min,postinc2
 10098  002DDE  C083  FFDD         	movff	cycleProgramScreenRight@min+1,postdec2
 10099                           
 10100                           ;main.c: 179: }else{
 10101  002DE2  0012               	return	
 10102  002DE4                     l3365:
 10103                           
 10104                           ; BSR set to: 0
 10105                           ;main.c: 180: *programScreen += 1;
 10106  002DE4  C080  FFD9         	movff	cycleProgramScreenRight@programScreen,fsr2l
 10107  002DE8  C081  FFDA         	movff	cycleProgramScreenRight@programScreen+1,fsr2h
 10108  002DEC  2ADE               	incf	postinc2,f,c
 10109  002DEE  0E00               	movlw	0
 10110  002DF0  22DD               	addwfc	postdec2,f,c
 10111  002DF2  0012               	return	
 10112  002DF4                     __end_of_cycleProgramScreenRight:
 10113                           	opt stack 0
 10114                           tosu	equ	0xFFF
 10115                           tosh	equ	0xFFE
 10116                           tosl	equ	0xFFD
 10117                           pclath	equ	0xFFA
 10118                           tblptru	equ	0xFF8
 10119                           tblptrh	equ	0xFF7
 10120                           tblptrl	equ	0xFF6
 10121                           tablat	equ	0xFF5
 10122                           prodh	equ	0xFF4
 10123                           prodl	equ	0xFF3
 10124                           intcon	equ	0xFF2
 10125                           intcon2	equ	0xFF1
 10126                           postinc0	equ	0xFEE
 10127                           wreg	equ	0xFE8
 10128                           indf1	equ	0xFE7
 10129                           postinc1	equ	0xFE6
 10130                           postdec1	equ	0xFE5
 10131                           fsr1h	equ	0xFE2
 10132                           fsr1l	equ	0xFE1
 10133                           indf2	equ	0xFDF
 10134                           postinc2	equ	0xFDE
 10135                           postdec2	equ	0xFDD
 10136                           fsr2h	equ	0xFDA
 10137                           fsr2l	equ	0xFD9
 10138                           status	equ	0xFD8
 10139                           
 10140 ;; *************** function _cycleProgramScreenLeft *****************
 10141 ;; Defined at:
 10142 ;;		line 168 in file "main.c"
 10143 ;; Parameters:    Size  Location     Type
 10144 ;;  programScree    2    0[BANK0 ] PTR int 
 10145 ;;		 -> RAM(3967), EEPROM@screen_state(2), currentMainProgramScreen(2), 
 10146 ;;  min             2    2[BANK0 ] int 
 10147 ;;  max             2    4[BANK0 ] int 
 10148 ;; Auto vars:     Size  Location     Type
 10149 ;;		None
 10150 ;; Return value:  Size  Location     Type
 10151 ;;                  1    wreg      void 
 10152 ;; Registers used:
 10153 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10154 ;; Tracked objects:
 10155 ;;		On entry : 0/0
 10156 ;;		On exit  : 0/0
 10157 ;;		Unchanged: 0/0
 10158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10159 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10160 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10161 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10162 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10163 ;;Total ram usage:        8 bytes
 10164 ;; Hardware stack levels used:    1
 10165 ;; Hardware stack levels required when called:    6
 10166 ;; This function calls:
 10167 ;;		Nothing
 10168 ;; This function is called by:
 10169 ;;		_main
 10170 ;;		_EEPROM
 10171 ;;		_past_run_access
 10172 ;; This function uses a non-reentrant model
 10173 ;;
 10174                           
 10175                           	psect	text48
 10176  002DF4                     __ptext48:
 10177                           	opt stack 0
 10178  002DF4                     _cycleProgramScreenLeft:
 10179                           	opt stack 22
 10180                           
 10181                           ;main.c: 169: if (*programScreen == min){
 10182                           
 10183                           ; BSR set to: 0
 10184                           ;incstack = 0
 10185  002DF4  C080  FFD9         	movff	cycleProgramScreenLeft@programScreen,fsr2l
 10186  002DF8  C081  FFDA         	movff	cycleProgramScreenLeft@programScreen+1,fsr2h
 10187  002DFC  0100               	movlb	0	; () banked
 10188  002DFE  5182               	movf	cycleProgramScreenLeft@min& (0+255),w,b
 10189  002E00  18DE               	xorwf	postinc2,w,c
 10190  002E02  E10E               	bnz	l3359
 10191  002E04  0100               	movlb	0	; () banked
 10192  002E06  5183               	movf	(cycleProgramScreenLeft@min+1)& (0+255),w,b
 10193  002E08  18DE               	xorwf	postinc2,w,c
 10194  002E0A  A4D8               	btfss	status,2,c
 10195  002E0C  D009               	goto	l3359
 10196                           
 10197                           ; BSR set to: 0
 10198                           ;main.c: 170: *programScreen = max;
 10199  002E0E  C080  FFD9         	movff	cycleProgramScreenLeft@programScreen,fsr2l
 10200  002E12  C081  FFDA         	movff	cycleProgramScreenLeft@programScreen+1,fsr2h
 10201  002E16  C084  FFDE         	movff	cycleProgramScreenLeft@max,postinc2
 10202  002E1A  C085  FFDD         	movff	cycleProgramScreenLeft@max+1,postdec2
 10203                           
 10204                           ;main.c: 171: }else{
 10205  002E1E  0012               	return	
 10206  002E20                     l3359:
 10207                           
 10208                           ; BSR set to: 0
 10209                           ;main.c: 172: *programScreen -= 1;
 10210  002E20  C080  FFD9         	movff	cycleProgramScreenLeft@programScreen,fsr2l
 10211  002E24  C081  FFDA         	movff	cycleProgramScreenLeft@programScreen+1,fsr2h
 10212  002E28  06DE               	decf	postinc2,f,c
 10213  002E2A  0E00               	movlw	0
 10214  002E2C  5ADD               	subwfb	postdec2,f,c
 10215  002E2E  0012               	return	
 10216  002E30                     __end_of_cycleProgramScreenLeft:
 10217                           	opt stack 0
 10218                           tosu	equ	0xFFF
 10219                           tosh	equ	0xFFE
 10220                           tosl	equ	0xFFD
 10221                           pclath	equ	0xFFA
 10222                           tblptru	equ	0xFF8
 10223                           tblptrh	equ	0xFF7
 10224                           tblptrl	equ	0xFF6
 10225                           tablat	equ	0xFF5
 10226                           prodh	equ	0xFF4
 10227                           prodl	equ	0xFF3
 10228                           intcon	equ	0xFF2
 10229                           intcon2	equ	0xFF1
 10230                           postinc0	equ	0xFEE
 10231                           wreg	equ	0xFE8
 10232                           indf1	equ	0xFE7
 10233                           postinc1	equ	0xFE6
 10234                           postdec1	equ	0xFE5
 10235                           fsr1h	equ	0xFE2
 10236                           fsr1l	equ	0xFE1
 10237                           indf2	equ	0xFDF
 10238                           postinc2	equ	0xFDE
 10239                           postdec2	equ	0xFDD
 10240                           fsr2h	equ	0xFDA
 10241                           fsr2l	equ	0xFD9
 10242                           status	equ	0xFD8
 10243                           
 10244 ;; *************** function _getEEPROM *****************
 10245 ;; Defined at:
 10246 ;;		line 504 in file "main.c"
 10247 ;; Parameters:    Size  Location     Type
 10248 ;;  num             2    8[BANK0 ] int 
 10249 ;; Auto vars:     Size  Location     Type
 10250 ;;  i               2   14[BANK0 ] int 
 10251 ;; Return value:  Size  Location     Type
 10252 ;;                  1    wreg      void 
 10253 ;; Registers used:
 10254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10255 ;; Tracked objects:
 10256 ;;		On entry : 0/0
 10257 ;;		On exit  : 0/0
 10258 ;;		Unchanged: 0/0
 10259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10260 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10261 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10262 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10263 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10264 ;;Total ram usage:        8 bytes
 10265 ;; Hardware stack levels used:    1
 10266 ;; Hardware stack levels required when called:    7
 10267 ;; This function calls:
 10268 ;;		_Eeprom_ReadByte
 10269 ;;		___wmul
 10270 ;; This function is called by:
 10271 ;;		_EEPROM
 10272 ;; This function uses a non-reentrant model
 10273 ;;
 10274                           
 10275                           	psect	text49
 10276  001BBE                     __ptext49:
 10277                           	opt stack 0
 10278  001BBE                     _getEEPROM:
 10279                           	opt stack 21
 10280                           
 10281                           ;main.c: 505: int i;
 10282                           ;main.c: 506: for (i = 0; i<6; i++){
 10283                           
 10284                           ; BSR set to: 0
 10285                           ;incstack = 0
 10286  001BBE  0E00               	movlw	0
 10287  001BC0  0100               	movlb	0	; () banked
 10288  001BC2  6F8F               	movwf	(getEEPROM@i+1)& (0+255),b
 10289  001BC4  0E00               	movlw	0
 10290  001BC6  6F8E               	movwf	getEEPROM@i& (0+255),b
 10291  001BC8                     l3795:
 10292                           
 10293                           ; BSR set to: 0
 10294  001BC8  0100               	movlb	0	; () banked
 10295  001BCA  BF8F               	btfsc	(getEEPROM@i+1)& (0+255),7,b
 10296  001BCC  D008               	goto	l3799
 10297  001BCE  0100               	movlb	0	; () banked
 10298  001BD0  518F               	movf	(getEEPROM@i+1)& (0+255),w,b
 10299  001BD2  E143               	bnz	l3805
 10300  001BD4  0E06               	movlw	6
 10301  001BD6  0100               	movlb	0	; () banked
 10302  001BD8  5D8E               	subwf	getEEPROM@i& (0+255),w,b
 10303  001BDA  B0D8               	btfsc	status,0,c
 10304  001BDC  D03E               	goto	l3805
 10305  001BDE                     l3799:
 10306                           
 10307                           ; BSR set to: 0
 10308                           ;main.c: 507: runInfo[i] = Eeprom_ReadByte(12*i+num*200);
 10309  001BDE  C08E  F080         	movff	getEEPROM@i,___wmul@multiplier
 10310  001BE2  C08F  F081         	movff	getEEPROM@i+1,___wmul@multiplier+1
 10311  001BE6  0E00               	movlw	0
 10312  001BE8  0100               	movlb	0	; () banked
 10313  001BEA  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10314  001BEC  0E0C               	movlw	12
 10315  001BEE  6F82               	movwf	___wmul@multiplicand& (0+255),b
 10316  001BF0  EC18  F017         	call	___wmul	;wreg free
 10317  001BF4  C080  F08A         	movff	?___wmul,??_getEEPROM
 10318  001BF8  C081  F08B         	movff	?___wmul+1,??_getEEPROM+1
 10319  001BFC  C088  F080         	movff	getEEPROM@num,___wmul@multiplier
 10320  001C00  C089  F081         	movff	getEEPROM@num+1,___wmul@multiplier+1
 10321  001C04  0E00               	movlw	0
 10322  001C06  0100               	movlb	0	; () banked
 10323  001C08  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10324  001C0A  0EC8               	movlw	200
 10325  001C0C  6F82               	movwf	___wmul@multiplicand& (0+255),b
 10326  001C0E  EC18  F017         	call	___wmul	;wreg free
 10327  001C12  0100               	movlb	0	; () banked
 10328  001C14  5180               	movf	?___wmul& (0+255),w,b
 10329  001C16  0100               	movlb	0	; () banked
 10330  001C18  258A               	addwf	??_getEEPROM& (0+255),w,b
 10331  001C1A  0100               	movlb	0	; () banked
 10332  001C1C  6F86               	movwf	Eeprom_ReadByte@address& (0+255),b
 10333  001C1E  0100               	movlb	0	; () banked
 10334  001C20  5181               	movf	(?___wmul+1)& (0+255),w,b
 10335  001C22  0100               	movlb	0	; () banked
 10336  001C24  218B               	addwfc	(??_getEEPROM+1)& (0+255),w,b
 10337  001C26  0100               	movlb	0	; () banked
 10338  001C28  6F87               	movwf	(Eeprom_ReadByte@address+1)& (0+255),b
 10339  001C2A  EC08  F018         	call	_Eeprom_ReadByte	;wreg free
 10340  001C2E  0100               	movlb	0	; () banked
 10341  001C30  6F8C               	movwf	(??_getEEPROM+2)& (0+255),b
 10342  001C32  6B8D               	clrf	(??_getEEPROM+3)& (0+255),b
 10343  001C34  90D8               	bcf	status,0,c
 10344  001C36  0100               	movlb	0	; () banked
 10345  001C38  358E               	rlcf	getEEPROM@i& (0+255),w,b
 10346  001C3A  6ED9               	movwf	fsr2l,c
 10347  001C3C  0100               	movlb	0	; () banked
 10348  001C3E  358F               	rlcf	(getEEPROM@i+1)& (0+255),w,b
 10349  001C40  6EDA               	movwf	fsr2h,c
 10350  001C42  0EE9               	movlw	low _runInfo
 10351  001C44  26D9               	addwf	fsr2l,f,c
 10352  001C46  0E00               	movlw	high _runInfo
 10353  001C48  22DA               	addwfc	fsr2h,f,c
 10354  001C4A  C08C  FFDE         	movff	??_getEEPROM+2,postinc2
 10355  001C4E  C08D  FFDD         	movff	??_getEEPROM+3,postdec2
 10356                           
 10357                           ; BSR set to: 0
 10358  001C52  0100               	movlb	0	; () banked
 10359  001C54  4B8E               	infsnz	getEEPROM@i& (0+255),f,b
 10360  001C56  2B8F               	incf	(getEEPROM@i+1)& (0+255),f,b
 10361  001C58  D7B7               	goto	l3795
 10362  001C5A                     l3805:
 10363                           
 10364                           ; BSR set to: 0
 10365                           ;main.c: 508: }
 10366                           ;main.c: 509: for (i = 0; i<7; i++){
 10367  001C5A  0E00               	movlw	0
 10368  001C5C  0100               	movlb	0	; () banked
 10369  001C5E  6F8F               	movwf	(getEEPROM@i+1)& (0+255),b
 10370  001C60  0E00               	movlw	0
 10371  001C62  6F8E               	movwf	getEEPROM@i& (0+255),b
 10372  001C64                     l3807:
 10373                           
 10374                           ; BSR set to: 0
 10375  001C64  0100               	movlb	0	; () banked
 10376  001C66  BF8F               	btfsc	(getEEPROM@i+1)& (0+255),7,b
 10377  001C68  D008               	goto	l3811
 10378  001C6A  0100               	movlb	0	; () banked
 10379  001C6C  518F               	movf	(getEEPROM@i+1)& (0+255),w,b
 10380  001C6E  E140               	bnz	l375
 10381  001C70  0E07               	movlw	7
 10382  001C72  0100               	movlb	0	; () banked
 10383  001C74  5D8E               	subwf	getEEPROM@i& (0+255),w,b
 10384  001C76  B0D8               	btfsc	status,0,c
 10385  001C78  0012               	return	
 10386  001C7A                     l3811:
 10387                           
 10388                           ; BSR set to: 0
 10389                           ;main.c: 510: lastRunTime[i] = Eeprom_ReadByte(12*(6+i)+num*200);
 10390  001C7A  0ED9               	movlw	low _lastRunTime
 10391  001C7C  0100               	movlb	0	; () banked
 10392  001C7E  258E               	addwf	getEEPROM@i& (0+255),w,b
 10393  001C80  6ED9               	movwf	fsr2l,c
 10394  001C82  0E00               	movlw	high _lastRunTime
 10395  001C84  0100               	movlb	0	; () banked
 10396  001C86  218F               	addwfc	(getEEPROM@i+1)& (0+255),w,b
 10397  001C88  6EDA               	movwf	fsr2h,c
 10398  001C8A  0E06               	movlw	6
 10399  001C8C  0100               	movlb	0	; () banked
 10400  001C8E  258E               	addwf	getEEPROM@i& (0+255),w,b
 10401  001C90  0100               	movlb	0	; () banked
 10402  001C92  6F80               	movwf	___wmul@multiplier& (0+255),b
 10403  001C94  0E00               	movlw	0
 10404  001C96  0100               	movlb	0	; () banked
 10405  001C98  218F               	addwfc	(getEEPROM@i+1)& (0+255),w,b
 10406  001C9A  0100               	movlb	0	; () banked
 10407  001C9C  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
 10408  001C9E  0E00               	movlw	0
 10409  001CA0  0100               	movlb	0	; () banked
 10410  001CA2  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10411  001CA4  0E0C               	movlw	12
 10412  001CA6  6F82               	movwf	___wmul@multiplicand& (0+255),b
 10413  001CA8  EC18  F017         	call	___wmul	;wreg free
 10414  001CAC  C080  F08A         	movff	?___wmul,??_getEEPROM
 10415  001CB0  C081  F08B         	movff	?___wmul+1,??_getEEPROM+1
 10416  001CB4  C088  F080         	movff	getEEPROM@num,___wmul@multiplier
 10417  001CB8  C089  F081         	movff	getEEPROM@num+1,___wmul@multiplier+1
 10418  001CBC  0E00               	movlw	0
 10419  001CBE  0100               	movlb	0	; () banked
 10420  001CC0  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
 10421  001CC2  0EC8               	movlw	200
 10422  001CC4  6F82               	movwf	___wmul@multiplicand& (0+255),b
 10423  001CC6  EC18  F017         	call	___wmul	;wreg free
 10424  001CCA  0100               	movlb	0	; () banked
 10425  001CCC  5180               	movf	?___wmul& (0+255),w,b
 10426  001CCE  0100               	movlb	0	; () banked
 10427  001CD0  258A               	addwf	??_getEEPROM& (0+255),w,b
 10428  001CD2  0100               	movlb	0	; () banked
 10429  001CD4  6F86               	movwf	Eeprom_ReadByte@address& (0+255),b
 10430  001CD6  0100               	movlb	0	; () banked
 10431  001CD8  5181               	movf	(?___wmul+1)& (0+255),w,b
 10432  001CDA  0100               	movlb	0	; () banked
 10433  001CDC  218B               	addwfc	(??_getEEPROM+1)& (0+255),w,b
 10434  001CDE  0100               	movlb	0	; () banked
 10435  001CE0  6F87               	movwf	(Eeprom_ReadByte@address+1)& (0+255),b
 10436  001CE2  EC08  F018         	call	_Eeprom_ReadByte	;wreg free
 10437  001CE6  6EDF               	movwf	indf2,c
 10438  001CE8  0100               	movlb	0	; () banked
 10439  001CEA  4B8E               	infsnz	getEEPROM@i& (0+255),f,b
 10440  001CEC  2B8F               	incf	(getEEPROM@i+1)& (0+255),f,b
 10441  001CEE  D7BA               	goto	l3807
 10442  001CF0                     l375:
 10443                           
 10444                           ; BSR set to: 0
 10445  001CF0  0012               	return		;funcret
 10446  001CF2                     __end_of_getEEPROM:
 10447                           	opt stack 0
 10448                           tosu	equ	0xFFF
 10449                           tosh	equ	0xFFE
 10450                           tosl	equ	0xFFD
 10451                           pclath	equ	0xFFA
 10452                           tblptru	equ	0xFF8
 10453                           tblptrh	equ	0xFF7
 10454                           tblptrl	equ	0xFF6
 10455                           tablat	equ	0xFF5
 10456                           prodh	equ	0xFF4
 10457                           prodl	equ	0xFF3
 10458                           intcon	equ	0xFF2
 10459                           intcon2	equ	0xFF1
 10460                           postinc0	equ	0xFEE
 10461                           wreg	equ	0xFE8
 10462                           indf1	equ	0xFE7
 10463                           postinc1	equ	0xFE6
 10464                           postdec1	equ	0xFE5
 10465                           fsr1h	equ	0xFE2
 10466                           fsr1l	equ	0xFE1
 10467                           indf2	equ	0xFDF
 10468                           postinc2	equ	0xFDE
 10469                           postdec2	equ	0xFDD
 10470                           fsr2h	equ	0xFDA
 10471                           fsr2l	equ	0xFD9
 10472                           status	equ	0xFD8
 10473                           
 10474 ;; *************** function ___wmul *****************
 10475 ;; Defined at:
 10476 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 10477 ;; Parameters:    Size  Location     Type
 10478 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10479 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10480 ;; Auto vars:     Size  Location     Type
 10481 ;;  product         2    4[BANK0 ] unsigned int 
 10482 ;; Return value:  Size  Location     Type
 10483 ;;                  2    0[BANK0 ] unsigned int 
 10484 ;; Registers used:
 10485 ;;		wreg, status,2, status,0, prodl, prodh
 10486 ;; Tracked objects:
 10487 ;;		On entry : 0/0
 10488 ;;		On exit  : 0/0
 10489 ;;		Unchanged: 0/0
 10490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10491 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10492 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10493 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10494 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10495 ;;Total ram usage:        6 bytes
 10496 ;; Hardware stack levels used:    1
 10497 ;; Hardware stack levels required when called:    6
 10498 ;; This function calls:
 10499 ;;		Nothing
 10500 ;; This function is called by:
 10501 ;;		_getCurrentTimeInSeconds
 10502 ;;		_saveEEPROM
 10503 ;;		_getEEPROM
 10504 ;;		__doprnt
 10505 ;;		_atoi
 10506 ;; This function uses a non-reentrant model
 10507 ;;
 10508                           
 10509                           	psect	text50
 10510  002E30                     __ptext50:
 10511                           	opt stack 0
 10512  002E30                     ___wmul:
 10513                           	opt stack 19
 10514                           
 10515                           ; BSR set to: 0
 10516                           ;incstack = 0
 10517  002E30  0100               	movlb	0	; () banked
 10518  002E32  5180               	movf	___wmul@multiplier& (0+255),w,b
 10519  002E34  0100               	movlb	0	; () banked
 10520  002E36  0382               	mulwf	___wmul@multiplicand& (0+255),b
 10521  002E38  CFF3 F084          	movff	prodl,___wmul@product
 10522  002E3C  CFF4 F085          	movff	prodh,___wmul@product+1
 10523  002E40  0100               	movlb	0	; () banked
 10524  002E42  5180               	movf	___wmul@multiplier& (0+255),w,b
 10525  002E44  0100               	movlb	0	; () banked
 10526  002E46  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10527  002E48  50F3               	movf	prodl,w,c
 10528  002E4A  0100               	movlb	0	; () banked
 10529  002E4C  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 10530  002E4E  0100               	movlb	0	; () banked
 10531  002E50  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10532  002E52  0100               	movlb	0	; () banked
 10533  002E54  0382               	mulwf	___wmul@multiplicand& (0+255),b
 10534  002E56  50F3               	movf	prodl,w,c
 10535  002E58  0100               	movlb	0	; () banked
 10536  002E5A  2785               	addwf	(___wmul@product+1)& (0+255),f,b
 10537                           
 10538                           ; BSR set to: 0
 10539  002E5C  C084  F080         	movff	___wmul@product,?___wmul
 10540  002E60  C085  F081         	movff	___wmul@product+1,?___wmul+1
 10541  002E64  0012               	return	
 10542  002E66                     __end_of___wmul:
 10543                           	opt stack 0
 10544                           tosu	equ	0xFFF
 10545                           tosh	equ	0xFFE
 10546                           tosl	equ	0xFFD
 10547                           pclath	equ	0xFFA
 10548                           tblptru	equ	0xFF8
 10549                           tblptrh	equ	0xFF7
 10550                           tblptrl	equ	0xFF6
 10551                           tablat	equ	0xFF5
 10552                           prodh	equ	0xFF4
 10553                           prodl	equ	0xFF3
 10554                           intcon	equ	0xFF2
 10555                           intcon2	equ	0xFF1
 10556                           postinc0	equ	0xFEE
 10557                           wreg	equ	0xFE8
 10558                           indf1	equ	0xFE7
 10559                           postinc1	equ	0xFE6
 10560                           postdec1	equ	0xFE5
 10561                           fsr1h	equ	0xFE2
 10562                           fsr1l	equ	0xFE1
 10563                           indf2	equ	0xFDF
 10564                           postinc2	equ	0xFDE
 10565                           postdec2	equ	0xFDD
 10566                           fsr2h	equ	0xFDA
 10567                           fsr2l	equ	0xFD9
 10568                           status	equ	0xFD8
 10569                           
 10570 ;; *************** function _Eeprom_ReadByte *****************
 10571 ;; Defined at:
 10572 ;;		line 537 in file "main.c"
 10573 ;; Parameters:    Size  Location     Type
 10574 ;;  address         2    6[BANK0 ] unsigned int 
 10575 ;; Auto vars:     Size  Location     Type
 10576 ;;		None
 10577 ;; Return value:  Size  Location     Type
 10578 ;;                  1    wreg      unsigned char 
 10579 ;; Registers used:
 10580 ;;		wreg, status,2
 10581 ;; Tracked objects:
 10582 ;;		On entry : 0/0
 10583 ;;		On exit  : 0/0
 10584 ;;		Unchanged: 0/0
 10585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10586 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10587 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10589 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10590 ;;Total ram usage:        2 bytes
 10591 ;; Hardware stack levels used:    1
 10592 ;; Hardware stack levels required when called:    6
 10593 ;; This function calls:
 10594 ;;		Nothing
 10595 ;; This function is called by:
 10596 ;;		_saveEEPROM
 10597 ;;		_getEEPROM
 10598 ;; This function uses a non-reentrant model
 10599 ;;
 10600                           
 10601                           	psect	text51
 10602  003010                     __ptext51:
 10603                           	opt stack 0
 10604  003010                     _Eeprom_ReadByte:
 10605                           	opt stack 21
 10606                           
 10607                           ;main.c: 541: EEADRH = (uint8_t)(address >> 8);
 10608                           
 10609                           ; BSR set to: 0
 10610                           ;incstack = 0
 10611  003010  0100               	movlb	0	; () banked
 10612  003012  5187               	movf	(Eeprom_ReadByte@address+1)& (0+255),w,b
 10613  003014  6EAA               	movwf	4010,c	;volatile
 10614                           
 10615                           ; BSR set to: 0
 10616                           ;main.c: 542: EEADR = (uint8_t)address;
 10617  003016  C086  FFA9         	movff	Eeprom_ReadByte@address,4009	;volatile
 10618                           
 10619                           ; BSR set to: 0
 10620                           ;main.c: 544: EECON1bits.EEPGD = 0;
 10621  00301A  9EA6               	bcf	4006,7,c	;volatile
 10622                           
 10623                           ; BSR set to: 0
 10624                           ;main.c: 545: EECON1bits.CFGS = 0;
 10625  00301C  9CA6               	bcf	4006,6,c	;volatile
 10626                           
 10627                           ; BSR set to: 0
 10628                           ;main.c: 546: EECON1bits.RD = 1;
 10629  00301E  80A6               	bsf	4006,0,c	;volatile
 10630  003020                     l389:
 10631  003020  B0A6               	btfsc	4006,0,c	;volatile
 10632  003022  D7FE               	goto	l389
 10633                           
 10634                           ;main.c: 552: return EEDATA;
 10635  003024  50A8               	movf	4008,w,c	;volatile
 10636  003026  0012               	return	
 10637  003028                     __end_of_Eeprom_ReadByte:
 10638                           	opt stack 0
 10639                           tosu	equ	0xFFF
 10640                           tosh	equ	0xFFE
 10641                           tosl	equ	0xFFD
 10642                           pclath	equ	0xFFA
 10643                           tblptru	equ	0xFF8
 10644                           tblptrh	equ	0xFF7
 10645                           tblptrl	equ	0xFF6
 10646                           tablat	equ	0xFF5
 10647                           prodh	equ	0xFF4
 10648                           prodl	equ	0xFF3
 10649                           intcon	equ	0xFF2
 10650                           intcon2	equ	0xFF1
 10651                           postinc0	equ	0xFEE
 10652                           wreg	equ	0xFE8
 10653                           indf1	equ	0xFE7
 10654                           postinc1	equ	0xFE6
 10655                           postdec1	equ	0xFE5
 10656                           fsr1h	equ	0xFE2
 10657                           fsr1l	equ	0xFE1
 10658                           indf2	equ	0xFDF
 10659                           postinc2	equ	0xFDE
 10660                           postdec2	equ	0xFDD
 10661                           fsr2h	equ	0xFDA
 10662                           fsr2l	equ	0xFD9
 10663                           status	equ	0xFD8
 10664                           
 10665 ;; *************** function _handler *****************
 10666 ;; Defined at:
 10667 ;;		line 14 in file "interruptHandler.c"
 10668 ;; Parameters:    Size  Location     Type
 10669 ;;		None
 10670 ;; Auto vars:     Size  Location     Type
 10671 ;;  time            3   67[COMRAM] float 
 10672 ;;  set_time        2   70[COMRAM] unsigned int 
 10673 ;; Return value:  Size  Location     Type
 10674 ;;                  1    wreg      void 
 10675 ;; Registers used:
 10676 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10677 ;; Tracked objects:
 10678 ;;		On entry : 0/0
 10679 ;;		On exit  : 0/0
 10680 ;;		Unchanged: 0/0
 10681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10683 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10684 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10685 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10686 ;;Total ram usage:       19 bytes
 10687 ;; Hardware stack levels used:    1
 10688 ;; Hardware stack levels required when called:    5
 10689 ;; This function calls:
 10690 ;;		i2___ftdiv
 10691 ;;		i2___ftmul
 10692 ;;		i2___fttol
 10693 ;;		i2_printTime
 10694 ;;		i2_updateCurrentTime
 10695 ;; This function is called by:
 10696 ;;		Interrupt level 2
 10697 ;; This function uses a non-reentrant model
 10698 ;;
 10699                           
 10700                           	psect	intcode
 10701  000008                     __pintcode:
 10702                           	opt stack 0
 10703  000008                     _handler:
 10704                           	opt stack 16
 10705                           
 10706                           ;incstack = 0
 10707  000008  824F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10708  00000A  EDA8  F00C         	call	int_func,f	;refresh shadow registers
 10709                           tosu	equ	0xFFF
 10710                           tosh	equ	0xFFE
 10711                           tosl	equ	0xFFD
 10712                           pclath	equ	0xFFA
 10713                           tblptru	equ	0xFF8
 10714                           tblptrh	equ	0xFF7
 10715                           tblptrl	equ	0xFF6
 10716                           tablat	equ	0xFF5
 10717                           prodh	equ	0xFF4
 10718                           prodl	equ	0xFF3
 10719                           intcon	equ	0xFF2
 10720                           intcon2	equ	0xFF1
 10721                           postinc0	equ	0xFEE
 10722                           wreg	equ	0xFE8
 10723                           indf1	equ	0xFE7
 10724                           postinc1	equ	0xFE6
 10725                           postdec1	equ	0xFE5
 10726                           fsr1h	equ	0xFE2
 10727                           fsr1l	equ	0xFE1
 10728                           indf2	equ	0xFDF
 10729                           postinc2	equ	0xFDE
 10730                           postdec2	equ	0xFDD
 10731                           fsr2h	equ	0xFDA
 10732                           fsr2l	equ	0xFD9
 10733                           status	equ	0xFD8
 10734                           
 10735                           	psect	intcode_body
 10736  001950                     __pintcode_body:
 10737                           	opt stack 16
 10738  001950                     int_func:
 10739                           	opt stack 16
 10740  001950  0006               	pop		; remove dummy address from shadow register refresh
 10741  001952  CFFA F036          	movff	pclath,??_handler
 10742  001956  CFFB F037          	movff	pclatu,??_handler+1
 10743  00195A  CFE9 F038          	movff	fsr0l,??_handler+2
 10744  00195E  CFEA F039          	movff	fsr0h,??_handler+3
 10745  001962  CFE1 F03A          	movff	fsr1l,??_handler+4
 10746  001966  CFE2 F03B          	movff	fsr1h,??_handler+5
 10747  00196A  CFD9 F03C          	movff	fsr2l,??_handler+6
 10748  00196E  CFDA F03D          	movff	fsr2h,??_handler+7
 10749  001972  CFF3 F03E          	movff	prodl,??_handler+8
 10750  001976  CFF4 F03F          	movff	prodh,??_handler+9
 10751  00197A  CFF6 F040          	movff	tblptrl,??_handler+10
 10752  00197E  CFF7 F041          	movff	tblptrh,??_handler+11
 10753  001982  CFF8 F042          	movff	tblptru,??_handler+12
 10754  001986  CFF5 F043          	movff	tablat,??_handler+13
 10755                           
 10756                           ;interruptHandler.c: 15: (INTCONbits.GIE = 0);
 10757  00198A  9EF2               	bcf	intcon,7,c	;volatile
 10758                           
 10759                           ;interruptHandler.c: 17: if(TMR0IE && TMR0IF){
 10760  00198C  BAF2               	btfsc	intcon,5,c	;volatile
 10761  00198E  A4F2               	btfss	intcon,2,c	;volatile
 10762  001990  D011               	goto	i2l8165
 10763                           
 10764                           ;interruptHandler.c: 18: if (timerCounter == 38){
 10765  001992  0E26               	movlw	38
 10766  001994  184B               	xorwf	_timerCounter,w,c
 10767  001996  104C               	iorwf	_timerCounter+1,w,c
 10768  001998  A4D8               	btfss	status,2,c
 10769  00199A  D009               	goto	i2l8161
 10770                           
 10771                           ;interruptHandler.c: 19: updateCurrentTime();
 10772  00199C  ECAE  F014         	call	i2_updateCurrentTime	;wreg free
 10773                           
 10774                           ;interruptHandler.c: 20: printTime();
 10775  0019A0  ECBD  F016         	call	i2_printTime	;wreg free
 10776                           
 10777                           ;interruptHandler.c: 21: timerCounter = 0;
 10778  0019A4  0E00               	movlw	0
 10779  0019A6  6E4C               	movwf	_timerCounter+1,c
 10780  0019A8  0E00               	movlw	0
 10781  0019AA  6E4B               	movwf	_timerCounter,c
 10782                           
 10783                           ;interruptHandler.c: 22: }else{
 10784  0019AC  D002               	goto	i2l8163
 10785  0019AE                     i2l8161:
 10786                           
 10787                           ;interruptHandler.c: 23: timerCounter++;
 10788  0019AE  4A4B               	infsnz	_timerCounter,f,c
 10789  0019B0  2A4C               	incf	_timerCounter+1,f,c
 10790  0019B2                     i2l8163:
 10791                           
 10792                           ;interruptHandler.c: 24: }
 10793                           ;interruptHandler.c: 25: TMR0IF = 0;
 10794  0019B2  94F2               	bcf	intcon,2,c	;volatile
 10795  0019B4                     i2l8165:
 10796                           
 10797                           ;interruptHandler.c: 26: }
 10798                           ;interruptHandler.c: 28: if(TMR1IE && TMR1IF){
 10799  0019B4  B09D               	btfsc	3997,0,c	;volatile
 10800  0019B6  A09E               	btfss	3998,0,c	;volatile
 10801  0019B8  D048               	goto	i2l8189
 10802                           
 10803                           ;interruptHandler.c: 29: if (motorCounter == 7){
 10804  0019BA  0E07               	movlw	7
 10805  0019BC  1849               	xorwf	_motorCounter,w,c
 10806  0019BE  104A               	iorwf	_motorCounter+1,w,c
 10807  0019C0  A4D8               	btfss	status,2,c
 10808  0019C2  D006               	goto	i2l516
 10809                           
 10810                           ;interruptHandler.c: 30: PORTCbits.RC1 = 1;
 10811  0019C4  8282               	bsf	3970,1,c	;volatile
 10812                           
 10813                           ;interruptHandler.c: 31: motorCounter = 0;
 10814  0019C6  0E00               	movlw	0
 10815  0019C8  6E4A               	movwf	_motorCounter+1,c
 10816  0019CA  0E00               	movlw	0
 10817  0019CC  6E49               	movwf	_motorCounter,c
 10818                           
 10819                           ;interruptHandler.c: 32: }else{
 10820  0019CE  D003               	goto	i2l8177
 10821  0019D0                     i2l516:
 10822                           
 10823                           ;interruptHandler.c: 33: PORTCbits.RC1 = 0;
 10824  0019D0  9282               	bcf	3970,1,c	;volatile
 10825                           
 10826                           ;interruptHandler.c: 34: motorCounter += 1;
 10827  0019D2  4A49               	infsnz	_motorCounter,f,c
 10828  0019D4  2A4A               	incf	_motorCounter+1,f,c
 10829  0019D6                     i2l8177:
 10830                           
 10831                           ;interruptHandler.c: 35: }
 10832                           ;interruptHandler.c: 36: TMR1IF = 0;
 10833  0019D6  909E               	bcf	3998,0,c	;volatile
 10834                           
 10835                           ;interruptHandler.c: 38: float time = 10;
 10836  0019D8  0E00               	movlw	0
 10837  0019DA  6E44               	movwf	handler@time,c
 10838  0019DC  0E20               	movlw	32
 10839  0019DE  6E45               	movwf	handler@time+1,c
 10840  0019E0  0E41               	movlw	65
 10841  0019E2  6E46               	movwf	handler@time+2,c
 10842                           
 10843                           ;interruptHandler.c: 39: unsigned int set_time = 65535-(int)((float)time*2000/8);
 10844  0019E4  0E00               	movlw	0
 10845  0019E6  6E1B               	movwf	i2___ftdiv@f2,c
 10846  0019E8  0E00               	movlw	0
 10847  0019EA  6E1C               	movwf	i2___ftdiv@f2+1,c
 10848  0019EC  0E41               	movlw	65
 10849  0019EE  6E1D               	movwf	i2___ftdiv@f2+2,c
 10850  0019F0  0E00               	movlw	0
 10851  0019F2  6E0C               	movwf	i2___ftmul@f2,c
 10852  0019F4  0EFA               	movlw	250
 10853  0019F6  6E0D               	movwf	i2___ftmul@f2+1,c
 10854  0019F8  0E44               	movlw	68
 10855  0019FA  6E0E               	movwf	i2___ftmul@f2+2,c
 10856  0019FC  C044  F009         	movff	handler@time,i2___ftmul@f1
 10857  001A00  C045  F00A         	movff	handler@time+1,i2___ftmul@f1+1
 10858  001A04  C046  F00B         	movff	handler@time+2,i2___ftmul@f1+2
 10859  001A08  EC82  F010         	call	i2___ftmul	;wreg free
 10860  001A0C  C009  F018         	movff	?i2___ftmul,i2___ftdiv@f1
 10861  001A10  C00A  F019         	movff	?i2___ftmul+1,i2___ftdiv@f1+1
 10862  001A14  C00B  F01A         	movff	?i2___ftmul+2,i2___ftdiv@f1+2
 10863  001A18  EC75  F011         	call	i2___ftdiv	;wreg free
 10864  001A1C  C018  F027         	movff	?i2___ftdiv,i2___fttol@f1
 10865  001A20  C019  F028         	movff	?i2___ftdiv+1,i2___fttol@f1+1
 10866  001A24  C01A  F029         	movff	?i2___ftdiv+2,i2___fttol@f1+2
 10867  001A28  EC08  F010         	call	i2___fttol	;wreg free
 10868  001A2C  1E27               	comf	?i2___fttol,f,c
 10869  001A2E  1E28               	comf	?i2___fttol+1,f,c
 10870  001A30  4A27               	infsnz	?i2___fttol,f,c
 10871  001A32  2A28               	incf	?i2___fttol+1,f,c
 10872  001A34  0EFF               	movlw	255
 10873  001A36  2427               	addwf	?i2___fttol,w,c
 10874  001A38  6E47               	movwf	handler@set_time,c
 10875  001A3A  0EFF               	movlw	255
 10876  001A3C  2028               	addwfc	?i2___fttol+1,w,c
 10877  001A3E  6E48               	movwf	handler@set_time+1,c
 10878                           
 10879                           ;interruptHandler.c: 40: TMR1H = set_time >> 8;
 10880  001A40  5048               	movf	handler@set_time+1,w,c
 10881  001A42  6ECF               	movwf	4047,c	;volatile
 10882                           
 10883                           ;interruptHandler.c: 41: TMR1L = set_time & 0b11111111;
 10884  001A44  C047  FFCE         	movff	handler@set_time,4046	;volatile
 10885                           
 10886                           ;interruptHandler.c: 42: TMR1ON = 1;
 10887  001A48  80CD               	bsf	4045,0,c	;volatile
 10888  001A4A                     i2l8189:
 10889                           
 10890                           ;interruptHandler.c: 43: }
 10891                           ;interruptHandler.c: 45: (INTCONbits.GIE = 1);
 10892  001A4A  8EF2               	bsf	intcon,7,c	;volatile
 10893  001A4C  C043  FFF5         	movff	??_handler+13,tablat
 10894  001A50  C042  FFF8         	movff	??_handler+12,tblptru
 10895  001A54  C041  FFF7         	movff	??_handler+11,tblptrh
 10896  001A58  C040  FFF6         	movff	??_handler+10,tblptrl
 10897  001A5C  C03F  FFF4         	movff	??_handler+9,prodh
 10898  001A60  C03E  FFF3         	movff	??_handler+8,prodl
 10899  001A64  C03D  FFDA         	movff	??_handler+7,fsr2h
 10900  001A68  C03C  FFD9         	movff	??_handler+6,fsr2l
 10901  001A6C  C03B  FFE2         	movff	??_handler+5,fsr1h
 10902  001A70  C03A  FFE1         	movff	??_handler+4,fsr1l
 10903  001A74  C039  FFEA         	movff	??_handler+3,fsr0h
 10904  001A78  C038  FFE9         	movff	??_handler+2,fsr0l
 10905  001A7C  C037  FFFB         	movff	??_handler+1,pclatu
 10906  001A80  C036  FFFA         	movff	??_handler,pclath
 10907  001A84  924F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 10908  001A86  0011               	retfie		f
 10909  001A88                     __end_of_handler:
 10910                           	opt stack 0
 10911                           tosu	equ	0xFFF
 10912                           tosh	equ	0xFFE
 10913                           tosl	equ	0xFFD
 10914                           pclatu	equ	0xFFB
 10915                           pclath	equ	0xFFA
 10916                           tblptru	equ	0xFF8
 10917                           tblptrh	equ	0xFF7
 10918                           tblptrl	equ	0xFF6
 10919                           tablat	equ	0xFF5
 10920                           prodh	equ	0xFF4
 10921                           prodl	equ	0xFF3
 10922                           intcon	equ	0xFF2
 10923                           intcon2	equ	0xFF1
 10924                           postinc0	equ	0xFEE
 10925                           fsr0h	equ	0xFEA
 10926                           fsr0l	equ	0xFE9
 10927                           wreg	equ	0xFE8
 10928                           indf1	equ	0xFE7
 10929                           postinc1	equ	0xFE6
 10930                           postdec1	equ	0xFE5
 10931                           fsr1h	equ	0xFE2
 10932                           fsr1l	equ	0xFE1
 10933                           indf2	equ	0xFDF
 10934                           postinc2	equ	0xFDE
 10935                           postdec2	equ	0xFDD
 10936                           fsr2h	equ	0xFDA
 10937                           fsr2l	equ	0xFD9
 10938                           status	equ	0xFD8
 10939                           
 10940 ;; *************** function i2_updateCurrentTime *****************
 10941 ;; Defined at:
 10942 ;;		line 193 in file "main.c"
 10943 ;; Parameters:    Size  Location     Type
 10944 ;;		None
 10945 ;; Auto vars:     Size  Location     Type
 10946 ;;  updateCurren    1    3[COMRAM] unsigned char 
 10947 ;; Return value:  Size  Location     Type
 10948 ;;                  1    wreg      void 
 10949 ;; Registers used:
 10950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10951 ;; Tracked objects:
 10952 ;;		On entry : 0/0
 10953 ;;		On exit  : 0/0
 10954 ;;		Unchanged: 0/0
 10955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10957 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10959 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10960 ;;Total ram usage:        1 bytes
 10961 ;; Hardware stack levels used:    1
 10962 ;; Hardware stack levels required when called:    2
 10963 ;; This function calls:
 10964 ;;		i2_I2C_Master_Read
 10965 ;;		i2_I2C_Master_Start
 10966 ;;		i2_I2C_Master_Stop
 10967 ;;		i2_I2C_Master_Write
 10968 ;; This function is called by:
 10969 ;;		_handler
 10970 ;; This function uses a non-reentrant model
 10971 ;;
 10972                           
 10973                           	psect	text53
 10974  00295C                     __ptext53:
 10975                           	opt stack 0
 10976  00295C                     i2_updateCurrentTime:
 10977                           	opt stack 18
 10978                           
 10979                           ;main.c: 195: I2C_Master_Start();
 10980                           
 10981                           ;incstack = 0
 10982  00295C  EC83  F018         	call	i2_I2C_Master_Start	;wreg free
 10983                           
 10984                           ;main.c: 196: I2C_Master_Write(0b11010000);
 10985  002960  0E00               	movlw	0
 10986  002962  6E03               	movwf	i2I2C_Master_Write@d+1,c
 10987  002964  0ED0               	movlw	208
 10988  002966  6E02               	movwf	i2I2C_Master_Write@d,c
 10989  002968  EC6A  F018         	call	i2_I2C_Master_Write	;wreg free
 10990                           
 10991                           ;main.c: 197: I2C_Master_Write(0x00);
 10992  00296C  0E00               	movlw	0
 10993  00296E  6E03               	movwf	i2I2C_Master_Write@d+1,c
 10994  002970  0E00               	movlw	0
 10995  002972  6E02               	movwf	i2I2C_Master_Write@d,c
 10996  002974  EC6A  F018         	call	i2_I2C_Master_Write	;wreg free
 10997                           
 10998                           ;main.c: 198: I2C_Master_Stop();
 10999  002978  EC7F  F018         	call	i2_I2C_Master_Stop	;wreg free
 11000                           
 11001                           ;main.c: 201: I2C_Master_Start();
 11002  00297C  EC83  F018         	call	i2_I2C_Master_Start	;wreg free
 11003                           
 11004                           ;main.c: 202: I2C_Master_Write(0b11010001);
 11005  002980  0E00               	movlw	0
 11006  002982  6E03               	movwf	i2I2C_Master_Write@d+1,c
 11007  002984  0ED1               	movlw	209
 11008  002986  6E02               	movwf	i2I2C_Master_Write@d,c
 11009  002988  EC6A  F018         	call	i2_I2C_Master_Write	;wreg free
 11010                           
 11011                           ;main.c: 203: for(unsigned char i=0;i<0x06;i++){
 11012  00298C  0E00               	movlw	0
 11013  00298E  6E04               	movwf	i2updateCurrentTime@i,c
 11014  002990                     i2l4521:
 11015  002990  0E05               	movlw	5
 11016  002992  6404               	cpfsgt	i2updateCurrentTime@i,c
 11017  002994  D001               	goto	i2l4525
 11018  002996  D00E               	goto	i2l4531
 11019  002998                     i2l4525:
 11020                           
 11021                           ;main.c: 204: time[i] = I2C_Master_Read(1);
 11022  002998  5004               	movf	i2updateCurrentTime@i,w,c
 11023  00299A  0D01               	mullw	1
 11024  00299C  0EE0               	movlw	low _time
 11025  00299E  24F3               	addwf	prodl,w,c
 11026  0029A0  6ED9               	movwf	fsr2l,c
 11027  0029A2  0E00               	movlw	high _time
 11028  0029A4  20F4               	addwfc	prodh,w,c
 11029  0029A6  6EDA               	movwf	fsr2h,c
 11030  0029A8  0E01               	movlw	1
 11031  0029AA  ECC2  F017         	call	i2_I2C_Master_Read
 11032  0029AE  6EDF               	movwf	indf2,c
 11033  0029B0  2A04               	incf	i2updateCurrentTime@i,f,c
 11034  0029B2  D7EE               	goto	i2l4521
 11035  0029B4                     i2l4531:
 11036                           
 11037                           ;main.c: 205: }
 11038                           ;main.c: 206: time[6] = I2C_Master_Read(0);
 11039  0029B4  0E00               	movlw	0
 11040  0029B6  ECC2  F017         	call	i2_I2C_Master_Read
 11041  0029BA  0100               	movlb	0	; () banked
 11042  0029BC  6FE6               	movwf	(_time+6)& (0+255),b
 11043                           
 11044                           ;main.c: 207: I2C_Master_Stop();
 11045  0029BE  EC7F  F018         	call	i2_I2C_Master_Stop	;wreg free
 11046  0029C2  0012               	return		;funcret
 11047  0029C4                     __end_ofi2_updateCurrentTime:
 11048                           	opt stack 0
 11049                           tosu	equ	0xFFF
 11050                           tosh	equ	0xFFE
 11051                           tosl	equ	0xFFD
 11052                           pclatu	equ	0xFFB
 11053                           pclath	equ	0xFFA
 11054                           tblptru	equ	0xFF8
 11055                           tblptrh	equ	0xFF7
 11056                           tblptrl	equ	0xFF6
 11057                           tablat	equ	0xFF5
 11058                           prodh	equ	0xFF4
 11059                           prodl	equ	0xFF3
 11060                           intcon	equ	0xFF2
 11061                           intcon2	equ	0xFF1
 11062                           postinc0	equ	0xFEE
 11063                           fsr0h	equ	0xFEA
 11064                           fsr0l	equ	0xFE9
 11065                           wreg	equ	0xFE8
 11066                           indf1	equ	0xFE7
 11067                           postinc1	equ	0xFE6
 11068                           postdec1	equ	0xFE5
 11069                           fsr1h	equ	0xFE2
 11070                           fsr1l	equ	0xFE1
 11071                           indf2	equ	0xFDF
 11072                           postinc2	equ	0xFDE
 11073                           postdec2	equ	0xFDD
 11074                           fsr2h	equ	0xFDA
 11075                           fsr2l	equ	0xFD9
 11076                           status	equ	0xFD8
 11077                           
 11078 ;; *************** function i2_I2C_Master_Write *****************
 11079 ;; Defined at:
 11080 ;;		line 47 in file "I2C.c"
 11081 ;; Parameters:    Size  Location     Type
 11082 ;;  d               2    1[COMRAM] unsigned int 
 11083 ;; Auto vars:     Size  Location     Type
 11084 ;;		None
 11085 ;; Return value:  Size  Location     Type
 11086 ;;                  1    wreg      void 
 11087 ;; Registers used:
 11088 ;;		wreg, status,2, status,0, cstack
 11089 ;; Tracked objects:
 11090 ;;		On entry : 0/0
 11091 ;;		On exit  : 0/0
 11092 ;;		Unchanged: 0/0
 11093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11094 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11097 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11098 ;;Total ram usage:        2 bytes
 11099 ;; Hardware stack levels used:    1
 11100 ;; Hardware stack levels required when called:    1
 11101 ;; This function calls:
 11102 ;;		i2_I2C_Master_Wait
 11103 ;; This function is called by:
 11104 ;;		i2_updateCurrentTime
 11105 ;; This function uses a non-reentrant model
 11106 ;;
 11107                           
 11108                           	psect	text54
 11109  0030D4                     __ptext54:
 11110                           	opt stack 0
 11111  0030D4                     i2_I2C_Master_Write:
 11112                           	opt stack 18
 11113                           
 11114                           ;I2C.c: 49: I2C_Master_Wait();
 11115                           
 11116                           ;incstack = 0
 11117  0030D4  EC3D  F018         	call	i2_I2C_Master_Wait	;wreg free
 11118                           
 11119                           ;I2C.c: 50: SSPBUF = d;
 11120  0030D8  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 11121  0030DC  0012               	return		;funcret
 11122  0030DE                     __end_ofi2_I2C_Master_Write:
 11123                           	opt stack 0
 11124                           tosu	equ	0xFFF
 11125                           tosh	equ	0xFFE
 11126                           tosl	equ	0xFFD
 11127                           pclatu	equ	0xFFB
 11128                           pclath	equ	0xFFA
 11129                           tblptru	equ	0xFF8
 11130                           tblptrh	equ	0xFF7
 11131                           tblptrl	equ	0xFF6
 11132                           tablat	equ	0xFF5
 11133                           prodh	equ	0xFF4
 11134                           prodl	equ	0xFF3
 11135                           intcon	equ	0xFF2
 11136                           intcon2	equ	0xFF1
 11137                           postinc0	equ	0xFEE
 11138                           fsr0h	equ	0xFEA
 11139                           fsr0l	equ	0xFE9
 11140                           wreg	equ	0xFE8
 11141                           indf1	equ	0xFE7
 11142                           postinc1	equ	0xFE6
 11143                           postdec1	equ	0xFE5
 11144                           fsr1h	equ	0xFE2
 11145                           fsr1l	equ	0xFE1
 11146                           indf2	equ	0xFDF
 11147                           postinc2	equ	0xFDE
 11148                           postdec2	equ	0xFDD
 11149                           fsr2h	equ	0xFDA
 11150                           fsr2l	equ	0xFD9
 11151                           status	equ	0xFD8
 11152                           
 11153 ;; *************** function i2_I2C_Master_Stop *****************
 11154 ;; Defined at:
 11155 ;;		line 41 in file "I2C.c"
 11156 ;; Parameters:    Size  Location     Type
 11157 ;;		None
 11158 ;; Auto vars:     Size  Location     Type
 11159 ;;		None
 11160 ;; Return value:  Size  Location     Type
 11161 ;;                  2    0[None  ] int 
 11162 ;; Registers used:
 11163 ;;		wreg, status,2, status,0, cstack
 11164 ;; Tracked objects:
 11165 ;;		On entry : 0/0
 11166 ;;		On exit  : 0/0
 11167 ;;		Unchanged: 0/0
 11168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11173 ;;Total ram usage:        0 bytes
 11174 ;; Hardware stack levels used:    1
 11175 ;; Hardware stack levels required when called:    1
 11176 ;; This function calls:
 11177 ;;		i2_I2C_Master_Wait
 11178 ;; This function is called by:
 11179 ;;		i2_updateCurrentTime
 11180 ;; This function uses a non-reentrant model
 11181 ;;
 11182                           
 11183                           	psect	text55
 11184  0030FE                     __ptext55:
 11185                           	opt stack 0
 11186  0030FE                     i2_I2C_Master_Stop:
 11187                           	opt stack 18
 11188                           
 11189                           ;I2C.c: 43: I2C_Master_Wait();
 11190                           
 11191                           ;incstack = 0
 11192  0030FE  EC3D  F018         	call	i2_I2C_Master_Wait	;wreg free
 11193                           
 11194                           ;I2C.c: 44: PEN = 1;
 11195  003102  84C5               	bsf	4037,2,c	;volatile
 11196  003104  0012               	return		;funcret
 11197  003106                     __end_ofi2_I2C_Master_Stop:
 11198                           	opt stack 0
 11199                           tosu	equ	0xFFF
 11200                           tosh	equ	0xFFE
 11201                           tosl	equ	0xFFD
 11202                           pclatu	equ	0xFFB
 11203                           pclath	equ	0xFFA
 11204                           tblptru	equ	0xFF8
 11205                           tblptrh	equ	0xFF7
 11206                           tblptrl	equ	0xFF6
 11207                           tablat	equ	0xFF5
 11208                           prodh	equ	0xFF4
 11209                           prodl	equ	0xFF3
 11210                           intcon	equ	0xFF2
 11211                           intcon2	equ	0xFF1
 11212                           postinc0	equ	0xFEE
 11213                           fsr0h	equ	0xFEA
 11214                           fsr0l	equ	0xFE9
 11215                           wreg	equ	0xFE8
 11216                           indf1	equ	0xFE7
 11217                           postinc1	equ	0xFE6
 11218                           postdec1	equ	0xFE5
 11219                           fsr1h	equ	0xFE2
 11220                           fsr1l	equ	0xFE1
 11221                           indf2	equ	0xFDF
 11222                           postinc2	equ	0xFDE
 11223                           postdec2	equ	0xFDD
 11224                           fsr2h	equ	0xFDA
 11225                           fsr2l	equ	0xFD9
 11226                           status	equ	0xFD8
 11227                           
 11228 ;; *************** function i2_I2C_Master_Start *****************
 11229 ;; Defined at:
 11230 ;;		line 29 in file "I2C.c"
 11231 ;; Parameters:    Size  Location     Type
 11232 ;;		None
 11233 ;; Auto vars:     Size  Location     Type
 11234 ;;		None
 11235 ;; Return value:  Size  Location     Type
 11236 ;;                  2    0[None  ] int 
 11237 ;; Registers used:
 11238 ;;		wreg, status,2, status,0, cstack
 11239 ;; Tracked objects:
 11240 ;;		On entry : 0/0
 11241 ;;		On exit  : 0/0
 11242 ;;		Unchanged: 0/0
 11243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11245 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11247 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11248 ;;Total ram usage:        0 bytes
 11249 ;; Hardware stack levels used:    1
 11250 ;; Hardware stack levels required when called:    1
 11251 ;; This function calls:
 11252 ;;		i2_I2C_Master_Wait
 11253 ;; This function is called by:
 11254 ;;		i2_updateCurrentTime
 11255 ;; This function uses a non-reentrant model
 11256 ;;
 11257                           
 11258                           	psect	text56
 11259  003106                     __ptext56:
 11260                           	opt stack 0
 11261  003106                     i2_I2C_Master_Start:
 11262                           	opt stack 18
 11263                           
 11264                           ;I2C.c: 31: I2C_Master_Wait();
 11265                           
 11266                           ;incstack = 0
 11267  003106  EC3D  F018         	call	i2_I2C_Master_Wait	;wreg free
 11268                           
 11269                           ;I2C.c: 32: SEN = 1;
 11270  00310A  80C5               	bsf	4037,0,c	;volatile
 11271  00310C  0012               	return		;funcret
 11272  00310E                     __end_ofi2_I2C_Master_Start:
 11273                           	opt stack 0
 11274                           tosu	equ	0xFFF
 11275                           tosh	equ	0xFFE
 11276                           tosl	equ	0xFFD
 11277                           pclatu	equ	0xFFB
 11278                           pclath	equ	0xFFA
 11279                           tblptru	equ	0xFF8
 11280                           tblptrh	equ	0xFF7
 11281                           tblptrl	equ	0xFF6
 11282                           tablat	equ	0xFF5
 11283                           prodh	equ	0xFF4
 11284                           prodl	equ	0xFF3
 11285                           intcon	equ	0xFF2
 11286                           intcon2	equ	0xFF1
 11287                           postinc0	equ	0xFEE
 11288                           fsr0h	equ	0xFEA
 11289                           fsr0l	equ	0xFE9
 11290                           wreg	equ	0xFE8
 11291                           indf1	equ	0xFE7
 11292                           postinc1	equ	0xFE6
 11293                           postdec1	equ	0xFE5
 11294                           fsr1h	equ	0xFE2
 11295                           fsr1l	equ	0xFE1
 11296                           indf2	equ	0xFDF
 11297                           postinc2	equ	0xFDE
 11298                           postdec2	equ	0xFDD
 11299                           fsr2h	equ	0xFDA
 11300                           fsr2l	equ	0xFD9
 11301                           status	equ	0xFD8
 11302                           
 11303 ;; *************** function i2_I2C_Master_Read *****************
 11304 ;; Defined at:
 11305 ;;		line 53 in file "I2C.c"
 11306 ;; Parameters:    Size  Location     Type
 11307 ;;  a               1    wreg     unsigned char 
 11308 ;; Auto vars:     Size  Location     Type
 11309 ;;  a               1    1[COMRAM] unsigned char 
 11310 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 11311 ;; Return value:  Size  Location     Type
 11312 ;;                  1    wreg      unsigned char 
 11313 ;; Registers used:
 11314 ;;		wreg, status,2, status,0, cstack
 11315 ;; Tracked objects:
 11316 ;;		On entry : 0/0
 11317 ;;		On exit  : 0/0
 11318 ;;		Unchanged: 0/0
 11319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11320 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11321 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11322 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11323 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11324 ;;Total ram usage:        2 bytes
 11325 ;; Hardware stack levels used:    1
 11326 ;; Hardware stack levels required when called:    1
 11327 ;; This function calls:
 11328 ;;		i2_I2C_Master_Wait
 11329 ;; This function is called by:
 11330 ;;		i2_updateCurrentTime
 11331 ;; This function uses a non-reentrant model
 11332 ;;
 11333                           
 11334                           	psect	text57
 11335  002F84                     __ptext57:
 11336                           	opt stack 0
 11337  002F84                     i2_I2C_Master_Read:
 11338                           	opt stack 18
 11339                           
 11340                           ;incstack = 0
 11341                           ;i2I2C_Master_Read@a stored from wreg
 11342  002F84  6E02               	movwf	i2I2C_Master_Read@a,c
 11343                           
 11344                           ;I2C.c: 55: unsigned char temp;
 11345                           ;I2C.c: 56: I2C_Master_Wait();
 11346  002F86  EC3D  F018         	call	i2_I2C_Master_Wait	;wreg free
 11347                           
 11348                           ;I2C.c: 57: RCEN = 1;
 11349  002F8A  86C5               	bsf	4037,3,c	;volatile
 11350                           
 11351                           ;I2C.c: 58: I2C_Master_Wait();
 11352  002F8C  EC3D  F018         	call	i2_I2C_Master_Wait	;wreg free
 11353                           
 11354                           ;I2C.c: 59: temp = SSPBUF;
 11355  002F90  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 11356                           
 11357                           ;I2C.c: 60: I2C_Master_Wait();
 11358  002F94  EC3D  F018         	call	i2_I2C_Master_Wait	;wreg free
 11359                           
 11360                           ;I2C.c: 61: ACKDT = (a)?0:1;
 11361  002F98  5002               	movf	i2I2C_Master_Read@a,w,c
 11362  002F9A  A4D8               	btfss	status,2,c
 11363  002F9C  D002               	goto	i2u411_40
 11364  002F9E  8AC5               	bsf	4037,5,c	;volatile
 11365  002FA0  D001               	goto	i2l4437
 11366  002FA2                     i2u411_40:
 11367  002FA2  9AC5               	bcf	4037,5,c	;volatile
 11368  002FA4                     i2l4437:
 11369                           
 11370                           ;I2C.c: 62: ACKEN = 1;
 11371  002FA4  88C5               	bsf	4037,4,c	;volatile
 11372                           
 11373                           ;I2C.c: 63: return temp;
 11374  002FA6  5003               	movf	i2I2C_Master_Read@temp,w,c
 11375  002FA8  0012               	return	
 11376  002FAA                     __end_ofi2_I2C_Master_Read:
 11377                           	opt stack 0
 11378                           tosu	equ	0xFFF
 11379                           tosh	equ	0xFFE
 11380                           tosl	equ	0xFFD
 11381                           pclatu	equ	0xFFB
 11382                           pclath	equ	0xFFA
 11383                           tblptru	equ	0xFF8
 11384                           tblptrh	equ	0xFF7
 11385                           tblptrl	equ	0xFF6
 11386                           tablat	equ	0xFF5
 11387                           prodh	equ	0xFF4
 11388                           prodl	equ	0xFF3
 11389                           intcon	equ	0xFF2
 11390                           intcon2	equ	0xFF1
 11391                           postinc0	equ	0xFEE
 11392                           fsr0h	equ	0xFEA
 11393                           fsr0l	equ	0xFE9
 11394                           wreg	equ	0xFE8
 11395                           indf1	equ	0xFE7
 11396                           postinc1	equ	0xFE6
 11397                           postdec1	equ	0xFE5
 11398                           fsr1h	equ	0xFE2
 11399                           fsr1l	equ	0xFE1
 11400                           indf2	equ	0xFDF
 11401                           postinc2	equ	0xFDE
 11402                           postdec2	equ	0xFDD
 11403                           fsr2h	equ	0xFDA
 11404                           fsr2l	equ	0xFD9
 11405                           status	equ	0xFD8
 11406                           
 11407 ;; *************** function i2_I2C_Master_Wait *****************
 11408 ;; Defined at:
 11409 ;;		line 24 in file "I2C.c"
 11410 ;; Parameters:    Size  Location     Type
 11411 ;;		None
 11412 ;; Auto vars:     Size  Location     Type
 11413 ;;		None
 11414 ;; Return value:  Size  Location     Type
 11415 ;;                  1    wreg      void 
 11416 ;; Registers used:
 11417 ;;		wreg, status,2, status,0
 11418 ;; Tracked objects:
 11419 ;;		On entry : 0/0
 11420 ;;		On exit  : 0/0
 11421 ;;		Unchanged: 0/0
 11422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11425 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11426 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11427 ;;Total ram usage:        1 bytes
 11428 ;; Hardware stack levels used:    1
 11429 ;; This function calls:
 11430 ;;		Nothing
 11431 ;; This function is called by:
 11432 ;;		i2_I2C_Master_Start
 11433 ;;		i2_I2C_Master_Stop
 11434 ;;		i2_I2C_Master_Write
 11435 ;;		i2_I2C_Master_Read
 11436 ;; This function uses a non-reentrant model
 11437 ;;
 11438                           
 11439                           	psect	text58
 11440  00307A                     __ptext58:
 11441                           	opt stack 0
 11442  00307A                     i2_I2C_Master_Wait:
 11443                           	opt stack 18
 11444  00307A                     i2l459:
 11445  00307A  B4C7               	btfsc	4039,2,c	;volatile
 11446  00307C  D7FE               	goto	i2l459
 11447  00307E  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 11448  003082  0E1F               	movlw	31
 11449  003084  1601               	andwf	??i2_I2C_Master_Wait,f,c
 11450  003086  B4D8               	btfsc	status,2,c
 11451  003088  0012               	return	
 11452  00308A  D7F7               	goto	i2l459
 11453  00308C                     __end_ofi2_I2C_Master_Wait:
 11454                           	opt stack 0
 11455                           tosu	equ	0xFFF
 11456                           tosh	equ	0xFFE
 11457                           tosl	equ	0xFFD
 11458                           pclatu	equ	0xFFB
 11459                           pclath	equ	0xFFA
 11460                           tblptru	equ	0xFF8
 11461                           tblptrh	equ	0xFF7
 11462                           tblptrl	equ	0xFF6
 11463                           tablat	equ	0xFF5
 11464                           prodh	equ	0xFF4
 11465                           prodl	equ	0xFF3
 11466                           intcon	equ	0xFF2
 11467                           intcon2	equ	0xFF1
 11468                           postinc0	equ	0xFEE
 11469                           fsr0h	equ	0xFEA
 11470                           fsr0l	equ	0xFE9
 11471                           wreg	equ	0xFE8
 11472                           indf1	equ	0xFE7
 11473                           postinc1	equ	0xFE6
 11474                           postdec1	equ	0xFE5
 11475                           fsr1h	equ	0xFE2
 11476                           fsr1l	equ	0xFE1
 11477                           indf2	equ	0xFDF
 11478                           postinc2	equ	0xFDE
 11479                           postdec2	equ	0xFDD
 11480                           fsr2h	equ	0xFDA
 11481                           fsr2l	equ	0xFD9
 11482                           status	equ	0xFD8
 11483                           
 11484 ;; *************** function i2_printTime *****************
 11485 ;; Defined at:
 11486 ;;		line 148 in file "main.c"
 11487 ;; Parameters:    Size  Location     Type
 11488 ;;		None
 11489 ;; Auto vars:     Size  Location     Type
 11490 ;;		None
 11491 ;; Return value:  Size  Location     Type
 11492 ;;                  1    wreg      void 
 11493 ;; Registers used:
 11494 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11495 ;; Tracked objects:
 11496 ;;		On entry : 0/0
 11497 ;;		On exit  : 0/0
 11498 ;;		Unchanged: 0/0
 11499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11504 ;;Total ram usage:        0 bytes
 11505 ;; Hardware stack levels used:    1
 11506 ;; Hardware stack levels required when called:    4
 11507 ;; This function calls:
 11508 ;;		i2_lcdInst
 11509 ;;		i2_printf
 11510 ;; This function is called by:
 11511 ;;		_handler
 11512 ;; This function uses a non-reentrant model
 11513 ;;
 11514                           
 11515                           	psect	text59
 11516  002D7A                     __ptext59:
 11517                           	opt stack 0
 11518  002D7A                     i2_printTime:
 11519                           	opt stack 16
 11520                           
 11521                           ;main.c: 149: lcdInst(0b10000000);
 11522                           
 11523                           ;incstack = 0
 11524  002D7A  0E80               	movlw	128
 11525  002D7C  EC5A  F018         	call	i2_lcdInst
 11526                           
 11527                           ;main.c: 150: printf("%02x/%02x   ", time[5],time[4]);
 11528  002D80  0ED2               	movlw	low STR_1
 11529  002D82  6E1F               	movwf	i2printf@f,c
 11530  002D84  0EFF               	movlw	high STR_1
 11531  002D86  6E20               	movwf	i2printf@f+1,c
 11532  002D88  C0E5  F021         	movff	_time+5,?i2_printf+2
 11533  002D8C  6A22               	clrf	?i2_printf+3,c
 11534  002D8E  C0E4  F023         	movff	_time+4,?i2_printf+4
 11535  002D92  6A24               	clrf	?i2_printf+5,c
 11536  002D94  EC33  F017         	call	i2_printf	;wreg free
 11537                           
 11538                           ;main.c: 151: printf("%02x:%02x:%02x", time[2],time[1],time[0]);
 11539  002D98  0E70               	movlw	low STR_2
 11540  002D9A  6E1F               	movwf	i2printf@f,c
 11541  002D9C  0EFF               	movlw	high STR_2
 11542  002D9E  6E20               	movwf	i2printf@f+1,c
 11543  002DA0  C0E2  F021         	movff	_time+2,?i2_printf+2
 11544  002DA4  6A22               	clrf	?i2_printf+3,c
 11545  002DA6  C0E1  F023         	movff	_time+1,?i2_printf+4
 11546  002DAA  6A24               	clrf	?i2_printf+5,c
 11547  002DAC  C0E0  F025         	movff	_time,?i2_printf+6
 11548  002DB0  6A26               	clrf	?i2_printf+7,c
 11549  002DB2  EC33  F017         	call	i2_printf	;wreg free
 11550  002DB6  0012               	return		;funcret
 11551  002DB8                     __end_ofi2_printTime:
 11552                           	opt stack 0
 11553                           tosu	equ	0xFFF
 11554                           tosh	equ	0xFFE
 11555                           tosl	equ	0xFFD
 11556                           pclatu	equ	0xFFB
 11557                           pclath	equ	0xFFA
 11558                           tblptru	equ	0xFF8
 11559                           tblptrh	equ	0xFF7
 11560                           tblptrl	equ	0xFF6
 11561                           tablat	equ	0xFF5
 11562                           prodh	equ	0xFF4
 11563                           prodl	equ	0xFF3
 11564                           intcon	equ	0xFF2
 11565                           intcon2	equ	0xFF1
 11566                           postinc0	equ	0xFEE
 11567                           fsr0h	equ	0xFEA
 11568                           fsr0l	equ	0xFE9
 11569                           wreg	equ	0xFE8
 11570                           indf1	equ	0xFE7
 11571                           postinc1	equ	0xFE6
 11572                           postdec1	equ	0xFE5
 11573                           fsr1h	equ	0xFE2
 11574                           fsr1l	equ	0xFE1
 11575                           indf2	equ	0xFDF
 11576                           postinc2	equ	0xFDE
 11577                           postdec2	equ	0xFDD
 11578                           fsr2h	equ	0xFDA
 11579                           fsr2l	equ	0xFD9
 11580                           status	equ	0xFD8
 11581                           
 11582 ;; *************** function i2_printf *****************
 11583 ;; Defined at:
 11584 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
 11585 ;; Parameters:    Size  Location     Type
 11586 ;;  f               2   30[COMRAM] PTR const unsigned char 
 11587 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(18), 
 11588 ;;		 -> STR_30(13), STR_29(12), STR_28(5), STR_27(4), 
 11589 ;;		 -> STR_26(17), STR_25(14), STR_24(16), STR_23(18), 
 11590 ;;		 -> STR_22(15), STR_21(13), STR_20(17), STR_19(16), 
 11591 ;;		 -> STR_18(16), STR_17(14), STR_16(14), STR_15(16), 
 11592 ;;		 -> STR_14(17), STR_13(16), STR_12(16), STR_11(16), 
 11593 ;;		 -> STR_10(11), STR_9(17), STR_8(17), STR_7(14), 
 11594 ;;		 -> STR_6(14), STR_2(15), STR_1(13), 
 11595 ;; Auto vars:     Size  Location     Type
 11596 ;;  printf          4   40[COMRAM] struct __prbuf
 11597 ;;  printf          2   38[COMRAM] PTR void [1]
 11598 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
 11599 ;; Return value:  Size  Location     Type
 11600 ;;                  2   30[COMRAM] int 
 11601 ;; Registers used:
 11602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11603 ;; Tracked objects:
 11604 ;;		On entry : 0/0
 11605 ;;		On exit  : 0/0
 11606 ;;		Unchanged: 0/0
 11607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11608 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11609 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11611 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11612 ;;Total ram usage:       14 bytes
 11613 ;; Hardware stack levels used:    1
 11614 ;; Hardware stack levels required when called:    3
 11615 ;; This function calls:
 11616 ;;		i2__doprnt
 11617 ;; This function is called by:
 11618 ;;		i2_printTime
 11619 ;; This function uses a non-reentrant model
 11620 ;;
 11621                           
 11622                           	psect	text60
 11623  002E66                     __ptext60:
 11624                           	opt stack 0
 11625  002E66                     i2_printf:
 11626                           	opt stack 16
 11627                           
 11628                           ;incstack = 0
 11629  002E66  0E00               	movlw	0
 11630  002E68  6E29               	movwf	i2printf@pb,c
 11631  002E6A  0E00               	movlw	0
 11632  002E6C  6E2A               	movwf	i2printf@pb+1,c
 11633  002E6E  0EA8               	movlw	low i2_putch
 11634  002E70  6E2B               	movwf	i2printf@pb+2,c
 11635  002E72  0E30               	movlw	high i2_putch
 11636  002E74  6E2C               	movwf	i2printf@pb+3,c
 11637  002E76  0E21               	movlw	low (?i2_printf+2)
 11638  002E78  6E27               	movwf	i2printf@ap,c
 11639  002E7A  0E00               	movlw	high (?i2_printf+2)
 11640  002E7C  6E28               	movwf	i2printf@ap+1,c
 11641                           
 11642                           ;	Return value of i2_printf is never used
 11643  002E7E  0E29               	movlw	low i2printf@pb
 11644  002E80  6E0D               	movwf	i2__doprnt@pb,c
 11645  002E82  0E00               	movlw	high i2printf@pb
 11646  002E84  6E0E               	movwf	i2__doprnt@pb+1,c
 11647  002E86  C01F  F00F         	movff	i2printf@f,i2__doprnt@f
 11648  002E8A  C020  F010         	movff	i2printf@f+1,i2__doprnt@f+1
 11649  002E8E  0E27               	movlw	low i2printf@ap
 11650  002E90  6E11               	movwf	i2__doprnt@ap,c
 11651  002E92  0E00               	movlw	high i2printf@ap
 11652  002E94  6E12               	movwf	i2__doprnt@ap+1,c
 11653  002E96  EC43  F003         	call	i2__doprnt	;wreg free
 11654  002E9A  0012               	return	
 11655  002E9C                     __end_ofi2_printf:
 11656                           	opt stack 0
 11657                           tosu	equ	0xFFF
 11658                           tosh	equ	0xFFE
 11659                           tosl	equ	0xFFD
 11660                           pclatu	equ	0xFFB
 11661                           pclath	equ	0xFFA
 11662                           tblptru	equ	0xFF8
 11663                           tblptrh	equ	0xFF7
 11664                           tblptrl	equ	0xFF6
 11665                           tablat	equ	0xFF5
 11666                           prodh	equ	0xFF4
 11667                           prodl	equ	0xFF3
 11668                           intcon	equ	0xFF2
 11669                           intcon2	equ	0xFF1
 11670                           postinc0	equ	0xFEE
 11671                           fsr0h	equ	0xFEA
 11672                           fsr0l	equ	0xFE9
 11673                           wreg	equ	0xFE8
 11674                           indf1	equ	0xFE7
 11675                           postinc1	equ	0xFE6
 11676                           postdec1	equ	0xFE5
 11677                           fsr1h	equ	0xFE2
 11678                           fsr1l	equ	0xFE1
 11679                           indf2	equ	0xFDF
 11680                           postinc2	equ	0xFDE
 11681                           postdec2	equ	0xFDD
 11682                           fsr2h	equ	0xFDA
 11683                           fsr2l	equ	0xFD9
 11684                           status	equ	0xFD8
 11685                           
 11686 ;; *************** function i2__doprnt *****************
 11687 ;; Defined at:
 11688 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 11689 ;; Parameters:    Size  Location     Type
 11690 ;;  pb              2   12[COMRAM] PTR struct __prbuf
 11691 ;;		 -> sprintf@pb(4), printf@pb(4), 
 11692 ;;  f               2   14[COMRAM] PTR const unsigned char 
 11693 ;;		 -> STR_34(17), STR_33(17), STR_32(17), STR_31(18), 
 11694 ;;		 -> STR_30(13), STR_29(12), STR_28(5), STR_27(4), 
 11695 ;;		 -> STR_26(17), STR_25(14), STR_24(16), STR_23(18), 
 11696 ;;		 -> STR_22(15), STR_21(13), STR_20(17), STR_19(16), 
 11697 ;;		 -> STR_18(16), STR_17(14), STR_16(14), STR_15(16), 
 11698 ;;		 -> STR_14(17), STR_13(16), STR_12(16), STR_11(16), 
 11699 ;;		 -> STR_10(11), STR_9(17), STR_8(17), STR_7(14), 
 11700 ;;		 -> STR_6(14), STR_5(5), STR_4(5), STR_3(5), 
 11701 ;;		 -> STR_2(15), STR_1(13), 
 11702 ;;  ap              2   16[COMRAM] PTR PTR void 
 11703 ;;		 -> sprintf@ap(2), printf@ap(2), 
 11704 ;; Auto vars:     Size  Location     Type
 11705 ;;  _doprnt         4    0        struct .
 11706 ;;  _doprnt         3    0        PTR const unsigned char 
 11707 ;;  _doprnt         2   27[COMRAM] int 
 11708 ;;  _doprnt         2   24[COMRAM] unsigned int 
 11709 ;;  _doprnt         2    0        unsigned int 
 11710 ;;  _doprnt         1   29[COMRAM] char 
 11711 ;;  _doprnt         1   26[COMRAM] unsigned char 
 11712 ;;  _doprnt         1   23[COMRAM] char 
 11713 ;;  _doprnt         1   22[COMRAM] unsigned char 
 11714 ;; Return value:  Size  Location     Type
 11715 ;;                  2   12[COMRAM] int 
 11716 ;; Registers used:
 11717 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11718 ;; Tracked objects:
 11719 ;;		On entry : 0/0
 11720 ;;		On exit  : 0/0
 11721 ;;		Unchanged: 0/0
 11722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11723 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11724 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11725 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11726 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11727 ;;Total ram usage:       18 bytes
 11728 ;; Hardware stack levels used:    1
 11729 ;; Hardware stack levels required when called:    2
 11730 ;; This function calls:
 11731 ;;		Absolute function
 11732 ;;		i2___lwdiv
 11733 ;;		i2___lwmod
 11734 ;;		i2___wmul
 11735 ;;		i2_isdigit
 11736 ;;		i2_putch
 11737 ;; This function is called by:
 11738 ;;		i2_printf
 11739 ;; This function uses a non-reentrant model
 11740 ;;
 11741                           
 11742                           	psect	text61
 11743  000686                     __ptext61:
 11744                           	opt stack 0
 11745  000686                     i2__doprnt:
 11746                           	opt stack 16
 11747                           
 11748                           ;doprnt.c: 499: signed char c;
 11749                           ;doprnt.c: 501: int width;
 11750                           ;doprnt.c: 506: signed char prec;
 11751                           ;doprnt.c: 508: unsigned char flag;
 11752                           ;doprnt.c: 523: union {
 11753                           ;doprnt.c: 524: unsigned long vd;
 11754                           ;doprnt.c: 525: double integ;
 11755                           ;doprnt.c: 526: } tmpval;
 11756                           ;doprnt.c: 528: unsigned int val;
 11757                           ;doprnt.c: 529: unsigned len;
 11758                           ;doprnt.c: 530: const char * cp;
 11759                           ;doprnt.c: 536: while(c = *f++) {
 11760                           
 11761                           ;incstack = 0
 11762  000686  D2C4               	goto	i2l7885
 11763  000688                     i2l7727:
 11764                           
 11765                           ;doprnt.c: 538: if(c != '%')
 11766  000688  0E25               	movlw	37
 11767  00068A  181E               	xorwf	i2__doprnt@c,w,c
 11768  00068C  B4D8               	btfsc	status,2,c
 11769  00068E  D036               	goto	i2l7737
 11770                           
 11771                           ;doprnt.c: 540: {
 11772                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 11773  000690  EE20 F002          	lfsr	2,2
 11774  000694  500D               	movf	i2__doprnt@pb,w,c
 11775  000696  26D9               	addwf	fsr2l,f,c
 11776  000698  500E               	movf	i2__doprnt@pb+1,w,c
 11777  00069A  22DA               	addwfc	fsr2h,f,c
 11778  00069C  50DE               	movf	postinc2,w,c
 11779  00069E  10DE               	iorwf	postinc2,w,c
 11780  0006A0  B4D8               	btfsc	status,2,c
 11781  0006A2  D016               	goto	i2l7733
 11782  0006A4  EE20 F002          	lfsr	2,2
 11783  0006A8  500D               	movf	i2__doprnt@pb,w,c
 11784  0006AA  26D9               	addwf	fsr2l,f,c
 11785  0006AC  500E               	movf	i2__doprnt@pb+1,w,c
 11786  0006AE  22DA               	addwfc	fsr2h,f,c
 11787  0006B0  CFDE F013          	movff	postinc2,??i2__doprnt
 11788  0006B4  CFDD F014          	movff	postdec2,??i2__doprnt+1
 11789  0006B8  D801               	call	i2u810_48
 11790  0006BA  D2AA               	goto	i2l7885
 11791  0006BC                     i2u810_48:
 11792  0006BC  0005               	push	
 11793  0006BE  6EFA               	movwf	pclath,c
 11794  0006C0  5013               	movf	??i2__doprnt,w,c
 11795  0006C2  6EFD               	movwf	tosl,c
 11796  0006C4  5014               	movf	??i2__doprnt+1,w,c
 11797  0006C6  6EFE               	movwf	tosh,c
 11798  0006C8  6AFF               	clrf	tosu,c
 11799  0006CA  50FA               	movf	pclath,w,c
 11800  0006CC  501E               	movf	i2__doprnt@c,w,c
 11801  0006CE  0012               	return		;indir
 11802  0006D0                     i2l7733:
 11803  0006D0  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 11804  0006D4  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 11805  0006D8  CFDE F013          	movff	postinc2,??i2__doprnt
 11806  0006DC  CFDD F014          	movff	postdec2,??i2__doprnt+1
 11807  0006E0  C013  FFD9         	movff	??i2__doprnt,fsr2l
 11808  0006E4  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 11809  0006E8  C01E  FFDF         	movff	i2__doprnt@c,indf2
 11810  0006EC  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 11811  0006F0  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 11812  0006F4  2ADE               	incf	postinc2,f,c
 11813  0006F6  0E00               	movlw	0
 11814  0006F8  22DD               	addwfc	postdec2,f,c
 11815                           
 11816                           ;doprnt.c: 542: continue;
 11817  0006FA  D28A               	goto	i2l7885
 11818  0006FC                     i2l7737:
 11819                           
 11820                           ;doprnt.c: 543: }
 11821                           ;doprnt.c: 546: width = 0;
 11822  0006FC  0E00               	movlw	0
 11823  0006FE  6E1D               	movwf	i2__doprnt@width+1,c
 11824  000700  0E00               	movlw	0
 11825  000702  6E1C               	movwf	i2__doprnt@width,c
 11826                           
 11827                           ;doprnt.c: 548: flag = 0;
 11828  000704  0E00               	movlw	0
 11829  000706  6E1B               	movwf	i2__doprnt@flag,c
 11830                           
 11831                           ;doprnt.c: 551: switch(*f) {
 11832                           
 11833                           ;doprnt.c: 550: for(;;) {
 11834  000708  D003               	goto	i2l7743
 11835  00070A                     i2l7739:
 11836                           
 11837                           ;doprnt.c: 580: flag |= 0x04;
 11838  00070A  841B               	bsf	i2__doprnt@flag,2,c
 11839                           
 11840                           ;doprnt.c: 581: f++;
 11841  00070C  4A0F               	infsnz	i2__doprnt@f,f,c
 11842  00070E  2A10               	incf	i2__doprnt@f+1,f,c
 11843  000710                     i2l7743:
 11844  000710  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 11845  000714  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 11846  000718                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11847  000718  6AF8               	clrf	tblptru,c
 11848  00071A                     	endif
 11849  00071A                     	if	0	;tblptru may be non-zero
 11850  00071A                     	endif
 11851  00071A  0008               	tblrd		*
 11852  00071C  50F5               	movf	tablat,w,c
 11853                           
 11854                           ; Switch size 1, requested type "space"
 11855                           ; Number of cases is 1, Range of values is 48 to 48
 11856                           ; switch strategies available:
 11857                           ; Name         Instructions Cycles
 11858                           ; simple_byte            4     3 (average)
 11859                           ;	Chosen strategy is simple_byte
 11860  00071E  0A30               	xorlw	48	; case 48
 11861  000720  B4D8               	btfsc	status,2,c
 11862  000722  D7F3               	goto	i2l7739
 11863                           
 11864                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11865                           
 11866                           ;doprnt.c: 586: }
 11867                           
 11868                           ;doprnt.c: 585: break;
 11869  000724  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 11870  000728  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 11871  00072C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11872  00072C  6AF8               	clrf	tblptru,c
 11873  00072E                     	endif
 11874  00072E                     	if	0	;tblptru may be non-zero
 11875  00072E                     	endif
 11876  00072E  0008               	tblrd		*
 11877  000730  50F5               	movf	tablat,w,c
 11878  000732  ECF9  F017         	call	i2_isdigit
 11879  000736  A0D8               	btfss	status,0,c
 11880  000738  D037               	goto	i2l7761
 11881                           
 11882                           ;doprnt.c: 598: width = 0;
 11883  00073A  0E00               	movlw	0
 11884  00073C  6E1D               	movwf	i2__doprnt@width+1,c
 11885  00073E  0E00               	movlw	0
 11886  000740  6E1C               	movwf	i2__doprnt@width,c
 11887  000742                     i2l7749:
 11888                           
 11889                           ;doprnt.c: 600: width *= 10;
 11890  000742  C01C  F001         	movff	i2__doprnt@width,i2___wmul@multiplier
 11891  000746  C01D  F002         	movff	i2__doprnt@width+1,i2___wmul@multiplier+1
 11892  00074A  0E00               	movlw	0
 11893  00074C  6E04               	movwf	i2___wmul@multiplicand+1,c
 11894  00074E  0E0A               	movlw	10
 11895  000750  6E03               	movwf	i2___wmul@multiplicand,c
 11896  000752  ECD5  F017         	call	i2___wmul	;wreg free
 11897  000756  C001  F01C         	movff	?i2___wmul,i2__doprnt@width
 11898  00075A  C002  F01D         	movff	?i2___wmul+1,i2__doprnt@width+1
 11899                           
 11900                           ;doprnt.c: 601: width += *f++ - '0';
 11901  00075E  0ED0               	movlw	208
 11902  000760  6E13               	movwf	??i2__doprnt& (0+255),c
 11903  000762  0EFF               	movlw	255
 11904  000764  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 11905  000766  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 11906  00076A  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 11907  00076E                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11908  00076E  6AF8               	clrf	tblptru,c
 11909  000770                     	endif
 11910  000770                     	if	0	;tblptru may be non-zero
 11911  000770                     	endif
 11912  000770  0008               	tblrd		*
 11913  000772  50F5               	movf	tablat,w,c
 11914  000774  6E15               	movwf	(??i2__doprnt+2)& (0+255),c
 11915  000776  6A16               	clrf	(??i2__doprnt+3)& (0+255),c
 11916  000778  5013               	movf	??i2__doprnt,w,c
 11917  00077A  2615               	addwf	??i2__doprnt+2,f,c
 11918  00077C  5014               	movf	??i2__doprnt+1,w,c
 11919  00077E  2216               	addwfc	??i2__doprnt+3,f,c
 11920  000780  5015               	movf	??i2__doprnt+2,w,c
 11921  000782  261C               	addwf	i2__doprnt@width,f,c
 11922  000784  5016               	movf	??i2__doprnt+3,w,c
 11923  000786  221D               	addwfc	i2__doprnt@width+1,f,c
 11924  000788  4A0F               	infsnz	i2__doprnt@f,f,c
 11925  00078A  2A10               	incf	i2__doprnt@f+1,f,c
 11926                           
 11927                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11928  00078C  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 11929  000790  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 11930  000794                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11931  000794  6AF8               	clrf	tblptru,c
 11932  000796                     	endif
 11933  000796                     	if	0	;tblptru may be non-zero
 11934  000796                     	endif
 11935  000796  0008               	tblrd		*
 11936  000798  50F5               	movf	tablat,w,c
 11937  00079A  ECF9  F017         	call	i2_isdigit
 11938  00079E  A0D8               	btfss	status,0,c
 11939  0007A0  D003               	goto	i2l7761
 11940  0007A2  D7CF               	goto	i2l7749
 11941  0007A4                     i2l7757:
 11942                           
 11943                           ;doprnt.c: 721: flag |= 0x80;
 11944  0007A4  8E1B               	bsf	i2__doprnt@flag,7,c
 11945                           
 11946                           ;doprnt.c: 723: break;
 11947  0007A6  D018               	goto	i2l548
 11948  0007A8                     i2l7761:
 11949  0007A8  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 11950  0007AC  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 11951  0007B0  4A0F               	infsnz	i2__doprnt@f,f,c
 11952  0007B2  2A10               	incf	i2__doprnt@f+1,f,c
 11953  0007B4                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 11954  0007B4  6AF8               	clrf	tblptru,c
 11955  0007B6                     	endif
 11956  0007B6                     	if	0	;tblptru may be non-zero
 11957  0007B6                     	endif
 11958  0007B6  0008               	tblrd		*
 11959  0007B8  CFF5 F01E          	movff	tablat,i2__doprnt@c
 11960  0007BC  501E               	movf	i2__doprnt@c,w,c
 11961                           
 11962                           ; Switch size 1, requested type "space"
 11963                           ; Number of cases is 4, Range of values is 0 to 120
 11964                           ; switch strategies available:
 11965                           ; Name         Instructions Cycles
 11966                           ; simple_byte           13     7 (average)
 11967                           ;	Chosen strategy is simple_byte
 11968  0007BE  0A00               	xorlw	0	; case 0
 11969  0007C0  B4D8               	btfsc	status,2,c
 11970  0007C2  D233               	goto	i2l7887
 11971  0007C4  0A64               	xorlw	100	; case 100
 11972  0007C6  B4D8               	btfsc	status,2,c
 11973  0007C8  D007               	goto	i2l548
 11974  0007CA  0A0D               	xorlw	13	; case 105
 11975  0007CC  B4D8               	btfsc	status,2,c
 11976  0007CE  D004               	goto	i2l548
 11977  0007D0  0A11               	xorlw	17	; case 120
 11978  0007D2  B4D8               	btfsc	status,2,c
 11979  0007D4  D7E7               	goto	i2l7757
 11980  0007D6  D21C               	goto	i2l7885
 11981  0007D8                     i2l548:
 11982                           
 11983                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 11984  0007D8  BE1B               	btfsc	i2__doprnt@flag,7,c
 11985  0007DA  D01D               	goto	i2l7771
 11986                           
 11987                           ;doprnt.c: 1253: {
 11988                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11989  0007DC  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 11990  0007E0  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 11991  0007E4  CFDF F013          	movff	indf2,??i2__doprnt
 11992  0007E8  0E02               	movlw	2
 11993  0007EA  26DE               	addwf	postinc2,f,c
 11994  0007EC  CFDF F014          	movff	indf2,??i2__doprnt+1
 11995  0007F0  0E00               	movlw	0
 11996  0007F2  22DD               	addwfc	postdec2,f,c
 11997  0007F4  C013  FFD9         	movff	??i2__doprnt,fsr2l
 11998  0007F8  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 11999  0007FC  CFDE F019          	movff	postinc2,i2__doprnt@val
 12000  000800  CFDD F01A          	movff	postdec2,i2__doprnt@val+1
 12001                           
 12002                           ;doprnt.c: 1261: if((int)val < 0) {
 12003  000804  AE1A               	btfss	i2__doprnt@val+1,7,c
 12004  000806  D052               	goto	i2l7803
 12005                           
 12006                           ;doprnt.c: 1262: flag |= 0x03;
 12007  000808  0E03               	movlw	3
 12008  00080A  121B               	iorwf	i2__doprnt@flag,f,c
 12009                           
 12010                           ;doprnt.c: 1263: val = -val;
 12011  00080C  6C19               	negf	i2__doprnt@val,c
 12012  00080E  1E1A               	comf	i2__doprnt@val+1,f,c
 12013  000810  B0D8               	btfsc	status,0,c
 12014  000812  2A1A               	incf	i2__doprnt@val+1,f,c
 12015                           
 12016                           ;doprnt.c: 1264: }
 12017                           ;doprnt.c: 1266: }
 12018  000814  D04B               	goto	i2l7803
 12019  000816                     i2l7771:
 12020                           
 12021                           ;doprnt.c: 1268: else
 12022                           ;doprnt.c: 1273: {
 12023                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12024  000816  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 12025  00081A  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 12026  00081E  CFDF F013          	movff	indf2,??i2__doprnt
 12027  000822  0E02               	movlw	2
 12028  000824  26DE               	addwf	postinc2,f,c
 12029  000826  CFDF F014          	movff	indf2,??i2__doprnt+1
 12030  00082A  0E00               	movlw	0
 12031  00082C  22DD               	addwfc	postdec2,f,c
 12032  00082E  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12033  000832  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12034  000836  CFDE F019          	movff	postinc2,i2__doprnt@val
 12035  00083A  CFDD F01A          	movff	postdec2,i2__doprnt@val+1
 12036                           
 12037                           ;doprnt.c: 1287: }
 12038                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 12039  00083E  D036               	goto	i2l7803
 12040  000840                     i2l7773:
 12041                           
 12042                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12043  000840  0E01               	movlw	1
 12044  000842  6E1E               	movwf	i2__doprnt@c,c
 12045  000844                     i2l7775:
 12046  000844  0E05               	movlw	5
 12047  000846  181E               	xorwf	i2__doprnt@c,w,c
 12048  000848  B4D8               	btfsc	status,2,c
 12049  00084A  D038               	goto	i2l7805
 12050                           
 12051                           ;doprnt.c: 1306: if(val < dpowers[c])
 12052  00084C  501E               	movf	i2__doprnt@c,w,c
 12053  00084E  0D02               	mullw	2
 12054  000850  0E3A               	movlw	low _dpowers
 12055  000852  24F3               	addwf	prodl,w,c
 12056  000854  6EF6               	movwf	tblptrl,c
 12057  000856  0EFE               	movlw	high _dpowers
 12058  000858  20F4               	addwfc	prodh,w,c
 12059  00085A  6EF7               	movwf	tblptrh,c
 12060  00085C                     	if	1	;There are 3 active tblptr bytes
 12061  00085C  6AF8               	clrf	tblptru,c
 12062  00085E  0E00               	movlw	low (__mediumconst shr (0+16))
 12063  000860  22F8               	addwfc	tblptru,f,c
 12064  000862                     	endif
 12065  000862  0009               	tblrd		*+
 12066  000864  50F5               	movf	tablat,w,c
 12067  000866  5C19               	subwf	i2__doprnt@val,w,c
 12068  000868  0009               	tblrd		*+
 12069  00086A  50F5               	movf	tablat,w,c
 12070  00086C  581A               	subwfb	i2__doprnt@val+1,w,c
 12071  00086E  A0D8               	btfss	status,0,c
 12072  000870  D025               	goto	i2l7805
 12073                           
 12074                           ;doprnt.c: 1307: break;
 12075  000872  2A1E               	incf	i2__doprnt@c,f,c
 12076  000874  D7E7               	goto	i2l7775
 12077  000876                     i2l7787:
 12078                           
 12079                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 12080  000876  0E01               	movlw	1
 12081  000878  6E1E               	movwf	i2__doprnt@c,c
 12082  00087A                     i2l7789:
 12083  00087A  0E04               	movlw	4
 12084  00087C  181E               	xorwf	i2__doprnt@c,w,c
 12085  00087E  B4D8               	btfsc	status,2,c
 12086  000880  D01D               	goto	i2l7805
 12087                           
 12088                           ;doprnt.c: 1317: if(val < hexpowers[c])
 12089  000882  501E               	movf	i2__doprnt@c,w,c
 12090  000884  0D02               	mullw	2
 12091  000886  0E44               	movlw	low _hexpowers
 12092  000888  24F3               	addwf	prodl,w,c
 12093  00088A  6EF6               	movwf	tblptrl,c
 12094  00088C  0EFE               	movlw	high _hexpowers
 12095  00088E  20F4               	addwfc	prodh,w,c
 12096  000890  6EF7               	movwf	tblptrh,c
 12097  000892                     	if	1	;There are 3 active tblptr bytes
 12098  000892  6AF8               	clrf	tblptru,c
 12099  000894  0E00               	movlw	low (__mediumconst shr (0+16))
 12100  000896  22F8               	addwfc	tblptru,f,c
 12101  000898                     	endif
 12102  000898  0009               	tblrd		*+
 12103  00089A  50F5               	movf	tablat,w,c
 12104  00089C  5C19               	subwf	i2__doprnt@val,w,c
 12105  00089E  0009               	tblrd		*+
 12106  0008A0  50F5               	movf	tablat,w,c
 12107  0008A2  581A               	subwfb	i2__doprnt@val+1,w,c
 12108  0008A4  A0D8               	btfss	status,0,c
 12109  0008A6  D00A               	goto	i2l7805
 12110                           
 12111                           ;doprnt.c: 1318: break;
 12112  0008A8  2A1E               	incf	i2__doprnt@c,f,c
 12113  0008AA  D7E7               	goto	i2l7789
 12114  0008AC                     i2l7803:
 12115  0008AC  501B               	movf	i2__doprnt@flag,w,c
 12116  0008AE  0B80               	andlw	128
 12117                           
 12118                           ; Switch size 1, requested type "space"
 12119                           ; Number of cases is 2, Range of values is 0 to 128
 12120                           ; switch strategies available:
 12121                           ; Name         Instructions Cycles
 12122                           ; simple_byte            7     4 (average)
 12123                           ;	Chosen strategy is simple_byte
 12124  0008B0  0A00               	xorlw	0	; case 0
 12125  0008B2  B4D8               	btfsc	status,2,c
 12126  0008B4  D7C5               	goto	i2l7773
 12127  0008B6  0A80               	xorlw	128	; case 128
 12128  0008B8  B4D8               	btfsc	status,2,c
 12129  0008BA  D7DD               	goto	i2l7787
 12130  0008BC                     i2l7805:
 12131                           
 12132                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12133  0008BC  501C               	movf	i2__doprnt@width,w,c
 12134  0008BE  101D               	iorwf	i2__doprnt@width+1,w,c
 12135  0008C0  B4D8               	btfsc	status,2,c
 12136  0008C2  D009               	goto	i2l7811
 12137  0008C4  C01B  F013         	movff	i2__doprnt@flag,??i2__doprnt
 12138  0008C8  0E03               	movlw	3
 12139  0008CA  1613               	andwf	??i2__doprnt,f,c
 12140  0008CC  B4D8               	btfsc	status,2,c
 12141  0008CE  D003               	goto	i2l7811
 12142                           
 12143                           ;doprnt.c: 1346: width--;
 12144  0008D0  061C               	decf	i2__doprnt@width,f,c
 12145  0008D2  A0D8               	btfss	status,0,c
 12146  0008D4  061D               	decf	i2__doprnt@width+1,f,c
 12147  0008D6                     i2l7811:
 12148                           
 12149                           ;doprnt.c: 1381: if(width > c)
 12150  0008D6  0E80               	movlw	128
 12151  0008D8  BE1E               	btfsc	i2__doprnt@c,7,c
 12152  0008DA  0E7F               	movlw	127
 12153  0008DC  6E13               	movwf	??i2__doprnt& (0+255),c
 12154  0008DE  501C               	movf	i2__doprnt@width,w,c
 12155  0008E0  5C1E               	subwf	i2__doprnt@c,w,c
 12156  0008E2  501D               	movf	i2__doprnt@width+1,w,c
 12157  0008E4  0A80               	xorlw	128
 12158  0008E6  5813               	subwfb	??i2__doprnt& (0+255),w,c
 12159  0008E8  B0D8               	btfsc	status,0,c
 12160  0008EA  D007               	goto	i2l7815
 12161                           
 12162                           ;doprnt.c: 1382: width -= c;
 12163  0008EC  501E               	movf	i2__doprnt@c,w,c
 12164  0008EE  5E1C               	subwf	i2__doprnt@width,f,c
 12165  0008F0  0E00               	movlw	0
 12166  0008F2  BE1E               	btfsc	i2__doprnt@c,7,c
 12167  0008F4  0EFF               	movlw	255
 12168  0008F6  5A1D               	subwfb	i2__doprnt@width+1,f,c
 12169  0008F8  D004               	goto	i2l7817
 12170  0008FA                     i2l7815:
 12171                           
 12172                           ;doprnt.c: 1383: else
 12173                           ;doprnt.c: 1384: width = 0;
 12174  0008FA  0E00               	movlw	0
 12175  0008FC  6E1D               	movwf	i2__doprnt@width+1,c
 12176  0008FE  0E00               	movlw	0
 12177  000900  6E1C               	movwf	i2__doprnt@width,c
 12178  000902                     i2l7817:
 12179                           
 12180                           ;doprnt.c: 1387: if(flag & 0x04) {
 12181  000902  A41B               	btfss	i2__doprnt@flag,2,c
 12182  000904  D078               	goto	i2l7841
 12183                           
 12184                           ;doprnt.c: 1392: if(flag & 0x03)
 12185  000906  C01B  F013         	movff	i2__doprnt@flag,??i2__doprnt
 12186  00090A  0E03               	movlw	3
 12187  00090C  1613               	andwf	??i2__doprnt,f,c
 12188  00090E  B4D8               	btfsc	status,2,c
 12189  000910  D035               	goto	i2l7829
 12190                           
 12191                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 12192  000912  EE20 F002          	lfsr	2,2
 12193  000916  500D               	movf	i2__doprnt@pb,w,c
 12194  000918  26D9               	addwf	fsr2l,f,c
 12195  00091A  500E               	movf	i2__doprnt@pb+1,w,c
 12196  00091C  22DA               	addwfc	fsr2h,f,c
 12197  00091E  50DE               	movf	postinc2,w,c
 12198  000920  10DE               	iorwf	postinc2,w,c
 12199  000922  B4D8               	btfsc	status,2,c
 12200  000924  D016               	goto	i2l7825
 12201  000926  EE20 F002          	lfsr	2,2
 12202  00092A  500D               	movf	i2__doprnt@pb,w,c
 12203  00092C  26D9               	addwf	fsr2l,f,c
 12204  00092E  500E               	movf	i2__doprnt@pb+1,w,c
 12205  000930  22DA               	addwfc	fsr2h,f,c
 12206  000932  CFDE F013          	movff	postinc2,??i2__doprnt
 12207  000936  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12208  00093A  D801               	call	i2u827_48
 12209  00093C  D01F               	goto	i2l7829
 12210  00093E                     i2u827_48:
 12211  00093E  0005               	push	
 12212  000940  6EFA               	movwf	pclath,c
 12213  000942  5013               	movf	??i2__doprnt,w,c
 12214  000944  6EFD               	movwf	tosl,c
 12215  000946  5014               	movf	??i2__doprnt+1,w,c
 12216  000948  6EFE               	movwf	tosh,c
 12217  00094A  6AFF               	clrf	tosu,c
 12218  00094C  50FA               	movf	pclath,w,c
 12219  00094E  0E2D               	movlw	45
 12220  000950  0012               	return		;indir
 12221  000952                     i2l7825:
 12222  000952  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12223  000956  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12224  00095A  CFDE F013          	movff	postinc2,??i2__doprnt
 12225  00095E  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12226  000962  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12227  000966  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12228  00096A  0E2D               	movlw	45
 12229  00096C  6EDF               	movwf	indf2,c
 12230  00096E  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12231  000972  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12232  000976  2ADE               	incf	postinc2,f,c
 12233  000978  0E00               	movlw	0
 12234  00097A  22DD               	addwfc	postdec2,f,c
 12235  00097C                     i2l7829:
 12236                           
 12237                           ;doprnt.c: 1415: if(width)
 12238  00097C  501C               	movf	i2__doprnt@width,w,c
 12239  00097E  101D               	iorwf	i2__doprnt@width+1,w,c
 12240  000980  B4D8               	btfsc	status,2,c
 12241  000982  D0B4               	goto	i2l7863
 12242                           
 12243                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 12244                           
 12245                           ;doprnt.c: 1416: do
 12246  000984  EE20 F002          	lfsr	2,2
 12247  000988  500D               	movf	i2__doprnt@pb,w,c
 12248  00098A  26D9               	addwf	fsr2l,f,c
 12249  00098C  500E               	movf	i2__doprnt@pb+1,w,c
 12250  00098E  22DA               	addwfc	fsr2h,f,c
 12251  000990  50DE               	movf	postinc2,w,c
 12252  000992  10DE               	iorwf	postinc2,w,c
 12253  000994  B4D8               	btfsc	status,2,c
 12254  000996  D016               	goto	i2l7835
 12255  000998  EE20 F002          	lfsr	2,2
 12256  00099C  500D               	movf	i2__doprnt@pb,w,c
 12257  00099E  26D9               	addwf	fsr2l,f,c
 12258  0009A0  500E               	movf	i2__doprnt@pb+1,w,c
 12259  0009A2  22DA               	addwfc	fsr2h,f,c
 12260  0009A4  CFDE F013          	movff	postinc2,??i2__doprnt
 12261  0009A8  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12262  0009AC  D801               	call	i2u830_48
 12263  0009AE  D01F               	goto	i2l7839
 12264  0009B0                     i2u830_48:
 12265  0009B0  0005               	push	
 12266  0009B2  6EFA               	movwf	pclath,c
 12267  0009B4  5013               	movf	??i2__doprnt,w,c
 12268  0009B6  6EFD               	movwf	tosl,c
 12269  0009B8  5014               	movf	??i2__doprnt+1,w,c
 12270  0009BA  6EFE               	movwf	tosh,c
 12271  0009BC  6AFF               	clrf	tosu,c
 12272  0009BE  50FA               	movf	pclath,w,c
 12273  0009C0  0E30               	movlw	48
 12274  0009C2  0012               	return		;indir
 12275  0009C4                     i2l7835:
 12276  0009C4  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12277  0009C8  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12278  0009CC  CFDE F013          	movff	postinc2,??i2__doprnt
 12279  0009D0  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12280  0009D4  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12281  0009D8  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12282  0009DC  0E30               	movlw	48
 12283  0009DE  6EDF               	movwf	indf2,c
 12284  0009E0  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12285  0009E4  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12286  0009E8  2ADE               	incf	postinc2,f,c
 12287  0009EA  0E00               	movlw	0
 12288  0009EC  22DD               	addwfc	postdec2,f,c
 12289  0009EE                     i2l7839:
 12290                           
 12291                           ;doprnt.c: 1418: while(--width);
 12292  0009EE  061C               	decf	i2__doprnt@width,f,c
 12293  0009F0  A0D8               	btfss	status,0,c
 12294  0009F2  061D               	decf	i2__doprnt@width+1,f,c
 12295  0009F4  D7C3               	goto	i2l7829
 12296  0009F6                     i2l7841:
 12297                           
 12298                           ;doprnt.c: 1422: {
 12299                           ;doprnt.c: 1424: if(width
 12300                           ;doprnt.c: 1428: )
 12301  0009F6  501C               	movf	i2__doprnt@width,w,c
 12302  0009F8  101D               	iorwf	i2__doprnt@width+1,w,c
 12303  0009FA  B4D8               	btfsc	status,2,c
 12304  0009FC  D03C               	goto	i2l7853
 12305  0009FE                     i2l7843:
 12306                           
 12307                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 12308  0009FE  EE20 F002          	lfsr	2,2
 12309  000A02  500D               	movf	i2__doprnt@pb,w,c
 12310  000A04  26D9               	addwf	fsr2l,f,c
 12311  000A06  500E               	movf	i2__doprnt@pb+1,w,c
 12312  000A08  22DA               	addwfc	fsr2h,f,c
 12313  000A0A  50DE               	movf	postinc2,w,c
 12314  000A0C  10DE               	iorwf	postinc2,w,c
 12315  000A0E  B4D8               	btfsc	status,2,c
 12316  000A10  D016               	goto	i2l7847
 12317  000A12  EE20 F002          	lfsr	2,2
 12318  000A16  500D               	movf	i2__doprnt@pb,w,c
 12319  000A18  26D9               	addwf	fsr2l,f,c
 12320  000A1A  500E               	movf	i2__doprnt@pb+1,w,c
 12321  000A1C  22DA               	addwfc	fsr2h,f,c
 12322  000A1E  CFDE F013          	movff	postinc2,??i2__doprnt
 12323  000A22  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12324  000A26  D801               	call	i2u834_48
 12325  000A28  D01F               	goto	i2l7851
 12326  000A2A                     i2u834_48:
 12327  000A2A  0005               	push	
 12328  000A2C  6EFA               	movwf	pclath,c
 12329  000A2E  5013               	movf	??i2__doprnt,w,c
 12330  000A30  6EFD               	movwf	tosl,c
 12331  000A32  5014               	movf	??i2__doprnt+1,w,c
 12332  000A34  6EFE               	movwf	tosh,c
 12333  000A36  6AFF               	clrf	tosu,c
 12334  000A38  50FA               	movf	pclath,w,c
 12335  000A3A  0E20               	movlw	32
 12336  000A3C  0012               	return		;indir
 12337  000A3E                     i2l7847:
 12338  000A3E  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12339  000A42  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12340  000A46  CFDE F013          	movff	postinc2,??i2__doprnt
 12341  000A4A  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12342  000A4E  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12343  000A52  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12344  000A56  0E20               	movlw	32
 12345  000A58  6EDF               	movwf	indf2,c
 12346  000A5A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12347  000A5E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12348  000A62  2ADE               	incf	postinc2,f,c
 12349  000A64  0E00               	movlw	0
 12350  000A66  22DD               	addwfc	postdec2,f,c
 12351  000A68                     i2l7851:
 12352                           
 12353                           ;doprnt.c: 1431: while(--width);
 12354  000A68  061C               	decf	i2__doprnt@width,f,c
 12355  000A6A  A0D8               	btfss	status,0,c
 12356  000A6C  061D               	decf	i2__doprnt@width+1,f,c
 12357  000A6E  501C               	movf	i2__doprnt@width,w,c
 12358  000A70  101D               	iorwf	i2__doprnt@width+1,w,c
 12359  000A72  A4D8               	btfss	status,2,c
 12360  000A74  D7C4               	goto	i2l7843
 12361  000A76                     i2l7853:
 12362                           
 12363                           ;doprnt.c: 1438: if(flag & 0x03)
 12364  000A76  C01B  F013         	movff	i2__doprnt@flag,??i2__doprnt
 12365  000A7A  0E03               	movlw	3
 12366  000A7C  1613               	andwf	??i2__doprnt,f,c
 12367  000A7E  B4D8               	btfsc	status,2,c
 12368  000A80  D035               	goto	i2l7863
 12369                           
 12370                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 12371  000A82  EE20 F002          	lfsr	2,2
 12372  000A86  500D               	movf	i2__doprnt@pb,w,c
 12373  000A88  26D9               	addwf	fsr2l,f,c
 12374  000A8A  500E               	movf	i2__doprnt@pb+1,w,c
 12375  000A8C  22DA               	addwfc	fsr2h,f,c
 12376  000A8E  50DE               	movf	postinc2,w,c
 12377  000A90  10DE               	iorwf	postinc2,w,c
 12378  000A92  B4D8               	btfsc	status,2,c
 12379  000A94  D016               	goto	i2l7859
 12380  000A96  EE20 F002          	lfsr	2,2
 12381  000A9A  500D               	movf	i2__doprnt@pb,w,c
 12382  000A9C  26D9               	addwf	fsr2l,f,c
 12383  000A9E  500E               	movf	i2__doprnt@pb+1,w,c
 12384  000AA0  22DA               	addwfc	fsr2h,f,c
 12385  000AA2  CFDE F013          	movff	postinc2,??i2__doprnt
 12386  000AA6  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12387  000AAA  D801               	call	i2u838_48
 12388  000AAC  D01F               	goto	i2l7863
 12389  000AAE                     i2u838_48:
 12390  000AAE  0005               	push	
 12391  000AB0  6EFA               	movwf	pclath,c
 12392  000AB2  5013               	movf	??i2__doprnt,w,c
 12393  000AB4  6EFD               	movwf	tosl,c
 12394  000AB6  5014               	movf	??i2__doprnt+1,w,c
 12395  000AB8  6EFE               	movwf	tosh,c
 12396  000ABA  6AFF               	clrf	tosu,c
 12397  000ABC  50FA               	movf	pclath,w,c
 12398  000ABE  0E2D               	movlw	45
 12399  000AC0  0012               	return		;indir
 12400  000AC2                     i2l7859:
 12401  000AC2  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12402  000AC6  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12403  000ACA  CFDE F013          	movff	postinc2,??i2__doprnt
 12404  000ACE  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12405  000AD2  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12406  000AD6  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12407  000ADA  0E2D               	movlw	45
 12408  000ADC  6EDF               	movwf	indf2,c
 12409  000ADE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12410  000AE2  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12411  000AE6  2ADE               	incf	postinc2,f,c
 12412  000AE8  0E00               	movlw	0
 12413  000AEA  22DD               	addwfc	postdec2,f,c
 12414  000AEC                     i2l7863:
 12415                           
 12416                           ;doprnt.c: 1469: }
 12417                           ;doprnt.c: 1472: prec = c;
 12418  000AEC  C01E  F018         	movff	i2__doprnt@c,i2__doprnt@prec
 12419                           
 12420                           ;doprnt.c: 1474: while(prec--) {
 12421  000AF0  D08B               	goto	i2l7883
 12422  000AF2                     i2l7865:
 12423                           
 12424                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12425  000AF2  5018               	movf	i2__doprnt@prec,w,c
 12426  000AF4  0D02               	mullw	2
 12427  000AF6  0E3A               	movlw	low _dpowers
 12428  000AF8  24F3               	addwf	prodl,w,c
 12429  000AFA  6EF6               	movwf	tblptrl,c
 12430  000AFC  0EFE               	movlw	high _dpowers
 12431  000AFE  20F4               	addwfc	prodh,w,c
 12432  000B00  6EF7               	movwf	tblptrh,c
 12433  000B02                     	if	1	;There are 3 active tblptr bytes
 12434  000B02  6AF8               	clrf	tblptru,c
 12435  000B04  0E00               	movlw	low (__mediumconst shr (0+16))
 12436  000B06  22F8               	addwfc	tblptru,f,c
 12437  000B08                     	endif
 12438  000B08  0009               	tblrd		*+
 12439  000B0A  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 12440  000B0E  000A               	tblrd		*-
 12441  000B10  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 12442  000B14  C019  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 12443  000B18  C01A  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 12444  000B1C  EC97  F015         	call	i2___lwdiv
 12445  000B20  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 12446  000B24  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 12447  000B28  0E00               	movlw	0
 12448  000B2A  6E0B               	movwf	i2___lwmod@divisor+1,c
 12449  000B2C  0E0A               	movlw	10
 12450  000B2E  6E0A               	movwf	i2___lwmod@divisor,c
 12451  000B30  EC9C  F016         	call	i2___lwmod	;wreg free
 12452  000B34  5008               	movf	?i2___lwmod,w,c
 12453  000B36  0F30               	addlw	48
 12454  000B38  6E1E               	movwf	i2__doprnt@c,c
 12455                           
 12456                           ;doprnt.c: 1491: break;
 12457  000B3A  D031               	goto	i2l7875
 12458  000B3C                     i2l7867:
 12459                           
 12460                           ;doprnt.c: 1499: {
 12461                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 12462  000B3C  C019  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 12463  000B40  C01A  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 12464  000B44  5018               	movf	i2__doprnt@prec,w,c
 12465  000B46  0D02               	mullw	2
 12466  000B48  0E44               	movlw	low _hexpowers
 12467  000B4A  24F3               	addwf	prodl,w,c
 12468  000B4C  6EF6               	movwf	tblptrl,c
 12469  000B4E  0EFE               	movlw	high _hexpowers
 12470  000B50  20F4               	addwfc	prodh,w,c
 12471  000B52  6EF7               	movwf	tblptrh,c
 12472  000B54                     	if	1	;There are 3 active tblptr bytes
 12473  000B54  6AF8               	clrf	tblptru,c
 12474  000B56  0E00               	movlw	low (__mediumconst shr (0+16))
 12475  000B58  22F8               	addwfc	tblptru,f,c
 12476  000B5A                     	endif
 12477  000B5A  0009               	tblrd		*+
 12478  000B5C  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 12479  000B60  000A               	tblrd		*-
 12480  000B62  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 12481  000B66  EC97  F015         	call	i2___lwdiv	;wreg free
 12482  000B6A  5001               	movf	?i2___lwdiv,w,c
 12483  000B6C  0B0F               	andlw	15
 12484  000B6E  6E17               	movwf	i2__doprnt@idx,c
 12485                           
 12486                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 12487  000B70  5017               	movf	i2__doprnt@idx,w,c
 12488  000B72  0D01               	mullw	1
 12489  000B74  0E78               	movlw	low STR_35
 12490  000B76  24F3               	addwf	prodl,w,c
 12491  000B78  6EF6               	movwf	tblptrl,c
 12492  000B7A  0EFE               	movlw	high STR_35
 12493  000B7C  20F4               	addwfc	prodh,w,c
 12494  000B7E  6EF7               	movwf	tblptrh,c
 12495  000B80                     	if	1	;There are 3 active tblptr bytes
 12496  000B80  6AF8               	clrf	tblptru,c
 12497  000B82  0E00               	movlw	low (__mediumconst shr (0+16))
 12498  000B84  22F8               	addwfc	tblptru,f,c
 12499  000B86                     	endif
 12500  000B86  0008               	tblrd		*
 12501  000B88  CFF5 F01E          	movff	tablat,i2__doprnt@c
 12502                           
 12503                           ;doprnt.c: 1523: }
 12504                           
 12505                           ;doprnt.c: 1508: }
 12506                           ;doprnt.c: 1510: break;
 12507  000B8C  D008               	goto	i2l7875
 12508  000B8E                     i2l7873:
 12509  000B8E  501B               	movf	i2__doprnt@flag,w,c
 12510  000B90  0B80               	andlw	128
 12511                           
 12512                           ; Switch size 1, requested type "space"
 12513                           ; Number of cases is 2, Range of values is 0 to 128
 12514                           ; switch strategies available:
 12515                           ; Name         Instructions Cycles
 12516                           ; simple_byte            7     4 (average)
 12517                           ;	Chosen strategy is simple_byte
 12518  000B92  0A00               	xorlw	0	; case 0
 12519  000B94  B4D8               	btfsc	status,2,c
 12520  000B96  D7AD               	goto	i2l7865
 12521  000B98  0A80               	xorlw	128	; case 128
 12522  000B9A  B4D8               	btfsc	status,2,c
 12523  000B9C  D7CF               	goto	i2l7867
 12524  000B9E                     i2l7875:
 12525                           
 12526                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 12527  000B9E  EE20 F002          	lfsr	2,2
 12528  000BA2  500D               	movf	i2__doprnt@pb,w,c
 12529  000BA4  26D9               	addwf	fsr2l,f,c
 12530  000BA6  500E               	movf	i2__doprnt@pb+1,w,c
 12531  000BA8  22DA               	addwfc	fsr2h,f,c
 12532  000BAA  50DE               	movf	postinc2,w,c
 12533  000BAC  10DE               	iorwf	postinc2,w,c
 12534  000BAE  B4D8               	btfsc	status,2,c
 12535  000BB0  D016               	goto	i2l7879
 12536  000BB2  EE20 F002          	lfsr	2,2
 12537  000BB6  500D               	movf	i2__doprnt@pb,w,c
 12538  000BB8  26D9               	addwf	fsr2l,f,c
 12539  000BBA  500E               	movf	i2__doprnt@pb+1,w,c
 12540  000BBC  22DA               	addwfc	fsr2h,f,c
 12541  000BBE  CFDE F013          	movff	postinc2,??i2__doprnt
 12542  000BC2  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12543  000BC6  D801               	call	i2u840_48
 12544  000BC8  D01F               	goto	i2l7883
 12545  000BCA                     i2u840_48:
 12546  000BCA  0005               	push	
 12547  000BCC  6EFA               	movwf	pclath,c
 12548  000BCE  5013               	movf	??i2__doprnt,w,c
 12549  000BD0  6EFD               	movwf	tosl,c
 12550  000BD2  5014               	movf	??i2__doprnt+1,w,c
 12551  000BD4  6EFE               	movwf	tosh,c
 12552  000BD6  6AFF               	clrf	tosu,c
 12553  000BD8  50FA               	movf	pclath,w,c
 12554  000BDA  501E               	movf	i2__doprnt@c,w,c
 12555  000BDC  0012               	return		;indir
 12556  000BDE                     i2l7879:
 12557  000BDE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12558  000BE2  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12559  000BE6  CFDE F013          	movff	postinc2,??i2__doprnt
 12560  000BEA  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12561  000BEE  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12562  000BF2  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12563  000BF6  C01E  FFDF         	movff	i2__doprnt@c,indf2
 12564  000BFA  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12565  000BFE  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12566  000C02  2ADE               	incf	postinc2,f,c
 12567  000C04  0E00               	movlw	0
 12568  000C06  22DD               	addwfc	postdec2,f,c
 12569  000C08                     i2l7883:
 12570  000C08  0618               	decf	i2__doprnt@prec,f,c
 12571  000C0A  2818               	incf	i2__doprnt@prec,w,c
 12572  000C0C  A4D8               	btfss	status,2,c
 12573  000C0E  D7BF               	goto	i2l7873
 12574  000C10                     i2l7885:
 12575  000C10  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 12576  000C14  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 12577  000C18  4A0F               	infsnz	i2__doprnt@f,f,c
 12578  000C1A  2A10               	incf	i2__doprnt@f+1,f,c
 12579  000C1C                     	if	1	;Program memory is < 0x10000, tblptru is always zero
 12580  000C1C  6AF8               	clrf	tblptru,c
 12581  000C1E                     	endif
 12582  000C1E                     	if	0	;tblptru may be non-zero
 12583  000C1E                     	endif
 12584  000C1E  0008               	tblrd		*
 12585  000C20  CFF5 F01E          	movff	tablat,i2__doprnt@c
 12586  000C24  501E               	movf	i2__doprnt@c,w,c
 12587  000C26  A4D8               	btfss	status,2,c
 12588  000C28  D52F               	goto	i2l7727
 12589  000C2A                     i2l7887:
 12590                           
 12591                           ;doprnt.c: 1540: return 0;
 12592  000C2A  0E00               	movlw	0
 12593  000C2C  6E0E               	movwf	?i2__doprnt+1,c
 12594  000C2E  0E00               	movlw	0
 12595  000C30  6E0D               	movwf	?i2__doprnt,c
 12596  000C32  0012               	return	
 12597  000C34                     __end_ofi2__doprnt:
 12598                           	opt stack 0
 12599                           tosu	equ	0xFFF
 12600                           tosh	equ	0xFFE
 12601                           tosl	equ	0xFFD
 12602                           pclatu	equ	0xFFB
 12603                           pclath	equ	0xFFA
 12604                           tblptru	equ	0xFF8
 12605                           tblptrh	equ	0xFF7
 12606                           tblptrl	equ	0xFF6
 12607                           tablat	equ	0xFF5
 12608                           prodh	equ	0xFF4
 12609                           prodl	equ	0xFF3
 12610                           intcon	equ	0xFF2
 12611                           intcon2	equ	0xFF1
 12612                           postinc0	equ	0xFEE
 12613                           fsr0h	equ	0xFEA
 12614                           fsr0l	equ	0xFE9
 12615                           wreg	equ	0xFE8
 12616                           indf1	equ	0xFE7
 12617                           postinc1	equ	0xFE6
 12618                           postdec1	equ	0xFE5
 12619                           fsr1h	equ	0xFE2
 12620                           fsr1l	equ	0xFE1
 12621                           indf2	equ	0xFDF
 12622                           postinc2	equ	0xFDE
 12623                           postdec2	equ	0xFDD
 12624                           fsr2h	equ	0xFDA
 12625                           fsr2l	equ	0xFD9
 12626                           status	equ	0xFD8
 12627                           
 12628 ;; *************** function i2_putch *****************
 12629 ;; Defined at:
 12630 ;;		line 30 in file "lcd.c"
 12631 ;; Parameters:    Size  Location     Type
 12632 ;;  data            1    wreg     unsigned char 
 12633 ;; Auto vars:     Size  Location     Type
 12634 ;;  data            1    2[COMRAM] unsigned char 
 12635 ;; Return value:  Size  Location     Type
 12636 ;;                  1    wreg      void 
 12637 ;; Registers used:
 12638 ;;		wreg, status,2, status,0, cstack
 12639 ;; Tracked objects:
 12640 ;;		On entry : 0/0
 12641 ;;		On exit  : 0/0
 12642 ;;		Unchanged: 0/0
 12643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12645 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12647 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12648 ;;Total ram usage:        1 bytes
 12649 ;; Hardware stack levels used:    1
 12650 ;; Hardware stack levels required when called:    1
 12651 ;; This function calls:
 12652 ;;		i2_lcdNibble
 12653 ;; This function is called by:
 12654 ;;		i2_printf
 12655 ;; This function uses a non-reentrant model
 12656 ;;
 12657                           
 12658                           	psect	text62
 12659  0030A8                     __ptext62:
 12660                           	opt stack 0
 12661  0030A8                     i2_putch:
 12662                           	opt stack 16
 12663                           
 12664                           ;incstack = 0
 12665                           ;i2putch@data stored from wreg
 12666  0030A8  6E03               	movwf	i2putch@data,c
 12667                           
 12668                           ;lcd.c: 31: LATDbits.LATD2 = 1;
 12669  0030AA  848C               	bsf	3980,2,c	;volatile
 12670                           
 12671                           ;lcd.c: 32: lcdNibble(data);
 12672  0030AC  5003               	movf	i2putch@data,w,c
 12673  0030AE  EC43  F015         	call	i2_lcdNibble
 12674  0030B2  0012               	return		;funcret
 12675  0030B4                     __end_ofi2_putch:
 12676                           	opt stack 0
 12677                           tosu	equ	0xFFF
 12678                           tosh	equ	0xFFE
 12679                           tosl	equ	0xFFD
 12680                           pclatu	equ	0xFFB
 12681                           pclath	equ	0xFFA
 12682                           tblptru	equ	0xFF8
 12683                           tblptrh	equ	0xFF7
 12684                           tblptrl	equ	0xFF6
 12685                           tablat	equ	0xFF5
 12686                           prodh	equ	0xFF4
 12687                           prodl	equ	0xFF3
 12688                           intcon	equ	0xFF2
 12689                           intcon2	equ	0xFF1
 12690                           postinc0	equ	0xFEE
 12691                           fsr0h	equ	0xFEA
 12692                           fsr0l	equ	0xFE9
 12693                           wreg	equ	0xFE8
 12694                           indf1	equ	0xFE7
 12695                           postinc1	equ	0xFE6
 12696                           postdec1	equ	0xFE5
 12697                           fsr1h	equ	0xFE2
 12698                           fsr1l	equ	0xFE1
 12699                           indf2	equ	0xFDF
 12700                           postinc2	equ	0xFDE
 12701                           postdec2	equ	0xFDD
 12702                           fsr2h	equ	0xFDA
 12703                           fsr2l	equ	0xFD9
 12704                           status	equ	0xFD8
 12705                           
 12706 ;; *************** function i2_isdigit *****************
 12707 ;; Defined at:
 12708 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 12709 ;; Parameters:    Size  Location     Type
 12710 ;;  c               1    wreg     unsigned char 
 12711 ;; Auto vars:     Size  Location     Type
 12712 ;;  c               1    2[COMRAM] unsigned char 
 12713 ;; Return value:  Size  Location     Type
 12714 ;;		None               void
 12715 ;; Registers used:
 12716 ;;		wreg, status,2, status,0
 12717 ;; Tracked objects:
 12718 ;;		On entry : 0/0
 12719 ;;		On exit  : 0/0
 12720 ;;		Unchanged: 0/0
 12721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12723 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12724 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12725 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12726 ;;Total ram usage:        3 bytes
 12727 ;; Hardware stack levels used:    1
 12728 ;; This function calls:
 12729 ;;		Nothing
 12730 ;; This function is called by:
 12731 ;;		i2__doprnt
 12732 ;; This function uses a non-reentrant model
 12733 ;;
 12734                           
 12735                           	psect	text63
 12736  002FF2                     __ptext63:
 12737                           	opt stack 0
 12738  002FF2                     i2_isdigit:
 12739                           	opt stack 17
 12740                           
 12741                           ;incstack = 0
 12742                           ;i2isdigit@c stored from wreg
 12743  002FF2  6E03               	movwf	i2isdigit@c,c
 12744  002FF4  0E00               	movlw	0
 12745  002FF6  6E02               	movwf	i2_isdigit$1284,c
 12746  002FF8  0E3A               	movlw	58
 12747  002FFA  6003               	cpfslt	i2isdigit@c,c
 12748  002FFC  D005               	goto	i2l3539
 12749  002FFE  0E2F               	movlw	47
 12750  003000  6403               	cpfsgt	i2isdigit@c,c
 12751  003002  D002               	goto	i2l3539
 12752  003004  0E01               	movlw	1
 12753  003006  6E02               	movwf	i2_isdigit$1284,c
 12754  003008                     i2l3539:
 12755  003008  C002  F001         	movff	i2_isdigit$1284,??i2_isdigit
 12756  00300C  3001               	rrcf	??i2_isdigit,w,c
 12757  00300E  0012               	return	
 12758  003010                     __end_ofi2_isdigit:
 12759                           	opt stack 0
 12760                           tosu	equ	0xFFF
 12761                           tosh	equ	0xFFE
 12762                           tosl	equ	0xFFD
 12763                           pclatu	equ	0xFFB
 12764                           pclath	equ	0xFFA
 12765                           tblptru	equ	0xFF8
 12766                           tblptrh	equ	0xFF7
 12767                           tblptrl	equ	0xFF6
 12768                           tablat	equ	0xFF5
 12769                           prodh	equ	0xFF4
 12770                           prodl	equ	0xFF3
 12771                           intcon	equ	0xFF2
 12772                           intcon2	equ	0xFF1
 12773                           postinc0	equ	0xFEE
 12774                           fsr0h	equ	0xFEA
 12775                           fsr0l	equ	0xFE9
 12776                           wreg	equ	0xFE8
 12777                           indf1	equ	0xFE7
 12778                           postinc1	equ	0xFE6
 12779                           postdec1	equ	0xFE5
 12780                           fsr1h	equ	0xFE2
 12781                           fsr1l	equ	0xFE1
 12782                           indf2	equ	0xFDF
 12783                           postinc2	equ	0xFDE
 12784                           postdec2	equ	0xFDD
 12785                           fsr2h	equ	0xFDA
 12786                           fsr2l	equ	0xFD9
 12787                           status	equ	0xFD8
 12788                           
 12789 ;; *************** function i2___wmul *****************
 12790 ;; Defined at:
 12791 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 12792 ;; Parameters:    Size  Location     Type
 12793 ;;  multiplier      2    0[COMRAM] unsigned int 
 12794 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12795 ;; Auto vars:     Size  Location     Type
 12796 ;;  __wmul          2    4[COMRAM] unsigned int 
 12797 ;; Return value:  Size  Location     Type
 12798 ;;                  2    0[COMRAM] unsigned int 
 12799 ;; Registers used:
 12800 ;;		wreg, status,2, status,0, prodl, prodh
 12801 ;; Tracked objects:
 12802 ;;		On entry : 0/0
 12803 ;;		On exit  : 0/0
 12804 ;;		Unchanged: 0/0
 12805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12806 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12807 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12809 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12810 ;;Total ram usage:        6 bytes
 12811 ;; Hardware stack levels used:    1
 12812 ;; This function calls:
 12813 ;;		Nothing
 12814 ;; This function is called by:
 12815 ;;		i2__doprnt
 12816 ;; This function uses a non-reentrant model
 12817 ;;
 12818                           
 12819                           	psect	text64
 12820  002FAA                     __ptext64:
 12821                           	opt stack 0
 12822  002FAA                     i2___wmul:
 12823                           	opt stack 17
 12824                           
 12825                           ;incstack = 0
 12826  002FAA  5001               	movf	i2___wmul@multiplier,w,c
 12827  002FAC  0203               	mulwf	i2___wmul@multiplicand,c
 12828  002FAE  CFF3 F005          	movff	prodl,i2___wmul@product
 12829  002FB2  CFF4 F006          	movff	prodh,i2___wmul@product+1
 12830  002FB6  5001               	movf	i2___wmul@multiplier,w,c
 12831  002FB8  0204               	mulwf	i2___wmul@multiplicand+1,c
 12832  002FBA  50F3               	movf	prodl,w,c
 12833  002FBC  2606               	addwf	i2___wmul@product+1,f,c
 12834  002FBE  5002               	movf	i2___wmul@multiplier+1,w,c
 12835  002FC0  0203               	mulwf	i2___wmul@multiplicand,c
 12836  002FC2  50F3               	movf	prodl,w,c
 12837  002FC4  2606               	addwf	i2___wmul@product+1,f,c
 12838  002FC6  C005  F001         	movff	i2___wmul@product,?i2___wmul
 12839  002FCA  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 12840  002FCE  0012               	return	
 12841  002FD0                     __end_ofi2___wmul:
 12842                           	opt stack 0
 12843                           tosu	equ	0xFFF
 12844                           tosh	equ	0xFFE
 12845                           tosl	equ	0xFFD
 12846                           pclatu	equ	0xFFB
 12847                           pclath	equ	0xFFA
 12848                           tblptru	equ	0xFF8
 12849                           tblptrh	equ	0xFF7
 12850                           tblptrl	equ	0xFF6
 12851                           tablat	equ	0xFF5
 12852                           prodh	equ	0xFF4
 12853                           prodl	equ	0xFF3
 12854                           intcon	equ	0xFF2
 12855                           intcon2	equ	0xFF1
 12856                           postinc0	equ	0xFEE
 12857                           fsr0h	equ	0xFEA
 12858                           fsr0l	equ	0xFE9
 12859                           wreg	equ	0xFE8
 12860                           indf1	equ	0xFE7
 12861                           postinc1	equ	0xFE6
 12862                           postdec1	equ	0xFE5
 12863                           fsr1h	equ	0xFE2
 12864                           fsr1l	equ	0xFE1
 12865                           indf2	equ	0xFDF
 12866                           postinc2	equ	0xFDE
 12867                           postdec2	equ	0xFDD
 12868                           fsr2h	equ	0xFDA
 12869                           fsr2l	equ	0xFD9
 12870                           status	equ	0xFD8
 12871                           
 12872 ;; *************** function i2___lwmod *****************
 12873 ;; Defined at:
 12874 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 12875 ;; Parameters:    Size  Location     Type
 12876 ;;  dividend        2    7[COMRAM] unsigned int 
 12877 ;;  divisor         2    9[COMRAM] unsigned int 
 12878 ;; Auto vars:     Size  Location     Type
 12879 ;;  __lwmod         1   11[COMRAM] unsigned char 
 12880 ;; Return value:  Size  Location     Type
 12881 ;;                  2    7[COMRAM] unsigned int 
 12882 ;; Registers used:
 12883 ;;		wreg, status,2, status,0
 12884 ;; Tracked objects:
 12885 ;;		On entry : 0/0
 12886 ;;		On exit  : 0/0
 12887 ;;		Unchanged: 0/0
 12888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12889 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12890 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12892 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12893 ;;Total ram usage:        5 bytes
 12894 ;; Hardware stack levels used:    1
 12895 ;; This function calls:
 12896 ;;		Nothing
 12897 ;; This function is called by:
 12898 ;;		i2__doprnt
 12899 ;; This function uses a non-reentrant model
 12900 ;;
 12901                           
 12902                           	psect	text65
 12903  002D38                     __ptext65:
 12904                           	opt stack 0
 12905  002D38                     i2___lwmod:
 12906                           	opt stack 17
 12907                           
 12908                           ;incstack = 0
 12909  002D38  500A               	movf	i2___lwmod@divisor,w,c
 12910  002D3A  100B               	iorwf	i2___lwmod@divisor+1,w,c
 12911  002D3C  B4D8               	btfsc	status,2,c
 12912  002D3E  D018               	goto	i2l1028
 12913  002D40  0E01               	movlw	1
 12914  002D42  6E0C               	movwf	i2___lwmod@counter,c
 12915  002D44  D004               	goto	i2l3571
 12916  002D46                     i2l3569:
 12917  002D46  90D8               	bcf	status,0,c
 12918  002D48  360A               	rlcf	i2___lwmod@divisor,f,c
 12919  002D4A  360B               	rlcf	i2___lwmod@divisor+1,f,c
 12920  002D4C  2A0C               	incf	i2___lwmod@counter,f,c
 12921  002D4E                     i2l3571:
 12922  002D4E  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 12923  002D50  D7FA               	goto	i2l3569
 12924  002D52                     i2l3573:
 12925  002D52  500A               	movf	i2___lwmod@divisor,w,c
 12926  002D54  5C08               	subwf	i2___lwmod@dividend,w,c
 12927  002D56  500B               	movf	i2___lwmod@divisor+1,w,c
 12928  002D58  5809               	subwfb	i2___lwmod@dividend+1,w,c
 12929  002D5A  A0D8               	btfss	status,0,c
 12930  002D5C  D004               	goto	i2l3577
 12931  002D5E  500A               	movf	i2___lwmod@divisor,w,c
 12932  002D60  5E08               	subwf	i2___lwmod@dividend,f,c
 12933  002D62  500B               	movf	i2___lwmod@divisor+1,w,c
 12934  002D64  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 12935  002D66                     i2l3577:
 12936  002D66  90D8               	bcf	status,0,c
 12937  002D68  320B               	rrcf	i2___lwmod@divisor+1,f,c
 12938  002D6A  320A               	rrcf	i2___lwmod@divisor,f,c
 12939  002D6C  2E0C               	decfsz	i2___lwmod@counter,f,c
 12940  002D6E  D7F1               	goto	i2l3573
 12941  002D70                     i2l1028:
 12942  002D70  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 12943  002D74  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 12944  002D78  0012               	return		;funcret
 12945  002D7A                     __end_ofi2___lwmod:
 12946                           	opt stack 0
 12947                           tosu	equ	0xFFF
 12948                           tosh	equ	0xFFE
 12949                           tosl	equ	0xFFD
 12950                           pclatu	equ	0xFFB
 12951                           pclath	equ	0xFFA
 12952                           tblptru	equ	0xFF8
 12953                           tblptrh	equ	0xFF7
 12954                           tblptrl	equ	0xFF6
 12955                           tablat	equ	0xFF5
 12956                           prodh	equ	0xFF4
 12957                           prodl	equ	0xFF3
 12958                           intcon	equ	0xFF2
 12959                           intcon2	equ	0xFF1
 12960                           postinc0	equ	0xFEE
 12961                           fsr0h	equ	0xFEA
 12962                           fsr0l	equ	0xFE9
 12963                           wreg	equ	0xFE8
 12964                           indf1	equ	0xFE7
 12965                           postinc1	equ	0xFE6
 12966                           postdec1	equ	0xFE5
 12967                           fsr1h	equ	0xFE2
 12968                           fsr1l	equ	0xFE1
 12969                           indf2	equ	0xFDF
 12970                           postinc2	equ	0xFDE
 12971                           postdec2	equ	0xFDD
 12972                           fsr2h	equ	0xFDA
 12973                           fsr2l	equ	0xFD9
 12974                           status	equ	0xFD8
 12975                           
 12976 ;; *************** function i2___lwdiv *****************
 12977 ;; Defined at:
 12978 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 12979 ;; Parameters:    Size  Location     Type
 12980 ;;  dividend        2    0[COMRAM] unsigned int 
 12981 ;;  divisor         2    2[COMRAM] unsigned int 
 12982 ;; Auto vars:     Size  Location     Type
 12983 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 12984 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 12985 ;; Return value:  Size  Location     Type
 12986 ;;                  2    0[COMRAM] unsigned int 
 12987 ;; Registers used:
 12988 ;;		wreg, status,2, status,0
 12989 ;; Tracked objects:
 12990 ;;		On entry : 0/0
 12991 ;;		On exit  : 0/0
 12992 ;;		Unchanged: 0/0
 12993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12994 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12995 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12997 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12998 ;;Total ram usage:        7 bytes
 12999 ;; Hardware stack levels used:    1
 13000 ;; This function calls:
 13001 ;;		Nothing
 13002 ;; This function is called by:
 13003 ;;		i2__doprnt
 13004 ;; This function uses a non-reentrant model
 13005 ;;
 13006                           
 13007                           	psect	text66
 13008  002B2E                     __ptext66:
 13009                           	opt stack 0
 13010  002B2E                     i2___lwdiv:
 13011                           	opt stack 17
 13012                           
 13013                           ;incstack = 0
 13014  002B2E  0E00               	movlw	0
 13015  002B30  6E06               	movwf	i2___lwdiv@quotient+1,c
 13016  002B32  0E00               	movlw	0
 13017  002B34  6E05               	movwf	i2___lwdiv@quotient,c
 13018  002B36  5003               	movf	i2___lwdiv@divisor,w,c
 13019  002B38  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 13020  002B3A  B4D8               	btfsc	status,2,c
 13021  002B3C  D01C               	goto	i2l1018
 13022  002B3E  0E01               	movlw	1
 13023  002B40  6E07               	movwf	i2___lwdiv@counter,c
 13024  002B42  D004               	goto	i2l3551
 13025  002B44                     i2l3549:
 13026  002B44  90D8               	bcf	status,0,c
 13027  002B46  3603               	rlcf	i2___lwdiv@divisor,f,c
 13028  002B48  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 13029  002B4A  2A07               	incf	i2___lwdiv@counter,f,c
 13030  002B4C                     i2l3551:
 13031  002B4C  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 13032  002B4E  D7FA               	goto	i2l3549
 13033  002B50                     i2l3553:
 13034  002B50  90D8               	bcf	status,0,c
 13035  002B52  3605               	rlcf	i2___lwdiv@quotient,f,c
 13036  002B54  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 13037  002B56  5003               	movf	i2___lwdiv@divisor,w,c
 13038  002B58  5C01               	subwf	i2___lwdiv@dividend,w,c
 13039  002B5A  5004               	movf	i2___lwdiv@divisor+1,w,c
 13040  002B5C  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 13041  002B5E  A0D8               	btfss	status,0,c
 13042  002B60  D005               	goto	i2l3561
 13043  002B62  5003               	movf	i2___lwdiv@divisor,w,c
 13044  002B64  5E01               	subwf	i2___lwdiv@dividend,f,c
 13045  002B66  5004               	movf	i2___lwdiv@divisor+1,w,c
 13046  002B68  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 13047  002B6A  8005               	bsf	i2___lwdiv@quotient,0,c
 13048  002B6C                     i2l3561:
 13049  002B6C  90D8               	bcf	status,0,c
 13050  002B6E  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 13051  002B70  3203               	rrcf	i2___lwdiv@divisor,f,c
 13052  002B72  2E07               	decfsz	i2___lwdiv@counter,f,c
 13053  002B74  D7ED               	goto	i2l3553
 13054  002B76                     i2l1018:
 13055  002B76  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 13056  002B7A  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 13057  002B7E  0012               	return		;funcret
 13058  002B80                     __end_ofi2___lwdiv:
 13059                           	opt stack 0
 13060                           tosu	equ	0xFFF
 13061                           tosh	equ	0xFFE
 13062                           tosl	equ	0xFFD
 13063                           pclatu	equ	0xFFB
 13064                           pclath	equ	0xFFA
 13065                           tblptru	equ	0xFF8
 13066                           tblptrh	equ	0xFF7
 13067                           tblptrl	equ	0xFF6
 13068                           tablat	equ	0xFF5
 13069                           prodh	equ	0xFF4
 13070                           prodl	equ	0xFF3
 13071                           intcon	equ	0xFF2
 13072                           intcon2	equ	0xFF1
 13073                           postinc0	equ	0xFEE
 13074                           fsr0h	equ	0xFEA
 13075                           fsr0l	equ	0xFE9
 13076                           wreg	equ	0xFE8
 13077                           indf1	equ	0xFE7
 13078                           postinc1	equ	0xFE6
 13079                           postdec1	equ	0xFE5
 13080                           fsr1h	equ	0xFE2
 13081                           fsr1l	equ	0xFE1
 13082                           indf2	equ	0xFDF
 13083                           postinc2	equ	0xFDE
 13084                           postdec2	equ	0xFDD
 13085                           fsr2h	equ	0xFDA
 13086                           fsr2l	equ	0xFD9
 13087                           status	equ	0xFD8
 13088                           
 13089 ;; *************** function i2_lcdInst *****************
 13090 ;; Defined at:
 13091 ;;		line 25 in file "lcd.c"
 13092 ;; Parameters:    Size  Location     Type
 13093 ;;  data            1    wreg     unsigned char 
 13094 ;; Auto vars:     Size  Location     Type
 13095 ;;  data            1    2[COMRAM] unsigned char 
 13096 ;; Return value:  Size  Location     Type
 13097 ;;                  1    wreg      void 
 13098 ;; Registers used:
 13099 ;;		wreg, status,2, status,0, cstack
 13100 ;; Tracked objects:
 13101 ;;		On entry : 0/0
 13102 ;;		On exit  : 0/0
 13103 ;;		Unchanged: 0/0
 13104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13106 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13108 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13109 ;;Total ram usage:        1 bytes
 13110 ;; Hardware stack levels used:    1
 13111 ;; Hardware stack levels required when called:    1
 13112 ;; This function calls:
 13113 ;;		i2_lcdNibble
 13114 ;; This function is called by:
 13115 ;;		i2_printTime
 13116 ;; This function uses a non-reentrant model
 13117 ;;
 13118                           
 13119                           	psect	text67
 13120  0030B4                     __ptext67:
 13121                           	opt stack 0
 13122  0030B4                     i2_lcdInst:
 13123                           	opt stack 18
 13124                           
 13125                           ;incstack = 0
 13126                           ;i2lcdInst@data stored from wreg
 13127  0030B4  6E03               	movwf	i2lcdInst@data,c
 13128                           
 13129                           ;lcd.c: 26: LATDbits.LATD2 = 0;
 13130  0030B6  948C               	bcf	3980,2,c	;volatile
 13131                           
 13132                           ;lcd.c: 27: lcdNibble(data);
 13133  0030B8  5003               	movf	i2lcdInst@data,w,c
 13134  0030BA  EC43  F015         	call	i2_lcdNibble
 13135  0030BE  0012               	return		;funcret
 13136  0030C0                     __end_ofi2_lcdInst:
 13137                           	opt stack 0
 13138                           tosu	equ	0xFFF
 13139                           tosh	equ	0xFFE
 13140                           tosl	equ	0xFFD
 13141                           pclatu	equ	0xFFB
 13142                           pclath	equ	0xFFA
 13143                           tblptru	equ	0xFF8
 13144                           tblptrh	equ	0xFF7
 13145                           tblptrl	equ	0xFF6
 13146                           tablat	equ	0xFF5
 13147                           prodh	equ	0xFF4
 13148                           prodl	equ	0xFF3
 13149                           intcon	equ	0xFF2
 13150                           intcon2	equ	0xFF1
 13151                           postinc0	equ	0xFEE
 13152                           fsr0h	equ	0xFEA
 13153                           fsr0l	equ	0xFE9
 13154                           wreg	equ	0xFE8
 13155                           indf1	equ	0xFE7
 13156                           postinc1	equ	0xFE6
 13157                           postdec1	equ	0xFE5
 13158                           fsr1h	equ	0xFE2
 13159                           fsr1l	equ	0xFE1
 13160                           indf2	equ	0xFDF
 13161                           postinc2	equ	0xFDE
 13162                           postdec2	equ	0xFDD
 13163                           fsr2h	equ	0xFDA
 13164                           fsr2l	equ	0xFD9
 13165                           status	equ	0xFD8
 13166                           
 13167 ;; *************** function i2_lcdNibble *****************
 13168 ;; Defined at:
 13169 ;;		line 43 in file "lcd.c"
 13170 ;; Parameters:    Size  Location     Type
 13171 ;;  data            1    wreg     unsigned char 
 13172 ;; Auto vars:     Size  Location     Type
 13173 ;;  data            1    1[COMRAM] unsigned char 
 13174 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 13175 ;; Return value:  Size  Location     Type
 13176 ;;                  1    wreg      void 
 13177 ;; Registers used:
 13178 ;;		wreg, status,2, status,0
 13179 ;; Tracked objects:
 13180 ;;		On entry : 0/0
 13181 ;;		On exit  : 0/0
 13182 ;;		Unchanged: 0/0
 13183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13184 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13185 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13186 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13187 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13188 ;;Total ram usage:        2 bytes
 13189 ;; Hardware stack levels used:    1
 13190 ;; This function calls:
 13191 ;;		Nothing
 13192 ;; This function is called by:
 13193 ;;		i2_lcdInst
 13194 ;;		i2_putch
 13195 ;; This function uses a non-reentrant model
 13196 ;;
 13197                           
 13198                           	psect	text68
 13199  002A86                     __ptext68:
 13200                           	opt stack 0
 13201  002A86                     i2_lcdNibble:
 13202                           	opt stack 16
 13203                           
 13204                           ;incstack = 0
 13205                           ;i2lcdNibble@data stored from wreg
 13206  002A86  6E02               	movwf	i2lcdNibble@data,c
 13207                           
 13208                           ;lcd.c: 45: char temp = data & 0xF0;
 13209  002A88  5002               	movf	i2lcdNibble@data,w,c
 13210  002A8A  0BF0               	andlw	240
 13211  002A8C  6E01               	movwf	i2lcdNibble@temp,c
 13212                           
 13213                           ;lcd.c: 46: LATD = LATD & 0x0F;
 13214  002A8E  508C               	movf	3980,w,c	;volatile
 13215  002A90  0B0F               	andlw	15
 13216  002A92  6E8C               	movwf	3980,c	;volatile
 13217                           
 13218                           ;lcd.c: 47: LATD = temp | LATD;
 13219  002A94  5001               	movf	i2lcdNibble@temp,w,c
 13220  002A96  108C               	iorwf	3980,w,c	;volatile
 13221  002A98  6E8C               	movwf	3980,c	;volatile
 13222                           
 13223                           ;lcd.c: 49: LATDbits.LATD3 = 0;
 13224  002A9A  968C               	bcf	3980,3,c	;volatile
 13225                           
 13226                           ;lcd.c: 50: _delay((unsigned long)((25)*(8000000/4000000.0)));
 13227  002A9C  0E10               	movlw	16
 13228  002A9E                     i2u892_47:
 13229  002A9E  2EE8               	decfsz	wreg,f,c
 13230  002AA0  D7FE               	bra	i2u892_47
 13231  002AA2  D000               	nop2	
 13232                           
 13233                           ;lcd.c: 51: LATDbits.LATD3 = 1;
 13234  002AA4  868C               	bsf	3980,3,c	;volatile
 13235                           
 13236                           ;lcd.c: 52: _delay((unsigned long)((25)*(8000000/4000000.0)));
 13237  002AA6  0E10               	movlw	16
 13238  002AA8                     i2u893_47:
 13239  002AA8  2EE8               	decfsz	wreg,f,c
 13240  002AAA  D7FE               	bra	i2u893_47
 13241  002AAC  D000               	nop2	
 13242                           
 13243                           ;lcd.c: 54: data = data << 4;
 13244  002AAE  3802               	swapf	i2lcdNibble@data,w,c
 13245  002AB0  0BF0               	andlw	240
 13246  002AB2  6E02               	movwf	i2lcdNibble@data,c
 13247                           
 13248                           ;lcd.c: 56: temp = data & 0xF0;
 13249  002AB4  5002               	movf	i2lcdNibble@data,w,c
 13250  002AB6  0BF0               	andlw	240
 13251  002AB8  6E01               	movwf	i2lcdNibble@temp,c
 13252                           
 13253                           ;lcd.c: 57: LATD = LATD & 0x0F;
 13254  002ABA  508C               	movf	3980,w,c	;volatile
 13255  002ABC  0B0F               	andlw	15
 13256  002ABE  6E8C               	movwf	3980,c	;volatile
 13257                           
 13258                           ;lcd.c: 58: LATD = temp | LATD;
 13259  002AC0  5001               	movf	i2lcdNibble@temp,w,c
 13260  002AC2  108C               	iorwf	3980,w,c	;volatile
 13261  002AC4  6E8C               	movwf	3980,c	;volatile
 13262                           
 13263                           ;lcd.c: 60: LATDbits.LATD3 = 0;
 13264  002AC6  968C               	bcf	3980,3,c	;volatile
 13265                           
 13266                           ;lcd.c: 61: _delay((unsigned long)((25)*(8000000/4000000.0)));
 13267  002AC8  0E10               	movlw	16
 13268  002ACA                     i2u894_47:
 13269  002ACA  2EE8               	decfsz	wreg,f,c
 13270  002ACC  D7FE               	bra	i2u894_47
 13271  002ACE  D000               	nop2	
 13272                           
 13273                           ;lcd.c: 62: LATDbits.LATD3 = 1;
 13274  002AD0  868C               	bsf	3980,3,c	;volatile
 13275                           
 13276                           ;lcd.c: 63: _delay((unsigned long)((25)*(8000000/4000000.0)));
 13277  002AD2  0E10               	movlw	16
 13278  002AD4                     i2u895_47:
 13279  002AD4  2EE8               	decfsz	wreg,f,c
 13280  002AD6  D7FE               	bra	i2u895_47
 13281  002AD8  D000               	nop2	
 13282  002ADA  0012               	return		;funcret
 13283  002ADC                     __end_ofi2_lcdNibble:
 13284                           	opt stack 0
 13285                           tosu	equ	0xFFF
 13286                           tosh	equ	0xFFE
 13287                           tosl	equ	0xFFD
 13288                           pclatu	equ	0xFFB
 13289                           pclath	equ	0xFFA
 13290                           tblptru	equ	0xFF8
 13291                           tblptrh	equ	0xFF7
 13292                           tblptrl	equ	0xFF6
 13293                           tablat	equ	0xFF5
 13294                           prodh	equ	0xFF4
 13295                           prodl	equ	0xFF3
 13296                           intcon	equ	0xFF2
 13297                           intcon2	equ	0xFF1
 13298                           postinc0	equ	0xFEE
 13299                           fsr0h	equ	0xFEA
 13300                           fsr0l	equ	0xFE9
 13301                           wreg	equ	0xFE8
 13302                           indf1	equ	0xFE7
 13303                           postinc1	equ	0xFE6
 13304                           postdec1	equ	0xFE5
 13305                           fsr1h	equ	0xFE2
 13306                           fsr1l	equ	0xFE1
 13307                           indf2	equ	0xFDF
 13308                           postinc2	equ	0xFDE
 13309                           postdec2	equ	0xFDD
 13310                           fsr2h	equ	0xFDA
 13311                           fsr2l	equ	0xFD9
 13312                           status	equ	0xFD8
 13313                           
 13314 ;; *************** function i2___fttol *****************
 13315 ;; Defined at:
 13316 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
 13317 ;; Parameters:    Size  Location     Type
 13318 ;;  f1              3   38[COMRAM] float 
 13319 ;; Auto vars:     Size  Location     Type
 13320 ;;  __fttol         4   48[COMRAM] unsigned long 
 13321 ;;  __fttol         1   52[COMRAM] unsigned char 
 13322 ;;  __fttol         1   47[COMRAM] unsigned char 
 13323 ;; Return value:  Size  Location     Type
 13324 ;;                  4   38[COMRAM] long 
 13325 ;; Registers used:
 13326 ;;		wreg, status,2, status,0
 13327 ;; Tracked objects:
 13328 ;;		On entry : 0/0
 13329 ;;		On exit  : 0/0
 13330 ;;		Unchanged: 0/0
 13331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13332 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13333 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13334 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13335 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13336 ;;Total ram usage:       15 bytes
 13337 ;; Hardware stack levels used:    1
 13338 ;; This function calls:
 13339 ;;		Nothing
 13340 ;; This function is called by:
 13341 ;;		_handler
 13342 ;; This function uses a non-reentrant model
 13343 ;;
 13344                           
 13345                           	psect	text69
 13346  002010                     __ptext69:
 13347                           	opt stack 0
 13348  002010                     i2___fttol:
 13349                           	opt stack 20
 13350                           
 13351                           ;incstack = 0
 13352  002010  C029  F02B         	movff	i2___fttol@f1+2,??i2___fttol
 13353  002014  6A2C               	clrf	(??i2___fttol+1)& (0+255),c
 13354  002016  6A2D               	clrf	(??i2___fttol+2)& (0+255),c
 13355  002018  3428               	rlcf	i2___fttol@f1+1,w,c
 13356  00201A  362B               	rlcf	??i2___fttol& (0+255),f,c
 13357  00201C  E301               	bnc	u434_41
 13358  00201E  802C               	bsf	(??i2___fttol+1)& (0+255),0,c
 13359  002020                     u434_41:
 13360  002020  502B               	movf	??i2___fttol,w,c
 13361  002022  6E35               	movwf	i2___fttol@exp1,c
 13362  002024  5035               	movf	i2___fttol@exp1,w,c
 13363  002026  A4D8               	btfss	status,2,c
 13364  002028  D009               	goto	i2l4633
 13365  00202A  0E00               	movlw	0
 13366  00202C  6E27               	movwf	?i2___fttol,c
 13367  00202E  0E00               	movlw	0
 13368  002030  6E28               	movwf	?i2___fttol+1,c
 13369  002032  0E00               	movlw	0
 13370  002034  6E29               	movwf	?i2___fttol+2,c
 13371  002036  0E00               	movlw	0
 13372  002038  6E2A               	movwf	?i2___fttol+3,c
 13373  00203A  0012               	return	
 13374  00203C                     i2l4633:
 13375  00203C  0E17               	movlw	23
 13376  00203E  6E2B               	movwf	??i2___fttol& (0+255),c
 13377  002040  C027  F02C         	movff	i2___fttol@f1,??i2___fttol+1
 13378  002044  C028  F02D         	movff	i2___fttol@f1+1,??i2___fttol+2
 13379  002048  C029  F02E         	movff	i2___fttol@f1+2,??i2___fttol+3
 13380  00204C  282B               	incf	??i2___fttol,w,c
 13381  00204E  6E2F               	movwf	(??i2___fttol+4)& (0+255),c
 13382  002050  D004               	goto	i2u436_40
 13383  002052                     i2u436_45:
 13384  002052  90D8               	bcf	status,0,c
 13385  002054  322E               	rrcf	??i2___fttol+3,f,c
 13386  002056  322D               	rrcf	??i2___fttol+2,f,c
 13387  002058  322C               	rrcf	??i2___fttol+1,f,c
 13388  00205A                     i2u436_40:
 13389  00205A  2E2F               	decfsz	(??i2___fttol+4)& (0+255),f,c
 13390  00205C  D7FA               	goto	i2u436_45
 13391  00205E  502C               	movf	??i2___fttol+1,w,c
 13392  002060  6E30               	movwf	i2___fttol@sign1,c
 13393  002062  8E28               	bsf	i2___fttol@f1+1,7,c
 13394  002064  0EFF               	movlw	255
 13395  002066  1627               	andwf	i2___fttol@f1,f,c
 13396  002068  0EFF               	movlw	255
 13397  00206A  1628               	andwf	i2___fttol@f1+1,f,c
 13398  00206C  0E00               	movlw	0
 13399  00206E  1629               	andwf	i2___fttol@f1+2,f,c
 13400  002070  5027               	movf	i2___fttol@f1,w,c
 13401  002072  6E31               	movwf	i2___fttol@lval,c
 13402  002074  5028               	movf	i2___fttol@f1+1,w,c
 13403  002076  6E32               	movwf	i2___fttol@lval+1,c
 13404  002078  5029               	movf	i2___fttol@f1+2,w,c
 13405  00207A  6E33               	movwf	i2___fttol@lval+2,c
 13406  00207C  6A34               	clrf	i2___fttol@lval+3,c
 13407  00207E  0E8E               	movlw	142
 13408  002080  5E35               	subwf	i2___fttol@exp1,f,c
 13409  002082  AE35               	btfss	i2___fttol@exp1,7,c
 13410  002084  D016               	goto	i2l4655
 13411  002086  5035               	movf	i2___fttol@exp1,w,c
 13412  002088  0A80               	xorlw	128
 13413  00208A  0F8F               	addlw	143
 13414  00208C  B0D8               	btfsc	status,0,c
 13415  00208E  D009               	goto	i2l4651
 13416  002090  0E00               	movlw	0
 13417  002092  6E27               	movwf	?i2___fttol,c
 13418  002094  0E00               	movlw	0
 13419  002096  6E28               	movwf	?i2___fttol+1,c
 13420  002098  0E00               	movlw	0
 13421  00209A  6E29               	movwf	?i2___fttol+2,c
 13422  00209C  0E00               	movlw	0
 13423  00209E  6E2A               	movwf	?i2___fttol+3,c
 13424  0020A0  0012               	return	
 13425  0020A2                     i2l4651:
 13426  0020A2  90D8               	bcf	status,0,c
 13427  0020A4  3234               	rrcf	i2___fttol@lval+3,f,c
 13428  0020A6  3233               	rrcf	i2___fttol@lval+2,f,c
 13429  0020A8  3232               	rrcf	i2___fttol@lval+1,f,c
 13430  0020AA  3231               	rrcf	i2___fttol@lval,f,c
 13431  0020AC  3E35               	incfsz	i2___fttol@exp1,f,c
 13432  0020AE  D7F9               	goto	i2l4651
 13433  0020B0  D015               	goto	i2l4665
 13434  0020B2                     i2l4655:
 13435  0020B2  0E17               	movlw	23
 13436  0020B4  6435               	cpfsgt	i2___fttol@exp1,c
 13437  0020B6  D00F               	goto	i2l4663
 13438  0020B8  0E00               	movlw	0
 13439  0020BA  6E27               	movwf	?i2___fttol,c
 13440  0020BC  0E00               	movlw	0
 13441  0020BE  6E28               	movwf	?i2___fttol+1,c
 13442  0020C0  0E00               	movlw	0
 13443  0020C2  6E29               	movwf	?i2___fttol+2,c
 13444  0020C4  0E00               	movlw	0
 13445  0020C6  6E2A               	movwf	?i2___fttol+3,c
 13446  0020C8  0012               	return	
 13447  0020CA                     i2l4661:
 13448  0020CA  90D8               	bcf	status,0,c
 13449  0020CC  3631               	rlcf	i2___fttol@lval,f,c
 13450  0020CE  3632               	rlcf	i2___fttol@lval+1,f,c
 13451  0020D0  3633               	rlcf	i2___fttol@lval+2,f,c
 13452  0020D2  3634               	rlcf	i2___fttol@lval+3,f,c
 13453  0020D4  0635               	decf	i2___fttol@exp1,f,c
 13454  0020D6                     i2l4663:
 13455  0020D6  5035               	movf	i2___fttol@exp1,w,c
 13456  0020D8  A4D8               	btfss	status,2,c
 13457  0020DA  D7F7               	goto	i2l4661
 13458  0020DC                     i2l4665:
 13459  0020DC  5030               	movf	i2___fttol@sign1,w,c
 13460  0020DE  B4D8               	btfsc	status,2,c
 13461  0020E0  D008               	goto	i2l4669
 13462  0020E2  1E34               	comf	i2___fttol@lval+3,f,c
 13463  0020E4  1E33               	comf	i2___fttol@lval+2,f,c
 13464  0020E6  1E32               	comf	i2___fttol@lval+1,f,c
 13465  0020E8  6C31               	negf	i2___fttol@lval,c
 13466  0020EA  0E00               	movlw	0
 13467  0020EC  2232               	addwfc	i2___fttol@lval+1,f,c
 13468  0020EE  2233               	addwfc	i2___fttol@lval+2,f,c
 13469  0020F0  2234               	addwfc	i2___fttol@lval+3,f,c
 13470  0020F2                     i2l4669:
 13471  0020F2  C031  F027         	movff	i2___fttol@lval,?i2___fttol
 13472  0020F6  C032  F028         	movff	i2___fttol@lval+1,?i2___fttol+1
 13473  0020FA  C033  F029         	movff	i2___fttol@lval+2,?i2___fttol+2
 13474  0020FE  C034  F02A         	movff	i2___fttol@lval+3,?i2___fttol+3
 13475  002102  0012               	return	
 13476  002104                     __end_ofi2___fttol:
 13477                           	opt stack 0
 13478                           tosu	equ	0xFFF
 13479                           tosh	equ	0xFFE
 13480                           tosl	equ	0xFFD
 13481                           pclatu	equ	0xFFB
 13482                           pclath	equ	0xFFA
 13483                           tblptru	equ	0xFF8
 13484                           tblptrh	equ	0xFF7
 13485                           tblptrl	equ	0xFF6
 13486                           tablat	equ	0xFF5
 13487                           prodh	equ	0xFF4
 13488                           prodl	equ	0xFF3
 13489                           intcon	equ	0xFF2
 13490                           intcon2	equ	0xFF1
 13491                           postinc0	equ	0xFEE
 13492                           fsr0h	equ	0xFEA
 13493                           fsr0l	equ	0xFE9
 13494                           wreg	equ	0xFE8
 13495                           indf1	equ	0xFE7
 13496                           postinc1	equ	0xFE6
 13497                           postdec1	equ	0xFE5
 13498                           fsr1h	equ	0xFE2
 13499                           fsr1l	equ	0xFE1
 13500                           indf2	equ	0xFDF
 13501                           postinc2	equ	0xFDE
 13502                           postdec2	equ	0xFDD
 13503                           fsr2h	equ	0xFDA
 13504                           fsr2l	equ	0xFD9
 13505                           status	equ	0xFD8
 13506                           
 13507 ;; *************** function i2___ftmul *****************
 13508 ;; Defined at:
 13509 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
 13510 ;; Parameters:    Size  Location     Type
 13511 ;;  f1              3    8[COMRAM] float 
 13512 ;;  f2              3   11[COMRAM] float 
 13513 ;; Auto vars:     Size  Location     Type
 13514 ;;  __ftmul         3   18[COMRAM] unsigned um
 13515 ;;  __ftmul         1   22[COMRAM] unsigned char 
 13516 ;;  __ftmul         1   21[COMRAM] unsigned char 
 13517 ;;  __ftmul         1   17[COMRAM] unsigned char 
 13518 ;; Return value:  Size  Location     Type
 13519 ;;                  3    8[COMRAM] float 
 13520 ;; Registers used:
 13521 ;;		wreg, status,2, status,0, cstack
 13522 ;; Tracked objects:
 13523 ;;		On entry : 0/0
 13524 ;;		On exit  : 0/0
 13525 ;;		Unchanged: 0/0
 13526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13527 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13528 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13529 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13530 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13531 ;;Total ram usage:       15 bytes
 13532 ;; Hardware stack levels used:    1
 13533 ;; Hardware stack levels required when called:    1
 13534 ;; This function calls:
 13535 ;;		i2___ftpack
 13536 ;; This function is called by:
 13537 ;;		_handler
 13538 ;; This function uses a non-reentrant model
 13539 ;;
 13540                           
 13541                           	psect	text70
 13542  002104                     __ptext70:
 13543                           	opt stack 0
 13544  002104                     i2___ftmul:
 13545                           	opt stack 19
 13546                           
 13547                           ;incstack = 0
 13548  002104  C00B  F00F         	movff	i2___ftmul@f1+2,??i2___ftmul
 13549  002108  6A10               	clrf	(??i2___ftmul+1)& (0+255),c
 13550  00210A  6A11               	clrf	(??i2___ftmul+2)& (0+255),c
 13551  00210C  340A               	rlcf	i2___ftmul@f1+1,w,c
 13552  00210E  360F               	rlcf	??i2___ftmul& (0+255),f,c
 13553  002110  E301               	bnc	u428_41
 13554  002112  8010               	bsf	(??i2___ftmul+1)& (0+255),0,c
 13555  002114                     u428_41:
 13556  002114  500F               	movf	??i2___ftmul,w,c
 13557  002116  6E12               	movwf	i2___ftmul@exp,c
 13558  002118  5012               	movf	i2___ftmul@exp,w,c
 13559  00211A  A4D8               	btfss	status,2,c
 13560  00211C  D007               	goto	i2l4585
 13561  00211E  0E00               	movlw	0
 13562  002120  6E09               	movwf	?i2___ftmul,c
 13563  002122  0E00               	movlw	0
 13564  002124  6E0A               	movwf	?i2___ftmul+1,c
 13565  002126  0E00               	movlw	0
 13566  002128  6E0B               	movwf	?i2___ftmul+2,c
 13567  00212A  0012               	return	
 13568  00212C                     i2l4585:
 13569  00212C  C00E  F00F         	movff	i2___ftmul@f2+2,??i2___ftmul
 13570  002130  6A10               	clrf	(??i2___ftmul+1)& (0+255),c
 13571  002132  6A11               	clrf	(??i2___ftmul+2)& (0+255),c
 13572  002134  340D               	rlcf	i2___ftmul@f2+1,w,c
 13573  002136  360F               	rlcf	??i2___ftmul& (0+255),f,c
 13574  002138  E301               	bnc	u430_41
 13575  00213A  8010               	bsf	(??i2___ftmul+1)& (0+255),0,c
 13576  00213C                     u430_41:
 13577  00213C  500F               	movf	??i2___ftmul,w,c
 13578  00213E  6E17               	movwf	i2___ftmul@sign,c
 13579  002140  5017               	movf	i2___ftmul@sign,w,c
 13580  002142  A4D8               	btfss	status,2,c
 13581  002144  D007               	goto	i2l4591
 13582  002146  0E00               	movlw	0
 13583  002148  6E09               	movwf	?i2___ftmul,c
 13584  00214A  0E00               	movlw	0
 13585  00214C  6E0A               	movwf	?i2___ftmul+1,c
 13586  00214E  0E00               	movlw	0
 13587  002150  6E0B               	movwf	?i2___ftmul+2,c
 13588  002152  0012               	return	
 13589  002154                     i2l4591:
 13590  002154  5017               	movf	i2___ftmul@sign,w,c
 13591  002156  0F7B               	addlw	123
 13592  002158  2612               	addwf	i2___ftmul@exp,f,c
 13593  00215A  C00B  F017         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 13594  00215E  500E               	movf	i2___ftmul@f2+2,w,c
 13595  002160  1A17               	xorwf	i2___ftmul@sign,f,c
 13596  002162  0E80               	movlw	128
 13597  002164  1617               	andwf	i2___ftmul@sign,f,c
 13598  002166  8E0A               	bsf	i2___ftmul@f1+1,7,c
 13599  002168  8E0D               	bsf	i2___ftmul@f2+1,7,c
 13600  00216A  0EFF               	movlw	255
 13601  00216C  160C               	andwf	i2___ftmul@f2,f,c
 13602  00216E  0EFF               	movlw	255
 13603  002170  160D               	andwf	i2___ftmul@f2+1,f,c
 13604  002172  0E00               	movlw	0
 13605  002174  160E               	andwf	i2___ftmul@f2+2,f,c
 13606  002176  0E00               	movlw	0
 13607  002178  6E13               	movwf	i2___ftmul@f3_as_product,c
 13608  00217A  0E00               	movlw	0
 13609  00217C  6E14               	movwf	i2___ftmul@f3_as_product+1,c
 13610  00217E  0E00               	movlw	0
 13611  002180  6E15               	movwf	i2___ftmul@f3_as_product+2,c
 13612  002182  0E07               	movlw	7
 13613  002184  6E16               	movwf	i2___ftmul@cntr,c
 13614  002186                     i2l4605:
 13615  002186  A009               	btfss	i2___ftmul@f1,0,c
 13616  002188  D006               	goto	i2l4609
 13617  00218A  500C               	movf	i2___ftmul@f2,w,c
 13618  00218C  2613               	addwf	i2___ftmul@f3_as_product,f,c
 13619  00218E  500D               	movf	i2___ftmul@f2+1,w,c
 13620  002190  2214               	addwfc	i2___ftmul@f3_as_product+1,f,c
 13621  002192  500E               	movf	i2___ftmul@f2+2,w,c
 13622  002194  2215               	addwfc	i2___ftmul@f3_as_product+2,f,c
 13623  002196                     i2l4609:
 13624  002196  90D8               	bcf	status,0,c
 13625  002198  320B               	rrcf	i2___ftmul@f1+2,f,c
 13626  00219A  320A               	rrcf	i2___ftmul@f1+1,f,c
 13627  00219C  3209               	rrcf	i2___ftmul@f1,f,c
 13628  00219E  90D8               	bcf	status,0,c
 13629  0021A0  360C               	rlcf	i2___ftmul@f2,f,c
 13630  0021A2  360D               	rlcf	i2___ftmul@f2+1,f,c
 13631  0021A4  360E               	rlcf	i2___ftmul@f2+2,f,c
 13632  0021A6  2E16               	decfsz	i2___ftmul@cntr,f,c
 13633  0021A8  D7EE               	goto	i2l4605
 13634  0021AA  0E09               	movlw	9
 13635  0021AC  6E16               	movwf	i2___ftmul@cntr,c
 13636  0021AE                     i2l4615:
 13637  0021AE  A009               	btfss	i2___ftmul@f1,0,c
 13638  0021B0  D006               	goto	i2l4619
 13639  0021B2  500C               	movf	i2___ftmul@f2,w,c
 13640  0021B4  2613               	addwf	i2___ftmul@f3_as_product,f,c
 13641  0021B6  500D               	movf	i2___ftmul@f2+1,w,c
 13642  0021B8  2214               	addwfc	i2___ftmul@f3_as_product+1,f,c
 13643  0021BA  500E               	movf	i2___ftmul@f2+2,w,c
 13644  0021BC  2215               	addwfc	i2___ftmul@f3_as_product+2,f,c
 13645  0021BE                     i2l4619:
 13646  0021BE  90D8               	bcf	status,0,c
 13647  0021C0  320B               	rrcf	i2___ftmul@f1+2,f,c
 13648  0021C2  320A               	rrcf	i2___ftmul@f1+1,f,c
 13649  0021C4  3209               	rrcf	i2___ftmul@f1,f,c
 13650  0021C6  90D8               	bcf	status,0,c
 13651  0021C8  3215               	rrcf	i2___ftmul@f3_as_product+2,f,c
 13652  0021CA  3214               	rrcf	i2___ftmul@f3_as_product+1,f,c
 13653  0021CC  3213               	rrcf	i2___ftmul@f3_as_product,f,c
 13654  0021CE  2E16               	decfsz	i2___ftmul@cntr,f,c
 13655  0021D0  D7EE               	goto	i2l4615
 13656  0021D2  C013  F001         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 13657  0021D6  C014  F002         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 13658  0021DA  C015  F003         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 13659  0021DE  C012  F004         	movff	i2___ftmul@exp,i2___ftpack@exp
 13660  0021E2  C017  F005         	movff	i2___ftmul@sign,i2___ftpack@sign
 13661  0021E6  ECA4  F012         	call	i2___ftpack	;wreg free
 13662  0021EA  C001  F009         	movff	?i2___ftpack,?i2___ftmul
 13663  0021EE  C002  F00A         	movff	?i2___ftpack+1,?i2___ftmul+1
 13664  0021F2  C003  F00B         	movff	?i2___ftpack+2,?i2___ftmul+2
 13665  0021F6  0012               	return	
 13666  0021F8                     __end_ofi2___ftmul:
 13667                           	opt stack 0
 13668                           tosu	equ	0xFFF
 13669                           tosh	equ	0xFFE
 13670                           tosl	equ	0xFFD
 13671                           pclatu	equ	0xFFB
 13672                           pclath	equ	0xFFA
 13673                           tblptru	equ	0xFF8
 13674                           tblptrh	equ	0xFF7
 13675                           tblptrl	equ	0xFF6
 13676                           tablat	equ	0xFF5
 13677                           prodh	equ	0xFF4
 13678                           prodl	equ	0xFF3
 13679                           intcon	equ	0xFF2
 13680                           intcon2	equ	0xFF1
 13681                           postinc0	equ	0xFEE
 13682                           fsr0h	equ	0xFEA
 13683                           fsr0l	equ	0xFE9
 13684                           wreg	equ	0xFE8
 13685                           indf1	equ	0xFE7
 13686                           postinc1	equ	0xFE6
 13687                           postdec1	equ	0xFE5
 13688                           fsr1h	equ	0xFE2
 13689                           fsr1l	equ	0xFE1
 13690                           indf2	equ	0xFDF
 13691                           postinc2	equ	0xFDE
 13692                           postdec2	equ	0xFDD
 13693                           fsr2h	equ	0xFDA
 13694                           fsr2l	equ	0xFD9
 13695                           status	equ	0xFD8
 13696                           
 13697 ;; *************** function i2___ftdiv *****************
 13698 ;; Defined at:
 13699 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
 13700 ;; Parameters:    Size  Location     Type
 13701 ;;  f1              3   23[COMRAM] float 
 13702 ;;  f2              3   26[COMRAM] float 
 13703 ;; Auto vars:     Size  Location     Type
 13704 ;;  __ftdiv         3   33[COMRAM] float 
 13705 ;;  __ftdiv         1   37[COMRAM] unsigned char 
 13706 ;;  __ftdiv         1   36[COMRAM] unsigned char 
 13707 ;;  __ftdiv         1   32[COMRAM] unsigned char 
 13708 ;; Return value:  Size  Location     Type
 13709 ;;                  3   23[COMRAM] float 
 13710 ;; Registers used:
 13711 ;;		wreg, status,2, status,0, cstack
 13712 ;; Tracked objects:
 13713 ;;		On entry : 0/0
 13714 ;;		On exit  : 0/0
 13715 ;;		Unchanged: 0/0
 13716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13717 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13718 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13719 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13720 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13721 ;;Total ram usage:       15 bytes
 13722 ;; Hardware stack levels used:    1
 13723 ;; Hardware stack levels required when called:    1
 13724 ;; This function calls:
 13725 ;;		i2___ftpack
 13726 ;; This function is called by:
 13727 ;;		_handler
 13728 ;; This function uses a non-reentrant model
 13729 ;;
 13730                           
 13731                           	psect	text71
 13732  0022EA                     __ptext71:
 13733                           	opt stack 0
 13734  0022EA                     i2___ftdiv:
 13735                           	opt stack 19
 13736                           
 13737                           ;incstack = 0
 13738  0022EA  C01A  F01E         	movff	i2___ftdiv@f1+2,??i2___ftdiv
 13739  0022EE  6A1F               	clrf	(??i2___ftdiv+1)& (0+255),c
 13740  0022F0  6A20               	clrf	(??i2___ftdiv+2)& (0+255),c
 13741  0022F2  3419               	rlcf	i2___ftdiv@f1+1,w,c
 13742  0022F4  361E               	rlcf	??i2___ftdiv& (0+255),f,c
 13743  0022F6  E301               	bnc	u423_41
 13744  0022F8  801F               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 13745  0022FA                     u423_41:
 13746  0022FA  501E               	movf	??i2___ftdiv,w,c
 13747  0022FC  6E25               	movwf	i2___ftdiv@exp,c
 13748  0022FE  5025               	movf	i2___ftdiv@exp,w,c
 13749  002300  A4D8               	btfss	status,2,c
 13750  002302  D007               	goto	i2l4539
 13751  002304  0E00               	movlw	0
 13752  002306  6E18               	movwf	?i2___ftdiv,c
 13753  002308  0E00               	movlw	0
 13754  00230A  6E19               	movwf	?i2___ftdiv+1,c
 13755  00230C  0E00               	movlw	0
 13756  00230E  6E1A               	movwf	?i2___ftdiv+2,c
 13757  002310  0012               	return	
 13758  002312                     i2l4539:
 13759  002312  C01D  F01E         	movff	i2___ftdiv@f2+2,??i2___ftdiv
 13760  002316  6A1F               	clrf	(??i2___ftdiv+1)& (0+255),c
 13761  002318  6A20               	clrf	(??i2___ftdiv+2)& (0+255),c
 13762  00231A  341C               	rlcf	i2___ftdiv@f2+1,w,c
 13763  00231C  361E               	rlcf	??i2___ftdiv& (0+255),f,c
 13764  00231E  E301               	bnc	u425_41
 13765  002320  801F               	bsf	(??i2___ftdiv+1)& (0+255),0,c
 13766  002322                     u425_41:
 13767  002322  501E               	movf	??i2___ftdiv,w,c
 13768  002324  6E26               	movwf	i2___ftdiv@sign,c
 13769  002326  5026               	movf	i2___ftdiv@sign,w,c
 13770  002328  A4D8               	btfss	status,2,c
 13771  00232A  D007               	goto	i2l4545
 13772  00232C  0E00               	movlw	0
 13773  00232E  6E18               	movwf	?i2___ftdiv,c
 13774  002330  0E00               	movlw	0
 13775  002332  6E19               	movwf	?i2___ftdiv+1,c
 13776  002334  0E00               	movlw	0
 13777  002336  6E1A               	movwf	?i2___ftdiv+2,c
 13778  002338  0012               	return	
 13779  00233A                     i2l4545:
 13780  00233A  0E00               	movlw	0
 13781  00233C  6E22               	movwf	i2___ftdiv@f3,c
 13782  00233E  0E00               	movlw	0
 13783  002340  6E23               	movwf	i2___ftdiv@f3+1,c
 13784  002342  0E00               	movlw	0
 13785  002344  6E24               	movwf	i2___ftdiv@f3+2,c
 13786  002346  5026               	movf	i2___ftdiv@sign,w,c
 13787  002348  0F89               	addlw	137
 13788  00234A  5E25               	subwf	i2___ftdiv@exp,f,c
 13789  00234C  C01A  F026         	movff	i2___ftdiv@f1+2,i2___ftdiv@sign
 13790  002350  501D               	movf	i2___ftdiv@f2+2,w,c
 13791  002352  1A26               	xorwf	i2___ftdiv@sign,f,c
 13792  002354  0E80               	movlw	128
 13793  002356  1626               	andwf	i2___ftdiv@sign,f,c
 13794  002358  8E19               	bsf	i2___ftdiv@f1+1,7,c
 13795  00235A  0EFF               	movlw	255
 13796  00235C  1618               	andwf	i2___ftdiv@f1,f,c
 13797  00235E  0EFF               	movlw	255
 13798  002360  1619               	andwf	i2___ftdiv@f1+1,f,c
 13799  002362  0E00               	movlw	0
 13800  002364  161A               	andwf	i2___ftdiv@f1+2,f,c
 13801  002366  8E1C               	bsf	i2___ftdiv@f2+1,7,c
 13802  002368  0EFF               	movlw	255
 13803  00236A  161B               	andwf	i2___ftdiv@f2,f,c
 13804  00236C  0EFF               	movlw	255
 13805  00236E  161C               	andwf	i2___ftdiv@f2+1,f,c
 13806  002370  0E00               	movlw	0
 13807  002372  161D               	andwf	i2___ftdiv@f2+2,f,c
 13808  002374  0E18               	movlw	24
 13809  002376  6E21               	movwf	i2___ftdiv@cntr,c
 13810  002378                     i2l4565:
 13811  002378  90D8               	bcf	status,0,c
 13812  00237A  3622               	rlcf	i2___ftdiv@f3,f,c
 13813  00237C  3623               	rlcf	i2___ftdiv@f3+1,f,c
 13814  00237E  3624               	rlcf	i2___ftdiv@f3+2,f,c
 13815  002380  501B               	movf	i2___ftdiv@f2,w,c
 13816  002382  5C18               	subwf	i2___ftdiv@f1,w,c
 13817  002384  501C               	movf	i2___ftdiv@f2+1,w,c
 13818  002386  5819               	subwfb	i2___ftdiv@f1+1,w,c
 13819  002388  501D               	movf	i2___ftdiv@f2+2,w,c
 13820  00238A  581A               	subwfb	i2___ftdiv@f1+2,w,c
 13821  00238C  A0D8               	btfss	status,0,c
 13822  00238E  D007               	goto	i2l893
 13823  002390  501B               	movf	i2___ftdiv@f2,w,c
 13824  002392  5E18               	subwf	i2___ftdiv@f1,f,c
 13825  002394  501C               	movf	i2___ftdiv@f2+1,w,c
 13826  002396  5A19               	subwfb	i2___ftdiv@f1+1,f,c
 13827  002398  501D               	movf	i2___ftdiv@f2+2,w,c
 13828  00239A  5A1A               	subwfb	i2___ftdiv@f1+2,f,c
 13829  00239C  8022               	bsf	i2___ftdiv@f3,0,c
 13830  00239E                     i2l893:
 13831  00239E  90D8               	bcf	status,0,c
 13832  0023A0  3618               	rlcf	i2___ftdiv@f1,f,c
 13833  0023A2  3619               	rlcf	i2___ftdiv@f1+1,f,c
 13834  0023A4  361A               	rlcf	i2___ftdiv@f1+2,f,c
 13835  0023A6  2E21               	decfsz	i2___ftdiv@cntr,f,c
 13836  0023A8  D7E7               	goto	i2l4565
 13837  0023AA  C022  F001         	movff	i2___ftdiv@f3,i2___ftpack@arg
 13838  0023AE  C023  F002         	movff	i2___ftdiv@f3+1,i2___ftpack@arg+1
 13839  0023B2  C024  F003         	movff	i2___ftdiv@f3+2,i2___ftpack@arg+2
 13840  0023B6  C025  F004         	movff	i2___ftdiv@exp,i2___ftpack@exp
 13841  0023BA  C026  F005         	movff	i2___ftdiv@sign,i2___ftpack@sign
 13842  0023BE  ECA4  F012         	call	i2___ftpack	;wreg free
 13843  0023C2  C001  F018         	movff	?i2___ftpack,?i2___ftdiv
 13844  0023C6  C002  F019         	movff	?i2___ftpack+1,?i2___ftdiv+1
 13845  0023CA  C003  F01A         	movff	?i2___ftpack+2,?i2___ftdiv+2
 13846  0023CE  0012               	return	
 13847  0023D0                     __end_ofi2___ftdiv:
 13848                           	opt stack 0
 13849                           tosu	equ	0xFFF
 13850                           tosh	equ	0xFFE
 13851                           tosl	equ	0xFFD
 13852                           pclatu	equ	0xFFB
 13853                           pclath	equ	0xFFA
 13854                           tblptru	equ	0xFF8
 13855                           tblptrh	equ	0xFF7
 13856                           tblptrl	equ	0xFF6
 13857                           tablat	equ	0xFF5
 13858                           prodh	equ	0xFF4
 13859                           prodl	equ	0xFF3
 13860                           intcon	equ	0xFF2
 13861                           intcon2	equ	0xFF1
 13862                           postinc0	equ	0xFEE
 13863                           fsr0h	equ	0xFEA
 13864                           fsr0l	equ	0xFE9
 13865                           wreg	equ	0xFE8
 13866                           indf1	equ	0xFE7
 13867                           postinc1	equ	0xFE6
 13868                           postdec1	equ	0xFE5
 13869                           fsr1h	equ	0xFE2
 13870                           fsr1l	equ	0xFE1
 13871                           indf2	equ	0xFDF
 13872                           postinc2	equ	0xFDE
 13873                           postdec2	equ	0xFDD
 13874                           fsr2h	equ	0xFDA
 13875                           fsr2l	equ	0xFD9
 13876                           status	equ	0xFD8
 13877                           
 13878 ;; *************** function i2___ftpack *****************
 13879 ;; Defined at:
 13880 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 13881 ;; Parameters:    Size  Location     Type
 13882 ;;  arg             3    0[COMRAM] unsigned um
 13883 ;;  exp             1    3[COMRAM] unsigned char 
 13884 ;;  sign            1    4[COMRAM] unsigned char 
 13885 ;; Auto vars:     Size  Location     Type
 13886 ;;		None
 13887 ;; Return value:  Size  Location     Type
 13888 ;;                  3    0[COMRAM] float 
 13889 ;; Registers used:
 13890 ;;		wreg, status,2, status,0
 13891 ;; Tracked objects:
 13892 ;;		On entry : 0/0
 13893 ;;		On exit  : 0/0
 13894 ;;		Unchanged: 0/0
 13895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13896 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13897 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13898 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13899 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13900 ;;Total ram usage:        8 bytes
 13901 ;; Hardware stack levels used:    1
 13902 ;; This function calls:
 13903 ;;		Nothing
 13904 ;; This function is called by:
 13905 ;;		i2___ftdiv
 13906 ;;		i2___ftmul
 13907 ;; This function uses a non-reentrant model
 13908 ;;
 13909                           
 13910                           	psect	text72
 13911  002548                     __ptext72:
 13912                           	opt stack 0
 13913  002548                     i2___ftpack:
 13914                           	opt stack 19
 13915                           
 13916                           ;incstack = 0
 13917  002548  5004               	movf	i2___ftpack@exp,w,c
 13918  00254A  B4D8               	btfsc	status,2,c
 13919  00254C  D005               	goto	i2l4447
 13920  00254E  5001               	movf	i2___ftpack@arg,w,c
 13921  002550  1002               	iorwf	i2___ftpack@arg+1,w,c
 13922  002552  1003               	iorwf	i2___ftpack@arg+2,w,c
 13923  002554  A4D8               	btfss	status,2,c
 13924  002556  D00C               	goto	i2l4453
 13925  002558                     i2l4447:
 13926  002558  0E00               	movlw	0
 13927  00255A  6E01               	movwf	?i2___ftpack,c
 13928  00255C  0E00               	movlw	0
 13929  00255E  6E02               	movwf	?i2___ftpack+1,c
 13930  002560  0E00               	movlw	0
 13931  002562  6E03               	movwf	?i2___ftpack+2,c
 13932  002564  0012               	return	
 13933  002566                     i2l4451:
 13934  002566  2A04               	incf	i2___ftpack@exp,f,c
 13935  002568  90D8               	bcf	status,0,c
 13936  00256A  3203               	rrcf	i2___ftpack@arg+2,f,c
 13937  00256C  3202               	rrcf	i2___ftpack@arg+1,f,c
 13938  00256E  3201               	rrcf	i2___ftpack@arg,f,c
 13939  002570                     i2l4453:
 13940  002570  0E00               	movlw	0
 13941  002572  1401               	andwf	i2___ftpack@arg,w,c
 13942  002574  6E06               	movwf	??i2___ftpack& (0+255),c
 13943  002576  0E00               	movlw	0
 13944  002578  1402               	andwf	i2___ftpack@arg+1,w,c
 13945  00257A  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13946  00257C  0EFE               	movlw	254
 13947  00257E  1403               	andwf	i2___ftpack@arg+2,w,c
 13948  002580  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13949  002582  5006               	movf	??i2___ftpack,w,c
 13950  002584  1007               	iorwf	??i2___ftpack+1,w,c
 13951  002586  1008               	iorwf	??i2___ftpack+2,w,c
 13952  002588  B4D8               	btfsc	status,2,c
 13953  00258A  D00C               	goto	i2l4459
 13954  00258C  D7EC               	goto	i2l4451
 13955  00258E                     i2l4455:
 13956  00258E  2A04               	incf	i2___ftpack@exp,f,c
 13957  002590  0E01               	movlw	1
 13958  002592  2601               	addwf	i2___ftpack@arg,f,c
 13959  002594  0E00               	movlw	0
 13960  002596  2202               	addwfc	i2___ftpack@arg+1,f,c
 13961  002598  0E00               	movlw	0
 13962  00259A  2203               	addwfc	i2___ftpack@arg+2,f,c
 13963  00259C  90D8               	bcf	status,0,c
 13964  00259E  3203               	rrcf	i2___ftpack@arg+2,f,c
 13965  0025A0  3202               	rrcf	i2___ftpack@arg+1,f,c
 13966  0025A2  3201               	rrcf	i2___ftpack@arg,f,c
 13967  0025A4                     i2l4459:
 13968  0025A4  0E00               	movlw	0
 13969  0025A6  1401               	andwf	i2___ftpack@arg,w,c
 13970  0025A8  6E06               	movwf	??i2___ftpack& (0+255),c
 13971  0025AA  0E00               	movlw	0
 13972  0025AC  1402               	andwf	i2___ftpack@arg+1,w,c
 13973  0025AE  6E07               	movwf	(??i2___ftpack+1)& (0+255),c
 13974  0025B0  0EFF               	movlw	255
 13975  0025B2  1403               	andwf	i2___ftpack@arg+2,w,c
 13976  0025B4  6E08               	movwf	(??i2___ftpack+2)& (0+255),c
 13977  0025B6  5006               	movf	??i2___ftpack,w,c
 13978  0025B8  1007               	iorwf	??i2___ftpack+1,w,c
 13979  0025BA  1008               	iorwf	??i2___ftpack+2,w,c
 13980  0025BC  B4D8               	btfsc	status,2,c
 13981  0025BE  D006               	goto	i2l4463
 13982  0025C0  D7E6               	goto	i2l4455
 13983  0025C2                     i2l4461:
 13984  0025C2  0604               	decf	i2___ftpack@exp,f,c
 13985  0025C4  90D8               	bcf	status,0,c
 13986  0025C6  3601               	rlcf	i2___ftpack@arg,f,c
 13987  0025C8  3602               	rlcf	i2___ftpack@arg+1,f,c
 13988  0025CA  3603               	rlcf	i2___ftpack@arg+2,f,c
 13989  0025CC                     i2l4463:
 13990  0025CC  BE02               	btfsc	i2___ftpack@arg+1,7,c
 13991  0025CE  D003               	goto	i2l835
 13992  0025D0  0E02               	movlw	2
 13993  0025D2  6004               	cpfslt	i2___ftpack@exp,c
 13994  0025D4  D7F6               	goto	i2l4461
 13995  0025D6                     i2l835:
 13996  0025D6  A004               	btfss	i2___ftpack@exp,0,c
 13997  0025D8  9E02               	bcf	i2___ftpack@arg+1,7,c
 13998  0025DA  90D8               	bcf	status,0,c
 13999  0025DC  3204               	rrcf	i2___ftpack@exp,f,c
 14000  0025DE  5004               	movf	i2___ftpack@exp,w,c
 14001  0025E0  1203               	iorwf	i2___ftpack@arg+2,f,c
 14002  0025E2  5005               	movf	i2___ftpack@sign,w,c
 14003  0025E4  A4D8               	btfss	status,2,c
 14004  0025E6  8E03               	bsf	i2___ftpack@arg+2,7,c
 14005  0025E8  C001  F001         	movff	i2___ftpack@arg,?i2___ftpack
 14006  0025EC  C002  F002         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 14007  0025F0  C003  F003         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 14008  0025F4  0012               	return	
 14009  0025F6                     __end_ofi2___ftpack:
 14010                           	opt stack 0
 14011                           tosu	equ	0xFFF
 14012                           tosh	equ	0xFFE
 14013                           tosl	equ	0xFFD
 14014                           pclatu	equ	0xFFB
 14015                           pclath	equ	0xFFA
 14016                           tblptru	equ	0xFF8
 14017                           tblptrh	equ	0xFF7
 14018                           tblptrl	equ	0xFF6
 14019                           tablat	equ	0xFF5
 14020                           prodh	equ	0xFF4
 14021                           prodl	equ	0xFF3
 14022                           intcon	equ	0xFF2
 14023                           intcon2	equ	0xFF1
 14024                           postinc0	equ	0xFEE
 14025                           fsr0h	equ	0xFEA
 14026                           fsr0l	equ	0xFE9
 14027                           wreg	equ	0xFE8
 14028                           indf1	equ	0xFE7
 14029                           postinc1	equ	0xFE6
 14030                           postdec1	equ	0xFE5
 14031                           fsr1h	equ	0xFE2
 14032                           fsr1l	equ	0xFE1
 14033                           indf2	equ	0xFDF
 14034                           postinc2	equ	0xFDE
 14035                           postdec2	equ	0xFDD
 14036                           fsr2h	equ	0xFDA
 14037                           fsr2l	equ	0xFD9
 14038                           status	equ	0xFD8
 14039                           tosu	equ	0xFFF
 14040                           tosh	equ	0xFFE
 14041                           tosl	equ	0xFFD
 14042                           pclatu	equ	0xFFB
 14043                           pclath	equ	0xFFA
 14044                           tblptru	equ	0xFF8
 14045                           tblptrh	equ	0xFF7
 14046                           tblptrl	equ	0xFF6
 14047                           tablat	equ	0xFF5
 14048                           prodh	equ	0xFF4
 14049                           prodl	equ	0xFF3
 14050                           intcon	equ	0xFF2
 14051                           intcon2	equ	0xFF1
 14052                           postinc0	equ	0xFEE
 14053                           fsr0h	equ	0xFEA
 14054                           fsr0l	equ	0xFE9
 14055                           wreg	equ	0xFE8
 14056                           indf1	equ	0xFE7
 14057                           postinc1	equ	0xFE6
 14058                           postdec1	equ	0xFE5
 14059                           fsr1h	equ	0xFE2
 14060                           fsr1l	equ	0xFE1
 14061                           indf2	equ	0xFDF
 14062                           postinc2	equ	0xFDE
 14063                           postdec2	equ	0xFDD
 14064                           fsr2h	equ	0xFDA
 14065                           fsr2l	equ	0xFD9
 14066                           status	equ	0xFD8
 14067                           
 14068                           	psect	text73
 14069  000000                     __ptext73:
 14070                           	opt stack 0
 14071                           tosu	equ	0xFFF
 14072                           tosh	equ	0xFFE
 14073                           tosl	equ	0xFFD
 14074                           pclatu	equ	0xFFB
 14075                           pclath	equ	0xFFA
 14076                           tblptru	equ	0xFF8
 14077                           tblptrh	equ	0xFF7
 14078                           tblptrl	equ	0xFF6
 14079                           tablat	equ	0xFF5
 14080                           prodh	equ	0xFF4
 14081                           prodl	equ	0xFF3
 14082                           intcon	equ	0xFF2
 14083                           intcon2	equ	0xFF1
 14084                           postinc0	equ	0xFEE
 14085                           fsr0h	equ	0xFEA
 14086                           fsr0l	equ	0xFE9
 14087                           wreg	equ	0xFE8
 14088                           indf1	equ	0xFE7
 14089                           postinc1	equ	0xFE6
 14090                           postdec1	equ	0xFE5
 14091                           fsr1h	equ	0xFE2
 14092                           fsr1l	equ	0xFE1
 14093                           indf2	equ	0xFDF
 14094                           postinc2	equ	0xFDE
 14095                           postdec2	equ	0xFDD
 14096                           fsr2h	equ	0xFDA
 14097                           fsr2l	equ	0xFD9
 14098                           status	equ	0xFD8
 14099                           
 14100                           	psect	rparam
 14101  0000                     tosu	equ	0xFFF
 14102                           tosh	equ	0xFFE
 14103                           tosl	equ	0xFFD
 14104                           pclatu	equ	0xFFB
 14105                           pclath	equ	0xFFA
 14106                           tblptru	equ	0xFF8
 14107                           tblptrh	equ	0xFF7
 14108                           tblptrl	equ	0xFF6
 14109                           tablat	equ	0xFF5
 14110                           prodh	equ	0xFF4
 14111                           prodl	equ	0xFF3
 14112                           intcon	equ	0xFF2
 14113                           intcon2	equ	0xFF1
 14114                           postinc0	equ	0xFEE
 14115                           fsr0h	equ	0xFEA
 14116                           fsr0l	equ	0xFE9
 14117                           wreg	equ	0xFE8
 14118                           indf1	equ	0xFE7
 14119                           postinc1	equ	0xFE6
 14120                           postdec1	equ	0xFE5
 14121                           fsr1h	equ	0xFE2
 14122                           fsr1l	equ	0xFE1
 14123                           indf2	equ	0xFDF
 14124                           postinc2	equ	0xFDE
 14125                           postdec2	equ	0xFDD
 14126                           fsr2h	equ	0xFDA
 14127                           fsr2l	equ	0xFD9
 14128                           status	equ	0xFD8
 14129                           
 14130                           	psect	temp
 14131  00004F                     btemp:
 14132                           	opt stack 0
 14133  00004F                     	ds	1
 14134  0000                     int$flags	set	btemp
 14135                           tosu	equ	0xFFF
 14136                           tosh	equ	0xFFE
 14137                           tosl	equ	0xFFD
 14138                           pclatu	equ	0xFFB
 14139                           pclath	equ	0xFFA
 14140                           tblptru	equ	0xFF8
 14141                           tblptrh	equ	0xFF7
 14142                           tblptrl	equ	0xFF6
 14143                           tablat	equ	0xFF5
 14144                           prodh	equ	0xFF4
 14145                           prodl	equ	0xFF3
 14146                           intcon	equ	0xFF2
 14147                           intcon2	equ	0xFF1
 14148                           postinc0	equ	0xFEE
 14149                           fsr0h	equ	0xFEA
 14150                           fsr0l	equ	0xFE9
 14151                           wreg	equ	0xFE8
 14152                           indf1	equ	0xFE7
 14153                           postinc1	equ	0xFE6
 14154                           postdec1	equ	0xFE5
 14155                           fsr1h	equ	0xFE2
 14156                           fsr1l	equ	0xFE1
 14157                           indf2	equ	0xFDF
 14158                           postinc2	equ	0xFDE
 14159                           postdec2	equ	0xFDD
 14160                           fsr2h	equ	0xFDA
 14161                           fsr2l	equ	0xFD9
 14162                           status	equ	0xFD8


Data Sizes:
    Strings     427
    Constant    43
    Data        12
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     72      78
    BANK0           128     89     117
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 2
		 -> getCurrentTimeInSeconds@str(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTimeInSeconds@str(BANK0[2]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[18]), 
		 -> STR_30(CODE[13]), STR_29(CODE[12]), STR_28(CODE[5]), STR_27(CODE[4]), 
		 -> STR_26(CODE[17]), STR_25(CODE[14]), STR_24(CODE[16]), STR_23(CODE[18]), 
		 -> STR_22(CODE[15]), STR_21(CODE[13]), STR_20(CODE[17]), STR_19(CODE[16]), 
		 -> STR_18(CODE[16]), STR_17(CODE[14]), STR_16(CODE[14]), STR_15(CODE[16]), 
		 -> STR_14(CODE[17]), STR_13(CODE[16]), STR_12(CODE[16]), STR_11(CODE[16]), 
		 -> STR_10(CODE[11]), STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[14]), 
		 -> STR_6(CODE[14]), STR_2(CODE[15]), STR_1(CODE[13]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> i2_putch(), Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTimeInSeconds@str(BANK0[2]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 2
		 -> getCurrentTimeInSeconds@str(BANK0[2]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_34(CODE[17]), STR_33(CODE[17]), STR_32(CODE[17]), STR_31(CODE[18]), 
		 -> STR_30(CODE[13]), STR_29(CODE[12]), STR_28(CODE[5]), STR_27(CODE[4]), 
		 -> STR_26(CODE[17]), STR_25(CODE[14]), STR_24(CODE[16]), STR_23(CODE[18]), 
		 -> STR_22(CODE[15]), STR_21(CODE[13]), STR_20(CODE[17]), STR_19(CODE[16]), 
		 -> STR_18(CODE[16]), STR_17(CODE[14]), STR_16(CODE[14]), STR_15(CODE[16]), 
		 -> STR_14(CODE[17]), STR_13(CODE[16]), STR_12(CODE[16]), STR_11(CODE[16]), 
		 -> STR_10(CODE[11]), STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[14]), 
		 -> STR_6(CODE[14]), STR_5(CODE[5]), STR_4(CODE[5]), STR_3(CODE[5]), 
		 -> STR_2(CODE[15]), STR_1(CODE[13]), 

    S1021__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S1021__prbuf$ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTimeInSeconds@str(BANK0[2]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 2
		 -> NULL(NULL[0]), getCurrentTimeInSeconds@str(BANK0[2]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    cycleProgramScreenRight@programScreen	PTR int  size(2) Largest target is 3967
		 -> RAM(DATA[3967]), EEPROM@screen_state(BANK0[2]), currentMainProgramScreen(BANK0[2]), 

    cycleProgramScreenLeft@programScreen	PTR int  size(2) Largest target is 3967
		 -> RAM(DATA[3967]), EEPROM@screen_state(BANK0[2]), currentMainProgramScreen(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _handler in COMRAM

    _handler->i2___fttol
    i2_updateCurrentTime->i2_I2C_Master_Read
    i2_updateCurrentTime->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    i2_printTime->i2_printf
    i2_printf->i2__doprnt
    i2__doprnt->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    i2___fttol->i2___ftdiv
    i2___ftmul->i2___ftpack
    i2___ftdiv->i2___ftmul

Critical Paths under _main in BANK0

    _main->_enterSelectedSubProgramFromMainProgram
    _initializePicSettings->_initializePicPins
    _initializeRTC->___lldiv
    _initializePicPins->___fttol
    ___fttol->___ftdiv
    ___ftmul->___ftpack
    ___ftdiv->___ftmul
    _initializeLcdScreen->_displayMainProgramLcdScreen
    _initializeLcdSettings->_lcdInst
    _enterSelectedSubProgramFromMainProgram->_EEPROM
    _pushBottle->_retractSensorAreaArm
    _operation->_getCurrentTimeInSeconds
    _saveEEPROM->_Eeprom_WriteByte
    _Eeprom_WriteByte->___wmul
    _getCurrentTimeInSeconds->_sprintf
    _sprintf->__doprnt
    _atoi->___wmul
    _displayMainProgramLcdScreen->_printf
    _updateCurrentTime->_I2C_Master_Read
    _updateCurrentTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _printTime->_printf
    _EEPROM->_past_run_access
    _update_eeprom_screen_state->_printf
    _past_run_access->_update_past_run_screen_state
    _update_past_run_screen_state->_printf
    _lcdClear->_printf
    _printf->__doprnt
    __doprnt->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _getEEPROM->_Eeprom_ReadByte
    _Eeprom_ReadByte->___wmul

Critical Paths under _handler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _handler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _handler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _handler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _handler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _handler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _handler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _handler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _handler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _handler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _handler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _handler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _handler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _handler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _handler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _handler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0  293951
                                             86 BANK0      3     3      0
             _cycleProgramScreenLeft
            _cycleProgramScreenRight
        _displayMainProgramLcdScreen
_enterSelectedSubProgramFromMainProg
                _getPressedKeypadKey
              _initializePicSettings
                       _moveBinServo
 ---------------------------------------------------------------------------------
 (1) _initializePicSettings                                0     0      0   50466
                _initializeLcdScreen
                  _initializePicPins
                      _initializeRTC
 ---------------------------------------------------------------------------------
 (2) _initializeRTC                                        8     4      4     376
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8     290
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) _initializePicPins                                    5     5      0    5624
                                             53 BANK0      5     5      0
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             15    11      4     354
                                             38 BANK0     15    11      4
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    2624
                                              8 BANK0     15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    2578
                                             23 BANK0     15     9      6
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1992
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (2) _initializeLcdScreen                                  0     0      0   44466
        _displayMainProgramLcdScreen
              _initializeLcdSettings
 ---------------------------------------------------------------------------------
 (3) _initializeLcdSettings                                1     1      0     135
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _enterSelectedSubProgramFromMainProgram               2     2      0  197290
                                             84 BANK0      2     2      0
                             _EEPROM
        _displayMainProgramLcdScreen
                          _operation
                    _past_run_access
                         _pushBottle
 ---------------------------------------------------------------------------------
 (2) _pushBottle                                           0     0      0      92
                _extendSensorAreaArm
               _retractSensorAreaArm
 ---------------------------------------------------------------------------------
 (2) _operation                                           15    15      0   52643
                                             50 BANK0     15    15      0
                   _activateDCmotors
                    _disableDCmotors
                _extendSensorAreaArm
            _getCurrentTimeInSeconds
                _getPressedKeypadKey
                           _lcdClear
                            _lcdInst
                       _moveBinServo
                             _printf
               _retractSensorAreaArm
                         _saveEEPROM
                  _updateCurrentTime
 ---------------------------------------------------------------------------------
 (3) _saveEEPROM                                           5     5      0    3798
                                              9 BANK0      5     5      0
                    _Eeprom_ReadByte
                   _Eeprom_WriteByte
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) _Eeprom_WriteByte                                     3     0      3     706
                                              6 BANK0      3     0      3
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _retractSensorAreaArm                                 4     4      0      46
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _moveBinServo                                         6     4      2     174
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _getCurrentTimeInSeconds                             10     8      2   17703
                                             42 BANK0      8     6      2
                             ___wmul
                               _atoi
                            _sprintf
 ---------------------------------------------------------------------------------
 (4) _sprintf                                             12     6      6   11463
                                             30 BANK0     12     6      6
                            __doprnt
 ---------------------------------------------------------------------------------
 (4) _atoi                                                 7     5      2    2697
                                              6 BANK0      7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _extendSensorAreaArm                                  3     3      0      46
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _disableDCmotors                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _activateDCmotors                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _displayMainProgramLcdScreen                          4     2      2   44331
                                             44 BANK0      4     2      2
                           _lcdClear
                            _lcdInst
                          _printTime
                             _printf
_toggleRTCBasedOnCurrentMainProgramS
                  _updateCurrentTime
 ---------------------------------------------------------------------------------
 (4) _updateCurrentTime                                    1     1      0     327
                                              3 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Write                                     2     0      2     214
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Read                                      2     2      0      45
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (6) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _toggleRTCBasedOnCurrentMainProgramScreen             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _printTime                                            0     0      0   14668
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _EEPROM                                              33    33      0   68449
                                             51 BANK0     33    33      0
             _cycleProgramScreenLeft
            _cycleProgramScreenRight
                          _getEEPROM
                _getPressedKeypadKey
                    _past_run_access
         _update_eeprom_screen_state
 ---------------------------------------------------------------------------------
 (3) _update_eeprom_screen_state                           4     2      2   29918
                                             44 BANK0      4     2      2
                           _lcdClear
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _past_run_access                                      3     3      0   31775
                                             48 BANK0      3     3      0
             _cycleProgramScreenLeft
            _cycleProgramScreenRight
                _getPressedKeypadKey
       _update_past_run_screen_state
 ---------------------------------------------------------------------------------
 (3) _update_past_run_screen_state                         4     2      2   29790
                                             44 BANK0      4     2      2
                           _lcdClear
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _lcdClear                                             0     0      0   14668
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (4) _printf                                              14     6      8   14533
                                             30 BANK0     14     6      8
                            __doprnt
 ---------------------------------------------------------------------------------
 (5) __doprnt                                             27    21      6    9175
                                             12 BANK0     18    12      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (6) _putch                                                1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              5     1      4     287
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              7     3      4     418
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _lcdInst                                              1     1      0     135
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     113
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _getPressedKeypadKey                                  1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _cycleProgramScreenRight                              8     2      6     686
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (3) _cycleProgramScreenLeft                               8     2      6     686
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (3) _getEEPROM                                            8     6      2    2861
                                              8 BANK0      8     6      2
                    _Eeprom_ReadByte
                             ___wmul
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4    2209
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Eeprom_ReadByte                                      2     0      2     364
                                              6 BANK0      2     0      2
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _handler                                            19    19      0    9209
                                             53 COMRAM    19    19      0
                          i2___ftdiv
                          i2___ftmul
                          i2___fttol
                        i2_printTime
                i2_updateCurrentTime
 ---------------------------------------------------------------------------------
 (11) i2_updateCurrentTime                                 1     1      0     213
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Write                                  2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Stop                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Start                                  0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (12) i2_I2C_Master_Read                                   2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (13) i2_I2C_Master_Wait                                   1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) i2_printTime                                         0     0      0    6994
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (12) i2_printf                                           14     6      8    6859
                                             30 COMRAM    14     6      8
                          i2__doprnt
 ---------------------------------------------------------------------------------
 (13) i2__doprnt                                          27    21      6    6401
                                             12 COMRAM    18    12      6
                   Absolute function *
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch *
 ---------------------------------------------------------------------------------
 (14) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (14) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (14) i2___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (14) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (14) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (12) i2_lcdInst                                           1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (15) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) i2___fttol                                          15    11      4     278
                                             38 COMRAM    15    11      4
                          i2___ftdiv (ARG)
                          i2___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (11) i2___ftmul                                          15     9      6     765
                                              8 COMRAM    15     9      6
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (11) i2___ftdiv                                          15     9      6     719
                                             23 COMRAM    15     9      6
                          i2___ftmul (ARG)
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (12) i2___ftpack                                          8     3      5     387
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cycleProgramScreenLeft
   _cycleProgramScreenRight
   _displayMainProgramLcdScreen
     _lcdClear
       _lcdInst
         _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
     _lcdInst
       _lcdNibble
     _printTime
       _lcdInst
         _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
     _toggleRTCBasedOnCurrentMainProgramScreen
     _updateCurrentTime
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _enterSelectedSubProgramFromMainProgram
     _EEPROM
       _cycleProgramScreenLeft
       _cycleProgramScreenRight
       _getEEPROM
         _Eeprom_ReadByte
           ___wmul (ARG)
         ___wmul
       _getPressedKeypadKey
       _past_run_access
         _cycleProgramScreenLeft
         _cycleProgramScreenRight
         _getPressedKeypadKey
         _update_past_run_screen_state
           _lcdClear
             _lcdInst
               _lcdNibble
             _printf
               __doprnt
                 Absolute function(Fake) *
                 ___lwdiv *
                 ___lwmod *
                   ___lwdiv (ARG)
                 ___wmul *
                 _isdigit *
                 _putch *
                   _lcdNibble
           _lcdInst
             _lcdNibble
           _printf
             __doprnt
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               ___wmul *
               _isdigit *
               _putch *
                 _lcdNibble
       _update_eeprom_screen_state
         _lcdClear
           _lcdInst
             _lcdNibble
           _printf
             __doprnt
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               ___wmul *
               _isdigit *
               _putch *
                 _lcdNibble
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
     _displayMainProgramLcdScreen
       _lcdClear
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
       _lcdInst
         _lcdNibble
       _printTime
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
       _toggleRTCBasedOnCurrentMainProgramScreen
       _updateCurrentTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _operation
       _activateDCmotors
       _disableDCmotors
       _extendSensorAreaArm
       _getCurrentTimeInSeconds
         ___wmul
         _atoi
           ___wmul
           _isdigit
         _sprintf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
       _getPressedKeypadKey
       _lcdClear
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
       _lcdInst
         _lcdNibble
       _moveBinServo
       _printf
         __doprnt
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
       _retractSensorAreaArm
       _saveEEPROM
         _Eeprom_ReadByte
           ___wmul (ARG)
         _Eeprom_WriteByte
           ___wmul (ARG)
         ___wmul
       _updateCurrentTime
         _I2C_Master_Read
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
     _past_run_access
       _cycleProgramScreenLeft
       _cycleProgramScreenRight
       _getPressedKeypadKey
       _update_past_run_screen_state
         _lcdClear
           _lcdInst
             _lcdNibble
           _printf
             __doprnt
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               ___wmul *
               _isdigit *
               _putch *
                 _lcdNibble
         _lcdInst
           _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
     _pushBottle
       _extendSensorAreaArm
       _retractSensorAreaArm
   _getPressedKeypadKey
   _initializePicSettings
     _initializeLcdScreen
       _displayMainProgramLcdScreen
         _lcdClear
           _lcdInst
             _lcdNibble
           _printf
             __doprnt
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               ___wmul *
               _isdigit *
               _putch *
                 _lcdNibble
         _lcdInst
           _lcdNibble
         _printTime
           _lcdInst
             _lcdNibble
           _printf
             __doprnt
               Absolute function(Fake) *
               ___lwdiv *
               ___lwmod *
                 ___lwdiv (ARG)
               ___wmul *
               _isdigit *
               _putch *
                 _lcdNibble
         _printf
           __doprnt
             Absolute function(Fake) *
             ___lwdiv *
             ___lwmod *
               ___lwdiv (ARG)
             ___wmul *
             _isdigit *
             _putch *
               _lcdNibble
         _toggleRTCBasedOnCurrentMainProgramScreen
         _updateCurrentTime
           _I2C_Master_Read
             _I2C_Master_Wait
           _I2C_Master_Start
             _I2C_Master_Wait
           _I2C_Master_Stop
             _I2C_Master_Wait
           _I2C_Master_Write
             _I2C_Master_Wait
       _initializeLcdSettings
         _lcdInst
           _lcdNibble
     _initializePicPins
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftmul
         ___ftpack
       ___fttol
         ___ftdiv (ARG)
           ___ftmul (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___ftpack
     _initializeRTC
       ___lldiv
   _moveBinServo

 _handler (ROOT)
   i2___ftdiv
     i2___ftmul (ARG)
       i2___ftpack
     i2___ftpack (ARG)
   i2___ftmul
     i2___ftpack
   i2___fttol
     i2___ftdiv (ARG)
       i2___ftmul (ARG)
         i2___ftpack
       i2___ftpack (ARG)
     i2___ftmul (ARG)
       i2___ftpack
   i2_printTime
     i2_lcdInst
       i2_lcdNibble
     i2_printf
       i2__doprnt
         Absolute function(Fake) *
         i2___lwdiv *
         i2___lwmod *
           i2___lwdiv (ARG)
         i2___wmul *
         i2_isdigit *
         i2_putch *
           i2_lcdNibble
   i2_updateCurrentTime
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     59      75       5       91.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     48      4E       1       61.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      C3      34        0.0%
DATA                 0      0      C3       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Mar 13 23:32:41 2017

                             operation@bottle_type 00B9                                 i2_I2C_Master_Start 3106  
                               i2_I2C_Master_Write 30D4                           __end_of_Eeprom_WriteByte 2F84  
             __end_of_update_past_run_screen_state 1562              __size_of_update_past_run_screen_state 0160  
                     _update_past_run_screen_state 1402                                ___wmul@multiplicand 0082  
                               i2___lwdiv@dividend 0001                                        __CFG_BORV$3 000000  
                       __size_of_updateCurrentTime 0076                                         i2___ftpack 2548  
                                     __CFG_CP0$OFF 000000                                       __CFG_CP1$OFF 000000  
                                     __CFG_CP2$OFF 000000                                       __CFG_CP3$OFF 000000  
                                      __CFG_OSC$HS 000000                                                l215 2ED0  
                                              l218 2EDE                                                l246 3076  
                                              l352 2CAE                                                l293 0CCE  
                                              l375 1CF0                                                l368 1190  
                                              l459 3052                                                l395 2F7A  
                                              l548 0198                                                l389 3020  
                                              l835 1EE6                                                l768 22E0  
                                              l893 17D6                                                l965 247A  
                                     __CFG_CPB$OFF 000000                                                _PEN 007E2A  
                                     __CFG_CPD$OFF 000000                                                _SEN 007E28  
                                              _PSA 007EAB                                ?i2_I2C_Master_Start 0001  
                              ?i2_I2C_Master_Write 0002                                __end_ofi2_printTime 2DB8  
                                              prod 000FF3                                                tosl 000FFD  
                                              wreg 000FE8                           ?_getCurrentTimeInSeconds 00AA  
                                     __CFG_LVP$OFF 000000                                       ___ftdiv@cntr 00A0  
                                     ___ftdiv@sign 00A5                                       __CFG_WDT$OFF 000000  
                                             l1018 27A4                                               l1028 2A1C  
                                             l3111 2A0E                                               l3103 29D8  
                                             l3105 29E4                                               l3107 29EA  
                                             l3083 2754                                               l3067 2F52  
                                             l3315 2F2A                                               l3403 21FA  
                                             l3085 2760                                               l3421 22A2  
                                             l3405 2200                                               l3501 1E9A  
                                             l3095 2796                                               l3087 2766  
                                             l3423 22A8                                               l3415 2246  
                                             l3511 1EF0                                               l3503 1ECA  
                                             l3505 1ED8                                               l3419 2258  
                                             l3365 2DE4                                               l3381 27EA  
                                             l3517 1F0C                                               l3359 2E20  
                                             l3391 2814                                               l3385 27F4  
                                             l3721 2C72                                               l3609 2896  
                                             l3811 1C7A                                               l3619 28D6  
                                             l3707 282E                                               l3805 1C5A  
                                             l3717 286E                                               l3493 1E3C  
                                             l3807 1C64                                               l3751 0FBE  
                                             l3735 0F12                                               l3495 1E4A  
                                             l3823 16FA                                               l3903 1680  
                                             l3745 0F9E                                               l8001 0EE8  
                                             l3497 1E7A                                               l3489 1E28  
                                             l8011 11A8                                               l3771 10C8  
                                             l3763 1054                                               l3747 0FA8  
                                             l3739 0F28                                               l8021 11E6  
                                             l3781 1124                                               l3757 1034  
                                             l8101 2BD2                                               l3829 1734  
                                             l3917 1846                                               _BACK FE4C  
                                             l3783 112E                                               l3775 10DE  
                                             l3759 103E                                               l8103 2BD8  
                                             l8111 2BEA                                               l3935 18D8  
                                             l8033 1242                                               l8017 11D0  
                                             l3769 10BE                                               l8105 2BDE  
                                             l8113 2C18                                               l3849 1794  
                                             l3953 193E                                               l3945 1908  
                                             l3795 1BC8                                               l7411 0014  
                                             l8051 12BC                                               l8027 1222  
                                             l3787 1144                                               l8107 2BE4  
                                             l3875 15D6                                               l3947 1918  
                                             l3939 18EC                                               l3963 23FE  
                                             l7501 0302                                               l7421 0092  
                                             l8029 122C                                               l3893 1642  
                                             l3869 159C                                               l3949 1922  
                                             l3965 240E                                               l8133 1AD2  
                                             l3799 1BDE                                               l7423 00A4  
                                             l8063 131C                                               l8047 12A6  
                                             l8039 1280                                               l3975 2468  
                                             l3967 2414                                               l8127 1A8C  
                                             l7513 0386                                               l7441 015E  
                                             l7433 00E2                                               l7417 0066  
                                             l8081 13BA                                               l8057 12F8  
                                             l3889 1624                                               l8145 1B96  
                                             _ADFM 007E07                                               l7531 045E  
                                             l7523 0402                                               l7427 00AE  
                                             l7611 1462                                               l3899 1662  
                                             l8139 1B34                                               l7509 035C  
                                             l7525 040C                                               l7445 0164  
                                             l7613 1480                                               l7605 1408  
                                             l7621 150A                                               l8069 135C  
                                             l7551 0572                                               l7543 04F0  
                                             l7535 0488                                               l7527 0418  
                                             l7519 03D8                                               l7471 024A  
                                             l7455 01DE                                               l7615 149E  
                                             l7607 1426                                               l7623 154A  
                                             l7711 263E                                               l7537 049C  
                                             l7473 0250                                               l7457 0208  
                                             l7617 14BC                                               l7609 1444  
                                             l7705 25FC                                               l7641 26D6  
                                             l7633 26A0                                               l7563 0626  
                                             l7547 051A                                               l7459 020E  
                                             l7571 067A                                               l7707 2612  
                                             l7715 2654                                               l7635 26B6  
                                             l7549 0520                                               l7557 05CC  
                                             l7661 24A2                                               l7709 2628  
                                             l7717 2682                                               l7645 26EC  
                                             l7559 05DE                                               l7567 0650  
                                             l7495 02C0                                               l7487 028C  
                                             l7639 26C0                                               l7647 271A  
                                             l7903 0C56                                               l7489 029E  
                                             l7569 065C                                               l7913 0C92  
                                             l7499 02F8                                               l7675 2504  
                                             l7907 0C6C                                               l7919 0CB8  
                                             l7953 0D72                                               l7971 0E30  
                                             l7939 0D30                                               l7949 0D58  
                                             l7993 0EB8                                               l7969 0E1A  
                                             l7989 0EA2                                               l7999 0EE4  
                                             STR_1 FFD2                                               STR_2 FF70  
                                             STR_3 FF7A                                               STR_4 FF7A  
                                             STR_5 FF7A                                               STR_6 FF9B  
                                             STR_7 FF8D                                               STR_8 FEBC  
                                             STR_9 FECD                                               _T0CS 007EAD  
                                             _LATA 000F89                                               _LATB 000F8A  
                                             _LATC 000F8B                                               _LATD 000F8C  
                                             _LATE 000F8D                                               _LEFT FE50  
                                             u3301 1710                                               u3410 186C  
                                             u3331 1578                                               u3351 15B2  
                                             u3415 1862                                               u2720 2F28  
                                             u3281 16D6                                               u3391 1822  
                                             _PEIE 007F96                                               _RCEN 007E2B  
                                             u8008 04DA                                               u3875 2A56  
                                             u8028 060E                                               u8610 131A  
                                             u8620 135A                                               u7728 004E  
                                             u8807 2848                                               u7928 03C2  
                                             u8817 285C                                               u8907 294A  
                                             u8827 287C                                               u8917 2954  
                                             u8837 28B0                                               u8847 28C4  
                                             u8767 2CB8                                               u7968 0448  
                                             u8857 28E4                                               u8777 2CEC  
                                             u7898 0346                                               u8867 2C86  
                                             u8787 0CFE                                               u8877 2C9C  
                                             u8797 0DF0                                               u8887 2914  
                                             u8897 291E                                               _RSEN 007E29  
                                             _atoi 21F8                                               _main 1A88  
                                      i2__doprnt@c 001E                                       ___ftpack@arg 0080  
                                      i2__doprnt@f 000F                                               _keys FE29  
               __end_of_update_eeprom_screen_state 269A                         _update_eeprom_screen_state 25F6  
                                     ___ftpack@exp 0083                                               _time 00E0  
                                             fsr0h 000FEA                                               fsr1h 000FE2  
                               i2___lwdiv@quotient 0005                                               fsr2h 000FDA  
                                             fsr0l 000FE9                                               indf1 000FE7  
                                             indf2 000FDF                                               fsr1l 000FE1  
                                             fsr2l 000FD9                                               btemp 004F  
                             ??i2_I2C_Master_Start 0002                               ??i2_I2C_Master_Write 0004  
                                             prodh 000FF4                                               prodl 000FF3  
                                             start 000E                                      __CFG_IESO$OFF 000000  
                                     i2___ftdiv@f1 0018                                       i2___ftdiv@f2 001B  
                                     i2___ftdiv@f3 0022                                    __end_ofi2_putch 30B4  
                                    __CFG_MCLRE$ON 000000                                       ___ftmul@cntr 0095  
                                     i2___ftmul@f1 0009                                       i2___ftmul@f2 000C  
                                     ___param_bank 000000                                       ___ftmul@sign 0096  
                                     i2___fttol@f1 0027                                past_run_access@temp 00B0  
                                      i2_lcdNibble 2A86                                       ___fttol@exp1 00B4  
                                     ___fttol@lval 00B0                                   ?_I2C_Master_Read 0001  
                                 ?_I2C_Master_Wait 0001                                   ?_I2C_Master_Stop 0001  
                    ?_update_past_run_screen_state 00AC                                              ?_atoi 0086  
                                            ?_main 0001                                              _ACKEN 007E2C  
                                            _ACKDT 007E2D                                              _EEADR 000FA9  
                                            STR_10 FFEB                                              STR_11 FF00  
                                            STR_12 FF10                                              STR_20 FEEF  
                                            STR_21 FFD2                                              STR_13 FF20  
                                            STR_22 FF70                                              STR_30 FFC5  
                                            STR_14 FEDE                                              STR_15 FF60  
                                            STR_23 FE66                                              STR_31 FE54  
                                            STR_16 FFB7                                              STR_24 FF30  
                                            STR_32 FE9A                                              STR_17 FFA9  
                                            STR_25 FF7F                                              STR_33 FE89  
                                            STR_34 FE89                                              STR_18 FF50  
                                            STR_26 FEAB                                              STR_27 FFFB  
                                            STR_19 FF40                                              STR_35 FE78  
                                            STR_28 FFF6                                              STR_29 FFDF  
                                  __end_of___ftdiv 180C                                    __end_of___lldiv 248C  
                                  __end_of___ftmul 16C0                                              _T1CON 000FCD  
                                  __end_of___fttol 1950                                              _T0PS0 007EA8  
                                            _T0PS1 007EA9                                              _T0PS2 007EAA  
                           _cycleProgramScreenLeft 2DF4                                              _ENTER FE4E  
                                  __end_of___lwdiv 27AE                                    __end_of___lwmod 2A26  
                                            i2l516 19D0                                              i2l459 307A  
                                            i2l548 07D8                                              i2l835 25D6  
                                            i2l893 239E                                              _RIGHT FE52  
                          ??_initializePicSettings 00BA                                              _TMR1H 000FCF  
                                            _TMR1L 000FCE                                              _PORTB 000F81  
                                  __end_of__doprnt 0686                                              _TRISA 000F92  
                                            _TRISB 000F93                                              _TRISC 000F94  
                                            _TRISD 000F95                                              _TRISE 000F96  
                                    __CFG_PWRT$OFF 000000                                      __CFG_WRT0$OFF 000000  
                                    __CFG_WRT1$OFF 000000                                      __CFG_WRT2$OFF 000000  
                                    __CFG_WRT3$OFF 000000                                    __end_of_lcdInst 309C  
                             _retractSensorAreaArm 2824                                    __end_of_handler 1A88  
                                   __CFG_EBTR0$OFF 000000                                     __CFG_FCMEN$OFF 000000  
                                   __CFG_EBTR1$OFF 000000                                     __CFG_EBTR2$OFF 000000  
                                   __CFG_EBTR3$OFF 000000                                              _nRBPU 007F8F  
                                    __CFG_WRTB$OFF 000000                                      __CFG_WRTC$OFF 000000  
                                    __CFG_WRTD$OFF 000000                                     __CFG_EBTRB$OFF 000000  
                                       i2isdigit@c 0003                                    __end_of_dpowers FE44  
                                 ?_Eeprom_ReadByte 0086                                       i2__doprnt@ap 0011  
                                     i2__doprnt@pb 000D                                _getPressedKeypadKey 2ED0  
                                  __end_of_isdigit 2F5C                                      ___ftpack@sign 0084  
                                            atoi@a 008B                                              atoi@s 0086  
                                            _putch 3028                                              pclath 000FFA  
                                            tablat 000FF5                                   __end_ofi2___wmul 2FD0  
                                            status 000FD8                                    __end_of_sprintf 2B2E  
                                    i2___ftdiv@exp 0025                                     saveEEPROM@temp 008A  
                                   __CFG_PBADEN$ON 000000                                 __size_ofi2___ftdiv 00E6  
                               __size_ofi2___ftmul 00F4                                 __size_ofi2___fttol 00F4  
                                     __end_of_BACK FE4E                                   __end_ofi2_printf 2E9C  
                               __size_ofi2___lwdiv 0052                                 __size_ofi2___lwmod 0042  
                                     __end_of_LEFT FE52                                 __size_ofi2__doprnt 05AE  
                                  __initialization 2CF6                                 __size_ofi2_lcdInst 000C  
                                     __end_of_atoi 22EA                                       __end_of_main 1BBE  
                                     __end_of_keys FE3A                                      i2___ftmul@exp 0012  
                             ?_getPressedKeypadKey 0001                                         i2printf@ap 0027  
                                       i2printf@pb 0029                                        i2_printTime 2D7A  
                               __size_ofi2_isdigit 001E                                        ?i2___ftpack 0001  
                                  _past_run_access 248C                                             ??_atoi 0088  
                                           ??_main 00D6                                      ___fttol@sign1 00AF  
                                    __activetblptr 000003                                 EEPROM@screen_state 00D0  
                       cycleProgramScreenRight@max 0084                         cycleProgramScreenRight@min 0082  
                            ?_retractSensorAreaArm 0001                                  ?_I2C_Master_Start 0001  
                     __size_of_initializeLcdScreen 0014                                  ?_I2C_Master_Write 0081  
                                  _disableDCmotors 30DE                                 ??_I2C_Master_Start 0081  
                                           _ADCON0 000FC2                                             _ADCON1 000FC1  
                               ??_I2C_Master_Write 0083                                             _EEADRH 000FAA  
                                           _EEDATA 000FA8                                             _EECON2 000FA7  
                                           _T08BIT 007EAE                                    i2lcdNibble@data 0002  
                                           ?_putch 0001                                   __end_of___ftpack 1F1A  
                                           _EEPROM 1192                                    i2lcdNibble@temp 0001  
                                           _CVRCON 000FB5                                             i2l1018 2B76  
                                           i2l1028 2D70                                             _T1SYNC 007E6A  
                                           i2l3551 2B4C                                             i2l3561 2B6C  
                                           i2l3553 2B50                                             i2l4521 2990  
                                           i2l4451 2566                                             i2l3571 2D4E  
                                           i2l3539 3008                                             i2l4531 29B4  
                                           i2l4461 25C2                                             i2l4453 2570  
                                           i2l4605 2186                                             i2l3549 2B44  
                                           i2l3573 2D52                                             i2l4437 2FA4  
                                           i2l4525 2998                                             i2l4463 25CC  
                                           i2l4455 258E                                             i2l4447 2558  
                                           i2l4615 21AE                            _cycleProgramScreenRight 2DB8  
                                           i2l4545 233A                                             i2l4609 2196  
                                           i2l4633 203C                                             i2l3577 2D66  
                                           i2l3569 2D46                                             i2l4459 25A4  
                                           i2l4539 2312                                             i2l4619 21BE  
                                           i2l4651 20A2                                             i2l4565 2378  
                                           i2l4661 20CA                                             i2l4591 2154  
                                           i2l4663 20D6                                             i2l4655 20B2  
                                           i2l4585 212C                                             i2l4665 20DC  
                                           i2l4669 20F2                                             i2l8161 19AE  
                                           i2l8163 19B2                                             i2l8165 19B4  
                                           i2l8177 19D6                                             i2l7811 08D6  
                                           i2l7803 08AC                                             i2l7805 08BC  
                                           i2l7733 06D0                                             i2l8189 1A4A  
                                           i2l7815 08FA                                             i2l7743 0710  
                                           i2l7727 0688                                             i2l7825 0952  
                                           i2l7841 09F6                                             i2l7817 0902  
                                           i2l7761 07A8                                             i2l7737 06FC  
                                           i2l7851 0A68                                             i2l7843 09FE  
                                           i2l7835 09C4                                             i2l7771 0816  
                                           i2l7739 070A                                             i2l7853 0A76  
                                           i2l7829 097C                                             i2l7773 0840  
                                           i2l7757 07A4                                             i2l7749 0742  
                                           i2l7847 0A3E                                             i2l7839 09EE  
                                           i2l7863 0AEC                                             i2l7775 0844  
                                           i2l7865 0AF2                                             i2l7873 0B8E  
                                           i2l7867 0B3C                                             i2l7875 0B9E  
                                           i2l7883 0C08                                             i2l7859 0AC2  
                                           i2l7787 0876                                             i2l7789 087A  
                                           i2l7885 0C10                                             i2l7879 0BDE  
                                           i2l7887 0C2A                                             u430_41 213C  
                                           u423_41 22FA                                             u425_41 2322  
                                           u434_41 2020                                             u428_41 2114  
                                           _OSCCON 000FD3                                             _TMR0IE 007F95  
                                           _TMR0IF 007F92                                          ??i2_putch 0003  
                                           _TMR1IE 007CE8                                             _TMR1IF 007CF0  
                                           _TMR1CS 007E69                                             _TMR0ON 007EAF  
                                           _TMR1ON 007E68                                             _SSPADD 000FC8  
                                           _TRISC3 007CA3                                             _TRISC4 007CA4  
                                           _SSPBUF 000FC9                                   __end_of_lcdClear 2ED0  
                        initializePicPins@set_time 00B8                                     __CFG_XINST$OFF 000000  
                            ??_getPressedKeypadKey 0080                                             ___wmul 2E30  
                                   __CFG_STVREN$ON 000000                                          ??___ftdiv 009D  
                                        ??___lldiv 0088                                          ??___ftmul 008E  
                                        ??___fttol 00AA                                          ??___lwdiv 0084  
                                        ??___lwmod 008B                                          ??__doprnt 0092  
                                    i2__doprnt@idx 0017                                      i2__doprnt@val 0019  
                                           clear_0 2D1C                                       __doprnt@flag 009A  
                                        ??_lcdInst 0082                                             _printf 2C1E  
                                        ??_handler 0036                                       __doprnt@prec 0097  
                            ___ftmul@f3_as_product 0092                                          ??_isdigit 0080  
                                __end_ofi2___ftdiv 23D0                                  __end_ofi2___ftmul 21F8  
                                __end_ofi2___fttol 2104                                  __end_ofi2___lwdiv 2B80  
                                     __mediumconst FE28                                  __end_ofi2___lwmod 2D7A  
                   ??_update_past_run_screen_state 00AE                                             tblptrh 000FF7  
                          Eeprom_WriteByte@address 0086                                             tblptrl 000FF6  
                                           tblptru 000FF8                                  __end_ofi2__doprnt 0C34  
                           __size_of_initializeRTC 0060                                  __end_ofi2_lcdInst 30C0  
                                        ??_sprintf 00A4                                      main@userInput 00D8  
                                __end_ofi2_isdigit 3010                                     i2___ftdiv@cntr 0021  
                                       __accesstop 0080                            __end_of__initialization 2D2E  
                   __size_of_initializeLcdSettings 0046                                     i2___ftdiv@sign 0026  
                    __end_of_initializeLcdSettings 2CF6                                __size_ofi2___ftpack 00AE  
                                    ___rparam_used 000001                                         ___ftdiv@f1 0097  
                                       ___ftdiv@f2 009A                                         ___ftdiv@f3 00A1  
                                    __end_of_ENTER FE50                                      __end_of_RIGHT FE54  
                                   i2___ftpack@arg 0001                                     i2___ftpack@exp 0004  
                                      saveEEPROM@i 008C                                         ___ftmul@f1 0088  
                                       ___ftmul@f2 008B                          cycleProgramScreenLeft@max 0084  
                        cycleProgramScreenLeft@min 0082                            __end_of_past_run_access 2548  
                                       ___fttol@f1 00A6                                 i2___lwmod@dividend 0008  
                                   __pcstackCOMRAM 0001                                 __size_of_getEEPROM 0134  
                                     __pidataBANK0 309C                          __size_of_activateDCmotors 0008  
                                   i2___ftmul@cntr 0016                                     i2___ftmul@sign 0017  
                                    __end_of_putch 303E                                  ?_Eeprom_WriteByte 0086  
                          __end_of_disableDCmotors 30E6                                     i2___fttol@exp1 0035  
                                   i2___fttol@lval 0031                                 ??_Eeprom_WriteByte 0089  
                      getPressedKeypadKey@keypress 0080                                          ?i2___wmul 0001  
                     __size_ofi2_updateCurrentTime 0068                             ??_retractSensorAreaArm 0080  
                               __size_of_lcdNibble 0068                       __size_of_extendSensorAreaArm 0048  
                                      i2putch@data 0003                                          ?i2_printf 001F  
                        ??_cycleProgramScreenRight 0086                                            EEPROM@i 00D2  
                                       __doprnt@ap 0090                                         __doprnt@pb 008C  
                                          ??_putch 0082                                            ?_EEPROM 0001  
                                       __pbssBANK0 00D9                                      ?_moveBinServo 0080  
                      ?_update_eeprom_screen_state 00AC                   __size_of_getCurrentTimeInSeconds 011C  
                                    _initializeRTC 2A26                               i2updateCurrentTime@i 0004  
                                     ?i2_lcdNibble 0001                                            ?___wmul 0080  
                                  handler@set_time 0047                            ?_cycleProgramScreenLeft 0080  
                                        ?___ftpack 0080                                            ?_printf 009E  
                               __size_of_operation 02D4                                            _T1CKPS0 007E6C  
                                          _T1CKPS1 007E6D                                         ??i2___wmul 0005  
                                _initializePicPins 1F1A                                            _T1OSCEN 007E6B  
                               __size_of_printTime 0050                                 ?_initializePicPins 0001  
                   __size_of_initializePicSettings 0022                                          ?_lcdClear 0001  
                    __end_of_initializePicSettings 2FF2                                         ??i2_printf 0027  
                                          _SSPCON1 000FC6                                            _SSPCON2 000FC5  
                                __end_of_getEEPROM 1CF2                       ?_displayMainProgramLcdScreen 00AC  
                                          _SSPSTAT 000FC7                                    __size_of_EEPROM 0270  
                              ??_initializePicPins 00B5                                     ??_moveBinServo 0082  
                                          i2_putch 30A8                        __size_ofi2_I2C_Master_Start 0008  
                                __end_of_lcdNibble 295C                        __size_ofi2_I2C_Master_Write 000A  
                                       getEEPROM@i 008E                                            __Hparam 0000  
                              _initializeLcdScreen 303E                                     ?_initializeRTC 008D  
                                          __Lparam 0000                                   ?_past_run_access 0001  
                  __end_of_cycleProgramScreenRight 2DF4                               Eeprom_WriteByte@data 0088  
                   __end_of_cycleProgramScreenLeft 2E30                                            ___ftdiv 16C0  
                                          ___lldiv 23D0                                    __size_of___wmul 0036  
                                          ___ftmul 1562                                            ___fttol 180C  
                                          ___lwdiv 2736                                            ___lwmod 29C4  
                                     ?i2_printTime 0001                                          _CMCONbits 000FB4  
                                          __doprnt 0012                          __end_of_initializePicPins 2010  
                                          __pcinit 2CF6                                       ??i2___ftpack 0006  
                                       ??___ftpack 0085                            i2___ftmul@f3_as_product 0013  
                                          __ramtop 1000                                      moveBinServo@i 0084  
                                 ?_disableDCmotors 0001                                            _lcdInst 308C  
                                          _handler 0008                                            __ptext0 1A88  
                                          __ptext1 2FD0                                            __ptext2 2A26  
                                          __ptext3 23D0                                            __ptext4 1F1A  
                                          __ptext5 180C                                            __ptext6 1562  
                                          __ptext7 16C0                                            __ptext8 1E0E  
                                          __ptext9 303E                                    __size_of_printf 004A  
                                __end_of_hexpowers FE4C                                         _saveEEPROM 0F08  
                                          _dpowers FE3A                                            _isdigit 2F32  
                                   i2__doprnt@flag 001B                               ?_initializeLcdScreen 0001  
                                   i2__doprnt@prec 0018                 getCurrentTimeInSeconds@currentTime 00AC  
                         __size_of_I2C_Master_Read 002E                                         ??_lcdClear 00AC  
                         __size_of_I2C_Master_Wait 0014                                         EEPROM@temp 00CF  
                         __size_of_I2C_Master_Stop 0008                    update_past_run_screen_state@num 00AC  
                                          _runInfo 00E9                                            _sprintf 2ADC  
                                    __doprnt@width 009B                                     __pintcode_body 1950  
                             end_of_initialization 2D2E                      ??_displayMainProgramLcdScreen 00AE  
                                          int_func 1950                                i2___wmul@multiplier 0001  
                                __end_of_operation 0F08                                 __end_ofi2___ftpack 25F6  
                         __size_of_Eeprom_ReadByte 0018                          __size_of_I2C_Master_Start 0008  
                        __size_of_I2C_Master_Write 000A                                    ___lldiv@divisor 0084  
                                  ___lldiv@counter 008C                                  __end_of_printTime 2BD0  
                                          printf@f 009E                                   I2C_Master_Read@a 0081  
                                          postdec1 000FE5                                            postdec2 000FDD  
                                 _activateDCmotors 30E6                                            postinc0 000FEE  
                                          postinc1 000FE6                                            postinc2 000FDE  
                    update_eeprom_screen_state@num 00AC                                      EEPROM@storage 00C3  
                                        _PORTAbits 000F80                                          _PORTBbits 000F81  
                                        _PORTCbits 000F82                                          _PORTDbits 000F83  
                            ??_initializeLcdScreen 00B0                                         _pushBottle 30C0  
                                i2_I2C_Master_Read 2F84                                  i2_I2C_Master_Wait 307A  
                                i2_I2C_Master_Stop 30FE                                          i2___ftdiv 22EA  
                                i2___lwdiv@divisor 0003                                          i2___ftmul 2104  
                                        i2___fttol 2010                                          i2___lwdiv 2B2E  
                                        i2___lwmod 2D38                                  i2___lwdiv@counter 0007  
                               ?i2_I2C_Master_Read 0001                                 ?i2_I2C_Master_Wait 0001  
                               ?i2_I2C_Master_Stop 0001                                          i2__doprnt 0686  
                      past_run_access@screen_state 00B1                              operation@startingTime 00B4  
                                   __end_of_EEPROM 1402                                          i2_lcdInst 30B4  
                                      ___ftdiv@exp 00A4                        __end_of_getPressedKeypadKey 2F04  
                                  ??_initializeRTC 0091                            _getCurrentTimeInSeconds 1CF2  
                              i2_updateCurrentTime 295C                                _extendSensorAreaArm 2C68  
                              ??i2_I2C_Master_Read 0002                                    i2___ftpack@sign 0005  
                                        i2_isdigit 2FF2                                ??i2_I2C_Master_Wait 0001  
                              ??i2_I2C_Master_Stop 0002                              retractSensorAreaArm@i 0082  
                                      ___ftmul@exp 0091                              initializePicPins@time 00B5  
             __size_of_displayMainProgramLcdScreen 009C                                     __end_of___wmul 2E66  
                       __size_of_initializePicPins 00F6                               __size_ofi2_lcdNibble 0056  
                             __end_of_moveBinServo 28F4                                      i2lcdInst@data 0003  
                             ?i2_updateCurrentTime 0001                               ?_extendSensorAreaArm 0001  
                                 i2___wmul@product 0005                                        ?_saveEEPROM 0001  
                                   __end_of_printf 2C68                          __end_ofi2_I2C_Master_Read 2FAA  
                        __end_ofi2_I2C_Master_Wait 308C                                start_initialization 2CF6  
                        __end_ofi2_I2C_Master_Stop 3106                                  __size_ofi2___wmul 0026  
                                        i2printf@f 001F                              i2I2C_Master_Read@temp 0003  
                                  i2___fttol@sign1 0030                                       getEEPROM@num 0088  
                                       ?i2___ftdiv 0018                                         ?i2___ftmul 0009  
                                       ?i2___fttol 0027                                         ?i2___lwdiv 0001  
                                         ??_EEPROM 00B3                                         ?i2___lwmod 0008  
                        __size_of_Eeprom_WriteByte 0028                                  __size_ofi2_printf 0036  
                                       ?i2__doprnt 000D                                  ??_I2C_Master_Read 0081  
                                ??_I2C_Master_Wait 0080                                         ?i2_lcdInst 0001  
                                ??_I2C_Master_Stop 0081                                         ?i2_isdigit 0001  
                            _initializeLcdSettings 2CB0                                           ??___wmul 0084  
                                      __doprnt@idx 0096                                        __doprnt@val 0098  
                                ??_Eeprom_ReadByte 0088                                        __pdataBANK0 00E9  
                                 __CFG_LPT1OSC$OFF 000000                                  EEPROM@timeStorage 00B5  
                                         ??_printf 00A6                              ??i2_updateCurrentTime 0004  
                             __size_ofi2_printTime 003E                              ??_extendSensorAreaArm 0080  
                                __size_of___ftpack 010C                                        __pbssCOMRAM 0049  
                    __size_of_retractSensorAreaArm 0068                                        ?_pushBottle 0001  
                                    __pcstackBANK0 0080                                  i2___lwmod@divisor 000A  
                       getCurrentTimeInSeconds@str 00B0                                  i2___lwmod@counter 000C  
                                     _isdigit$1284 0081                                  __size_of_lcdClear 0034  
                        ??_getCurrentTimeInSeconds 00AC                                           ?i2_putch 0001  
                                        __doprnt@c 009D                                          __doprnt@f 008E  
                                        _getEEPROM 1BBE                                   _I2C_Master_Start 30F6  
                              i2I2C_Master_Write@d 0002                                   _I2C_Master_Write 30CA  
                              __size_of_saveEEPROM 028A                                   ___lwdiv@dividend 0080  
                                __CFG_CCP2MX$PORTC 000000                                    moveBinServo@num 0080  
                             extendSensorAreaArm@i 0081                                          __pintcode 0008  
                                    __pmediumconst FE28                                          _lcdNibble 28F4  
                                         ?___ftdiv 0097                                           ?___lldiv 0080  
                                         ?___ftmul 0088                                           ?___fttol 00A6  
                                         ?___lwdiv 0080                                           ?___lwmod 0087  
                                         ?__doprnt 008C                                           ?_lcdInst 0001  
                                         ?_handler 0001                           ?_cycleProgramScreenRight 0080  
                                         ?_isdigit 0001                         __size_ofi2_I2C_Master_Read 0026  
                       __size_ofi2_I2C_Master_Wait 0012                         __size_ofi2_I2C_Master_Stop 0008  
                                        _hexpowers FE44                                   ___lwdiv@quotient 0084  
                         __end_of_activateDCmotors 30EE                                           ?_sprintf 009E  
                                      ??i2___ftdiv 001E                                        ??i2___ftmul 000F  
                                      ??i2___fttol 002B                              _initializePicSettings 2FD0  
                                      ??i2___lwdiv 0005                                        ??i2___lwmod 000C  
                                   __size_of_putch 0016                                        ??i2__doprnt 0013  
                                       operation@i 00BF                         __end_ofi2_I2C_Master_Start 310E  
                       __end_ofi2_I2C_Master_Write 30DE                                        ??i2_lcdInst 0003  
                                       ?_getEEPROM 0088                                     ___wmul@product 0084  
                                    operation@temp 00B8                                           _LATDbits 000F8C  
                           ?_initializeLcdSettings 0001                                        ??i2_isdigit 0001  
                                         i2u411_40 2FA2                                           _PIR2bits 000FA1  
                                         i2u436_40 205A                                           i2u436_45 2052  
                                        _operation 0C34                                           i2u810_48 06BC  
                                         i2u830_48 09B0                                           i2u840_48 0BCA  
                                         i2u834_48 0A2A                                           i2u827_48 093E  
                                         i2u838_48 0AAE                                           i2u892_47 2A9E  
                                         i2u893_47 2AA8                                           i2u894_47 2ACA  
                                         i2u895_47 2AD4                                __size_of_pushBottle 000A  
                                 __CFG_WDTPS$32768 000000                              __size_of_moveBinServo 0068  
                                       ?_lcdNibble 0001                                          _printTime 2B80  
                  __end_of_getCurrentTimeInSeconds 1E0E                                  ___wmul@multiplier 0080  
                         __size_of_past_run_access 00BC                                           i2___wmul 2FAA  
                                    lcdNibble@data 0081                                      lcdNibble@temp 0080  
                                         i2_printf 2E66                           __size_of_disableDCmotors 0008  
                              I2C_Master_Read@temp 0082                                          copy_data0 2D0A  
                                 _Eeprom_WriteByte 2F5C   __end_of_toggleRTCBasedOnCurrentMainProgramScreen 307A  
__size_of_toggleRTCBasedOnCurrentMainProgramScreen 0014          ?_toggleRTCBasedOnCurrentMainProgramScreen 0001  
       ??_toggleRTCBasedOnCurrentMainProgramScreen 0080           _toggleRTCBasedOnCurrentMainProgramScreen 3066  
                                     _moveBinServo 288C                       _getCurrentTimeInSeconds$1663 00AE  
                                 __size_ofi2_putch 000C                                         _EECON1bits 000FA6  
                                         __Hrparam 0000                                         ?_operation 0001  
                                      _lastRunTime 00D9                                           __Lrparam 0000  
                               __CFG_BOREN$SBORDIS 000000     __end_of_enterSelectedSubProgramFromMainProgram 2C1E  
  __size_of_enterSelectedSubProgramFromMainProgram 004E            ?_enterSelectedSubProgramFromMainProgram 0001  
         ??_enterSelectedSubProgramFromMainProgram 00D4             _enterSelectedSubProgramFromMainProgram 2BD0  
                                       ?_printTime 0001                        __end_of_initializeLcdScreen 3052  
                                 __size_of___ftdiv 014C                              i2___wmul@multiplicand 0003  
                                 __size_of___lldiv 00BC                                   __size_of___ftmul 015E  
                                 __size_of___fttol 0144                                   __size_of___lwdiv 0078  
                                 __size_of___lwmod 0062                                           ___ftpack 1E0E  
                                 __size_of__doprnt 0674                             Eeprom_ReadByte@address 0086  
                               i2I2C_Master_Read@a 0002                                    _putch$intlevel0 302E  
                                 __size_of_lcdInst 0010                                   __size_of_handler 1A80  
                                     ??_saveEEPROM 0089                                  _updateCurrentTime 27AE  
                                    _timerDisabled 004D                                    _I2C_Master_Read 2F04  
                                  _I2C_Master_Wait 3052                                    _I2C_Master_Stop 30EE  
                                 __size_of_isdigit 002A                                 ?_updateCurrentTime 0001  
                                         _lcdClear 2E9C                                    ___lwdiv@divisor 0082  
                                  ___lwdiv@counter 0086                             ?_initializePicSettings 0001  
              __end_of_displayMainProgramLcdScreen 2736                        _displayMainProgramLcdScreen 269A  
                                         __ptext10 2CB0                                           __ptext11 2BD0  
                                         __ptext20 21F8                                           __ptext12 30C0  
                                         __ptext21 2C68                                           __ptext13 0C34  
                                         __ptext30 3052                                           __ptext22 30DE  
                                         __ptext14 0F08                                           __ptext31 3066  
                                         __ptext23 30E6                                           __ptext15 2F5C  
                                         __ptext40 3028                                           __ptext32 2B80  
                                         __ptext24 269A                                           __ptext16 2824  
                                         __ptext41 2F32                                           __ptext33 1192  
                                         __ptext25 27AE                                           __ptext17 288C  
                                         __ptext50 2E30                                           __ptext42 29C4  
                                         __ptext34 25F6                                           __ptext26 30CA  
                                         __ptext18 1CF2                                           __ptext51 3010  
                                         __ptext43 2736                                           __ptext35 248C  
                                         __ptext27 30EE                                           __ptext19 2ADC  
                                         __ptext60 2E66                                           __ptext44 308C  
                                         __ptext36 1402                                           __ptext28 30F6  
                                         __ptext61 0686                                           __ptext53 295C  
                                         __ptext45 28F4                                           __ptext37 2E9C  
                                         __ptext29 2F04                                           __ptext70 2104  
                                         __ptext62 30A8                                           __ptext54 30D4  
                                         __ptext46 2ED0                                           __ptext38 2C1E  
                                         __ptext71 22EA                                           __ptext63 2FF2  
                                         __ptext55 30FE                                           __ptext47 2DB8  
                                         __ptext39 0012                                           __ptext72 2548  
                                         __ptext64 2FAA                                           __ptext56 3106  
                                         __ptext48 2DF4                                           __ptext73 0000  
                                         __ptext65 2D38                                           __ptext57 2F84  
                                         __ptext49 1BBE                                           __ptext66 2B2E  
                                         __ptext58 307A                                           __ptext67 30B4  
                                         __ptext59 2D7A                                           __ptext68 2A86  
                                         __ptext69 2010                                   __size_of_sprintf 0052  
                              ??_updateCurrentTime 0083                                     i2_isdigit$1284 0002  
                                      ??_getEEPROM 008A                                      __size_of_atoi 00F2  
                                    __size_of_main 0136                                    _Eeprom_ReadByte 3010  
                         _currentMainProgramScreen 00E7                           ??_cycleProgramScreenLeft 0086  
                     ??_update_eeprom_screen_state 00AE                                    i2__doprnt@width 001C  
                            __end_of_initializeRTC 2A86                                 __end_of_saveEEPROM 1192  
                                    ??i2_lcdNibble 0001                                        ??_lcdNibble 0080  
                                         int$flags 004F                       __size_of_getPressedKeypadKey 0034  
                                   initializeRTC@c 008D                                           atoi@sign 008A  
                                  operation@bottle 00BD                          __end_of_updateCurrentTime 2824  
                                     _motorCounter 0049                                          putch@data 0082  
                         __end_of_I2C_Master_Start 30FE                                        _OSCTUNEbits 000F9B  
                         __end_of_I2C_Master_Write 30D4                                         _INTCONbits 000FF2  
                                     ??_pushBottle 0084                                           isdigit@c 0082  
             cycleProgramScreenRight@programScreen 0080                                  ??_past_run_access 00B0  
              __size_of_update_eeprom_screen_state 00A4                                           intlevel2 0000  
                                        sprintf@ap 00A4                                          sprintf@pb 00A6  
                                        sprintf@wh 009E                                       _timerCounter 004B  
                                 ___lwmod@dividend 0087                                   ___lldiv@dividend 0080  
                                ??_disableDCmotors 0080                       __end_of_retractSensorAreaArm 288C  
                                      ??_operation 00B2                                 updateCurrentTime@i 0083  
                      __end_ofi2_updateCurrentTime 29C4                                           printf@ap 00A6  
                      __end_of_extendSensorAreaArm 2CB0                                           printf@pb 00A8  
                               __end_of_pushBottle 30CA                                      ??i2_printTime 002D  
                                      ??_printTime 00AC                            __end_of_I2C_Master_Read 2F32  
                          __end_of_I2C_Master_Wait 3066                            __end_of_I2C_Master_Stop 30F6  
                                      lcdInst@data 0082                                __end_ofi2_lcdNibble 2ADC  
                                         sprintf@f 00A0                                        handler@time 0044  
                                 ___lldiv@quotient 0088                                  I2C_Master_Write@d 0081  
                                  ___lwmod@divisor 0089                                    ___lwmod@counter 008B  
                          __end_of_Eeprom_ReadByte 3028                                operation@endingTime 00B6  
                                ?_activateDCmotors 0001                            ??_initializeLcdSettings 0083  
                               ??_activateDCmotors 0080                   __size_of_cycleProgramScreenRight 003C  
                  __size_of_cycleProgramScreenLeft 003C                cycleProgramScreenLeft@programScreen 0080  
                              operation@bottle_cap 00BB  
